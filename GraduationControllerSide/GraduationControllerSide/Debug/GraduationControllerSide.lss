
GraduationControllerSide.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00001898  0000192c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001898  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000364  00800130  00800130  0000195c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000195c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000198c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004072  00000000  00000000  00001d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000131b  00000000  00000000  00005de6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002797  00000000  00000000  00007101  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b5c  00000000  00000000  00009898  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019ea  00000000  00000000  0000a3f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004844  00000000  00000000  0000bdde  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000340  00000000  00000000  00010622  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	76 c0       	rjmp	.+236    	; 0xee <__ctors_end>
       2:	00 00       	nop
       4:	3b c4       	rjmp	.+2166   	; 0x87c <__vector_1>
       6:	00 00       	nop
       8:	64 c4       	rjmp	.+2248   	; 0x8d2 <__vector_2>
       a:	00 00       	nop
       c:	8d c4       	rjmp	.+2330   	; 0x928 <__vector_3>
       e:	00 00       	nop
      10:	b6 c4       	rjmp	.+2412   	; 0x97e <__vector_4>
      12:	00 00       	nop
      14:	df c4       	rjmp	.+2494   	; 0x9d4 <__vector_5>
      16:	00 00       	nop
      18:	08 c5       	rjmp	.+2576   	; 0xa2a <__vector_6>
      1a:	00 00       	nop
      1c:	31 c5       	rjmp	.+2658   	; 0xa80 <__vector_7>
      1e:	00 00       	nop
      20:	5a c5       	rjmp	.+2740   	; 0xad6 <__vector_8>
      22:	00 00       	nop
      24:	82 c0       	rjmp	.+260    	; 0x12a <__bad_interrupt>
      26:	00 00       	nop
      28:	80 c0       	rjmp	.+256    	; 0x12a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7e c0       	rjmp	.+252    	; 0x12a <__bad_interrupt>
      2e:	00 00       	nop
      30:	5d c7       	rjmp	.+3770   	; 0xeec <__vector_12>
      32:	00 00       	nop
      34:	7a c0       	rjmp	.+244    	; 0x12a <__bad_interrupt>
      36:	00 00       	nop
      38:	78 c0       	rjmp	.+240    	; 0x12a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	76 c0       	rjmp	.+236    	; 0x12a <__bad_interrupt>
      3e:	00 00       	nop
      40:	74 c0       	rjmp	.+232    	; 0x12a <__bad_interrupt>
      42:	00 00       	nop
      44:	72 c0       	rjmp	.+228    	; 0x12a <__bad_interrupt>
      46:	00 00       	nop
      48:	70 c0       	rjmp	.+224    	; 0x12a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6e c0       	rjmp	.+220    	; 0x12a <__bad_interrupt>
      4e:	00 00       	nop
      50:	6c c0       	rjmp	.+216    	; 0x12a <__bad_interrupt>
      52:	00 00       	nop
      54:	6a c0       	rjmp	.+212    	; 0x12a <__bad_interrupt>
      56:	00 00       	nop
      58:	68 c0       	rjmp	.+208    	; 0x12a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	66 c0       	rjmp	.+204    	; 0x12a <__bad_interrupt>
      5e:	00 00       	nop
      60:	64 c0       	rjmp	.+200    	; 0x12a <__bad_interrupt>
      62:	00 00       	nop
      64:	62 c0       	rjmp	.+196    	; 0x12a <__bad_interrupt>
      66:	00 00       	nop
      68:	60 c0       	rjmp	.+192    	; 0x12a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5e c0       	rjmp	.+188    	; 0x12a <__bad_interrupt>
      6e:	00 00       	nop
      70:	5c c0       	rjmp	.+184    	; 0x12a <__bad_interrupt>
      72:	00 00       	nop
      74:	5a c0       	rjmp	.+180    	; 0x12a <__bad_interrupt>
      76:	00 00       	nop
      78:	59 c0       	rjmp	.+178    	; 0x12c <__vector_30>
      7a:	00 00       	nop
      7c:	56 c0       	rjmp	.+172    	; 0x12a <__bad_interrupt>
      7e:	00 00       	nop
      80:	54 c0       	rjmp	.+168    	; 0x12a <__bad_interrupt>
      82:	00 00       	nop
      84:	52 c0       	rjmp	.+164    	; 0x12a <__bad_interrupt>
      86:	00 00       	nop
      88:	50 c0       	rjmp	.+160    	; 0x12a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1b 02       	muls	r17, r27
      8e:	29 02       	muls	r18, r25
      90:	37 02       	muls	r19, r23
      92:	45 02       	muls	r20, r21
      94:	53 02       	muls	r21, r19
      96:	61 02       	muls	r22, r17
      98:	71 02       	muls	r23, r17
      9a:	8c 02       	muls	r24, r28
      9c:	99 02       	muls	r25, r25
      9e:	a6 02       	muls	r26, r22
      a0:	b3 02       	muls	r27, r19
      a2:	c0 02       	muls	r28, r16
      a4:	cd 02       	muls	r28, r29
      a6:	dc 02       	muls	r29, r28
      a8:	01 03       	mulsu	r16, r17
      aa:	0f 03       	fmul	r16, r23
      ac:	1d 03       	fmul	r17, r21
      ae:	2b 03       	fmul	r18, r19
      b0:	39 03       	fmul	r19, r17
      b2:	47 03       	mulsu	r20, r23
      b4:	57 03       	mulsu	r21, r23
      b6:	71 03       	mulsu	r23, r17
      b8:	7e 03       	fmul	r23, r22
      ba:	8b 03       	fmulsu	r16, r19
      bc:	98 03       	fmulsu	r17, r16
      be:	a5 03       	fmuls	r18, r21
      c0:	b2 03       	fmuls	r19, r18
      c2:	c1 03       	fmuls	r20, r17
      c4:	d8 03       	fmulsu	r21, r16
      c6:	da 03       	fmulsu	r21, r18
      c8:	dc 03       	fmulsu	r21, r20
      ca:	de 03       	fmulsu	r21, r22
      cc:	e0 03       	fmuls	r22, r16
      ce:	e2 03       	fmuls	r22, r18
      d0:	e5 03       	fmuls	r22, r21
      d2:	f0 03       	fmuls	r23, r16
      d4:	f2 03       	fmuls	r23, r18
      d6:	f4 03       	fmuls	r23, r20
      d8:	f6 03       	fmuls	r23, r22
      da:	f8 03       	fmulsu	r23, r16
      dc:	fa 03       	fmulsu	r23, r18
      de:	fd 03       	fmulsu	r23, r21
      e0:	09 04       	cpc	r0, r9
      e2:	10 04       	cpc	r1, r0
      e4:	17 04       	cpc	r1, r7
      e6:	1e 04       	cpc	r1, r14
      e8:	25 04       	cpc	r2, r5
      ea:	2c 04       	cpc	r2, r12
      ec:	35 04       	cpc	r3, r5

000000ee <__ctors_end>:
      ee:	11 24       	eor	r1, r1
      f0:	1f be       	out	0x3f, r1	; 63
      f2:	cf ef       	ldi	r28, 0xFF	; 255
      f4:	d0 e1       	ldi	r29, 0x10	; 16
      f6:	de bf       	out	0x3e, r29	; 62
      f8:	cd bf       	out	0x3d, r28	; 61

000000fa <__do_copy_data>:
      fa:	11 e0       	ldi	r17, 0x01	; 1
      fc:	a0 e0       	ldi	r26, 0x00	; 0
      fe:	b1 e0       	ldi	r27, 0x01	; 1
     100:	e8 e9       	ldi	r30, 0x98	; 152
     102:	f8 e1       	ldi	r31, 0x18	; 24
     104:	00 e0       	ldi	r16, 0x00	; 0
     106:	0b bf       	out	0x3b, r16	; 59
     108:	02 c0       	rjmp	.+4      	; 0x10e <__do_copy_data+0x14>
     10a:	07 90       	elpm	r0, Z+
     10c:	0d 92       	st	X+, r0
     10e:	a0 33       	cpi	r26, 0x30	; 48
     110:	b1 07       	cpc	r27, r17
     112:	d9 f7       	brne	.-10     	; 0x10a <__do_copy_data+0x10>

00000114 <__do_clear_bss>:
     114:	24 e0       	ldi	r18, 0x04	; 4
     116:	a0 e3       	ldi	r26, 0x30	; 48
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	01 c0       	rjmp	.+2      	; 0x11e <.do_clear_bss_start>

0000011c <.do_clear_bss_loop>:
     11c:	1d 92       	st	X+, r1

0000011e <.do_clear_bss_start>:
     11e:	a4 39       	cpi	r26, 0x94	; 148
     120:	b2 07       	cpc	r27, r18
     122:	e1 f7       	brne	.-8      	; 0x11c <.do_clear_bss_loop>
     124:	59 d1       	rcall	.+690    	; 0x3d8 <main>
     126:	0c 94 4a 0c 	jmp	0x1894	; 0x1894 <_exit>

0000012a <__bad_interrupt>:
     12a:	6a cf       	rjmp	.-300    	; 0x0 <__vectors>

0000012c <__vector_30>:
	memset(rx_buff, 0, data_len);
	data_len = 0;
}

ISR(USART1_RX_vect)
{
     12c:	1f 92       	push	r1
     12e:	0f 92       	push	r0
     130:	0f b6       	in	r0, 0x3f	; 63
     132:	0f 92       	push	r0
     134:	11 24       	eor	r1, r1
     136:	0b b6       	in	r0, 0x3b	; 59
     138:	0f 92       	push	r0
     13a:	8f 93       	push	r24
     13c:	9f 93       	push	r25
     13e:	ef 93       	push	r30
     140:	ff 93       	push	r31
	temp = UDR1_Register;
     142:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     146:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <temp>
	rx_buff[data_len] = temp;
     14a:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <data_len>
     14e:	e8 2f       	mov	r30, r24
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	e7 56       	subi	r30, 0x67	; 103
     154:	fd 4f       	sbci	r31, 0xFD	; 253
     156:	90 83       	st	Z, r25
	data_len++;
     158:	8f 5f       	subi	r24, 0xFF	; 255
     15a:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <data_len>
	if(data_len == 500)
		ESP01_ResetBuffer();
     15e:	ff 91       	pop	r31
     160:	ef 91       	pop	r30
     162:	9f 91       	pop	r25
     164:	8f 91       	pop	r24
     166:	0f 90       	pop	r0
     168:	0b be       	out	0x3b, r0	; 59
     16a:	0f 90       	pop	r0
     16c:	0f be       	out	0x3f, r0	; 63
     16e:	0f 90       	pop	r0
     170:	1f 90       	pop	r1
     172:	18 95       	reti

00000174 <Enable>:
	}
}

void Enable()
{
	DIO_WriteChannel(LCD_EN, STD_HIGH);
     174:	61 e0       	ldi	r22, 0x01	; 1
     176:	82 e1       	ldi	r24, 0x12	; 18
     178:	48 d1       	rcall	.+656    	; 0x40a <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     17a:	8f e3       	ldi	r24, 0x3F	; 63
     17c:	9f e1       	ldi	r25, 0x1F	; 31
     17e:	01 97       	sbiw	r24, 0x01	; 1
     180:	f1 f7       	brne	.-4      	; 0x17e <Enable+0xa>
     182:	00 c0       	rjmp	.+0      	; 0x184 <Enable+0x10>
     184:	00 00       	nop
	_delay_ms(2);
	DIO_WriteChannel(LCD_EN, STD_LOW);
     186:	60 e0       	ldi	r22, 0x00	; 0
     188:	82 e1       	ldi	r24, 0x12	; 18
     18a:	3f d1       	rcall	.+638    	; 0x40a <DIO_WriteChannel>
     18c:	8f e3       	ldi	r24, 0x3F	; 63
     18e:	9f e1       	ldi	r25, 0x1F	; 31
     190:	01 97       	sbiw	r24, 0x01	; 1
     192:	f1 f7       	brne	.-4      	; 0x190 <Enable+0x1c>
     194:	00 c0       	rjmp	.+0      	; 0x196 <Enable+0x22>
     196:	00 00       	nop
     198:	08 95       	ret

0000019a <LCD_SendCmd>:
	_delay_ms(2);
}

void LCD_SendCmd(u_int8 Cmd)
{
     19a:	cf 93       	push	r28
     19c:	c8 2f       	mov	r28, r24
	switch(LCD_CFG.Mode)
     19e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <LCD_CFG+0x2>
     1a2:	88 32       	cpi	r24, 0x28	; 40
     1a4:	81 f0       	breq	.+32     	; 0x1c6 <LCD_SendCmd+0x2c>
     1a6:	88 33       	cpi	r24, 0x38	; 56
     1a8:	09 f5       	brne	.+66     	; 0x1ec <LCD_SendCmd+0x52>
	{
		case Eight_Bit_Mode:
		{
			DIO_WriteChannel(LCD_RS, STD_LOW);
     1aa:	60 e0       	ldi	r22, 0x00	; 0
     1ac:	80 e1       	ldi	r24, 0x10	; 16
     1ae:	2d d1       	rcall	.+602    	; 0x40a <DIO_WriteChannel>
			DIO_WritePort(LCD_Data_Port, Cmd);
     1b0:	6c 2f       	mov	r22, r28
     1b2:	80 e0       	ldi	r24, 0x00	; 0
			Enable();
     1b4:	f5 d2       	rcall	.+1514   	; 0x7a0 <DIO_WritePort>
     1b6:	de df       	rcall	.-68     	; 0x174 <Enable>
     1b8:	8f e9       	ldi	r24, 0x9F	; 159
     1ba:	9f e0       	ldi	r25, 0x0F	; 15
     1bc:	01 97       	sbiw	r24, 0x01	; 1
     1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_SendCmd+0x22>
     1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_SendCmd+0x28>
     1c2:	00 00       	nop
			_delay_ms(1);
			break;
		}
		case Four_Bit_Mode:
		{
			DIO_WriteChannel(LCD_RS, STD_LOW);
     1c4:	13 c0       	rjmp	.+38     	; 0x1ec <LCD_SendCmd+0x52>
     1c6:	60 e0       	ldi	r22, 0x00	; 0
     1c8:	80 e1       	ldi	r24, 0x10	; 16
     1ca:	1f d1       	rcall	.+574    	; 0x40a <DIO_WriteChannel>
			DIO_WriteHighNibble(LCD_Data_Port, Cmd >> 4);
     1cc:	6c 2f       	mov	r22, r28
     1ce:	62 95       	swap	r22
     1d0:	6f 70       	andi	r22, 0x0F	; 15
     1d2:	80 e0       	ldi	r24, 0x00	; 0
			Enable();
     1d4:	15 d3       	rcall	.+1578   	; 0x800 <DIO_WriteHighNibble>
     1d6:	ce df       	rcall	.-100    	; 0x174 <Enable>
			DIO_WriteHighNibble(LCD_Data_Port, Cmd);
     1d8:	6c 2f       	mov	r22, r28
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	11 d3       	rcall	.+1570   	; 0x800 <DIO_WriteHighNibble>
     1de:	ca df       	rcall	.-108    	; 0x174 <Enable>
			Enable();
     1e0:	8f e9       	ldi	r24, 0x9F	; 159
     1e2:	9f e0       	ldi	r25, 0x0F	; 15
     1e4:	01 97       	sbiw	r24, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCD_SendCmd+0x4a>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <LCD_SendCmd+0x50>
     1ea:	00 00       	nop
     1ec:	cf 91       	pop	r28
     1ee:	08 95       	ret

000001f0 <LCD_Init>:
			_delay_ms(1);
			break;
		}
	}
}
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
#include "LCD.h"

void LCD_Init()
{
	DIO_ConfigPort(LCD_Data_Port, 0xFF);
     1f4:	6f ef       	ldi	r22, 0xFF	; 255
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	eb d2       	rcall	.+1494   	; 0x7d0 <DIO_ConfigPort>
	DIO_ConfigChannel(LCD_EN, OUTPUT);
     1fa:	61 e0       	ldi	r22, 0x01	; 1
     1fc:	82 e1       	ldi	r24, 0x12	; 18
     1fe:	eb d1       	rcall	.+982    	; 0x5d6 <DIO_ConfigChannel>
	DIO_ConfigChannel(LCD_RS, OUTPUT);
     200:	61 e0       	ldi	r22, 0x01	; 1
     202:	80 e1       	ldi	r24, 0x10	; 16
     204:	e8 d1       	rcall	.+976    	; 0x5d6 <DIO_ConfigChannel>
	DIO_ConfigChannel(LCD_RW, OUTPUT);
     206:	61 e0       	ldi	r22, 0x01	; 1
     208:	81 e1       	ldi	r24, 0x11	; 17
     20a:	e5 d1       	rcall	.+970    	; 0x5d6 <DIO_ConfigChannel>
     20c:	2f ef       	ldi	r18, 0xFF	; 255
     20e:	83 ec       	ldi	r24, 0xC3	; 195
     210:	99 e0       	ldi	r25, 0x09	; 9
     212:	21 50       	subi	r18, 0x01	; 1
     214:	80 40       	sbci	r24, 0x00	; 0
     216:	90 40       	sbci	r25, 0x00	; 0
     218:	e1 f7       	brne	.-8      	; 0x212 <LCD_Init+0x22>
     21a:	00 c0       	rjmp	.+0      	; 0x21c <LCD_Init+0x2c>
     21c:	00 00       	nop
	_delay_ms(200);
	DIO_WriteChannel(LCD_RW, STD_LOW);
     21e:	60 e0       	ldi	r22, 0x00	; 0
     220:	81 e1       	ldi	r24, 0x11	; 17
     222:	f3 d0       	rcall	.+486    	; 0x40a <DIO_WriteChannel>
     224:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <LCD_CFG+0x2>
	switch(LCD_CFG.Mode)
     228:	88 32       	cpi	r24, 0x28	; 40
     22a:	21 f1       	breq	.+72     	; 0x274 <LCD_Init+0x84>
     22c:	88 33       	cpi	r24, 0x38	; 56
     22e:	09 f0       	breq	.+2      	; 0x232 <LCD_Init+0x42>
     230:	4b c0       	rjmp	.+150    	; 0x2c8 <LCD_Init+0xd8>
	{
		case Eight_Bit_Mode:
		{
			LCD_SendCmd(LCD_CFG.Mode);
     232:	b3 df       	rcall	.-154    	; 0x19a <LCD_SendCmd>
     234:	8f e9       	ldi	r24, 0x9F	; 159
     236:	9f e0       	ldi	r25, 0x0F	; 15
     238:	01 97       	sbiw	r24, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <LCD_Init+0x48>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <LCD_Init+0x4e>
     23e:	00 00       	nop
			_delay_ms(1);
			LCD_SendCmd(LCD_CFG.Display_Control);
     240:	c6 e0       	ldi	r28, 0x06	; 6
     242:	d1 e0       	ldi	r29, 0x01	; 1
     244:	89 81       	ldd	r24, Y+1	; 0x01
     246:	a9 df       	rcall	.-174    	; 0x19a <LCD_SendCmd>
     248:	8f e9       	ldi	r24, 0x9F	; 159
     24a:	9f e0       	ldi	r25, 0x0F	; 15
     24c:	01 97       	sbiw	r24, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <LCD_Init+0x5c>
     250:	00 c0       	rjmp	.+0      	; 0x252 <LCD_Init+0x62>
     252:	00 00       	nop
			_delay_ms(1);
			LCD_SendCmd(LCD_Clear_Screen);
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	a1 df       	rcall	.-190    	; 0x19a <LCD_SendCmd>
     258:	8f e3       	ldi	r24, 0x3F	; 63
     25a:	9c e9       	ldi	r25, 0x9C	; 156
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	f1 f7       	brne	.-4      	; 0x25c <LCD_Init+0x6c>
     260:	00 c0       	rjmp	.+0      	; 0x262 <LCD_Init+0x72>
     262:	00 00       	nop
			_delay_ms(10);
			LCD_SendCmd(LCD_CFG.Entry_Mode);
     264:	88 81       	ld	r24, Y
     266:	99 df       	rcall	.-206    	; 0x19a <LCD_SendCmd>
     268:	8f e9       	ldi	r24, 0x9F	; 159
     26a:	9f e0       	ldi	r25, 0x0F	; 15
     26c:	01 97       	sbiw	r24, 0x01	; 1
     26e:	f1 f7       	brne	.-4      	; 0x26c <LCD_Init+0x7c>
     270:	00 c0       	rjmp	.+0      	; 0x272 <LCD_Init+0x82>
     272:	00 00       	nop
			_delay_ms(1);
		}
		case Four_Bit_Mode:
		{
			LCD_SendCmd(LCD_Return_Home);
     274:	82 e0       	ldi	r24, 0x02	; 2
     276:	91 df       	rcall	.-222    	; 0x19a <LCD_SendCmd>
     278:	8f e3       	ldi	r24, 0x3F	; 63
     27a:	9c e9       	ldi	r25, 0x9C	; 156
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	f1 f7       	brne	.-4      	; 0x27c <LCD_Init+0x8c>
     280:	00 c0       	rjmp	.+0      	; 0x282 <LCD_Init+0x92>
     282:	00 00       	nop
			_delay_ms(10);
			LCD_SendCmd(LCD_CFG.Mode);
     284:	c6 e0       	ldi	r28, 0x06	; 6
     286:	d1 e0       	ldi	r29, 0x01	; 1
     288:	8a 81       	ldd	r24, Y+2	; 0x02
     28a:	87 df       	rcall	.-242    	; 0x19a <LCD_SendCmd>
     28c:	8f e9       	ldi	r24, 0x9F	; 159
     28e:	9f e0       	ldi	r25, 0x0F	; 15
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	f1 f7       	brne	.-4      	; 0x290 <LCD_Init+0xa0>
     294:	00 c0       	rjmp	.+0      	; 0x296 <LCD_Init+0xa6>
			_delay_ms(1);
			LCD_SendCmd(LCD_CFG.Display_Control);
     296:	00 00       	nop
     298:	89 81       	ldd	r24, Y+1	; 0x01
     29a:	7f df       	rcall	.-258    	; 0x19a <LCD_SendCmd>
     29c:	8f e9       	ldi	r24, 0x9F	; 159
     29e:	9f e0       	ldi	r25, 0x0F	; 15
     2a0:	01 97       	sbiw	r24, 0x01	; 1
     2a2:	f1 f7       	brne	.-4      	; 0x2a0 <LCD_Init+0xb0>
     2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <LCD_Init+0xb6>
			_delay_ms(1);
			LCD_SendCmd(LCD_Clear_Screen);
     2a6:	00 00       	nop
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	77 df       	rcall	.-274    	; 0x19a <LCD_SendCmd>
     2ac:	8f e3       	ldi	r24, 0x3F	; 63
     2ae:	9c e9       	ldi	r25, 0x9C	; 156
     2b0:	01 97       	sbiw	r24, 0x01	; 1
     2b2:	f1 f7       	brne	.-4      	; 0x2b0 <LCD_Init+0xc0>
     2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <LCD_Init+0xc6>
     2b6:	00 00       	nop
			_delay_ms(10);
			LCD_SendCmd(LCD_CFG.Entry_Mode);
     2b8:	88 81       	ld	r24, Y
     2ba:	6f df       	rcall	.-290    	; 0x19a <LCD_SendCmd>
     2bc:	8f e9       	ldi	r24, 0x9F	; 159
     2be:	9f e0       	ldi	r25, 0x0F	; 15
     2c0:	01 97       	sbiw	r24, 0x01	; 1
     2c2:	f1 f7       	brne	.-4      	; 0x2c0 <LCD_Init+0xd0>
     2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <LCD_Init+0xd6>
     2c6:	00 00       	nop
     2c8:	df 91       	pop	r29
			_delay_ms(1);
		}
	}
}
     2ca:	cf 91       	pop	r28
     2cc:	08 95       	ret

000002ce <LCD_SendChar>:
     2ce:	cf 93       	push	r28
		}
	}
}

void LCD_SendChar(u_int8 Data, u_int8 row, u_int8 column)
{
     2d0:	c8 2f       	mov	r28, r24
	u_int8 cmd = 0;
	if(row < 1 || row > 4 || column < 1 || column > 16)
     2d2:	8f ef       	ldi	r24, 0xFF	; 255
     2d4:	86 0f       	add	r24, r22
     2d6:	84 30       	cpi	r24, 0x04	; 4
     2d8:	d8 f4       	brcc	.+54     	; 0x310 <LCD_SendChar+0x42>
     2da:	44 23       	and	r20, r20
     2dc:	d9 f0       	breq	.+54     	; 0x314 <LCD_SendChar+0x46>
     2de:	41 31       	cpi	r20, 0x11	; 17
     2e0:	d8 f4       	brcc	.+54     	; 0x318 <LCD_SendChar+0x4a>
	{
		cmd = 0x00;
	}
	else
	{
		switch(row)
     2e2:	62 30       	cpi	r22, 0x02	; 2
     2e4:	61 f0       	breq	.+24     	; 0x2fe <LCD_SendChar+0x30>
     2e6:	18 f4       	brcc	.+6      	; 0x2ee <LCD_SendChar+0x20>
     2e8:	61 30       	cpi	r22, 0x01	; 1
     2ea:	31 f0       	breq	.+12     	; 0x2f8 <LCD_SendChar+0x2a>
     2ec:	17 c0       	rjmp	.+46     	; 0x31c <LCD_SendChar+0x4e>
     2ee:	63 30       	cpi	r22, 0x03	; 3
     2f0:	49 f0       	breq	.+18     	; 0x304 <LCD_SendChar+0x36>
     2f2:	64 30       	cpi	r22, 0x04	; 4
     2f4:	51 f0       	breq	.+20     	; 0x30a <LCD_SendChar+0x3c>
     2f6:	12 c0       	rjmp	.+36     	; 0x31c <LCD_SendChar+0x4e>
		{
			case 1:
			cmd = 0x80 + column - 1;
     2f8:	8f e7       	ldi	r24, 0x7F	; 127
     2fa:	84 0f       	add	r24, r20
			break;
     2fc:	10 c0       	rjmp	.+32     	; 0x31e <LCD_SendChar+0x50>
			case 2:
			cmd = 0xC0 + column - 1;
     2fe:	8f eb       	ldi	r24, 0xBF	; 191
     300:	84 0f       	add	r24, r20
			break;
     302:	0d c0       	rjmp	.+26     	; 0x31e <LCD_SendChar+0x50>
			case 3:
			cmd = 0x90 + column - 1;
     304:	8f e8       	ldi	r24, 0x8F	; 143
     306:	84 0f       	add	r24, r20
			break;
     308:	0a c0       	rjmp	.+20     	; 0x31e <LCD_SendChar+0x50>
			case 4:
			cmd = 0xD0 + column - 1;
     30a:	8f ec       	ldi	r24, 0xCF	; 207
     30c:	84 0f       	add	r24, r20
			break;
     30e:	07 c0       	rjmp	.+14     	; 0x31e <LCD_SendChar+0x50>
void LCD_SendChar(u_int8 Data, u_int8 row, u_int8 column)
{
	u_int8 cmd = 0;
	if(row < 1 || row > 4 || column < 1 || column > 16)
	{
		cmd = 0x00;
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	05 c0       	rjmp	.+10     	; 0x31e <LCD_SendChar+0x50>
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	03 c0       	rjmp	.+6      	; 0x31e <LCD_SendChar+0x50>
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	01 c0       	rjmp	.+2      	; 0x31e <LCD_SendChar+0x50>
	}
}

void LCD_SendChar(u_int8 Data, u_int8 row, u_int8 column)
{
	u_int8 cmd = 0;
     31c:	80 e0       	ldi	r24, 0x00	; 0
			case 4:
			cmd = 0xD0 + column - 1;
			break;
		}
	}
	LCD_SendCmd(cmd);
     31e:	3d df       	rcall	.-390    	; 0x19a <LCD_SendCmd>
	
	switch(LCD_CFG.Mode)
     320:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <LCD_CFG+0x2>
     324:	88 32       	cpi	r24, 0x28	; 40
     326:	81 f0       	breq	.+32     	; 0x348 <LCD_SendChar+0x7a>
     328:	88 33       	cpi	r24, 0x38	; 56
     32a:	09 f5       	brne	.+66     	; 0x36e <LCD_SendChar+0xa0>
	{
		case Eight_Bit_Mode:
		{
			DIO_WriteChannel(LCD_RS, STD_HIGH);
     32c:	61 e0       	ldi	r22, 0x01	; 1
     32e:	80 e1       	ldi	r24, 0x10	; 16
     330:	6c d0       	rcall	.+216    	; 0x40a <DIO_WriteChannel>
			DIO_WritePort(LCD_Data_Port, Data);
     332:	6c 2f       	mov	r22, r28
     334:	80 e0       	ldi	r24, 0x00	; 0
			Enable();
     336:	34 d2       	rcall	.+1128   	; 0x7a0 <DIO_WritePort>
     338:	1d df       	rcall	.-454    	; 0x174 <Enable>
     33a:	8f e9       	ldi	r24, 0x9F	; 159
     33c:	9f e0       	ldi	r25, 0x0F	; 15
     33e:	01 97       	sbiw	r24, 0x01	; 1
     340:	f1 f7       	brne	.-4      	; 0x33e <LCD_SendChar+0x70>
     342:	00 c0       	rjmp	.+0      	; 0x344 <LCD_SendChar+0x76>
     344:	00 00       	nop
			_delay_ms(1);
			break;
		}
		case Four_Bit_Mode:
		{
			DIO_WriteChannel(LCD_RS, STD_HIGH);
     346:	13 c0       	rjmp	.+38     	; 0x36e <LCD_SendChar+0xa0>
     348:	61 e0       	ldi	r22, 0x01	; 1
     34a:	80 e1       	ldi	r24, 0x10	; 16
			DIO_WriteHighNibble(LCD_Data_Port, Data >> 4);
     34c:	5e d0       	rcall	.+188    	; 0x40a <DIO_WriteChannel>
     34e:	6c 2f       	mov	r22, r28
     350:	62 95       	swap	r22
     352:	6f 70       	andi	r22, 0x0F	; 15
			Enable();
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	54 d2       	rcall	.+1192   	; 0x800 <DIO_WriteHighNibble>
			DIO_WriteHighNibble(LCD_Data_Port, Data);
     358:	0d df       	rcall	.-486    	; 0x174 <Enable>
     35a:	6c 2f       	mov	r22, r28
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	50 d2       	rcall	.+1184   	; 0x800 <DIO_WriteHighNibble>
			Enable();
     360:	09 df       	rcall	.-494    	; 0x174 <Enable>
     362:	8f e9       	ldi	r24, 0x9F	; 159
     364:	9f e0       	ldi	r25, 0x0F	; 15
     366:	01 97       	sbiw	r24, 0x01	; 1
     368:	f1 f7       	brne	.-4      	; 0x366 <LCD_SendChar+0x98>
     36a:	00 c0       	rjmp	.+0      	; 0x36c <LCD_SendChar+0x9e>
     36c:	00 00       	nop
     36e:	cf 91       	pop	r28
			_delay_ms(1);
			break;
		}
	}
}
     370:	08 95       	ret

00000372 <LCD_SendString>:
     372:	0f 93       	push	r16

void LCD_SendString(u_int8* String, u_int8 row, u_int8 column)
{
     374:	1f 93       	push	r17
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	ec 01       	movw	r28, r24
     37c:	06 2f       	mov	r16, r22
     37e:	14 2f       	mov	r17, r20
	while((*String) != 0)
     380:	05 c0       	rjmp	.+10     	; 0x38c <LCD_SendString+0x1a>
	{
		LCD_SendChar(*String, row, column);
     382:	41 2f       	mov	r20, r17
     384:	60 2f       	mov	r22, r16
     386:	a3 df       	rcall	.-186    	; 0x2ce <LCD_SendChar>
		column++;
     388:	1f 5f       	subi	r17, 0xFF	; 255
		String++;
     38a:	21 96       	adiw	r28, 0x01	; 1
	}
}

void LCD_SendString(u_int8* String, u_int8 row, u_int8 column)
{
	while((*String) != 0)
     38c:	88 81       	ld	r24, Y
     38e:	81 11       	cpse	r24, r1
     390:	f8 cf       	rjmp	.-16     	; 0x382 <LCD_SendString+0x10>
	{
		LCD_SendChar(*String, row, column);
		column++;
		String++;
	}
}
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	08 95       	ret

0000039c <LCD_ClearScreen>:

void LCD_ClearScreen()
{
	LCD_SendCmd(LCD_Clear_Screen);
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	fd ce       	rjmp	.-518    	; 0x19a <LCD_SendCmd>
     3a0:	08 95       	ret

000003a2 <task1_code>:

void task1_code(void *pvParamter)
{
	while(1)
	{
		LCD_ClearScreen();
     3a2:	fc df       	rcall	.-8      	; 0x39c <LCD_ClearScreen>
		LCD_SendString("I'm Task 1", 1, 1);
     3a4:	41 e0       	ldi	r20, 0x01	; 1
     3a6:	61 e0       	ldi	r22, 0x01	; 1
     3a8:	89 e0       	ldi	r24, 0x09	; 9
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	e2 df       	rcall	.-60     	; 0x372 <LCD_SendString>
     3ae:	2f ef       	ldi	r18, 0xFF	; 255
     3b0:	83 ed       	ldi	r24, 0xD3	; 211
     3b2:	90 e3       	ldi	r25, 0x30	; 48
     3b4:	21 50       	subi	r18, 0x01	; 1
     3b6:	80 40       	sbci	r24, 0x00	; 0
     3b8:	90 40       	sbci	r25, 0x00	; 0
     3ba:	e1 f7       	brne	.-8      	; 0x3b4 <task1_code+0x12>
     3bc:	00 c0       	rjmp	.+0      	; 0x3be <task1_code+0x1c>
     3be:	00 00       	nop
     3c0:	f0 cf       	rjmp	.-32     	; 0x3a2 <task1_code>

000003c2 <task2_code>:

void task2_code(void*pvParamter)
{
	while(1)
	{
		LCD_ClearScreen();
     3c2:	ec df       	rcall	.-40     	; 0x39c <LCD_ClearScreen>
		LCD_SendString("I'm Task 2", 1, 1);
     3c4:	41 e0       	ldi	r20, 0x01	; 1
     3c6:	61 e0       	ldi	r22, 0x01	; 1
     3c8:	84 e1       	ldi	r24, 0x14	; 20
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	d2 df       	rcall	.-92     	; 0x372 <LCD_SendString>
		vTaskDelay(2000);
     3ce:	80 ed       	ldi	r24, 0xD0	; 208
     3d0:	97 e0       	ldi	r25, 0x07	; 7
     3d2:	0e 94 ba 0a 	call	0x1574	; 0x1574 <vTaskDelay>
     3d6:	f5 cf       	rjmp	.-22     	; 0x3c2 <task2_code>

000003d8 <main>:
void task1_code(void*pvParamter);
void task2_code(void*pvParamter);

portSHORT main(void)
{
	LCD_Init();
     3d8:	0b df       	rcall	.-490    	; 0x1f0 <LCD_Init>
	
	//Create Tasks
	xTaskCreate(task1_code, "Task1", configMINIMAL_STACK_SIZE, NULL, TASK1_PRIORITY, NULL);
     3da:	e1 2c       	mov	r14, r1
     3dc:	f1 2c       	mov	r15, r1
     3de:	08 e0       	ldi	r16, 0x08	; 8
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	45 e5       	ldi	r20, 0x55	; 85
     3e6:	50 e0       	ldi	r21, 0x00	; 0
     3e8:	6f e1       	ldi	r22, 0x1F	; 31
     3ea:	71 e0       	ldi	r23, 0x01	; 1
     3ec:	81 ed       	ldi	r24, 0xD1	; 209
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	22 d7       	rcall	.+3652   	; 0x1236 <xTaskCreate>
	xTaskCreate(task2_code, "Task2", configMINIMAL_STACK_SIZE, NULL, TASK2_PRIORITY, NULL);
     3f2:	03 e0       	ldi	r16, 0x03	; 3
     3f4:	20 e0       	ldi	r18, 0x00	; 0
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	45 e5       	ldi	r20, 0x55	; 85
     3fa:	50 e0       	ldi	r21, 0x00	; 0
     3fc:	65 e2       	ldi	r22, 0x25	; 37
     3fe:	71 e0       	ldi	r23, 0x01	; 1
     400:	81 ee       	ldi	r24, 0xE1	; 225
     402:	91 e0       	ldi	r25, 0x01	; 1
	
	vTaskStartScheduler();
     404:	18 d7       	rcall	.+3632   	; 0x1236 <xTaskCreate>
     406:	66 d7       	rcall	.+3788   	; 0x12d4 <vTaskStartScheduler>
     408:	ff cf       	rjmp	.-2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>

0000040a <DIO_WriteChannel>:
			break;
		}
		case DIO_PortG:
		{
			PORTG_Register &= 0xF0;
			PORTG_Register |= NibbleValue;
     40a:	e8 2f       	mov	r30, r24
     40c:	e6 95       	lsr	r30
     40e:	e6 95       	lsr	r30
     410:	e6 95       	lsr	r30
     412:	87 70       	andi	r24, 0x07	; 7
     414:	66 23       	and	r22, r22
     416:	21 f0       	breq	.+8      	; 0x420 <DIO_WriteChannel+0x16>
     418:	61 30       	cpi	r22, 0x01	; 1
     41a:	09 f4       	brne	.+2      	; 0x41e <DIO_WriteChannel+0x14>
     41c:	72 c0       	rjmp	.+228    	; 0x502 <DIO_WriteChannel+0xf8>
     41e:	08 95       	ret
     420:	4e 2f       	mov	r20, r30
     422:	50 e0       	ldi	r21, 0x00	; 0
     424:	47 30       	cpi	r20, 0x07	; 7
     426:	51 05       	cpc	r21, r1
     428:	08 f0       	brcs	.+2      	; 0x42c <DIO_WriteChannel+0x22>
     42a:	d4 c0       	rjmp	.+424    	; 0x5d4 <DIO_WriteChannel+0x1ca>
     42c:	fa 01       	movw	r30, r20
     42e:	ea 5b       	subi	r30, 0xBA	; 186
     430:	ff 4f       	sbci	r31, 0xFF	; 255
     432:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__tablejump2__>
     436:	4b b3       	in	r20, 0x1b	; 27
     438:	21 e0       	ldi	r18, 0x01	; 1
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	b9 01       	movw	r22, r18
     43e:	02 c0       	rjmp	.+4      	; 0x444 <DIO_WriteChannel+0x3a>
     440:	66 0f       	add	r22, r22
     442:	77 1f       	adc	r23, r23
     444:	8a 95       	dec	r24
     446:	e2 f7       	brpl	.-8      	; 0x440 <DIO_WriteChannel+0x36>
     448:	cb 01       	movw	r24, r22
     44a:	80 95       	com	r24
     44c:	84 23       	and	r24, r20
     44e:	8b bb       	out	0x1b, r24	; 27
     450:	08 95       	ret
     452:	48 b3       	in	r20, 0x18	; 24
     454:	21 e0       	ldi	r18, 0x01	; 1
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	b9 01       	movw	r22, r18
     45a:	02 c0       	rjmp	.+4      	; 0x460 <DIO_WriteChannel+0x56>
     45c:	66 0f       	add	r22, r22
     45e:	77 1f       	adc	r23, r23
     460:	8a 95       	dec	r24
     462:	e2 f7       	brpl	.-8      	; 0x45c <DIO_WriteChannel+0x52>
     464:	cb 01       	movw	r24, r22
     466:	80 95       	com	r24
     468:	84 23       	and	r24, r20
     46a:	88 bb       	out	0x18, r24	; 24
     46c:	08 95       	ret
     46e:	45 b3       	in	r20, 0x15	; 21
     470:	21 e0       	ldi	r18, 0x01	; 1
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	b9 01       	movw	r22, r18
     476:	02 c0       	rjmp	.+4      	; 0x47c <DIO_WriteChannel+0x72>
     478:	66 0f       	add	r22, r22
     47a:	77 1f       	adc	r23, r23
     47c:	8a 95       	dec	r24
     47e:	e2 f7       	brpl	.-8      	; 0x478 <DIO_WriteChannel+0x6e>
     480:	cb 01       	movw	r24, r22
     482:	80 95       	com	r24
     484:	84 23       	and	r24, r20
     486:	85 bb       	out	0x15, r24	; 21
     488:	08 95       	ret
     48a:	42 b3       	in	r20, 0x12	; 18
     48c:	21 e0       	ldi	r18, 0x01	; 1
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	b9 01       	movw	r22, r18
     492:	02 c0       	rjmp	.+4      	; 0x498 <DIO_WriteChannel+0x8e>
     494:	66 0f       	add	r22, r22
     496:	77 1f       	adc	r23, r23
     498:	8a 95       	dec	r24
     49a:	e2 f7       	brpl	.-8      	; 0x494 <DIO_WriteChannel+0x8a>
     49c:	cb 01       	movw	r24, r22
     49e:	80 95       	com	r24
     4a0:	84 23       	and	r24, r20
     4a2:	82 bb       	out	0x12, r24	; 18
     4a4:	08 95       	ret
     4a6:	43 b1       	in	r20, 0x03	; 3
     4a8:	21 e0       	ldi	r18, 0x01	; 1
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	b9 01       	movw	r22, r18
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_WriteChannel+0xaa>
     4b0:	66 0f       	add	r22, r22
     4b2:	77 1f       	adc	r23, r23
     4b4:	8a 95       	dec	r24
     4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_WriteChannel+0xa6>
     4b8:	cb 01       	movw	r24, r22
     4ba:	80 95       	com	r24
     4bc:	84 23       	and	r24, r20
     4be:	83 b9       	out	0x03, r24	; 3
     4c0:	08 95       	ret
     4c2:	e2 e6       	ldi	r30, 0x62	; 98
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	40 81       	ld	r20, Z
     4c8:	21 e0       	ldi	r18, 0x01	; 1
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	b9 01       	movw	r22, r18
     4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <DIO_WriteChannel+0xca>
     4d0:	66 0f       	add	r22, r22
     4d2:	77 1f       	adc	r23, r23
     4d4:	8a 95       	dec	r24
     4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <DIO_WriteChannel+0xc6>
     4d8:	cb 01       	movw	r24, r22
     4da:	80 95       	com	r24
     4dc:	84 23       	and	r24, r20
     4de:	80 83       	st	Z, r24
     4e0:	08 95       	ret
     4e2:	e5 e6       	ldi	r30, 0x65	; 101
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	40 81       	ld	r20, Z
     4e8:	21 e0       	ldi	r18, 0x01	; 1
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	b9 01       	movw	r22, r18
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <DIO_WriteChannel+0xea>
     4f0:	66 0f       	add	r22, r22
     4f2:	77 1f       	adc	r23, r23
     4f4:	8a 95       	dec	r24
     4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <DIO_WriteChannel+0xe6>
     4f8:	cb 01       	movw	r24, r22
     4fa:	80 95       	com	r24
     4fc:	84 23       	and	r24, r20
     4fe:	80 83       	st	Z, r24
     500:	08 95       	ret
     502:	4e 2f       	mov	r20, r30
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	47 30       	cpi	r20, 0x07	; 7
     508:	51 05       	cpc	r21, r1
     50a:	08 f0       	brcs	.+2      	; 0x50e <DIO_WriteChannel+0x104>
     50c:	63 c0       	rjmp	.+198    	; 0x5d4 <DIO_WriteChannel+0x1ca>
     50e:	fa 01       	movw	r30, r20
     510:	e3 5b       	subi	r30, 0xB3	; 179
     512:	ff 4f       	sbci	r31, 0xFF	; 255
     514:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__tablejump2__>
     518:	4b b3       	in	r20, 0x1b	; 27
     51a:	21 e0       	ldi	r18, 0x01	; 1
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	b9 01       	movw	r22, r18
     520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_WriteChannel+0x11c>
     522:	66 0f       	add	r22, r22
     524:	77 1f       	adc	r23, r23
     526:	8a 95       	dec	r24
     528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_WriteChannel+0x118>
     52a:	cb 01       	movw	r24, r22
     52c:	84 2b       	or	r24, r20
     52e:	8b bb       	out	0x1b, r24	; 27
     530:	08 95       	ret
     532:	48 b3       	in	r20, 0x18	; 24
     534:	21 e0       	ldi	r18, 0x01	; 1
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	b9 01       	movw	r22, r18
     53a:	02 c0       	rjmp	.+4      	; 0x540 <DIO_WriteChannel+0x136>
     53c:	66 0f       	add	r22, r22
     53e:	77 1f       	adc	r23, r23
     540:	8a 95       	dec	r24
     542:	e2 f7       	brpl	.-8      	; 0x53c <DIO_WriteChannel+0x132>
     544:	cb 01       	movw	r24, r22
     546:	84 2b       	or	r24, r20
     548:	88 bb       	out	0x18, r24	; 24
     54a:	08 95       	ret
     54c:	45 b3       	in	r20, 0x15	; 21
     54e:	21 e0       	ldi	r18, 0x01	; 1
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	b9 01       	movw	r22, r18
     554:	02 c0       	rjmp	.+4      	; 0x55a <DIO_WriteChannel+0x150>
     556:	66 0f       	add	r22, r22
     558:	77 1f       	adc	r23, r23
     55a:	8a 95       	dec	r24
     55c:	e2 f7       	brpl	.-8      	; 0x556 <DIO_WriteChannel+0x14c>
     55e:	cb 01       	movw	r24, r22
     560:	84 2b       	or	r24, r20
     562:	85 bb       	out	0x15, r24	; 21
     564:	08 95       	ret
     566:	42 b3       	in	r20, 0x12	; 18
     568:	21 e0       	ldi	r18, 0x01	; 1
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	b9 01       	movw	r22, r18
     56e:	02 c0       	rjmp	.+4      	; 0x574 <DIO_WriteChannel+0x16a>
     570:	66 0f       	add	r22, r22
     572:	77 1f       	adc	r23, r23
     574:	8a 95       	dec	r24
     576:	e2 f7       	brpl	.-8      	; 0x570 <DIO_WriteChannel+0x166>
     578:	cb 01       	movw	r24, r22
     57a:	84 2b       	or	r24, r20
     57c:	82 bb       	out	0x12, r24	; 18
     57e:	08 95       	ret
     580:	43 b1       	in	r20, 0x03	; 3
     582:	21 e0       	ldi	r18, 0x01	; 1
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	b9 01       	movw	r22, r18
     588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_WriteChannel+0x184>
     58a:	66 0f       	add	r22, r22
     58c:	77 1f       	adc	r23, r23
     58e:	8a 95       	dec	r24
     590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_WriteChannel+0x180>
     592:	cb 01       	movw	r24, r22
     594:	84 2b       	or	r24, r20
     596:	83 b9       	out	0x03, r24	; 3
     598:	08 95       	ret
     59a:	e2 e6       	ldi	r30, 0x62	; 98
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	40 81       	ld	r20, Z
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	b9 01       	movw	r22, r18
     5a6:	02 c0       	rjmp	.+4      	; 0x5ac <DIO_WriteChannel+0x1a2>
     5a8:	66 0f       	add	r22, r22
     5aa:	77 1f       	adc	r23, r23
     5ac:	8a 95       	dec	r24
     5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <DIO_WriteChannel+0x19e>
     5b0:	cb 01       	movw	r24, r22
     5b2:	84 2b       	or	r24, r20
     5b4:	80 83       	st	Z, r24
     5b6:	08 95       	ret
     5b8:	e5 e6       	ldi	r30, 0x65	; 101
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	40 81       	ld	r20, Z
     5be:	21 e0       	ldi	r18, 0x01	; 1
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	b9 01       	movw	r22, r18
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_WriteChannel+0x1c0>
     5c6:	66 0f       	add	r22, r22
     5c8:	77 1f       	adc	r23, r23
     5ca:	8a 95       	dec	r24
     5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_WriteChannel+0x1bc>
     5ce:	cb 01       	movw	r24, r22
     5d0:	84 2b       	or	r24, r20
     5d2:	80 83       	st	Z, r24
     5d4:	08 95       	ret

000005d6 <DIO_ConfigChannel>:
     5d6:	e8 2f       	mov	r30, r24
     5d8:	e6 95       	lsr	r30
     5da:	e6 95       	lsr	r30
     5dc:	e6 95       	lsr	r30
     5de:	87 70       	andi	r24, 0x07	; 7
     5e0:	66 23       	and	r22, r22
     5e2:	21 f0       	breq	.+8      	; 0x5ec <DIO_ConfigChannel+0x16>
     5e4:	61 30       	cpi	r22, 0x01	; 1
     5e6:	09 f4       	brne	.+2      	; 0x5ea <DIO_ConfigChannel+0x14>
     5e8:	72 c0       	rjmp	.+228    	; 0x6ce <DIO_ConfigChannel+0xf8>
     5ea:	08 95       	ret
     5ec:	4e 2f       	mov	r20, r30
     5ee:	50 e0       	ldi	r21, 0x00	; 0
     5f0:	47 30       	cpi	r20, 0x07	; 7
     5f2:	51 05       	cpc	r21, r1
     5f4:	08 f0       	brcs	.+2      	; 0x5f8 <DIO_ConfigChannel+0x22>
     5f6:	d3 c0       	rjmp	.+422    	; 0x79e <DIO_ConfigChannel+0x1c8>
     5f8:	fa 01       	movw	r30, r20
     5fa:	ec 5a       	subi	r30, 0xAC	; 172
     5fc:	ff 4f       	sbci	r31, 0xFF	; 255
     5fe:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__tablejump2__>
     602:	4a b3       	in	r20, 0x1a	; 26
     604:	21 e0       	ldi	r18, 0x01	; 1
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	b9 01       	movw	r22, r18
     60a:	02 c0       	rjmp	.+4      	; 0x610 <DIO_ConfigChannel+0x3a>
     60c:	66 0f       	add	r22, r22
     60e:	77 1f       	adc	r23, r23
     610:	8a 95       	dec	r24
     612:	e2 f7       	brpl	.-8      	; 0x60c <DIO_ConfigChannel+0x36>
     614:	cb 01       	movw	r24, r22
     616:	80 95       	com	r24
     618:	84 23       	and	r24, r20
     61a:	8a bb       	out	0x1a, r24	; 26
     61c:	08 95       	ret
     61e:	47 b3       	in	r20, 0x17	; 23
     620:	21 e0       	ldi	r18, 0x01	; 1
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	b9 01       	movw	r22, r18
     626:	02 c0       	rjmp	.+4      	; 0x62c <DIO_ConfigChannel+0x56>
     628:	66 0f       	add	r22, r22
     62a:	77 1f       	adc	r23, r23
     62c:	8a 95       	dec	r24
     62e:	e2 f7       	brpl	.-8      	; 0x628 <DIO_ConfigChannel+0x52>
     630:	cb 01       	movw	r24, r22
     632:	80 95       	com	r24
     634:	84 23       	and	r24, r20
     636:	87 bb       	out	0x17, r24	; 23
     638:	08 95       	ret
     63a:	44 b3       	in	r20, 0x14	; 20
     63c:	21 e0       	ldi	r18, 0x01	; 1
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	b9 01       	movw	r22, r18
     642:	02 c0       	rjmp	.+4      	; 0x648 <DIO_ConfigChannel+0x72>
     644:	66 0f       	add	r22, r22
     646:	77 1f       	adc	r23, r23
     648:	8a 95       	dec	r24
     64a:	e2 f7       	brpl	.-8      	; 0x644 <DIO_ConfigChannel+0x6e>
     64c:	cb 01       	movw	r24, r22
     64e:	80 95       	com	r24
     650:	84 23       	and	r24, r20
     652:	84 bb       	out	0x14, r24	; 20
     654:	08 95       	ret
     656:	41 b3       	in	r20, 0x11	; 17
     658:	21 e0       	ldi	r18, 0x01	; 1
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	b9 01       	movw	r22, r18
     65e:	02 c0       	rjmp	.+4      	; 0x664 <DIO_ConfigChannel+0x8e>
     660:	66 0f       	add	r22, r22
     662:	77 1f       	adc	r23, r23
     664:	8a 95       	dec	r24
     666:	e2 f7       	brpl	.-8      	; 0x660 <DIO_ConfigChannel+0x8a>
     668:	cb 01       	movw	r24, r22
     66a:	80 95       	com	r24
     66c:	84 23       	and	r24, r20
     66e:	81 bb       	out	0x11, r24	; 17
     670:	08 95       	ret
     672:	42 b1       	in	r20, 0x02	; 2
     674:	21 e0       	ldi	r18, 0x01	; 1
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	b9 01       	movw	r22, r18
     67a:	02 c0       	rjmp	.+4      	; 0x680 <DIO_ConfigChannel+0xaa>
     67c:	66 0f       	add	r22, r22
     67e:	77 1f       	adc	r23, r23
     680:	8a 95       	dec	r24
     682:	e2 f7       	brpl	.-8      	; 0x67c <DIO_ConfigChannel+0xa6>
     684:	cb 01       	movw	r24, r22
     686:	80 95       	com	r24
     688:	84 23       	and	r24, r20
     68a:	82 b9       	out	0x02, r24	; 2
     68c:	08 95       	ret
     68e:	e1 e6       	ldi	r30, 0x61	; 97
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	40 81       	ld	r20, Z
     694:	21 e0       	ldi	r18, 0x01	; 1
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	b9 01       	movw	r22, r18
     69a:	02 c0       	rjmp	.+4      	; 0x6a0 <DIO_ConfigChannel+0xca>
     69c:	66 0f       	add	r22, r22
     69e:	77 1f       	adc	r23, r23
     6a0:	8a 95       	dec	r24
     6a2:	e2 f7       	brpl	.-8      	; 0x69c <DIO_ConfigChannel+0xc6>
     6a4:	cb 01       	movw	r24, r22
     6a6:	80 95       	com	r24
     6a8:	84 23       	and	r24, r20
     6aa:	80 83       	st	Z, r24
     6ac:	08 95       	ret
     6ae:	e4 e6       	ldi	r30, 0x64	; 100
     6b0:	f0 e0       	ldi	r31, 0x00	; 0
     6b2:	40 81       	ld	r20, Z
     6b4:	21 e0       	ldi	r18, 0x01	; 1
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	b9 01       	movw	r22, r18
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <DIO_ConfigChannel+0xea>
     6bc:	66 0f       	add	r22, r22
     6be:	77 1f       	adc	r23, r23
     6c0:	8a 95       	dec	r24
     6c2:	e2 f7       	brpl	.-8      	; 0x6bc <DIO_ConfigChannel+0xe6>
     6c4:	cb 01       	movw	r24, r22
     6c6:	80 95       	com	r24
     6c8:	84 23       	and	r24, r20
     6ca:	80 83       	st	Z, r24
     6cc:	08 95       	ret
     6ce:	4e 2f       	mov	r20, r30
     6d0:	50 e0       	ldi	r21, 0x00	; 0
     6d2:	47 30       	cpi	r20, 0x07	; 7
     6d4:	51 05       	cpc	r21, r1
     6d6:	08 f0       	brcs	.+2      	; 0x6da <DIO_ConfigChannel+0x104>
     6d8:	62 c0       	rjmp	.+196    	; 0x79e <DIO_ConfigChannel+0x1c8>
     6da:	fa 01       	movw	r30, r20
     6dc:	e5 5a       	subi	r30, 0xA5	; 165
     6de:	ff 4f       	sbci	r31, 0xFF	; 255
     6e0:	af c7       	rjmp	.+3934   	; 0x1640 <__tablejump2__>
     6e2:	4a b3       	in	r20, 0x1a	; 26
     6e4:	21 e0       	ldi	r18, 0x01	; 1
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	b9 01       	movw	r22, r18
     6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <DIO_ConfigChannel+0x11a>
     6ec:	66 0f       	add	r22, r22
     6ee:	77 1f       	adc	r23, r23
     6f0:	8a 95       	dec	r24
     6f2:	e2 f7       	brpl	.-8      	; 0x6ec <DIO_ConfigChannel+0x116>
     6f4:	cb 01       	movw	r24, r22
     6f6:	84 2b       	or	r24, r20
     6f8:	8a bb       	out	0x1a, r24	; 26
     6fa:	08 95       	ret
     6fc:	47 b3       	in	r20, 0x17	; 23
     6fe:	21 e0       	ldi	r18, 0x01	; 1
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	b9 01       	movw	r22, r18
     704:	02 c0       	rjmp	.+4      	; 0x70a <DIO_ConfigChannel+0x134>
     706:	66 0f       	add	r22, r22
     708:	77 1f       	adc	r23, r23
     70a:	8a 95       	dec	r24
     70c:	e2 f7       	brpl	.-8      	; 0x706 <DIO_ConfigChannel+0x130>
     70e:	cb 01       	movw	r24, r22
     710:	84 2b       	or	r24, r20
     712:	87 bb       	out	0x17, r24	; 23
     714:	08 95       	ret
     716:	44 b3       	in	r20, 0x14	; 20
     718:	21 e0       	ldi	r18, 0x01	; 1
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	b9 01       	movw	r22, r18
     71e:	02 c0       	rjmp	.+4      	; 0x724 <DIO_ConfigChannel+0x14e>
     720:	66 0f       	add	r22, r22
     722:	77 1f       	adc	r23, r23
     724:	8a 95       	dec	r24
     726:	e2 f7       	brpl	.-8      	; 0x720 <DIO_ConfigChannel+0x14a>
     728:	cb 01       	movw	r24, r22
     72a:	84 2b       	or	r24, r20
     72c:	84 bb       	out	0x14, r24	; 20
     72e:	08 95       	ret
     730:	41 b3       	in	r20, 0x11	; 17
     732:	21 e0       	ldi	r18, 0x01	; 1
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	b9 01       	movw	r22, r18
     738:	02 c0       	rjmp	.+4      	; 0x73e <DIO_ConfigChannel+0x168>
     73a:	66 0f       	add	r22, r22
     73c:	77 1f       	adc	r23, r23
     73e:	8a 95       	dec	r24
     740:	e2 f7       	brpl	.-8      	; 0x73a <DIO_ConfigChannel+0x164>
     742:	cb 01       	movw	r24, r22
     744:	84 2b       	or	r24, r20
     746:	81 bb       	out	0x11, r24	; 17
     748:	08 95       	ret
     74a:	42 b1       	in	r20, 0x02	; 2
     74c:	21 e0       	ldi	r18, 0x01	; 1
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	b9 01       	movw	r22, r18
     752:	02 c0       	rjmp	.+4      	; 0x758 <DIO_ConfigChannel+0x182>
     754:	66 0f       	add	r22, r22
     756:	77 1f       	adc	r23, r23
     758:	8a 95       	dec	r24
     75a:	e2 f7       	brpl	.-8      	; 0x754 <DIO_ConfigChannel+0x17e>
     75c:	cb 01       	movw	r24, r22
     75e:	84 2b       	or	r24, r20
     760:	82 b9       	out	0x02, r24	; 2
     762:	08 95       	ret
     764:	e1 e6       	ldi	r30, 0x61	; 97
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	40 81       	ld	r20, Z
     76a:	21 e0       	ldi	r18, 0x01	; 1
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	b9 01       	movw	r22, r18
     770:	02 c0       	rjmp	.+4      	; 0x776 <DIO_ConfigChannel+0x1a0>
     772:	66 0f       	add	r22, r22
     774:	77 1f       	adc	r23, r23
     776:	8a 95       	dec	r24
     778:	e2 f7       	brpl	.-8      	; 0x772 <DIO_ConfigChannel+0x19c>
     77a:	cb 01       	movw	r24, r22
     77c:	84 2b       	or	r24, r20
     77e:	80 83       	st	Z, r24
     780:	08 95       	ret
     782:	e4 e6       	ldi	r30, 0x64	; 100
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	40 81       	ld	r20, Z
     788:	21 e0       	ldi	r18, 0x01	; 1
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	b9 01       	movw	r22, r18
     78e:	02 c0       	rjmp	.+4      	; 0x794 <DIO_ConfigChannel+0x1be>
     790:	66 0f       	add	r22, r22
     792:	77 1f       	adc	r23, r23
     794:	8a 95       	dec	r24
     796:	e2 f7       	brpl	.-8      	; 0x790 <DIO_ConfigChannel+0x1ba>
     798:	cb 01       	movw	r24, r22
     79a:	84 2b       	or	r24, r20
     79c:	80 83       	st	Z, r24
     79e:	08 95       	ret

000007a0 <DIO_WritePort>:
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	87 30       	cpi	r24, 0x07	; 7
     7a4:	91 05       	cpc	r25, r1
     7a6:	98 f4       	brcc	.+38     	; 0x7ce <DIO_WritePort+0x2e>
     7a8:	fc 01       	movw	r30, r24
     7aa:	ee 59       	subi	r30, 0x9E	; 158
     7ac:	ff 4f       	sbci	r31, 0xFF	; 255
     7ae:	48 c7       	rjmp	.+3728   	; 0x1640 <__tablejump2__>
     7b0:	6b bb       	out	0x1b, r22	; 27
     7b2:	08 95       	ret
     7b4:	68 bb       	out	0x18, r22	; 24
     7b6:	08 95       	ret
     7b8:	65 bb       	out	0x15, r22	; 21
     7ba:	08 95       	ret
     7bc:	62 bb       	out	0x12, r22	; 18
     7be:	08 95       	ret
     7c0:	63 b9       	out	0x03, r22	; 3
     7c2:	08 95       	ret
     7c4:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7c8:	08 95       	ret
     7ca:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     7ce:	08 95       	ret

000007d0 <DIO_ConfigPort>:
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	87 30       	cpi	r24, 0x07	; 7
     7d4:	91 05       	cpc	r25, r1
     7d6:	98 f4       	brcc	.+38     	; 0x7fe <DIO_ConfigPort+0x2e>
     7d8:	fc 01       	movw	r30, r24
     7da:	e7 59       	subi	r30, 0x97	; 151
     7dc:	ff 4f       	sbci	r31, 0xFF	; 255
     7de:	30 c7       	rjmp	.+3680   	; 0x1640 <__tablejump2__>
     7e0:	6a bb       	out	0x1a, r22	; 26
     7e2:	08 95       	ret
     7e4:	67 bb       	out	0x17, r22	; 23
     7e6:	08 95       	ret
     7e8:	64 bb       	out	0x14, r22	; 20
     7ea:	08 95       	ret
     7ec:	61 bb       	out	0x11, r22	; 17
     7ee:	08 95       	ret
     7f0:	62 b9       	out	0x02, r22	; 2
     7f2:	08 95       	ret
     7f4:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     7f8:	08 95       	ret
     7fa:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     7fe:	08 95       	ret

00000800 <DIO_WriteHighNibble>:
	}
}

void DIO_WriteHighNibble(DIO_PortTypes PortID, u_int8 NibbleValue)
{
	NibbleValue &= 0xF0;
     800:	60 7f       	andi	r22, 0xF0	; 240
	switch(PortID)
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	87 30       	cpi	r24, 0x07	; 7
     806:	91 05       	cpc	r25, r1
     808:	c0 f5       	brcc	.+112    	; 0x87a <DIO_WriteHighNibble+0x7a>
     80a:	fc 01       	movw	r30, r24
     80c:	e0 59       	subi	r30, 0x90	; 144
     80e:	ff 4f       	sbci	r31, 0xFF	; 255
     810:	17 c7       	rjmp	.+3630   	; 0x1640 <__tablejump2__>
	{
		case DIO_PortA:
		{
			PORTA_Register &= 0x0F;
     812:	8b b3       	in	r24, 0x1b	; 27
     814:	8f 70       	andi	r24, 0x0F	; 15
     816:	8b bb       	out	0x1b, r24	; 27
			PORTA_Register |= NibbleValue;
     818:	8b b3       	in	r24, 0x1b	; 27
     81a:	68 2b       	or	r22, r24
     81c:	6b bb       	out	0x1b, r22	; 27
			break;
     81e:	08 95       	ret
		}
		case DIO_PortB:
		{
			PORTB_Register &= 0x0F;
     820:	88 b3       	in	r24, 0x18	; 24
     822:	8f 70       	andi	r24, 0x0F	; 15
     824:	88 bb       	out	0x18, r24	; 24
			PORTB_Register |= NibbleValue;
     826:	88 b3       	in	r24, 0x18	; 24
     828:	68 2b       	or	r22, r24
     82a:	68 bb       	out	0x18, r22	; 24
			break;
     82c:	08 95       	ret
		}
		case DIO_PortC:
		{
			PORTC_Register &= 0x0F;
     82e:	85 b3       	in	r24, 0x15	; 21
     830:	8f 70       	andi	r24, 0x0F	; 15
     832:	85 bb       	out	0x15, r24	; 21
			PORTC_Register |= NibbleValue;
     834:	85 b3       	in	r24, 0x15	; 21
     836:	68 2b       	or	r22, r24
     838:	65 bb       	out	0x15, r22	; 21
			break;
     83a:	08 95       	ret
		}
		case DIO_PortD:
		{
			PORTD_Register &= 0x0F;
     83c:	82 b3       	in	r24, 0x12	; 18
     83e:	8f 70       	andi	r24, 0x0F	; 15
     840:	82 bb       	out	0x12, r24	; 18
			PORTD_Register |= NibbleValue;
     842:	82 b3       	in	r24, 0x12	; 18
     844:	68 2b       	or	r22, r24
     846:	62 bb       	out	0x12, r22	; 18
			break;
     848:	08 95       	ret
		}
		case DIO_PortE:
		{
			PORTE_Register &= 0x0F;
     84a:	83 b1       	in	r24, 0x03	; 3
     84c:	8f 70       	andi	r24, 0x0F	; 15
     84e:	83 b9       	out	0x03, r24	; 3
			PORTE_Register |= NibbleValue;
     850:	83 b1       	in	r24, 0x03	; 3
     852:	68 2b       	or	r22, r24
     854:	63 b9       	out	0x03, r22	; 3
			break;
     856:	08 95       	ret
		}
		case DIO_PortF:
		{
			PORTF_Register &= 0x0F;
     858:	e2 e6       	ldi	r30, 0x62	; 98
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	80 81       	ld	r24, Z
     85e:	8f 70       	andi	r24, 0x0F	; 15
     860:	80 83       	st	Z, r24
			PORTF_Register |= NibbleValue;
     862:	80 81       	ld	r24, Z
     864:	68 2b       	or	r22, r24
     866:	60 83       	st	Z, r22
			break;
     868:	08 95       	ret
		}
		case DIO_PortG:
		{
			PORTG_Register &= 0x0F;
     86a:	e5 e6       	ldi	r30, 0x65	; 101
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	80 81       	ld	r24, Z
     870:	8f 70       	andi	r24, 0x0F	; 15
     872:	80 83       	st	Z, r24
			PORTG_Register |= NibbleValue;
     874:	80 81       	ld	r24, Z
     876:	68 2b       	or	r22, r24
     878:	60 83       	st	Z, r22
     87a:	08 95       	ret

0000087c <__vector_1>:
			break;
	}
}

ISR(INT0_vect)
{
     87c:	1f 92       	push	r1
     87e:	0f 92       	push	r0
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	0f 92       	push	r0
     884:	11 24       	eor	r1, r1
     886:	0b b6       	in	r0, 0x3b	; 59
     888:	0f 92       	push	r0
     88a:	2f 93       	push	r18
     88c:	3f 93       	push	r19
     88e:	4f 93       	push	r20
     890:	5f 93       	push	r21
     892:	6f 93       	push	r22
     894:	7f 93       	push	r23
     896:	8f 93       	push	r24
     898:	9f 93       	push	r25
     89a:	af 93       	push	r26
     89c:	bf 93       	push	r27
     89e:	ef 93       	push	r30
     8a0:	ff 93       	push	r31
	EXT_INTERRUPT0_FUNCTION_PTR();
     8a2:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <EXT_INTERRUPT0_FUNCTION_PTR>
     8a6:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <EXT_INTERRUPT0_FUNCTION_PTR+0x1>
     8aa:	09 95       	icall
}
     8ac:	ff 91       	pop	r31
     8ae:	ef 91       	pop	r30
     8b0:	bf 91       	pop	r27
     8b2:	af 91       	pop	r26
     8b4:	9f 91       	pop	r25
     8b6:	8f 91       	pop	r24
     8b8:	7f 91       	pop	r23
     8ba:	6f 91       	pop	r22
     8bc:	5f 91       	pop	r21
     8be:	4f 91       	pop	r20
     8c0:	3f 91       	pop	r19
     8c2:	2f 91       	pop	r18
     8c4:	0f 90       	pop	r0
     8c6:	0b be       	out	0x3b, r0	; 59
     8c8:	0f 90       	pop	r0
     8ca:	0f be       	out	0x3f, r0	; 63
     8cc:	0f 90       	pop	r0
     8ce:	1f 90       	pop	r1
     8d0:	18 95       	reti

000008d2 <__vector_2>:

ISR(INT1_vect)
{
     8d2:	1f 92       	push	r1
     8d4:	0f 92       	push	r0
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	0f 92       	push	r0
     8da:	11 24       	eor	r1, r1
     8dc:	0b b6       	in	r0, 0x3b	; 59
     8de:	0f 92       	push	r0
     8e0:	2f 93       	push	r18
     8e2:	3f 93       	push	r19
     8e4:	4f 93       	push	r20
     8e6:	5f 93       	push	r21
     8e8:	6f 93       	push	r22
     8ea:	7f 93       	push	r23
     8ec:	8f 93       	push	r24
     8ee:	9f 93       	push	r25
     8f0:	af 93       	push	r26
     8f2:	bf 93       	push	r27
     8f4:	ef 93       	push	r30
     8f6:	ff 93       	push	r31
	EXT_INTERRUPT1_FUNCTION_PTR();
     8f8:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <EXT_INTERRUPT1_FUNCTION_PTR>
     8fc:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <EXT_INTERRUPT1_FUNCTION_PTR+0x1>
     900:	09 95       	icall
}
     902:	ff 91       	pop	r31
     904:	ef 91       	pop	r30
     906:	bf 91       	pop	r27
     908:	af 91       	pop	r26
     90a:	9f 91       	pop	r25
     90c:	8f 91       	pop	r24
     90e:	7f 91       	pop	r23
     910:	6f 91       	pop	r22
     912:	5f 91       	pop	r21
     914:	4f 91       	pop	r20
     916:	3f 91       	pop	r19
     918:	2f 91       	pop	r18
     91a:	0f 90       	pop	r0
     91c:	0b be       	out	0x3b, r0	; 59
     91e:	0f 90       	pop	r0
     920:	0f be       	out	0x3f, r0	; 63
     922:	0f 90       	pop	r0
     924:	1f 90       	pop	r1
     926:	18 95       	reti

00000928 <__vector_3>:

ISR(INT2_vect)
{
     928:	1f 92       	push	r1
     92a:	0f 92       	push	r0
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	0f 92       	push	r0
     930:	11 24       	eor	r1, r1
     932:	0b b6       	in	r0, 0x3b	; 59
     934:	0f 92       	push	r0
     936:	2f 93       	push	r18
     938:	3f 93       	push	r19
     93a:	4f 93       	push	r20
     93c:	5f 93       	push	r21
     93e:	6f 93       	push	r22
     940:	7f 93       	push	r23
     942:	8f 93       	push	r24
     944:	9f 93       	push	r25
     946:	af 93       	push	r26
     948:	bf 93       	push	r27
     94a:	ef 93       	push	r30
     94c:	ff 93       	push	r31
	EXT_INTERRUPT2_FUNCTION_PTR();
     94e:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <EXT_INTERRUPT2_FUNCTION_PTR>
     952:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <EXT_INTERRUPT2_FUNCTION_PTR+0x1>
     956:	09 95       	icall
}
     958:	ff 91       	pop	r31
     95a:	ef 91       	pop	r30
     95c:	bf 91       	pop	r27
     95e:	af 91       	pop	r26
     960:	9f 91       	pop	r25
     962:	8f 91       	pop	r24
     964:	7f 91       	pop	r23
     966:	6f 91       	pop	r22
     968:	5f 91       	pop	r21
     96a:	4f 91       	pop	r20
     96c:	3f 91       	pop	r19
     96e:	2f 91       	pop	r18
     970:	0f 90       	pop	r0
     972:	0b be       	out	0x3b, r0	; 59
     974:	0f 90       	pop	r0
     976:	0f be       	out	0x3f, r0	; 63
     978:	0f 90       	pop	r0
     97a:	1f 90       	pop	r1
     97c:	18 95       	reti

0000097e <__vector_4>:

ISR(INT3_vect)
{
     97e:	1f 92       	push	r1
     980:	0f 92       	push	r0
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	0f 92       	push	r0
     986:	11 24       	eor	r1, r1
     988:	0b b6       	in	r0, 0x3b	; 59
     98a:	0f 92       	push	r0
     98c:	2f 93       	push	r18
     98e:	3f 93       	push	r19
     990:	4f 93       	push	r20
     992:	5f 93       	push	r21
     994:	6f 93       	push	r22
     996:	7f 93       	push	r23
     998:	8f 93       	push	r24
     99a:	9f 93       	push	r25
     99c:	af 93       	push	r26
     99e:	bf 93       	push	r27
     9a0:	ef 93       	push	r30
     9a2:	ff 93       	push	r31
	EXT_INTERRUPT3_FUNCTION_PTR();
     9a4:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <EXT_INTERRUPT3_FUNCTION_PTR>
     9a8:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <EXT_INTERRUPT3_FUNCTION_PTR+0x1>
     9ac:	09 95       	icall
}
     9ae:	ff 91       	pop	r31
     9b0:	ef 91       	pop	r30
     9b2:	bf 91       	pop	r27
     9b4:	af 91       	pop	r26
     9b6:	9f 91       	pop	r25
     9b8:	8f 91       	pop	r24
     9ba:	7f 91       	pop	r23
     9bc:	6f 91       	pop	r22
     9be:	5f 91       	pop	r21
     9c0:	4f 91       	pop	r20
     9c2:	3f 91       	pop	r19
     9c4:	2f 91       	pop	r18
     9c6:	0f 90       	pop	r0
     9c8:	0b be       	out	0x3b, r0	; 59
     9ca:	0f 90       	pop	r0
     9cc:	0f be       	out	0x3f, r0	; 63
     9ce:	0f 90       	pop	r0
     9d0:	1f 90       	pop	r1
     9d2:	18 95       	reti

000009d4 <__vector_5>:

ISR(INT4_vect)
{
     9d4:	1f 92       	push	r1
     9d6:	0f 92       	push	r0
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	0f 92       	push	r0
     9dc:	11 24       	eor	r1, r1
     9de:	0b b6       	in	r0, 0x3b	; 59
     9e0:	0f 92       	push	r0
     9e2:	2f 93       	push	r18
     9e4:	3f 93       	push	r19
     9e6:	4f 93       	push	r20
     9e8:	5f 93       	push	r21
     9ea:	6f 93       	push	r22
     9ec:	7f 93       	push	r23
     9ee:	8f 93       	push	r24
     9f0:	9f 93       	push	r25
     9f2:	af 93       	push	r26
     9f4:	bf 93       	push	r27
     9f6:	ef 93       	push	r30
     9f8:	ff 93       	push	r31
	EXT_INTERRUPT4_FUNCTION_PTR();
     9fa:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <EXT_INTERRUPT4_FUNCTION_PTR>
     9fe:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <EXT_INTERRUPT4_FUNCTION_PTR+0x1>
     a02:	09 95       	icall
}
     a04:	ff 91       	pop	r31
     a06:	ef 91       	pop	r30
     a08:	bf 91       	pop	r27
     a0a:	af 91       	pop	r26
     a0c:	9f 91       	pop	r25
     a0e:	8f 91       	pop	r24
     a10:	7f 91       	pop	r23
     a12:	6f 91       	pop	r22
     a14:	5f 91       	pop	r21
     a16:	4f 91       	pop	r20
     a18:	3f 91       	pop	r19
     a1a:	2f 91       	pop	r18
     a1c:	0f 90       	pop	r0
     a1e:	0b be       	out	0x3b, r0	; 59
     a20:	0f 90       	pop	r0
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	0f 90       	pop	r0
     a26:	1f 90       	pop	r1
     a28:	18 95       	reti

00000a2a <__vector_6>:

ISR(INT5_vect)
{
     a2a:	1f 92       	push	r1
     a2c:	0f 92       	push	r0
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	0f 92       	push	r0
     a32:	11 24       	eor	r1, r1
     a34:	0b b6       	in	r0, 0x3b	; 59
     a36:	0f 92       	push	r0
     a38:	2f 93       	push	r18
     a3a:	3f 93       	push	r19
     a3c:	4f 93       	push	r20
     a3e:	5f 93       	push	r21
     a40:	6f 93       	push	r22
     a42:	7f 93       	push	r23
     a44:	8f 93       	push	r24
     a46:	9f 93       	push	r25
     a48:	af 93       	push	r26
     a4a:	bf 93       	push	r27
     a4c:	ef 93       	push	r30
     a4e:	ff 93       	push	r31
	EXT_INTERRUPT5_FUNCTION_PTR();
     a50:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <EXT_INTERRUPT5_FUNCTION_PTR>
     a54:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <EXT_INTERRUPT5_FUNCTION_PTR+0x1>
     a58:	09 95       	icall
}
     a5a:	ff 91       	pop	r31
     a5c:	ef 91       	pop	r30
     a5e:	bf 91       	pop	r27
     a60:	af 91       	pop	r26
     a62:	9f 91       	pop	r25
     a64:	8f 91       	pop	r24
     a66:	7f 91       	pop	r23
     a68:	6f 91       	pop	r22
     a6a:	5f 91       	pop	r21
     a6c:	4f 91       	pop	r20
     a6e:	3f 91       	pop	r19
     a70:	2f 91       	pop	r18
     a72:	0f 90       	pop	r0
     a74:	0b be       	out	0x3b, r0	; 59
     a76:	0f 90       	pop	r0
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	0f 90       	pop	r0
     a7c:	1f 90       	pop	r1
     a7e:	18 95       	reti

00000a80 <__vector_7>:

ISR(INT6_vect)
{
     a80:	1f 92       	push	r1
     a82:	0f 92       	push	r0
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	0f 92       	push	r0
     a88:	11 24       	eor	r1, r1
     a8a:	0b b6       	in	r0, 0x3b	; 59
     a8c:	0f 92       	push	r0
     a8e:	2f 93       	push	r18
     a90:	3f 93       	push	r19
     a92:	4f 93       	push	r20
     a94:	5f 93       	push	r21
     a96:	6f 93       	push	r22
     a98:	7f 93       	push	r23
     a9a:	8f 93       	push	r24
     a9c:	9f 93       	push	r25
     a9e:	af 93       	push	r26
     aa0:	bf 93       	push	r27
     aa2:	ef 93       	push	r30
     aa4:	ff 93       	push	r31
	EXT_INTERRUPT6_FUNCTION_PTR();
     aa6:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <EXT_INTERRUPT6_FUNCTION_PTR>
     aaa:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <EXT_INTERRUPT6_FUNCTION_PTR+0x1>
     aae:	09 95       	icall
}
     ab0:	ff 91       	pop	r31
     ab2:	ef 91       	pop	r30
     ab4:	bf 91       	pop	r27
     ab6:	af 91       	pop	r26
     ab8:	9f 91       	pop	r25
     aba:	8f 91       	pop	r24
     abc:	7f 91       	pop	r23
     abe:	6f 91       	pop	r22
     ac0:	5f 91       	pop	r21
     ac2:	4f 91       	pop	r20
     ac4:	3f 91       	pop	r19
     ac6:	2f 91       	pop	r18
     ac8:	0f 90       	pop	r0
     aca:	0b be       	out	0x3b, r0	; 59
     acc:	0f 90       	pop	r0
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	0f 90       	pop	r0
     ad2:	1f 90       	pop	r1
     ad4:	18 95       	reti

00000ad6 <__vector_8>:

ISR(INT7_vect)
{
     ad6:	1f 92       	push	r1
     ad8:	0f 92       	push	r0
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	0f 92       	push	r0
     ade:	11 24       	eor	r1, r1
     ae0:	0b b6       	in	r0, 0x3b	; 59
     ae2:	0f 92       	push	r0
     ae4:	2f 93       	push	r18
     ae6:	3f 93       	push	r19
     ae8:	4f 93       	push	r20
     aea:	5f 93       	push	r21
     aec:	6f 93       	push	r22
     aee:	7f 93       	push	r23
     af0:	8f 93       	push	r24
     af2:	9f 93       	push	r25
     af4:	af 93       	push	r26
     af6:	bf 93       	push	r27
     af8:	ef 93       	push	r30
     afa:	ff 93       	push	r31
	EXT_INTERRUPT7_FUNCTION_PTR();
     afc:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <__data_end>
     b00:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <__data_end+0x1>
     b04:	09 95       	icall
     b06:	ff 91       	pop	r31
     b08:	ef 91       	pop	r30
     b0a:	bf 91       	pop	r27
     b0c:	af 91       	pop	r26
     b0e:	9f 91       	pop	r25
     b10:	8f 91       	pop	r24
     b12:	7f 91       	pop	r23
     b14:	6f 91       	pop	r22
     b16:	5f 91       	pop	r21
     b18:	4f 91       	pop	r20
     b1a:	3f 91       	pop	r19
     b1c:	2f 91       	pop	r18
     b1e:	0f 90       	pop	r0
     b20:	0b be       	out	0x3b, r0	; 59
     b22:	0f 90       	pop	r0
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	0f 90       	pop	r0
     b28:	1f 90       	pop	r1
     b2a:	18 95       	reti

00000b2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     b2c:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b2e:	03 96       	adiw	r24, 0x03	; 3
     b30:	92 83       	std	Z+2, r25	; 0x02
     b32:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     b34:	2f ef       	ldi	r18, 0xFF	; 255
     b36:	3f ef       	ldi	r19, 0xFF	; 255
     b38:	34 83       	std	Z+4, r19	; 0x04
     b3a:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b3c:	96 83       	std	Z+6, r25	; 0x06
     b3e:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b40:	90 87       	std	Z+8, r25	; 0x08
     b42:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     b44:	10 82       	st	Z, r1
     b46:	08 95       	ret

00000b48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
     b48:	fc 01       	movw	r30, r24
     b4a:	11 86       	std	Z+9, r1	; 0x09
     b4c:	10 86       	std	Z+8, r1	; 0x08
     b4e:	08 95       	ret

00000b50 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	9c 01       	movw	r18, r24
     b56:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     b58:	dc 01       	movw	r26, r24
     b5a:	11 96       	adiw	r26, 0x01	; 1
     b5c:	cd 91       	ld	r28, X+
     b5e:	dc 91       	ld	r29, X
     b60:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     b62:	d3 83       	std	Z+3, r29	; 0x03
     b64:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     b66:	8c 81       	ldd	r24, Y+4	; 0x04
     b68:	9d 81       	ldd	r25, Y+5	; 0x05
     b6a:	95 83       	std	Z+5, r25	; 0x05
     b6c:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     b6e:	8c 81       	ldd	r24, Y+4	; 0x04
     b70:	9d 81       	ldd	r25, Y+5	; 0x05
     b72:	dc 01       	movw	r26, r24
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	7c 93       	st	X, r23
     b78:	6e 93       	st	-X, r22
     b7a:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     b7c:	7d 83       	std	Y+5, r23	; 0x05
     b7e:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
     b80:	31 87       	std	Z+9, r19	; 0x09
     b82:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     b84:	f9 01       	movw	r30, r18
     b86:	80 81       	ld	r24, Z
     b88:	8f 5f       	subi	r24, 0xFF	; 255
     b8a:	80 83       	st	Z, r24
}
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	08 95       	ret

00000b92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     b98:	48 81       	ld	r20, Y
     b9a:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     b9c:	4f 3f       	cpi	r20, 0xFF	; 255
     b9e:	2f ef       	ldi	r18, 0xFF	; 255
     ba0:	52 07       	cpc	r21, r18
     ba2:	21 f4       	brne	.+8      	; 0xbac <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     ba4:	fc 01       	movw	r30, r24
     ba6:	a7 81       	ldd	r26, Z+7	; 0x07
     ba8:	b0 85       	ldd	r27, Z+8	; 0x08
     baa:	0d c0       	rjmp	.+26     	; 0xbc6 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     bac:	dc 01       	movw	r26, r24
     bae:	13 96       	adiw	r26, 0x03	; 3
     bb0:	01 c0       	rjmp	.+2      	; 0xbb4 <vListInsert+0x22>
     bb2:	df 01       	movw	r26, r30
     bb4:	12 96       	adiw	r26, 0x02	; 2
     bb6:	ed 91       	ld	r30, X+
     bb8:	fc 91       	ld	r31, X
     bba:	13 97       	sbiw	r26, 0x03	; 3
     bbc:	20 81       	ld	r18, Z
     bbe:	31 81       	ldd	r19, Z+1	; 0x01
     bc0:	42 17       	cp	r20, r18
     bc2:	53 07       	cpc	r21, r19
     bc4:	b0 f7       	brcc	.-20     	; 0xbb2 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     bc6:	12 96       	adiw	r26, 0x02	; 2
     bc8:	ed 91       	ld	r30, X+
     bca:	fc 91       	ld	r31, X
     bcc:	13 97       	sbiw	r26, 0x03	; 3
     bce:	fb 83       	std	Y+3, r31	; 0x03
     bd0:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     bd2:	d5 83       	std	Z+5, r29	; 0x05
     bd4:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     bd6:	bd 83       	std	Y+5, r27	; 0x05
     bd8:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     bda:	13 96       	adiw	r26, 0x03	; 3
     bdc:	dc 93       	st	X, r29
     bde:	ce 93       	st	-X, r28
     be0:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
     be2:	99 87       	std	Y+9, r25	; 0x09
     be4:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     be6:	fc 01       	movw	r30, r24
     be8:	20 81       	ld	r18, Z
     bea:	2f 5f       	subi	r18, 0xFF	; 255
     bec:	20 83       	st	Z, r18
}
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	08 95       	ret

00000bf4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     bfa:	a0 85       	ldd	r26, Z+8	; 0x08
     bfc:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     bfe:	c2 81       	ldd	r28, Z+2	; 0x02
     c00:	d3 81       	ldd	r29, Z+3	; 0x03
     c02:	84 81       	ldd	r24, Z+4	; 0x04
     c04:	95 81       	ldd	r25, Z+5	; 0x05
     c06:	9d 83       	std	Y+5, r25	; 0x05
     c08:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     c0a:	c4 81       	ldd	r28, Z+4	; 0x04
     c0c:	d5 81       	ldd	r29, Z+5	; 0x05
     c0e:	82 81       	ldd	r24, Z+2	; 0x02
     c10:	93 81       	ldd	r25, Z+3	; 0x03
     c12:	9b 83       	std	Y+3, r25	; 0x03
     c14:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     c16:	11 96       	adiw	r26, 0x01	; 1
     c18:	8d 91       	ld	r24, X+
     c1a:	9c 91       	ld	r25, X
     c1c:	12 97       	sbiw	r26, 0x02	; 2
     c1e:	e8 17       	cp	r30, r24
     c20:	f9 07       	cpc	r31, r25
     c22:	31 f4       	brne	.+12     	; 0xc30 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     c24:	84 81       	ldd	r24, Z+4	; 0x04
     c26:	95 81       	ldd	r25, Z+5	; 0x05
     c28:	12 96       	adiw	r26, 0x02	; 2
     c2a:	9c 93       	st	X, r25
     c2c:	8e 93       	st	-X, r24
     c2e:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
     c30:	11 86       	std	Z+9, r1	; 0x09
     c32:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     c34:	8c 91       	ld	r24, X
     c36:	81 50       	subi	r24, 0x01	; 1
     c38:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     c3a:	8c 91       	ld	r24, X
}
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	08 95       	ret

00000c42 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     c42:	1b bc       	out	0x2b, r1	; 43
     c44:	89 ef       	ldi	r24, 0xF9	; 249
     c46:	8a bd       	out	0x2a, r24	; 42
     c48:	8b e0       	ldi	r24, 0x0B	; 11
     c4a:	8e bd       	out	0x2e, r24	; 46
     c4c:	87 b7       	in	r24, 0x37	; 55
     c4e:	80 61       	ori	r24, 0x10	; 16
     c50:	87 bf       	out	0x37, r24	; 55
     c52:	08 95       	ret

00000c54 <pxPortInitialiseStack>:
     c54:	31 e1       	ldi	r19, 0x11	; 17
     c56:	fc 01       	movw	r30, r24
     c58:	30 83       	st	Z, r19
     c5a:	31 97       	sbiw	r30, 0x01	; 1
     c5c:	22 e2       	ldi	r18, 0x22	; 34
     c5e:	20 83       	st	Z, r18
     c60:	31 97       	sbiw	r30, 0x01	; 1
     c62:	a3 e3       	ldi	r26, 0x33	; 51
     c64:	a0 83       	st	Z, r26
     c66:	31 97       	sbiw	r30, 0x01	; 1
     c68:	60 83       	st	Z, r22
     c6a:	31 97       	sbiw	r30, 0x01	; 1
     c6c:	70 83       	st	Z, r23
     c6e:	31 97       	sbiw	r30, 0x01	; 1
     c70:	10 82       	st	Z, r1
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	60 e8       	ldi	r22, 0x80	; 128
     c76:	60 83       	st	Z, r22
     c78:	31 97       	sbiw	r30, 0x01	; 1
     c7a:	10 82       	st	Z, r1
     c7c:	31 97       	sbiw	r30, 0x01	; 1
     c7e:	62 e0       	ldi	r22, 0x02	; 2
     c80:	60 83       	st	Z, r22
     c82:	31 97       	sbiw	r30, 0x01	; 1
     c84:	63 e0       	ldi	r22, 0x03	; 3
     c86:	60 83       	st	Z, r22
     c88:	31 97       	sbiw	r30, 0x01	; 1
     c8a:	64 e0       	ldi	r22, 0x04	; 4
     c8c:	60 83       	st	Z, r22
     c8e:	31 97       	sbiw	r30, 0x01	; 1
     c90:	65 e0       	ldi	r22, 0x05	; 5
     c92:	60 83       	st	Z, r22
     c94:	31 97       	sbiw	r30, 0x01	; 1
     c96:	66 e0       	ldi	r22, 0x06	; 6
     c98:	60 83       	st	Z, r22
     c9a:	31 97       	sbiw	r30, 0x01	; 1
     c9c:	67 e0       	ldi	r22, 0x07	; 7
     c9e:	60 83       	st	Z, r22
     ca0:	31 97       	sbiw	r30, 0x01	; 1
     ca2:	68 e0       	ldi	r22, 0x08	; 8
     ca4:	60 83       	st	Z, r22
     ca6:	31 97       	sbiw	r30, 0x01	; 1
     ca8:	69 e0       	ldi	r22, 0x09	; 9
     caa:	60 83       	st	Z, r22
     cac:	31 97       	sbiw	r30, 0x01	; 1
     cae:	60 e1       	ldi	r22, 0x10	; 16
     cb0:	60 83       	st	Z, r22
     cb2:	31 97       	sbiw	r30, 0x01	; 1
     cb4:	30 83       	st	Z, r19
     cb6:	31 97       	sbiw	r30, 0x01	; 1
     cb8:	32 e1       	ldi	r19, 0x12	; 18
     cba:	30 83       	st	Z, r19
     cbc:	31 97       	sbiw	r30, 0x01	; 1
     cbe:	33 e1       	ldi	r19, 0x13	; 19
     cc0:	30 83       	st	Z, r19
     cc2:	31 97       	sbiw	r30, 0x01	; 1
     cc4:	34 e1       	ldi	r19, 0x14	; 20
     cc6:	30 83       	st	Z, r19
     cc8:	31 97       	sbiw	r30, 0x01	; 1
     cca:	35 e1       	ldi	r19, 0x15	; 21
     ccc:	30 83       	st	Z, r19
     cce:	31 97       	sbiw	r30, 0x01	; 1
     cd0:	36 e1       	ldi	r19, 0x16	; 22
     cd2:	30 83       	st	Z, r19
     cd4:	31 97       	sbiw	r30, 0x01	; 1
     cd6:	37 e1       	ldi	r19, 0x17	; 23
     cd8:	30 83       	st	Z, r19
     cda:	31 97       	sbiw	r30, 0x01	; 1
     cdc:	38 e1       	ldi	r19, 0x18	; 24
     cde:	30 83       	st	Z, r19
     ce0:	31 97       	sbiw	r30, 0x01	; 1
     ce2:	39 e1       	ldi	r19, 0x19	; 25
     ce4:	30 83       	st	Z, r19
     ce6:	31 97       	sbiw	r30, 0x01	; 1
     ce8:	30 e2       	ldi	r19, 0x20	; 32
     cea:	30 83       	st	Z, r19
     cec:	31 97       	sbiw	r30, 0x01	; 1
     cee:	31 e2       	ldi	r19, 0x21	; 33
     cf0:	30 83       	st	Z, r19
     cf2:	31 97       	sbiw	r30, 0x01	; 1
     cf4:	20 83       	st	Z, r18
     cf6:	31 97       	sbiw	r30, 0x01	; 1
     cf8:	23 e2       	ldi	r18, 0x23	; 35
     cfa:	20 83       	st	Z, r18
     cfc:	31 97       	sbiw	r30, 0x01	; 1
     cfe:	40 83       	st	Z, r20
     d00:	31 97       	sbiw	r30, 0x01	; 1
     d02:	50 83       	st	Z, r21
     d04:	31 97       	sbiw	r30, 0x01	; 1
     d06:	26 e2       	ldi	r18, 0x26	; 38
     d08:	20 83       	st	Z, r18
     d0a:	31 97       	sbiw	r30, 0x01	; 1
     d0c:	27 e2       	ldi	r18, 0x27	; 39
     d0e:	20 83       	st	Z, r18
     d10:	31 97       	sbiw	r30, 0x01	; 1
     d12:	28 e2       	ldi	r18, 0x28	; 40
     d14:	20 83       	st	Z, r18
     d16:	31 97       	sbiw	r30, 0x01	; 1
     d18:	29 e2       	ldi	r18, 0x29	; 41
     d1a:	20 83       	st	Z, r18
     d1c:	31 97       	sbiw	r30, 0x01	; 1
     d1e:	20 e3       	ldi	r18, 0x30	; 48
     d20:	20 83       	st	Z, r18
     d22:	31 97       	sbiw	r30, 0x01	; 1
     d24:	21 e3       	ldi	r18, 0x31	; 49
     d26:	20 83       	st	Z, r18
     d28:	86 97       	sbiw	r24, 0x26	; 38
     d2a:	08 95       	ret

00000d2c <xPortStartScheduler>:
     d2c:	8a df       	rcall	.-236    	; 0xc42 <prvSetupTimerInterrupt>
     d2e:	a0 91 97 02 	lds	r26, 0x0297	; 0x800297 <pxCurrentTCB>
     d32:	b0 91 98 02 	lds	r27, 0x0298	; 0x800298 <pxCurrentTCB+0x1>
     d36:	cd 91       	ld	r28, X+
     d38:	cd bf       	out	0x3d, r28	; 61
     d3a:	dd 91       	ld	r29, X+
     d3c:	de bf       	out	0x3e, r29	; 62
     d3e:	ff 91       	pop	r31
     d40:	ef 91       	pop	r30
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	bf 91       	pop	r27
     d48:	af 91       	pop	r26
     d4a:	9f 91       	pop	r25
     d4c:	8f 91       	pop	r24
     d4e:	7f 91       	pop	r23
     d50:	6f 91       	pop	r22
     d52:	5f 91       	pop	r21
     d54:	4f 91       	pop	r20
     d56:	3f 91       	pop	r19
     d58:	2f 91       	pop	r18
     d5a:	1f 91       	pop	r17
     d5c:	0f 91       	pop	r16
     d5e:	ff 90       	pop	r15
     d60:	ef 90       	pop	r14
     d62:	df 90       	pop	r13
     d64:	cf 90       	pop	r12
     d66:	bf 90       	pop	r11
     d68:	af 90       	pop	r10
     d6a:	9f 90       	pop	r9
     d6c:	8f 90       	pop	r8
     d6e:	7f 90       	pop	r7
     d70:	6f 90       	pop	r6
     d72:	5f 90       	pop	r5
     d74:	4f 90       	pop	r4
     d76:	3f 90       	pop	r3
     d78:	2f 90       	pop	r2
     d7a:	1f 90       	pop	r1
     d7c:	0f 90       	pop	r0
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	0f 90       	pop	r0
     d82:	08 95       	ret
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	08 95       	ret

00000d88 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     d88:	0f 92       	push	r0
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	0f 92       	push	r0
     d90:	1f 92       	push	r1
     d92:	11 24       	eor	r1, r1
     d94:	2f 92       	push	r2
     d96:	3f 92       	push	r3
     d98:	4f 92       	push	r4
     d9a:	5f 92       	push	r5
     d9c:	6f 92       	push	r6
     d9e:	7f 92       	push	r7
     da0:	8f 92       	push	r8
     da2:	9f 92       	push	r9
     da4:	af 92       	push	r10
     da6:	bf 92       	push	r11
     da8:	cf 92       	push	r12
     daa:	df 92       	push	r13
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	2f 93       	push	r18
     db6:	3f 93       	push	r19
     db8:	4f 93       	push	r20
     dba:	5f 93       	push	r21
     dbc:	6f 93       	push	r22
     dbe:	7f 93       	push	r23
     dc0:	8f 93       	push	r24
     dc2:	9f 93       	push	r25
     dc4:	af 93       	push	r26
     dc6:	bf 93       	push	r27
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	ef 93       	push	r30
     dce:	ff 93       	push	r31
     dd0:	a0 91 97 02 	lds	r26, 0x0297	; 0x800297 <pxCurrentTCB>
     dd4:	b0 91 98 02 	lds	r27, 0x0298	; 0x800298 <pxCurrentTCB+0x1>
     dd8:	0d b6       	in	r0, 0x3d	; 61
     dda:	0d 92       	st	X+, r0
     ddc:	0e b6       	in	r0, 0x3e	; 62
     dde:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     de0:	db d3       	rcall	.+1974   	; 0x1598 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     de2:	a0 91 97 02 	lds	r26, 0x0297	; 0x800297 <pxCurrentTCB>
     de6:	b0 91 98 02 	lds	r27, 0x0298	; 0x800298 <pxCurrentTCB+0x1>
     dea:	cd 91       	ld	r28, X+
     dec:	cd bf       	out	0x3d, r28	; 61
     dee:	dd 91       	ld	r29, X+
     df0:	de bf       	out	0x3e, r29	; 62
     df2:	ff 91       	pop	r31
     df4:	ef 91       	pop	r30
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	bf 91       	pop	r27
     dfc:	af 91       	pop	r26
     dfe:	9f 91       	pop	r25
     e00:	8f 91       	pop	r24
     e02:	7f 91       	pop	r23
     e04:	6f 91       	pop	r22
     e06:	5f 91       	pop	r21
     e08:	4f 91       	pop	r20
     e0a:	3f 91       	pop	r19
     e0c:	2f 91       	pop	r18
     e0e:	1f 91       	pop	r17
     e10:	0f 91       	pop	r16
     e12:	ff 90       	pop	r15
     e14:	ef 90       	pop	r14
     e16:	df 90       	pop	r13
     e18:	cf 90       	pop	r12
     e1a:	bf 90       	pop	r11
     e1c:	af 90       	pop	r10
     e1e:	9f 90       	pop	r9
     e20:	8f 90       	pop	r8
     e22:	7f 90       	pop	r7
     e24:	6f 90       	pop	r6
     e26:	5f 90       	pop	r5
     e28:	4f 90       	pop	r4
     e2a:	3f 90       	pop	r3
     e2c:	2f 90       	pop	r2
     e2e:	1f 90       	pop	r1
     e30:	0f 90       	pop	r0
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	0f 90       	pop	r0

	asm volatile ( "ret" );
     e36:	08 95       	ret

00000e38 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     e38:	0f 92       	push	r0
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	0f 92       	push	r0
     e40:	1f 92       	push	r1
     e42:	11 24       	eor	r1, r1
     e44:	2f 92       	push	r2
     e46:	3f 92       	push	r3
     e48:	4f 92       	push	r4
     e4a:	5f 92       	push	r5
     e4c:	6f 92       	push	r6
     e4e:	7f 92       	push	r7
     e50:	8f 92       	push	r8
     e52:	9f 92       	push	r9
     e54:	af 92       	push	r10
     e56:	bf 92       	push	r11
     e58:	cf 92       	push	r12
     e5a:	df 92       	push	r13
     e5c:	ef 92       	push	r14
     e5e:	ff 92       	push	r15
     e60:	0f 93       	push	r16
     e62:	1f 93       	push	r17
     e64:	2f 93       	push	r18
     e66:	3f 93       	push	r19
     e68:	4f 93       	push	r20
     e6a:	5f 93       	push	r21
     e6c:	6f 93       	push	r22
     e6e:	7f 93       	push	r23
     e70:	8f 93       	push	r24
     e72:	9f 93       	push	r25
     e74:	af 93       	push	r26
     e76:	bf 93       	push	r27
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	ef 93       	push	r30
     e7e:	ff 93       	push	r31
     e80:	a0 91 97 02 	lds	r26, 0x0297	; 0x800297 <pxCurrentTCB>
     e84:	b0 91 98 02 	lds	r27, 0x0298	; 0x800298 <pxCurrentTCB+0x1>
     e88:	0d b6       	in	r0, 0x3d	; 61
     e8a:	0d 92       	st	X+, r0
     e8c:	0e b6       	in	r0, 0x3e	; 62
     e8e:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     e90:	4f d2       	rcall	.+1182   	; 0x1330 <xTaskIncrementTick>
     e92:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     e94:	81 d3       	rcall	.+1794   	; 0x1598 <vTaskSwitchContext>
     e96:	a0 91 97 02 	lds	r26, 0x0297	; 0x800297 <pxCurrentTCB>
	}
	portRESTORE_CONTEXT();
     e9a:	b0 91 98 02 	lds	r27, 0x0298	; 0x800298 <pxCurrentTCB+0x1>
     e9e:	cd 91       	ld	r28, X+
     ea0:	cd bf       	out	0x3d, r28	; 61
     ea2:	dd 91       	ld	r29, X+
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	ff 91       	pop	r31
     ea8:	ef 91       	pop	r30
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	bf 91       	pop	r27
     eb0:	af 91       	pop	r26
     eb2:	9f 91       	pop	r25
     eb4:	8f 91       	pop	r24
     eb6:	7f 91       	pop	r23
     eb8:	6f 91       	pop	r22
     eba:	5f 91       	pop	r21
     ebc:	4f 91       	pop	r20
     ebe:	3f 91       	pop	r19
     ec0:	2f 91       	pop	r18
     ec2:	1f 91       	pop	r17
     ec4:	0f 91       	pop	r16
     ec6:	ff 90       	pop	r15
     ec8:	ef 90       	pop	r14
     eca:	df 90       	pop	r13
     ecc:	cf 90       	pop	r12
     ece:	bf 90       	pop	r11
     ed0:	af 90       	pop	r10
     ed2:	9f 90       	pop	r9
     ed4:	8f 90       	pop	r8
     ed6:	7f 90       	pop	r7
     ed8:	6f 90       	pop	r6
     eda:	5f 90       	pop	r5
     edc:	4f 90       	pop	r4
     ede:	3f 90       	pop	r3
     ee0:	2f 90       	pop	r2
     ee2:	1f 90       	pop	r1
     ee4:	0f 90       	pop	r0
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	0f 90       	pop	r0
     eea:	08 95       	ret

00000eec <__vector_12>:

	asm volatile ( "ret" );
     eec:	a5 df       	rcall	.-182    	; 0xe38 <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
     eee:	18 95       	reti

00000ef0 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	ec 01       	movw	r28, r24
    void * pvReturn;

    vTaskSuspendAll();
     ef6:	16 d2       	rcall	.+1068   	; 0x1324 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     ef8:	ce 01       	movw	r24, r28
     efa:	ab d3       	rcall	.+1878   	; 0x1652 <malloc>
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     efc:	ec 01       	movw	r28, r24
     efe:	ce d2       	rcall	.+1436   	; 0x149c <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
     f00:	ce 01       	movw	r24, r28
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	08 95       	ret

00000f08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
    if( pv != NULL )
     f0c:	00 97       	sbiw	r24, 0x00	; 0
     f0e:	29 f0       	breq	.+10     	; 0xf1a <vPortFree+0x12>
     f10:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     f12:	08 d2       	rcall	.+1040   	; 0x1324 <vTaskSuspendAll>
        {
            free( pv );
     f14:	ce 01       	movw	r24, r28
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     f16:	35 d4       	rcall	.+2154   	; 0x1782 <free>
     f18:	c1 d2       	rcall	.+1410   	; 0x149c <xTaskResumeAll>
    }
}
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	08 95       	ret

00000f20 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     f20:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxDelayedTaskList>
     f24:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxDelayedTaskList+0x1>
     f28:	80 81       	ld	r24, Z
     f2a:	81 11       	cpse	r24, r1
     f2c:	07 c0       	rjmp	.+14     	; 0xf3c <prvResetNextTaskUnblockTime+0x1c>
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	9f ef       	ldi	r25, 0xFF	; 255
     f32:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <xNextTaskUnblockTime+0x1>
     f36:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <xNextTaskUnblockTime>
     f3a:	08 95       	ret
     f3c:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxDelayedTaskList>
     f40:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxDelayedTaskList+0x1>
     f44:	05 80       	ldd	r0, Z+5	; 0x05
     f46:	f6 81       	ldd	r31, Z+6	; 0x06
     f48:	e0 2d       	mov	r30, r0
     f4a:	06 80       	ldd	r0, Z+6	; 0x06
     f4c:	f7 81       	ldd	r31, Z+7	; 0x07
     f4e:	e0 2d       	mov	r30, r0
     f50:	82 81       	ldd	r24, Z+2	; 0x02
     f52:	93 81       	ldd	r25, Z+3	; 0x03
     f54:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <xNextTaskUnblockTime+0x1>
     f58:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <xNextTaskUnblockTime>
     f5c:	08 95       	ret

00000f5e <prvDeleteTCB>:
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	ec 01       	movw	r28, r24
     f64:	8f 89       	ldd	r24, Y+23	; 0x17
     f66:	98 8d       	ldd	r25, Y+24	; 0x18
     f68:	cf df       	rcall	.-98     	; 0xf08 <vPortFree>
     f6a:	ce 01       	movw	r24, r28
     f6c:	cd df       	rcall	.-102    	; 0xf08 <vPortFree>
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	08 95       	ret

00000f74 <prvInitialiseNewTask>:
     f74:	6f 92       	push	r6
     f76:	7f 92       	push	r7
     f78:	8f 92       	push	r8
     f7a:	9f 92       	push	r9
     f7c:	af 92       	push	r10
     f7e:	bf 92       	push	r11
     f80:	cf 92       	push	r12
     f82:	df 92       	push	r13
     f84:	ef 92       	push	r14
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	4c 01       	movw	r8, r24
     f94:	f5 01       	movw	r30, r10
     f96:	87 89       	ldd	r24, Z+23	; 0x17
     f98:	90 8d       	ldd	r25, Z+24	; 0x18
     f9a:	21 50       	subi	r18, 0x01	; 1
     f9c:	31 09       	sbc	r19, r1
     f9e:	3c 01       	movw	r6, r24
     fa0:	62 0e       	add	r6, r18
     fa2:	73 1e       	adc	r7, r19
     fa4:	61 15       	cp	r22, r1
     fa6:	71 05       	cpc	r23, r1
     fa8:	89 f4       	brne	.+34     	; 0xfcc <prvInitialiseNewTask+0x58>
     faa:	16 c0       	rjmp	.+44     	; 0xfd8 <prvInitialiseNewTask+0x64>
     fac:	82 2f       	mov	r24, r18
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	fb 01       	movw	r30, r22
     fb2:	e8 0f       	add	r30, r24
     fb4:	f9 1f       	adc	r31, r25
     fb6:	30 81       	ld	r19, Z
     fb8:	d5 01       	movw	r26, r10
     fba:	a8 0f       	add	r26, r24
     fbc:	b9 1f       	adc	r27, r25
     fbe:	59 96       	adiw	r26, 0x19	; 25
     fc0:	3c 93       	st	X, r19
     fc2:	80 81       	ld	r24, Z
     fc4:	88 23       	and	r24, r24
     fc6:	29 f0       	breq	.+10     	; 0xfd2 <prvInitialiseNewTask+0x5e>
     fc8:	2f 5f       	subi	r18, 0xFF	; 255
     fca:	01 c0       	rjmp	.+2      	; 0xfce <prvInitialiseNewTask+0x5a>
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	28 30       	cpi	r18, 0x08	; 8
     fd0:	68 f3       	brcs	.-38     	; 0xfac <prvInitialiseNewTask+0x38>
     fd2:	f5 01       	movw	r30, r10
     fd4:	10 a2       	std	Z+32, r1	; 0x20
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <prvInitialiseNewTask+0x68>
     fd8:	f5 01       	movw	r30, r10
     fda:	11 8e       	std	Z+25, r1	; 0x19
     fdc:	ff e1       	ldi	r31, 0x1F	; 31
     fde:	fe 15       	cp	r31, r14
     fe0:	20 f4       	brcc	.+8      	; 0xfea <prvInitialiseNewTask+0x76>
     fe2:	0f 2e       	mov	r0, r31
     fe4:	ff e1       	ldi	r31, 0x1F	; 31
     fe6:	ef 2e       	mov	r14, r31
     fe8:	f0 2d       	mov	r31, r0
     fea:	f5 01       	movw	r30, r10
     fec:	e6 8a       	std	Z+22, r14	; 0x16
     fee:	c5 01       	movw	r24, r10
     ff0:	02 96       	adiw	r24, 0x02	; 2
     ff2:	aa dd       	rcall	.-1196   	; 0xb48 <vListInitialiseItem>
     ff4:	c5 01       	movw	r24, r10
     ff6:	0c 96       	adiw	r24, 0x0c	; 12
     ff8:	a7 dd       	rcall	.-1202   	; 0xb48 <vListInitialiseItem>
     ffa:	f5 01       	movw	r30, r10
     ffc:	b1 86       	std	Z+9, r11	; 0x09
     ffe:	a0 86       	std	Z+8, r10	; 0x08
    1000:	80 e2       	ldi	r24, 0x20	; 32
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	8e 19       	sub	r24, r14
    1006:	91 09       	sbc	r25, r1
    1008:	95 87       	std	Z+13, r25	; 0x0d
    100a:	84 87       	std	Z+12, r24	; 0x0c
    100c:	b3 8a       	std	Z+19, r11	; 0x13
    100e:	a2 8a       	std	Z+18, r10	; 0x12
    1010:	11 a2       	std	Z+33, r1	; 0x21
    1012:	12 a2       	std	Z+34, r1	; 0x22
    1014:	13 a2       	std	Z+35, r1	; 0x23
    1016:	14 a2       	std	Z+36, r1	; 0x24
    1018:	15 a2       	std	Z+37, r1	; 0x25
    101a:	a8 01       	movw	r20, r16
    101c:	b4 01       	movw	r22, r8
    101e:	c3 01       	movw	r24, r6
    1020:	19 de       	rcall	.-974    	; 0xc54 <pxPortInitialiseStack>
    1022:	f5 01       	movw	r30, r10
    1024:	91 83       	std	Z+1, r25	; 0x01
    1026:	80 83       	st	Z, r24
    1028:	c1 14       	cp	r12, r1
    102a:	d1 04       	cpc	r13, r1
    102c:	19 f0       	breq	.+6      	; 0x1034 <__DATA_REGION_LENGTH__+0x34>
    102e:	f6 01       	movw	r30, r12
    1030:	b1 82       	std	Z+1, r11	; 0x01
    1032:	a0 82       	st	Z, r10
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	ef 90       	pop	r14
    103e:	df 90       	pop	r13
    1040:	cf 90       	pop	r12
    1042:	bf 90       	pop	r11
    1044:	af 90       	pop	r10
    1046:	9f 90       	pop	r9
    1048:	8f 90       	pop	r8
    104a:	7f 90       	pop	r7
    104c:	6f 90       	pop	r6
    104e:	08 95       	ret

00001050 <prvInitialiseTaskLists>:
    1050:	cf 93       	push	r28
    1052:	c0 e0       	ldi	r28, 0x00	; 0
    1054:	0f c0       	rjmp	.+30     	; 0x1074 <prvInitialiseTaskLists+0x24>
    1056:	8c 2f       	mov	r24, r28
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	9c 01       	movw	r18, r24
    105c:	22 0f       	add	r18, r18
    105e:	33 1f       	adc	r19, r19
    1060:	22 0f       	add	r18, r18
    1062:	33 1f       	adc	r19, r19
    1064:	22 0f       	add	r18, r18
    1066:	33 1f       	adc	r19, r19
    1068:	82 0f       	add	r24, r18
    106a:	93 1f       	adc	r25, r19
    106c:	89 58       	subi	r24, 0x89	; 137
    106e:	9e 4f       	sbci	r25, 0xFE	; 254
    1070:	5d dd       	rcall	.-1350   	; 0xb2c <vListInitialise>
    1072:	cf 5f       	subi	r28, 0xFF	; 255
    1074:	c0 32       	cpi	r28, 0x20	; 32
    1076:	78 f3       	brcs	.-34     	; 0x1056 <prvInitialiseTaskLists+0x6>
    1078:	8e e6       	ldi	r24, 0x6E	; 110
    107a:	91 e0       	ldi	r25, 0x01	; 1
    107c:	57 dd       	rcall	.-1362   	; 0xb2c <vListInitialise>
    107e:	85 e6       	ldi	r24, 0x65	; 101
    1080:	91 e0       	ldi	r25, 0x01	; 1
    1082:	54 dd       	rcall	.-1368   	; 0xb2c <vListInitialise>
    1084:	88 e5       	ldi	r24, 0x58	; 88
    1086:	91 e0       	ldi	r25, 0x01	; 1
    1088:	51 dd       	rcall	.-1374   	; 0xb2c <vListInitialise>
    108a:	8f e4       	ldi	r24, 0x4F	; 79
    108c:	91 e0       	ldi	r25, 0x01	; 1
    108e:	4e dd       	rcall	.-1380   	; 0xb2c <vListInitialise>
    1090:	8e e6       	ldi	r24, 0x6E	; 110
    1092:	91 e0       	ldi	r25, 0x01	; 1
    1094:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <pxDelayedTaskList+0x1>
    1098:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <pxDelayedTaskList>
    109c:	85 e6       	ldi	r24, 0x65	; 101
    109e:	91 e0       	ldi	r25, 0x01	; 1
    10a0:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <pxOverflowDelayedTaskList+0x1>
    10a4:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <pxOverflowDelayedTaskList>
    10a8:	cf 91       	pop	r28
    10aa:	08 95       	ret

000010ac <prvAddNewTaskToReadyList>:
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	ec 01       	movw	r28, r24
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	0f 92       	push	r0
    10b8:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <uxCurrentNumberOfTasks>
    10bc:	8f 5f       	subi	r24, 0xFF	; 255
    10be:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <uxCurrentNumberOfTasks>
    10c2:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <pxCurrentTCB>
    10c6:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <pxCurrentTCB+0x1>
    10ca:	89 2b       	or	r24, r25
    10cc:	51 f4       	brne	.+20     	; 0x10e2 <prvAddNewTaskToReadyList+0x36>
    10ce:	d0 93 98 02 	sts	0x0298, r29	; 0x800298 <pxCurrentTCB+0x1>
    10d2:	c0 93 97 02 	sts	0x0297, r28	; 0x800297 <pxCurrentTCB>
    10d6:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <uxCurrentNumberOfTasks>
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	91 f4       	brne	.+36     	; 0x1102 <__stack+0x3>
    10de:	b8 df       	rcall	.-144    	; 0x1050 <prvInitialiseTaskLists>
    10e0:	10 c0       	rjmp	.+32     	; 0x1102 <__stack+0x3>
    10e2:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <xSchedulerRunning>
    10e6:	81 11       	cpse	r24, r1
    10e8:	0c c0       	rjmp	.+24     	; 0x1102 <__stack+0x3>
    10ea:	e0 91 97 02 	lds	r30, 0x0297	; 0x800297 <pxCurrentTCB>
    10ee:	f0 91 98 02 	lds	r31, 0x0298	; 0x800298 <pxCurrentTCB+0x1>
    10f2:	96 89       	ldd	r25, Z+22	; 0x16
    10f4:	8e 89       	ldd	r24, Y+22	; 0x16
    10f6:	89 17       	cp	r24, r25
    10f8:	20 f0       	brcs	.+8      	; 0x1102 <__stack+0x3>
    10fa:	d0 93 98 02 	sts	0x0298, r29	; 0x800298 <pxCurrentTCB+0x1>
    10fe:	c0 93 97 02 	sts	0x0297, r28	; 0x800297 <pxCurrentTCB>
    1102:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <uxTaskNumber>
    1106:	8f 5f       	subi	r24, 0xFF	; 255
    1108:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <uxTaskNumber>
    110c:	8e 89       	ldd	r24, Y+22	; 0x16
    110e:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <uxTopReadyPriority>
    1112:	98 17       	cp	r25, r24
    1114:	10 f4       	brcc	.+4      	; 0x111a <__stack+0x1b>
    1116:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <uxTopReadyPriority>
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	9c 01       	movw	r18, r24
    111e:	22 0f       	add	r18, r18
    1120:	33 1f       	adc	r19, r19
    1122:	22 0f       	add	r18, r18
    1124:	33 1f       	adc	r19, r19
    1126:	22 0f       	add	r18, r18
    1128:	33 1f       	adc	r19, r19
    112a:	82 0f       	add	r24, r18
    112c:	93 1f       	adc	r25, r19
    112e:	be 01       	movw	r22, r28
    1130:	6e 5f       	subi	r22, 0xFE	; 254
    1132:	7f 4f       	sbci	r23, 0xFF	; 255
    1134:	89 58       	subi	r24, 0x89	; 137
    1136:	9e 4f       	sbci	r25, 0xFE	; 254
    1138:	0b dd       	rcall	.-1514   	; 0xb50 <vListInsertEnd>
    113a:	0f 90       	pop	r0
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <xSchedulerRunning>
    1142:	88 23       	and	r24, r24
    1144:	49 f0       	breq	.+18     	; 0x1158 <__stack+0x59>
    1146:	e0 91 97 02 	lds	r30, 0x0297	; 0x800297 <pxCurrentTCB>
    114a:	f0 91 98 02 	lds	r31, 0x0298	; 0x800298 <pxCurrentTCB+0x1>
    114e:	96 89       	ldd	r25, Z+22	; 0x16
    1150:	8e 89       	ldd	r24, Y+22	; 0x16
    1152:	98 17       	cp	r25, r24
    1154:	08 f4       	brcc	.+2      	; 0x1158 <__stack+0x59>
    1156:	18 de       	rcall	.-976    	; 0xd88 <vPortYield>
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
    115c:	08 95       	ret

0000115e <prvCheckTasksWaitingTermination>:
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    1162:	1a c0       	rjmp	.+52     	; 0x1198 <prvCheckTasksWaitingTermination+0x3a>
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	0f 92       	push	r0
    116a:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <xTasksWaitingTermination+0x5>
    116e:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <xTasksWaitingTermination+0x6>
    1172:	c6 81       	ldd	r28, Z+6	; 0x06
    1174:	d7 81       	ldd	r29, Z+7	; 0x07
    1176:	ce 01       	movw	r24, r28
    1178:	02 96       	adiw	r24, 0x02	; 2
    117a:	3c dd       	rcall	.-1416   	; 0xbf4 <uxListRemove>
    117c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <uxCurrentNumberOfTasks>
    1180:	81 50       	subi	r24, 0x01	; 1
    1182:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <uxCurrentNumberOfTasks>
    1186:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <uxDeletedTasksWaitingCleanUp>
    118a:	81 50       	subi	r24, 0x01	; 1
    118c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <uxDeletedTasksWaitingCleanUp>
    1190:	0f 90       	pop	r0
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	ce 01       	movw	r24, r28
    1196:	e3 de       	rcall	.-570    	; 0xf5e <prvDeleteTCB>
    1198:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <uxDeletedTasksWaitingCleanUp>
    119c:	81 11       	cpse	r24, r1
    119e:	e2 cf       	rjmp	.-60     	; 0x1164 <prvCheckTasksWaitingTermination+0x6>
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	08 95       	ret

000011a6 <prvIdleTask>:
    11a6:	db df       	rcall	.-74     	; 0x115e <prvCheckTasksWaitingTermination>
    11a8:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <pxReadyTasksLists>
    11ac:	82 30       	cpi	r24, 0x02	; 2
    11ae:	d8 f3       	brcs	.-10     	; 0x11a6 <prvIdleTask>
    11b0:	eb dd       	rcall	.-1066   	; 0xd88 <vPortYield>
    11b2:	f9 cf       	rjmp	.-14     	; 0x11a6 <prvIdleTask>

000011b4 <prvAddCurrentTaskToDelayedList>:
    11b4:	0f 93       	push	r16
    11b6:	1f 93       	push	r17
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	ec 01       	movw	r28, r24
    11be:	00 91 4b 01 	lds	r16, 0x014B	; 0x80014b <xTickCount>
    11c2:	10 91 4c 01 	lds	r17, 0x014C	; 0x80014c <xTickCount+0x1>
    11c6:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <pxCurrentTCB>
    11ca:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <pxCurrentTCB+0x1>
    11ce:	02 96       	adiw	r24, 0x02	; 2
    11d0:	11 dd       	rcall	.-1502   	; 0xbf4 <uxListRemove>
    11d2:	c0 0f       	add	r28, r16
    11d4:	d1 1f       	adc	r29, r17
    11d6:	e0 91 97 02 	lds	r30, 0x0297	; 0x800297 <pxCurrentTCB>
    11da:	f0 91 98 02 	lds	r31, 0x0298	; 0x800298 <pxCurrentTCB+0x1>
    11de:	d3 83       	std	Z+3, r29	; 0x03
    11e0:	c2 83       	std	Z+2, r28	; 0x02
    11e2:	c0 17       	cp	r28, r16
    11e4:	d1 07       	cpc	r29, r17
    11e6:	60 f4       	brcc	.+24     	; 0x1200 <prvAddCurrentTaskToDelayedList+0x4c>
    11e8:	60 91 97 02 	lds	r22, 0x0297	; 0x800297 <pxCurrentTCB>
    11ec:	70 91 98 02 	lds	r23, 0x0298	; 0x800298 <pxCurrentTCB+0x1>
    11f0:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <pxOverflowDelayedTaskList>
    11f4:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <pxOverflowDelayedTaskList+0x1>
    11f8:	6e 5f       	subi	r22, 0xFE	; 254
    11fa:	7f 4f       	sbci	r23, 0xFF	; 255
    11fc:	ca dc       	rcall	.-1644   	; 0xb92 <vListInsert>
    11fe:	16 c0       	rjmp	.+44     	; 0x122c <prvAddCurrentTaskToDelayedList+0x78>
    1200:	60 91 97 02 	lds	r22, 0x0297	; 0x800297 <pxCurrentTCB>
    1204:	70 91 98 02 	lds	r23, 0x0298	; 0x800298 <pxCurrentTCB+0x1>
    1208:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <pxDelayedTaskList>
    120c:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <pxDelayedTaskList+0x1>
    1210:	6e 5f       	subi	r22, 0xFE	; 254
    1212:	7f 4f       	sbci	r23, 0xFF	; 255
    1214:	be dc       	rcall	.-1668   	; 0xb92 <vListInsert>
    1216:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <xNextTaskUnblockTime>
    121a:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <xNextTaskUnblockTime+0x1>
    121e:	c8 17       	cp	r28, r24
    1220:	d9 07       	cpc	r29, r25
    1222:	20 f4       	brcc	.+8      	; 0x122c <prvAddCurrentTaskToDelayedList+0x78>
    1224:	d0 93 44 01 	sts	0x0144, r29	; 0x800144 <xNextTaskUnblockTime+0x1>
    1228:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <xNextTaskUnblockTime>
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	08 95       	ret

00001236 <xTaskCreate>:
    1236:	2f 92       	push	r2
    1238:	3f 92       	push	r3
    123a:	4f 92       	push	r4
    123c:	5f 92       	push	r5
    123e:	6f 92       	push	r6
    1240:	7f 92       	push	r7
    1242:	8f 92       	push	r8
    1244:	9f 92       	push	r9
    1246:	af 92       	push	r10
    1248:	bf 92       	push	r11
    124a:	cf 92       	push	r12
    124c:	df 92       	push	r13
    124e:	ef 92       	push	r14
    1250:	ff 92       	push	r15
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	3c 01       	movw	r6, r24
    125c:	1b 01       	movw	r2, r22
    125e:	5a 01       	movw	r10, r20
    1260:	29 01       	movw	r4, r18
    1262:	ca 01       	movw	r24, r20
    1264:	45 de       	rcall	.-886    	; 0xef0 <pvPortMalloc>
    1266:	6c 01       	movw	r12, r24
    1268:	89 2b       	or	r24, r25
    126a:	61 f0       	breq	.+24     	; 0x1284 <xTaskCreate+0x4e>
    126c:	86 e2       	ldi	r24, 0x26	; 38
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	3f de       	rcall	.-898    	; 0xef0 <pvPortMalloc>
    1272:	ec 01       	movw	r28, r24
    1274:	89 2b       	or	r24, r25
    1276:	19 f0       	breq	.+6      	; 0x127e <xTaskCreate+0x48>
    1278:	d8 8e       	std	Y+24, r13	; 0x18
    127a:	cf 8a       	std	Y+23, r12	; 0x17
    127c:	05 c0       	rjmp	.+10     	; 0x1288 <xTaskCreate+0x52>
    127e:	c6 01       	movw	r24, r12
    1280:	43 de       	rcall	.-890    	; 0xf08 <vPortFree>
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <xTaskCreate+0x52>
    1284:	c0 e0       	ldi	r28, 0x00	; 0
    1286:	d0 e0       	ldi	r29, 0x00	; 0
    1288:	20 97       	sbiw	r28, 0x00	; 0
    128a:	81 f0       	breq	.+32     	; 0x12ac <xTaskCreate+0x76>
    128c:	95 01       	movw	r18, r10
    128e:	40 e0       	ldi	r20, 0x00	; 0
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	81 2c       	mov	r8, r1
    1294:	91 2c       	mov	r9, r1
    1296:	5e 01       	movw	r10, r28
    1298:	67 01       	movw	r12, r14
    129a:	e0 2e       	mov	r14, r16
    129c:	82 01       	movw	r16, r4
    129e:	b1 01       	movw	r22, r2
    12a0:	c3 01       	movw	r24, r6
    12a2:	68 de       	rcall	.-816    	; 0xf74 <prvInitialiseNewTask>
    12a4:	ce 01       	movw	r24, r28
    12a6:	02 df       	rcall	.-508    	; 0x10ac <prvAddNewTaskToReadyList>
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	01 c0       	rjmp	.+2      	; 0x12ae <xTaskCreate+0x78>
    12ac:	8f ef       	ldi	r24, 0xFF	; 255
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	1f 91       	pop	r17
    12b4:	0f 91       	pop	r16
    12b6:	ff 90       	pop	r15
    12b8:	ef 90       	pop	r14
    12ba:	df 90       	pop	r13
    12bc:	cf 90       	pop	r12
    12be:	bf 90       	pop	r11
    12c0:	af 90       	pop	r10
    12c2:	9f 90       	pop	r9
    12c4:	8f 90       	pop	r8
    12c6:	7f 90       	pop	r7
    12c8:	6f 90       	pop	r6
    12ca:	5f 90       	pop	r5
    12cc:	4f 90       	pop	r4
    12ce:	3f 90       	pop	r3
    12d0:	2f 90       	pop	r2
    12d2:	08 95       	ret

000012d4 <vTaskStartScheduler>:
    12d4:	ef 92       	push	r14
    12d6:	ff 92       	push	r15
    12d8:	0f 93       	push	r16
    12da:	0f 2e       	mov	r0, r31
    12dc:	f1 e4       	ldi	r31, 0x41	; 65
    12de:	ef 2e       	mov	r14, r31
    12e0:	f1 e0       	ldi	r31, 0x01	; 1
    12e2:	ff 2e       	mov	r15, r31
    12e4:	f0 2d       	mov	r31, r0
    12e6:	00 e0       	ldi	r16, 0x00	; 0
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	45 e5       	ldi	r20, 0x55	; 85
    12ee:	50 e0       	ldi	r21, 0x00	; 0
    12f0:	6b e2       	ldi	r22, 0x2B	; 43
    12f2:	71 e0       	ldi	r23, 0x01	; 1
    12f4:	83 ed       	ldi	r24, 0xD3	; 211
    12f6:	98 e0       	ldi	r25, 0x08	; 8
    12f8:	9e df       	rcall	.-196    	; 0x1236 <xTaskCreate>
    12fa:	81 30       	cpi	r24, 0x01	; 1
    12fc:	79 f4       	brne	.+30     	; 0x131c <vTaskStartScheduler+0x48>
    12fe:	f8 94       	cli
    1300:	8f ef       	ldi	r24, 0xFF	; 255
    1302:	9f ef       	ldi	r25, 0xFF	; 255
    1304:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <xNextTaskUnblockTime+0x1>
    1308:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <xNextTaskUnblockTime>
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <xSchedulerRunning>
    1312:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <xTickCount+0x1>
    1316:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <xTickCount>
    131a:	08 dd       	rcall	.-1520   	; 0xd2c <xPortStartScheduler>
    131c:	0f 91       	pop	r16
    131e:	ff 90       	pop	r15
    1320:	ef 90       	pop	r14
    1322:	08 95       	ret

00001324 <vTaskSuspendAll>:
    1324:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <uxSchedulerSuspended>
    1328:	8f 5f       	subi	r24, 0xFF	; 255
    132a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <uxSchedulerSuspended>
    132e:	08 95       	ret

00001330 <xTaskIncrementTick>:
    1330:	df 92       	push	r13
    1332:	ef 92       	push	r14
    1334:	ff 92       	push	r15
    1336:	0f 93       	push	r16
    1338:	1f 93       	push	r17
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
    133e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <uxSchedulerSuspended>
    1342:	81 11       	cpse	r24, r1
    1344:	93 c0       	rjmp	.+294    	; 0x146c <xTaskIncrementTick+0x13c>
    1346:	e0 90 4b 01 	lds	r14, 0x014B	; 0x80014b <xTickCount>
    134a:	f0 90 4c 01 	lds	r15, 0x014C	; 0x80014c <xTickCount+0x1>
    134e:	8f ef       	ldi	r24, 0xFF	; 255
    1350:	e8 1a       	sub	r14, r24
    1352:	f8 0a       	sbc	r15, r24
    1354:	f0 92 4c 01 	sts	0x014C, r15	; 0x80014c <xTickCount+0x1>
    1358:	e0 92 4b 01 	sts	0x014B, r14	; 0x80014b <xTickCount>
    135c:	e1 14       	cp	r14, r1
    135e:	f1 04       	cpc	r15, r1
    1360:	b1 f4       	brne	.+44     	; 0x138e <xTaskIncrementTick+0x5e>
    1362:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <pxDelayedTaskList>
    1366:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <pxDelayedTaskList+0x1>
    136a:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <pxOverflowDelayedTaskList>
    136e:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <pxOverflowDelayedTaskList+0x1>
    1372:	30 93 64 01 	sts	0x0164, r19	; 0x800164 <pxDelayedTaskList+0x1>
    1376:	20 93 63 01 	sts	0x0163, r18	; 0x800163 <pxDelayedTaskList>
    137a:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <pxOverflowDelayedTaskList+0x1>
    137e:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <pxOverflowDelayedTaskList>
    1382:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <xNumOfOverflows>
    1386:	8f 5f       	subi	r24, 0xFF	; 255
    1388:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <xNumOfOverflows>
    138c:	c9 dd       	rcall	.-1134   	; 0xf20 <prvResetNextTaskUnblockTime>
    138e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <xNextTaskUnblockTime>
    1392:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <xNextTaskUnblockTime+0x1>
    1396:	e8 16       	cp	r14, r24
    1398:	f9 06       	cpc	r15, r25
    139a:	28 f4       	brcc	.+10     	; 0x13a6 <xTaskIncrementTick+0x76>
    139c:	d1 2c       	mov	r13, r1
    139e:	50 c0       	rjmp	.+160    	; 0x1440 <xTaskIncrementTick+0x110>
    13a0:	dd 24       	eor	r13, r13
    13a2:	d3 94       	inc	r13
    13a4:	01 c0       	rjmp	.+2      	; 0x13a8 <xTaskIncrementTick+0x78>
    13a6:	d1 2c       	mov	r13, r1
    13a8:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxDelayedTaskList>
    13ac:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxDelayedTaskList+0x1>
    13b0:	80 81       	ld	r24, Z
    13b2:	81 11       	cpse	r24, r1
    13b4:	07 c0       	rjmp	.+14     	; 0x13c4 <xTaskIncrementTick+0x94>
    13b6:	8f ef       	ldi	r24, 0xFF	; 255
    13b8:	9f ef       	ldi	r25, 0xFF	; 255
    13ba:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <xNextTaskUnblockTime+0x1>
    13be:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <xNextTaskUnblockTime>
    13c2:	3e c0       	rjmp	.+124    	; 0x1440 <xTaskIncrementTick+0x110>
    13c4:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxDelayedTaskList>
    13c8:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxDelayedTaskList+0x1>
    13cc:	05 80       	ldd	r0, Z+5	; 0x05
    13ce:	f6 81       	ldd	r31, Z+6	; 0x06
    13d0:	e0 2d       	mov	r30, r0
    13d2:	c6 81       	ldd	r28, Z+6	; 0x06
    13d4:	d7 81       	ldd	r29, Z+7	; 0x07
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	9b 81       	ldd	r25, Y+3	; 0x03
    13da:	e8 16       	cp	r14, r24
    13dc:	f9 06       	cpc	r15, r25
    13de:	28 f4       	brcc	.+10     	; 0x13ea <xTaskIncrementTick+0xba>
    13e0:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <xNextTaskUnblockTime+0x1>
    13e4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <xNextTaskUnblockTime>
    13e8:	2b c0       	rjmp	.+86     	; 0x1440 <xTaskIncrementTick+0x110>
    13ea:	8e 01       	movw	r16, r28
    13ec:	0e 5f       	subi	r16, 0xFE	; 254
    13ee:	1f 4f       	sbci	r17, 0xFF	; 255
    13f0:	c8 01       	movw	r24, r16
    13f2:	00 dc       	rcall	.-2048   	; 0xbf4 <uxListRemove>
    13f4:	8c 89       	ldd	r24, Y+20	; 0x14
    13f6:	9d 89       	ldd	r25, Y+21	; 0x15
    13f8:	89 2b       	or	r24, r25
    13fa:	19 f0       	breq	.+6      	; 0x1402 <xTaskIncrementTick+0xd2>
    13fc:	ce 01       	movw	r24, r28
    13fe:	0c 96       	adiw	r24, 0x0c	; 12
    1400:	f9 db       	rcall	.-2062   	; 0xbf4 <uxListRemove>
    1402:	8e 89       	ldd	r24, Y+22	; 0x16
    1404:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <uxTopReadyPriority>
    1408:	98 17       	cp	r25, r24
    140a:	10 f4       	brcc	.+4      	; 0x1410 <xTaskIncrementTick+0xe0>
    140c:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <uxTopReadyPriority>
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	9c 01       	movw	r18, r24
    1414:	22 0f       	add	r18, r18
    1416:	33 1f       	adc	r19, r19
    1418:	22 0f       	add	r18, r18
    141a:	33 1f       	adc	r19, r19
    141c:	22 0f       	add	r18, r18
    141e:	33 1f       	adc	r19, r19
    1420:	82 0f       	add	r24, r18
    1422:	93 1f       	adc	r25, r19
    1424:	b8 01       	movw	r22, r16
    1426:	89 58       	subi	r24, 0x89	; 137
    1428:	9e 4f       	sbci	r25, 0xFE	; 254
    142a:	92 db       	rcall	.-2268   	; 0xb50 <vListInsertEnd>
    142c:	9e 89       	ldd	r25, Y+22	; 0x16
    142e:	e0 91 97 02 	lds	r30, 0x0297	; 0x800297 <pxCurrentTCB>
    1432:	f0 91 98 02 	lds	r31, 0x0298	; 0x800298 <pxCurrentTCB+0x1>
    1436:	86 89       	ldd	r24, Z+22	; 0x16
    1438:	98 17       	cp	r25, r24
    143a:	08 f0       	brcs	.+2      	; 0x143e <xTaskIncrementTick+0x10e>
    143c:	b1 cf       	rjmp	.-158    	; 0x13a0 <xTaskIncrementTick+0x70>
    143e:	b4 cf       	rjmp	.-152    	; 0x13a8 <xTaskIncrementTick+0x78>
    1440:	e0 91 97 02 	lds	r30, 0x0297	; 0x800297 <pxCurrentTCB>
    1444:	f0 91 98 02 	lds	r31, 0x0298	; 0x800298 <pxCurrentTCB+0x1>
    1448:	86 89       	ldd	r24, Z+22	; 0x16
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	fc 01       	movw	r30, r24
    144e:	ee 0f       	add	r30, r30
    1450:	ff 1f       	adc	r31, r31
    1452:	ee 0f       	add	r30, r30
    1454:	ff 1f       	adc	r31, r31
    1456:	ee 0f       	add	r30, r30
    1458:	ff 1f       	adc	r31, r31
    145a:	8e 0f       	add	r24, r30
    145c:	9f 1f       	adc	r25, r31
    145e:	fc 01       	movw	r30, r24
    1460:	e9 58       	subi	r30, 0x89	; 137
    1462:	fe 4f       	sbci	r31, 0xFE	; 254
    1464:	80 81       	ld	r24, Z
    1466:	82 30       	cpi	r24, 0x02	; 2
    1468:	40 f4       	brcc	.+16     	; 0x147a <xTaskIncrementTick+0x14a>
    146a:	09 c0       	rjmp	.+18     	; 0x147e <xTaskIncrementTick+0x14e>
    146c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <uxPendedTicks>
    1470:	8f 5f       	subi	r24, 0xFF	; 255
    1472:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <uxPendedTicks>
    1476:	d1 2c       	mov	r13, r1
    1478:	02 c0       	rjmp	.+4      	; 0x147e <xTaskIncrementTick+0x14e>
    147a:	dd 24       	eor	r13, r13
    147c:	d3 94       	inc	r13
    147e:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <xYieldPending>
    1482:	88 23       	and	r24, r24
    1484:	11 f0       	breq	.+4      	; 0x148a <xTaskIncrementTick+0x15a>
    1486:	dd 24       	eor	r13, r13
    1488:	d3 94       	inc	r13
    148a:	8d 2d       	mov	r24, r13
    148c:	df 91       	pop	r29
    148e:	cf 91       	pop	r28
    1490:	1f 91       	pop	r17
    1492:	0f 91       	pop	r16
    1494:	ff 90       	pop	r15
    1496:	ef 90       	pop	r14
    1498:	df 90       	pop	r13
    149a:	08 95       	ret

0000149c <xTaskResumeAll>:
    149c:	0f 93       	push	r16
    149e:	1f 93       	push	r17
    14a0:	cf 93       	push	r28
    14a2:	df 93       	push	r29
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	f8 94       	cli
    14a8:	0f 92       	push	r0
    14aa:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <uxSchedulerSuspended>
    14ae:	81 50       	subi	r24, 0x01	; 1
    14b0:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <uxSchedulerSuspended>
    14b4:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <uxSchedulerSuspended>
    14b8:	81 11       	cpse	r24, r1
    14ba:	52 c0       	rjmp	.+164    	; 0x1560 <xTaskResumeAll+0xc4>
    14bc:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <uxCurrentNumberOfTasks>
    14c0:	81 11       	cpse	r24, r1
    14c2:	30 c0       	rjmp	.+96     	; 0x1524 <xTaskResumeAll+0x88>
    14c4:	50 c0       	rjmp	.+160    	; 0x1566 <xTaskResumeAll+0xca>
    14c6:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <xPendingReadyList+0x5>
    14ca:	f0 91 5e 01 	lds	r31, 0x015E	; 0x80015e <xPendingReadyList+0x6>
    14ce:	c6 81       	ldd	r28, Z+6	; 0x06
    14d0:	d7 81       	ldd	r29, Z+7	; 0x07
    14d2:	ce 01       	movw	r24, r28
    14d4:	0c 96       	adiw	r24, 0x0c	; 12
    14d6:	8e db       	rcall	.-2276   	; 0xbf4 <uxListRemove>
    14d8:	8e 01       	movw	r16, r28
    14da:	0e 5f       	subi	r16, 0xFE	; 254
    14dc:	1f 4f       	sbci	r17, 0xFF	; 255
    14de:	c8 01       	movw	r24, r16
    14e0:	89 db       	rcall	.-2286   	; 0xbf4 <uxListRemove>
    14e2:	8e 89       	ldd	r24, Y+22	; 0x16
    14e4:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <uxTopReadyPriority>
    14e8:	98 17       	cp	r25, r24
    14ea:	10 f4       	brcc	.+4      	; 0x14f0 <xTaskResumeAll+0x54>
    14ec:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <uxTopReadyPriority>
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	9c 01       	movw	r18, r24
    14f4:	22 0f       	add	r18, r18
    14f6:	33 1f       	adc	r19, r19
    14f8:	22 0f       	add	r18, r18
    14fa:	33 1f       	adc	r19, r19
    14fc:	22 0f       	add	r18, r18
    14fe:	33 1f       	adc	r19, r19
    1500:	82 0f       	add	r24, r18
    1502:	93 1f       	adc	r25, r19
    1504:	b8 01       	movw	r22, r16
    1506:	89 58       	subi	r24, 0x89	; 137
    1508:	9e 4f       	sbci	r25, 0xFE	; 254
    150a:	22 db       	rcall	.-2492   	; 0xb50 <vListInsertEnd>
    150c:	9e 89       	ldd	r25, Y+22	; 0x16
    150e:	e0 91 97 02 	lds	r30, 0x0297	; 0x800297 <pxCurrentTCB>
    1512:	f0 91 98 02 	lds	r31, 0x0298	; 0x800298 <pxCurrentTCB+0x1>
    1516:	86 89       	ldd	r24, Z+22	; 0x16
    1518:	98 17       	cp	r25, r24
    151a:	30 f0       	brcs	.+12     	; 0x1528 <xTaskResumeAll+0x8c>
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <xYieldPending>
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <xTaskResumeAll+0x8c>
    1524:	c0 e0       	ldi	r28, 0x00	; 0
    1526:	d0 e0       	ldi	r29, 0x00	; 0
    1528:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <xPendingReadyList>
    152c:	81 11       	cpse	r24, r1
    152e:	cb cf       	rjmp	.-106    	; 0x14c6 <xTaskResumeAll+0x2a>
    1530:	cd 2b       	or	r28, r29
    1532:	09 f0       	breq	.+2      	; 0x1536 <xTaskResumeAll+0x9a>
    1534:	f5 dc       	rcall	.-1558   	; 0xf20 <prvResetNextTaskUnblockTime>
    1536:	c0 91 48 01 	lds	r28, 0x0148	; 0x800148 <uxPendedTicks>
    153a:	cc 23       	and	r28, r28
    153c:	51 f0       	breq	.+20     	; 0x1552 <xTaskResumeAll+0xb6>
    153e:	f8 de       	rcall	.-528    	; 0x1330 <xTaskIncrementTick>
    1540:	88 23       	and	r24, r24
    1542:	19 f0       	breq	.+6      	; 0x154a <xTaskResumeAll+0xae>
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <xYieldPending>
    154a:	c1 50       	subi	r28, 0x01	; 1
    154c:	c1 f7       	brne	.-16     	; 0x153e <xTaskResumeAll+0xa2>
    154e:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <uxPendedTicks>
    1552:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <xYieldPending>
    1556:	88 23       	and	r24, r24
    1558:	29 f0       	breq	.+10     	; 0x1564 <xTaskResumeAll+0xc8>
    155a:	16 dc       	rcall	.-2004   	; 0xd88 <vPortYield>
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	03 c0       	rjmp	.+6      	; 0x1566 <xTaskResumeAll+0xca>
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	01 c0       	rjmp	.+2      	; 0x1566 <xTaskResumeAll+0xca>
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	0f 90       	pop	r0
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	0f 91       	pop	r16
    1572:	08 95       	ret

00001574 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    157a:	89 2b       	or	r24, r25
    157c:	31 f0       	breq	.+12     	; 0x158a <vTaskDelay+0x16>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    157e:	d2 de       	rcall	.-604    	; 0x1324 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    1580:	60 e0       	ldi	r22, 0x00	; 0
    1582:	ce 01       	movw	r24, r28
			}
			xAlreadyYielded = xTaskResumeAll();
    1584:	17 de       	rcall	.-978    	; 0x11b4 <prvAddCurrentTaskToDelayedList>
    1586:	8a df       	rcall	.-236    	; 0x149c <xTaskResumeAll>
    1588:	01 c0       	rjmp	.+2      	; 0x158c <vTaskDelay+0x18>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	81 11       	cpse	r24, r1
		{
			portYIELD_WITHIN_API();
    158e:	01 c0       	rjmp	.+2      	; 0x1592 <vTaskDelay+0x1e>
    1590:	fb db       	rcall	.-2058   	; 0xd88 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	08 95       	ret

00001598 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1598:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <uxSchedulerSuspended>
    159c:	88 23       	and	r24, r24
    159e:	21 f0       	breq	.+8      	; 0x15a8 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <xYieldPending>
    15a6:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
    15a8:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <xYieldPending>
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    15ac:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <uxTopReadyPriority>
    15b0:	01 c0       	rjmp	.+2      	; 0x15b4 <vTaskSwitchContext+0x1c>
    15b2:	21 50       	subi	r18, 0x01	; 1
    15b4:	82 2f       	mov	r24, r18
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	fc 01       	movw	r30, r24
    15ba:	ee 0f       	add	r30, r30
    15bc:	ff 1f       	adc	r31, r31
    15be:	ee 0f       	add	r30, r30
    15c0:	ff 1f       	adc	r31, r31
    15c2:	ee 0f       	add	r30, r30
    15c4:	ff 1f       	adc	r31, r31
    15c6:	e8 0f       	add	r30, r24
    15c8:	f9 1f       	adc	r31, r25
    15ca:	e9 58       	subi	r30, 0x89	; 137
    15cc:	fe 4f       	sbci	r31, 0xFE	; 254
    15ce:	30 81       	ld	r19, Z
    15d0:	33 23       	and	r19, r19
    15d2:	79 f3       	breq	.-34     	; 0x15b2 <vTaskSwitchContext+0x1a>
    15d4:	ac 01       	movw	r20, r24
    15d6:	44 0f       	add	r20, r20
    15d8:	55 1f       	adc	r21, r21
    15da:	44 0f       	add	r20, r20
    15dc:	55 1f       	adc	r21, r21
    15de:	44 0f       	add	r20, r20
    15e0:	55 1f       	adc	r21, r21
    15e2:	48 0f       	add	r20, r24
    15e4:	59 1f       	adc	r21, r25
    15e6:	df 01       	movw	r26, r30
    15e8:	01 80       	ldd	r0, Z+1	; 0x01
    15ea:	f2 81       	ldd	r31, Z+2	; 0x02
    15ec:	e0 2d       	mov	r30, r0
    15ee:	02 80       	ldd	r0, Z+2	; 0x02
    15f0:	f3 81       	ldd	r31, Z+3	; 0x03
    15f2:	e0 2d       	mov	r30, r0
    15f4:	12 96       	adiw	r26, 0x02	; 2
    15f6:	fc 93       	st	X, r31
    15f8:	ee 93       	st	-X, r30
    15fa:	11 97       	sbiw	r26, 0x01	; 1
    15fc:	46 58       	subi	r20, 0x86	; 134
    15fe:	5e 4f       	sbci	r21, 0xFE	; 254
    1600:	e4 17       	cp	r30, r20
    1602:	f5 07       	cpc	r31, r21
    1604:	29 f4       	brne	.+10     	; 0x1610 <vTaskSwitchContext+0x78>
    1606:	42 81       	ldd	r20, Z+2	; 0x02
    1608:	53 81       	ldd	r21, Z+3	; 0x03
    160a:	fd 01       	movw	r30, r26
    160c:	52 83       	std	Z+2, r21	; 0x02
    160e:	41 83       	std	Z+1, r20	; 0x01
    1610:	fc 01       	movw	r30, r24
    1612:	ee 0f       	add	r30, r30
    1614:	ff 1f       	adc	r31, r31
    1616:	ee 0f       	add	r30, r30
    1618:	ff 1f       	adc	r31, r31
    161a:	ee 0f       	add	r30, r30
    161c:	ff 1f       	adc	r31, r31
    161e:	8e 0f       	add	r24, r30
    1620:	9f 1f       	adc	r25, r31
    1622:	fc 01       	movw	r30, r24
    1624:	e9 58       	subi	r30, 0x89	; 137
    1626:	fe 4f       	sbci	r31, 0xFE	; 254
    1628:	01 80       	ldd	r0, Z+1	; 0x01
    162a:	f2 81       	ldd	r31, Z+2	; 0x02
    162c:	e0 2d       	mov	r30, r0
    162e:	86 81       	ldd	r24, Z+6	; 0x06
    1630:	97 81       	ldd	r25, Z+7	; 0x07
    1632:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <pxCurrentTCB+0x1>
    1636:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <pxCurrentTCB>
    163a:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <uxTopReadyPriority>
    163e:	08 95       	ret

00001640 <__tablejump2__>:
    1640:	ee 0f       	add	r30, r30
    1642:	ff 1f       	adc	r31, r31
    1644:	00 24       	eor	r0, r0
    1646:	00 1c       	adc	r0, r0
    1648:	0b be       	out	0x3b, r0	; 59
    164a:	07 90       	elpm	r0, Z+
    164c:	f6 91       	elpm	r31, Z
    164e:	e0 2d       	mov	r30, r0
    1650:	09 94       	ijmp

00001652 <malloc>:
    1652:	0f 93       	push	r16
    1654:	1f 93       	push	r17
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	82 30       	cpi	r24, 0x02	; 2
    165c:	91 05       	cpc	r25, r1
    165e:	10 f4       	brcc	.+4      	; 0x1664 <malloc+0x12>
    1660:	82 e0       	ldi	r24, 0x02	; 2
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	e0 91 92 04 	lds	r30, 0x0492	; 0x800492 <__flp>
    1668:	f0 91 93 04 	lds	r31, 0x0493	; 0x800493 <__flp+0x1>
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	a0 e0       	ldi	r26, 0x00	; 0
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	30 97       	sbiw	r30, 0x00	; 0
    1676:	19 f1       	breq	.+70     	; 0x16be <malloc+0x6c>
    1678:	40 81       	ld	r20, Z
    167a:	51 81       	ldd	r21, Z+1	; 0x01
    167c:	02 81       	ldd	r16, Z+2	; 0x02
    167e:	13 81       	ldd	r17, Z+3	; 0x03
    1680:	48 17       	cp	r20, r24
    1682:	59 07       	cpc	r21, r25
    1684:	c8 f0       	brcs	.+50     	; 0x16b8 <malloc+0x66>
    1686:	84 17       	cp	r24, r20
    1688:	95 07       	cpc	r25, r21
    168a:	69 f4       	brne	.+26     	; 0x16a6 <malloc+0x54>
    168c:	10 97       	sbiw	r26, 0x00	; 0
    168e:	31 f0       	breq	.+12     	; 0x169c <malloc+0x4a>
    1690:	12 96       	adiw	r26, 0x02	; 2
    1692:	0c 93       	st	X, r16
    1694:	12 97       	sbiw	r26, 0x02	; 2
    1696:	13 96       	adiw	r26, 0x03	; 3
    1698:	1c 93       	st	X, r17
    169a:	27 c0       	rjmp	.+78     	; 0x16ea <malloc+0x98>
    169c:	00 93 92 04 	sts	0x0492, r16	; 0x800492 <__flp>
    16a0:	10 93 93 04 	sts	0x0493, r17	; 0x800493 <__flp+0x1>
    16a4:	22 c0       	rjmp	.+68     	; 0x16ea <malloc+0x98>
    16a6:	21 15       	cp	r18, r1
    16a8:	31 05       	cpc	r19, r1
    16aa:	19 f0       	breq	.+6      	; 0x16b2 <malloc+0x60>
    16ac:	42 17       	cp	r20, r18
    16ae:	53 07       	cpc	r21, r19
    16b0:	18 f4       	brcc	.+6      	; 0x16b8 <malloc+0x66>
    16b2:	9a 01       	movw	r18, r20
    16b4:	bd 01       	movw	r22, r26
    16b6:	ef 01       	movw	r28, r30
    16b8:	df 01       	movw	r26, r30
    16ba:	f8 01       	movw	r30, r16
    16bc:	db cf       	rjmp	.-74     	; 0x1674 <malloc+0x22>
    16be:	21 15       	cp	r18, r1
    16c0:	31 05       	cpc	r19, r1
    16c2:	f9 f0       	breq	.+62     	; 0x1702 <malloc+0xb0>
    16c4:	28 1b       	sub	r18, r24
    16c6:	39 0b       	sbc	r19, r25
    16c8:	24 30       	cpi	r18, 0x04	; 4
    16ca:	31 05       	cpc	r19, r1
    16cc:	80 f4       	brcc	.+32     	; 0x16ee <malloc+0x9c>
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	9b 81       	ldd	r25, Y+3	; 0x03
    16d2:	61 15       	cp	r22, r1
    16d4:	71 05       	cpc	r23, r1
    16d6:	21 f0       	breq	.+8      	; 0x16e0 <malloc+0x8e>
    16d8:	fb 01       	movw	r30, r22
    16da:	93 83       	std	Z+3, r25	; 0x03
    16dc:	82 83       	std	Z+2, r24	; 0x02
    16de:	04 c0       	rjmp	.+8      	; 0x16e8 <malloc+0x96>
    16e0:	90 93 93 04 	sts	0x0493, r25	; 0x800493 <__flp+0x1>
    16e4:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <__flp>
    16e8:	fe 01       	movw	r30, r28
    16ea:	32 96       	adiw	r30, 0x02	; 2
    16ec:	44 c0       	rjmp	.+136    	; 0x1776 <malloc+0x124>
    16ee:	fe 01       	movw	r30, r28
    16f0:	e2 0f       	add	r30, r18
    16f2:	f3 1f       	adc	r31, r19
    16f4:	81 93       	st	Z+, r24
    16f6:	91 93       	st	Z+, r25
    16f8:	22 50       	subi	r18, 0x02	; 2
    16fa:	31 09       	sbc	r19, r1
    16fc:	39 83       	std	Y+1, r19	; 0x01
    16fe:	28 83       	st	Y, r18
    1700:	3a c0       	rjmp	.+116    	; 0x1776 <malloc+0x124>
    1702:	20 91 90 04 	lds	r18, 0x0490	; 0x800490 <__brkval>
    1706:	30 91 91 04 	lds	r19, 0x0491	; 0x800491 <__brkval+0x1>
    170a:	23 2b       	or	r18, r19
    170c:	41 f4       	brne	.+16     	; 0x171e <malloc+0xcc>
    170e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1712:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1716:	30 93 91 04 	sts	0x0491, r19	; 0x800491 <__brkval+0x1>
    171a:	20 93 90 04 	sts	0x0490, r18	; 0x800490 <__brkval>
    171e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1722:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1726:	21 15       	cp	r18, r1
    1728:	31 05       	cpc	r19, r1
    172a:	41 f4       	brne	.+16     	; 0x173c <malloc+0xea>
    172c:	2d b7       	in	r18, 0x3d	; 61
    172e:	3e b7       	in	r19, 0x3e	; 62
    1730:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1734:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1738:	24 1b       	sub	r18, r20
    173a:	35 0b       	sbc	r19, r21
    173c:	e0 91 90 04 	lds	r30, 0x0490	; 0x800490 <__brkval>
    1740:	f0 91 91 04 	lds	r31, 0x0491	; 0x800491 <__brkval+0x1>
    1744:	e2 17       	cp	r30, r18
    1746:	f3 07       	cpc	r31, r19
    1748:	a0 f4       	brcc	.+40     	; 0x1772 <malloc+0x120>
    174a:	2e 1b       	sub	r18, r30
    174c:	3f 0b       	sbc	r19, r31
    174e:	28 17       	cp	r18, r24
    1750:	39 07       	cpc	r19, r25
    1752:	78 f0       	brcs	.+30     	; 0x1772 <malloc+0x120>
    1754:	ac 01       	movw	r20, r24
    1756:	4e 5f       	subi	r20, 0xFE	; 254
    1758:	5f 4f       	sbci	r21, 0xFF	; 255
    175a:	24 17       	cp	r18, r20
    175c:	35 07       	cpc	r19, r21
    175e:	48 f0       	brcs	.+18     	; 0x1772 <malloc+0x120>
    1760:	4e 0f       	add	r20, r30
    1762:	5f 1f       	adc	r21, r31
    1764:	50 93 91 04 	sts	0x0491, r21	; 0x800491 <__brkval+0x1>
    1768:	40 93 90 04 	sts	0x0490, r20	; 0x800490 <__brkval>
    176c:	81 93       	st	Z+, r24
    176e:	91 93       	st	Z+, r25
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <malloc+0x124>
    1772:	e0 e0       	ldi	r30, 0x00	; 0
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	cf 01       	movw	r24, r30
    1778:	df 91       	pop	r29
    177a:	cf 91       	pop	r28
    177c:	1f 91       	pop	r17
    177e:	0f 91       	pop	r16
    1780:	08 95       	ret

00001782 <free>:
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	09 f4       	brne	.+2      	; 0x178c <free+0xa>
    178a:	81 c0       	rjmp	.+258    	; 0x188e <free+0x10c>
    178c:	fc 01       	movw	r30, r24
    178e:	32 97       	sbiw	r30, 0x02	; 2
    1790:	13 82       	std	Z+3, r1	; 0x03
    1792:	12 82       	std	Z+2, r1	; 0x02
    1794:	a0 91 92 04 	lds	r26, 0x0492	; 0x800492 <__flp>
    1798:	b0 91 93 04 	lds	r27, 0x0493	; 0x800493 <__flp+0x1>
    179c:	10 97       	sbiw	r26, 0x00	; 0
    179e:	81 f4       	brne	.+32     	; 0x17c0 <free+0x3e>
    17a0:	20 81       	ld	r18, Z
    17a2:	31 81       	ldd	r19, Z+1	; 0x01
    17a4:	82 0f       	add	r24, r18
    17a6:	93 1f       	adc	r25, r19
    17a8:	20 91 90 04 	lds	r18, 0x0490	; 0x800490 <__brkval>
    17ac:	30 91 91 04 	lds	r19, 0x0491	; 0x800491 <__brkval+0x1>
    17b0:	28 17       	cp	r18, r24
    17b2:	39 07       	cpc	r19, r25
    17b4:	51 f5       	brne	.+84     	; 0x180a <free+0x88>
    17b6:	f0 93 91 04 	sts	0x0491, r31	; 0x800491 <__brkval+0x1>
    17ba:	e0 93 90 04 	sts	0x0490, r30	; 0x800490 <__brkval>
    17be:	67 c0       	rjmp	.+206    	; 0x188e <free+0x10c>
    17c0:	ed 01       	movw	r28, r26
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	ce 17       	cp	r28, r30
    17c8:	df 07       	cpc	r29, r31
    17ca:	40 f4       	brcc	.+16     	; 0x17dc <free+0x5a>
    17cc:	4a 81       	ldd	r20, Y+2	; 0x02
    17ce:	5b 81       	ldd	r21, Y+3	; 0x03
    17d0:	9e 01       	movw	r18, r28
    17d2:	41 15       	cp	r20, r1
    17d4:	51 05       	cpc	r21, r1
    17d6:	f1 f0       	breq	.+60     	; 0x1814 <free+0x92>
    17d8:	ea 01       	movw	r28, r20
    17da:	f5 cf       	rjmp	.-22     	; 0x17c6 <free+0x44>
    17dc:	d3 83       	std	Z+3, r29	; 0x03
    17de:	c2 83       	std	Z+2, r28	; 0x02
    17e0:	40 81       	ld	r20, Z
    17e2:	51 81       	ldd	r21, Z+1	; 0x01
    17e4:	84 0f       	add	r24, r20
    17e6:	95 1f       	adc	r25, r21
    17e8:	c8 17       	cp	r28, r24
    17ea:	d9 07       	cpc	r29, r25
    17ec:	59 f4       	brne	.+22     	; 0x1804 <free+0x82>
    17ee:	88 81       	ld	r24, Y
    17f0:	99 81       	ldd	r25, Y+1	; 0x01
    17f2:	84 0f       	add	r24, r20
    17f4:	95 1f       	adc	r25, r21
    17f6:	02 96       	adiw	r24, 0x02	; 2
    17f8:	91 83       	std	Z+1, r25	; 0x01
    17fa:	80 83       	st	Z, r24
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1800:	93 83       	std	Z+3, r25	; 0x03
    1802:	82 83       	std	Z+2, r24	; 0x02
    1804:	21 15       	cp	r18, r1
    1806:	31 05       	cpc	r19, r1
    1808:	29 f4       	brne	.+10     	; 0x1814 <free+0x92>
    180a:	f0 93 93 04 	sts	0x0493, r31	; 0x800493 <__flp+0x1>
    180e:	e0 93 92 04 	sts	0x0492, r30	; 0x800492 <__flp>
    1812:	3d c0       	rjmp	.+122    	; 0x188e <free+0x10c>
    1814:	e9 01       	movw	r28, r18
    1816:	fb 83       	std	Y+3, r31	; 0x03
    1818:	ea 83       	std	Y+2, r30	; 0x02
    181a:	49 91       	ld	r20, Y+
    181c:	59 91       	ld	r21, Y+
    181e:	c4 0f       	add	r28, r20
    1820:	d5 1f       	adc	r29, r21
    1822:	ec 17       	cp	r30, r28
    1824:	fd 07       	cpc	r31, r29
    1826:	61 f4       	brne	.+24     	; 0x1840 <free+0xbe>
    1828:	80 81       	ld	r24, Z
    182a:	91 81       	ldd	r25, Z+1	; 0x01
    182c:	84 0f       	add	r24, r20
    182e:	95 1f       	adc	r25, r21
    1830:	02 96       	adiw	r24, 0x02	; 2
    1832:	e9 01       	movw	r28, r18
    1834:	99 83       	std	Y+1, r25	; 0x01
    1836:	88 83       	st	Y, r24
    1838:	82 81       	ldd	r24, Z+2	; 0x02
    183a:	93 81       	ldd	r25, Z+3	; 0x03
    183c:	9b 83       	std	Y+3, r25	; 0x03
    183e:	8a 83       	std	Y+2, r24	; 0x02
    1840:	e0 e0       	ldi	r30, 0x00	; 0
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	12 96       	adiw	r26, 0x02	; 2
    1846:	8d 91       	ld	r24, X+
    1848:	9c 91       	ld	r25, X
    184a:	13 97       	sbiw	r26, 0x03	; 3
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	19 f0       	breq	.+6      	; 0x1856 <free+0xd4>
    1850:	fd 01       	movw	r30, r26
    1852:	dc 01       	movw	r26, r24
    1854:	f7 cf       	rjmp	.-18     	; 0x1844 <free+0xc2>
    1856:	8d 91       	ld	r24, X+
    1858:	9c 91       	ld	r25, X
    185a:	11 97       	sbiw	r26, 0x01	; 1
    185c:	9d 01       	movw	r18, r26
    185e:	2e 5f       	subi	r18, 0xFE	; 254
    1860:	3f 4f       	sbci	r19, 0xFF	; 255
    1862:	82 0f       	add	r24, r18
    1864:	93 1f       	adc	r25, r19
    1866:	20 91 90 04 	lds	r18, 0x0490	; 0x800490 <__brkval>
    186a:	30 91 91 04 	lds	r19, 0x0491	; 0x800491 <__brkval+0x1>
    186e:	28 17       	cp	r18, r24
    1870:	39 07       	cpc	r19, r25
    1872:	69 f4       	brne	.+26     	; 0x188e <free+0x10c>
    1874:	30 97       	sbiw	r30, 0x00	; 0
    1876:	29 f4       	brne	.+10     	; 0x1882 <free+0x100>
    1878:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <__flp+0x1>
    187c:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <__flp>
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <free+0x104>
    1882:	13 82       	std	Z+3, r1	; 0x03
    1884:	12 82       	std	Z+2, r1	; 0x02
    1886:	b0 93 91 04 	sts	0x0491, r27	; 0x800491 <__brkval+0x1>
    188a:	a0 93 90 04 	sts	0x0490, r26	; 0x800490 <__brkval>
    188e:	df 91       	pop	r29
    1890:	cf 91       	pop	r28
    1892:	08 95       	ret

00001894 <_exit>:
    1894:	f8 94       	cli

00001896 <__stop_program>:
    1896:	ff cf       	rjmp	.-2      	; 0x1896 <__stop_program>
