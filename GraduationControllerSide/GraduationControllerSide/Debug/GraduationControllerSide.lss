
GraduationControllerSide.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  000028ca  0000295e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000307  00800172  00800172  000029d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000029d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002a00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000648  00000000  00000000  00002a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007987  00000000  00000000  00003088  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001de4  00000000  00000000  0000aa0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000421f  00000000  00000000  0000c7f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001260  00000000  00000000  00010a14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000027f2  00000000  00000000  00011c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006ff5  00000000  00000000  00014466  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000578  00000000  00000000  0001b45b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	84 c0       	rjmp	.+264    	; 0x10a <__ctors_end>
       2:	00 00       	nop
       4:	e6 c6       	rjmp	.+3532   	; 0xdd2 <__vector_1>
       6:	00 00       	nop
       8:	0f c7       	rjmp	.+3614   	; 0xe28 <__vector_2>
       a:	00 00       	nop
       c:	38 c7       	rjmp	.+3696   	; 0xe7e <__vector_3>
       e:	00 00       	nop
      10:	61 c7       	rjmp	.+3778   	; 0xed4 <__vector_4>
      12:	00 00       	nop
      14:	8a c7       	rjmp	.+3860   	; 0xf2a <__vector_5>
      16:	00 00       	nop
      18:	b3 c7       	rjmp	.+3942   	; 0xf80 <__vector_6>
      1a:	00 00       	nop
      1c:	dc c7       	rjmp	.+4024   	; 0xfd6 <__vector_7>
      1e:	00 00       	nop
      20:	0c 94 16 08 	jmp	0x102c	; 0x102c <__vector_8>
      24:	90 c0       	rjmp	.+288    	; 0x146 <__bad_interrupt>
      26:	00 00       	nop
      28:	8e c0       	rjmp	.+284    	; 0x146 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8c c0       	rjmp	.+280    	; 0x146 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 3f 0c 	jmp	0x187e	; 0x187e <__vector_12>
      34:	88 c0       	rjmp	.+272    	; 0x146 <__bad_interrupt>
      36:	00 00       	nop
      38:	86 c0       	rjmp	.+268    	; 0x146 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	84 c0       	rjmp	.+264    	; 0x146 <__bad_interrupt>
      3e:	00 00       	nop
      40:	82 c0       	rjmp	.+260    	; 0x146 <__bad_interrupt>
      42:	00 00       	nop
      44:	80 c0       	rjmp	.+256    	; 0x146 <__bad_interrupt>
      46:	00 00       	nop
      48:	7e c0       	rjmp	.+252    	; 0x146 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7c c0       	rjmp	.+248    	; 0x146 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7a c0       	rjmp	.+244    	; 0x146 <__bad_interrupt>
      52:	00 00       	nop
      54:	78 c0       	rjmp	.+240    	; 0x146 <__bad_interrupt>
      56:	00 00       	nop
      58:	76 c0       	rjmp	.+236    	; 0x146 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	74 c0       	rjmp	.+232    	; 0x146 <__bad_interrupt>
      5e:	00 00       	nop
      60:	72 c0       	rjmp	.+228    	; 0x146 <__bad_interrupt>
      62:	00 00       	nop
      64:	70 c0       	rjmp	.+224    	; 0x146 <__bad_interrupt>
      66:	00 00       	nop
      68:	6e c0       	rjmp	.+220    	; 0x146 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6c c0       	rjmp	.+216    	; 0x146 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6a c0       	rjmp	.+212    	; 0x146 <__bad_interrupt>
      72:	00 00       	nop
      74:	68 c0       	rjmp	.+208    	; 0x146 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 85 0e 	jmp	0x1d0a	; 0x1d0a <__vector_30>
      7c:	64 c0       	rjmp	.+200    	; 0x146 <__bad_interrupt>
      7e:	00 00       	nop
      80:	62 c0       	rjmp	.+196    	; 0x146 <__bad_interrupt>
      82:	00 00       	nop
      84:	60 c0       	rjmp	.+192    	; 0x146 <__bad_interrupt>
      86:	00 00       	nop
      88:	5e c0       	rjmp	.+188    	; 0x146 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dc 03       	fmulsu	r21, r20
      8e:	ea 03       	fmulsu	r22, r18
      90:	f8 03       	fmulsu	r23, r16
      92:	06 04       	cpc	r0, r6
      94:	14 04       	cpc	r1, r4
      96:	22 04       	cpc	r2, r2
      98:	32 04       	cpc	r3, r2
      9a:	4d 04       	cpc	r4, r13
      9c:	5a 04       	cpc	r5, r10
      9e:	67 04       	cpc	r6, r7
      a0:	74 04       	cpc	r7, r4
      a2:	81 04       	cpc	r8, r1
      a4:	8e 04       	cpc	r8, r14
      a6:	9d 04       	cpc	r9, r13
      a8:	c2 04       	cpc	r12, r2
      aa:	d0 04       	cpc	r13, r0
      ac:	de 04       	cpc	r13, r14
      ae:	ec 04       	cpc	r14, r12
      b0:	fa 04       	cpc	r15, r10
      b2:	08 05       	cpc	r16, r8
      b4:	18 05       	cpc	r17, r8
      b6:	33 05       	cpc	r19, r3
      b8:	40 05       	cpc	r20, r0
      ba:	4d 05       	cpc	r20, r13
      bc:	5a 05       	cpc	r21, r10
      be:	67 05       	cpc	r22, r7
      c0:	74 05       	cpc	r23, r4
      c2:	83 05       	cpc	r24, r3
      c4:	a8 05       	cpc	r26, r8
      c6:	b6 05       	cpc	r27, r6
      c8:	c4 05       	cpc	r28, r4
      ca:	d2 05       	cpc	r29, r2
      cc:	e0 05       	cpc	r30, r0
      ce:	ee 05       	cpc	r30, r14
      d0:	fe 05       	cpc	r31, r14
      d2:	19 06       	cpc	r1, r25
      d4:	26 06       	cpc	r2, r22
      d6:	33 06       	cpc	r3, r19
      d8:	40 06       	cpc	r4, r16
      da:	4d 06       	cpc	r4, r29
      dc:	5a 06       	cpc	r5, r26
      de:	69 06       	cpc	r6, r25
      e0:	81 06       	cpc	r8, r17
      e2:	83 06       	cpc	r8, r19
      e4:	85 06       	cpc	r8, r21
      e6:	87 06       	cpc	r8, r23
      e8:	89 06       	cpc	r8, r25
      ea:	8b 06       	cpc	r8, r27
      ec:	8e 06       	cpc	r8, r30
      ee:	9a 06       	cpc	r9, r26
      f0:	9c 06       	cpc	r9, r28
      f2:	9e 06       	cpc	r9, r30
      f4:	a0 06       	cpc	r10, r16
      f6:	a2 06       	cpc	r10, r18
      f8:	a4 06       	cpc	r10, r20
      fa:	a7 06       	cpc	r10, r23
      fc:	b4 06       	cpc	r11, r20
      fe:	bb 06       	cpc	r11, r27
     100:	c2 06       	cpc	r12, r18
     102:	c9 06       	cpc	r12, r25
     104:	d0 06       	cpc	r13, r16
     106:	d7 06       	cpc	r13, r23
     108:	e0 06       	cpc	r14, r16

0000010a <__ctors_end>:
     10a:	11 24       	eor	r1, r1
     10c:	1f be       	out	0x3f, r1	; 63
     10e:	cf ef       	ldi	r28, 0xFF	; 255
     110:	d0 e1       	ldi	r29, 0x10	; 16
     112:	de bf       	out	0x3e, r29	; 62
     114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_copy_data>:
     116:	11 e0       	ldi	r17, 0x01	; 1
     118:	a0 e0       	ldi	r26, 0x00	; 0
     11a:	b1 e0       	ldi	r27, 0x01	; 1
     11c:	ea ec       	ldi	r30, 0xCA	; 202
     11e:	f8 e2       	ldi	r31, 0x28	; 40
     120:	00 e0       	ldi	r16, 0x00	; 0
     122:	0b bf       	out	0x3b, r16	; 59
     124:	02 c0       	rjmp	.+4      	; 0x12a <__do_copy_data+0x14>
     126:	07 90       	elpm	r0, Z+
     128:	0d 92       	st	X+, r0
     12a:	a2 37       	cpi	r26, 0x72	; 114
     12c:	b1 07       	cpc	r27, r17
     12e:	d9 f7       	brne	.-10     	; 0x126 <__do_copy_data+0x10>

00000130 <__do_clear_bss>:
     130:	24 e0       	ldi	r18, 0x04	; 4
     132:	a2 e7       	ldi	r26, 0x72	; 114
     134:	b1 e0       	ldi	r27, 0x01	; 1
     136:	01 c0       	rjmp	.+2      	; 0x13a <.do_clear_bss_start>

00000138 <.do_clear_bss_loop>:
     138:	1d 92       	st	X+, r1

0000013a <.do_clear_bss_start>:
     13a:	a9 37       	cpi	r26, 0x79	; 121
     13c:	b2 07       	cpc	r27, r18
     13e:	e1 f7       	brne	.-8      	; 0x138 <.do_clear_bss_loop>
     140:	22 d3       	rcall	.+1604   	; 0x786 <main>
     142:	0c 94 63 14 	jmp	0x28c6	; 0x28c6 <_exit>

00000146 <__bad_interrupt>:
     146:	5c cf       	rjmp	.-328    	; 0x0 <__vectors>

00000148 <ESP01_Init>:
#include "ESP01.h"


void ESP01_Init()
{
	UART1_Init();
     148:	0e 94 9d 09 	call	0x133a	; 0x133a <UART1_Init>
	result = 0;
     14c:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <result>
	esp_buff_len = 0;
     150:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <esp_buff_len>
	memset(esp_buff, 0, 100);
     154:	84 e6       	ldi	r24, 0x64	; 100
     156:	e5 e1       	ldi	r30, 0x15	; 21
     158:	f2 e0       	ldi	r31, 0x02	; 2
     15a:	df 01       	movw	r26, r30
     15c:	1d 92       	st	X+, r1
     15e:	8a 95       	dec	r24
     160:	e9 f7       	brne	.-6      	; 0x15c <ESP01_Init+0x14>
     162:	08 95       	ret

00000164 <ESP01_ResetBuffer>:
	return result;
}

void ESP01_ResetBuffer()
{
	memset(esp_buff, 0, esp_buff_len);
     164:	40 91 7a 02 	lds	r20, 0x027A	; 0x80027a <esp_buff_len>
     168:	50 e0       	ldi	r21, 0x00	; 0
     16a:	60 e0       	ldi	r22, 0x00	; 0
     16c:	70 e0       	ldi	r23, 0x00	; 0
     16e:	85 e1       	ldi	r24, 0x15	; 21
     170:	92 e0       	ldi	r25, 0x02	; 2
     172:	0e 94 33 14 	call	0x2866	; 0x2866 <memset>
	esp_buff_len = 0;
     176:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <esp_buff_len>
     17a:	08 95       	ret

0000017c <ESP01_CheckConnection>:
	memset(esp_buff, 0, 100);
}

u_int8 ESP01_CheckConnection()
{	
	if(find_string(esp_buff, "OK") == 1)
     17c:	6a e2       	ldi	r22, 0x2A	; 42
     17e:	71 e0       	ldi	r23, 0x01	; 1
     180:	85 e1       	ldi	r24, 0x15	; 21
     182:	92 e0       	ldi	r25, 0x02	; 2
     184:	97 d2       	rcall	.+1326   	; 0x6b4 <find_string>
     186:	81 30       	cpi	r24, 0x01	; 1
     188:	21 f4       	brne	.+8      	; 0x192 <ESP01_CheckConnection+0x16>
	{
		result = 1;
     18a:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <result>
		ESP01_ResetBuffer();
     18e:	ea df       	rcall	.-44     	; 0x164 <ESP01_ResetBuffer>
     190:	0a c0       	rjmp	.+20     	; 0x1a6 <ESP01_CheckConnection+0x2a>
	}
	else if(find_string(esp_buff, "ERROR") == 1)
     192:	6d e2       	ldi	r22, 0x2D	; 45
     194:	71 e0       	ldi	r23, 0x01	; 1
     196:	85 e1       	ldi	r24, 0x15	; 21
     198:	92 e0       	ldi	r25, 0x02	; 2
     19a:	8c d2       	rcall	.+1304   	; 0x6b4 <find_string>
     19c:	81 30       	cpi	r24, 0x01	; 1
     19e:	19 f4       	brne	.+6      	; 0x1a6 <ESP01_CheckConnection+0x2a>
	{
		result = 0;
     1a0:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <result>
		ESP01_ResetBuffer();
     1a4:	df df       	rcall	.-66     	; 0x164 <ESP01_ResetBuffer>
     1a6:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <result>
	}
	
	return result;
}
     1aa:	08 95       	ret

000001ac <GPS_Init>:
#include "GPS.h"

void GPS_Init()
{
	UART0_Init();
     1ac:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <UART0_Init>
	gps_buff_len = 0;
     1b0:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <gps_buff_len>
	memset(gps_buff, 0, 500);
     1b4:	84 ef       	ldi	r24, 0xF4	; 244
     1b6:	91 e0       	ldi	r25, 0x01	; 1
     1b8:	ec e7       	ldi	r30, 0x7C	; 124
     1ba:	f2 e0       	ldi	r31, 0x02	; 2
     1bc:	df 01       	movw	r26, r30
     1be:	9c 01       	movw	r18, r24
     1c0:	1d 92       	st	X+, r1
     1c2:	21 50       	subi	r18, 0x01	; 1
     1c4:	30 40       	sbci	r19, 0x00	; 0
     1c6:	e1 f7       	brne	.-8      	; 0x1c0 <GPS_Init+0x14>
     1c8:	08 95       	ret

000001ca <getGPSLocation>:
}

void getGPSLocation()
{
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
	gps_buff[gps_buff_len] = UART0_Receive();
     1ce:	c0 91 70 04 	lds	r28, 0x0470	; 0x800470 <gps_buff_len>
     1d2:	d0 e0       	ldi	r29, 0x00	; 0
     1d4:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <UART0_Receive>
     1d8:	c4 58       	subi	r28, 0x84	; 132
     1da:	dd 4f       	sbci	r29, 0xFD	; 253
     1dc:	88 83       	st	Y, r24
	gps_buff_len++;
     1de:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <gps_buff_len>
     1e2:	8f 5f       	subi	r24, 0xFF	; 255
     1e4:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <gps_buff_len>
}
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
     1ec:	08 95       	ret

000001ee <GPS_Buffer_Reset>:

void GPS_Buffer_Reset()
{
	memset(gps_buff, 0, gps_buff_len);
     1ee:	40 91 70 04 	lds	r20, 0x0470	; 0x800470 <gps_buff_len>
     1f2:	50 e0       	ldi	r21, 0x00	; 0
     1f4:	60 e0       	ldi	r22, 0x00	; 0
     1f6:	70 e0       	ldi	r23, 0x00	; 0
     1f8:	8c e7       	ldi	r24, 0x7C	; 124
     1fa:	92 e0       	ldi	r25, 0x02	; 2
     1fc:	0e 94 33 14 	call	0x2866	; 0x2866 <memset>
	gps_buff_len = 0;
     200:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <gps_buff_len>
     204:	08 95       	ret

00000206 <Enable>:
	}
}

void Enable()
{
	DIO_WriteChannel(LCD_EN, STD_HIGH);
     206:	61 e0       	ldi	r22, 0x01	; 1
     208:	82 e1       	ldi	r24, 0x12	; 18
     20a:	c0 d2       	rcall	.+1408   	; 0x78c <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20c:	8f e3       	ldi	r24, 0x3F	; 63
     20e:	9f e1       	ldi	r25, 0x1F	; 31
     210:	01 97       	sbiw	r24, 0x01	; 1
     212:	f1 f7       	brne	.-4      	; 0x210 <Enable+0xa>
     214:	00 c0       	rjmp	.+0      	; 0x216 <Enable+0x10>
     216:	00 00       	nop
	_delay_ms(2);
	DIO_WriteChannel(LCD_EN, STD_LOW);
     218:	60 e0       	ldi	r22, 0x00	; 0
     21a:	82 e1       	ldi	r24, 0x12	; 18
     21c:	b7 d2       	rcall	.+1390   	; 0x78c <DIO_WriteChannel>
     21e:	8f e3       	ldi	r24, 0x3F	; 63
     220:	9f e1       	ldi	r25, 0x1F	; 31
     222:	01 97       	sbiw	r24, 0x01	; 1
     224:	f1 f7       	brne	.-4      	; 0x222 <Enable+0x1c>
     226:	00 c0       	rjmp	.+0      	; 0x228 <Enable+0x22>
     228:	00 00       	nop
     22a:	08 95       	ret

0000022c <LCD_SendCmd>:
	_delay_ms(2);
}

void LCD_SendCmd(u_int8 Cmd)
{
     22c:	cf 93       	push	r28
     22e:	c8 2f       	mov	r28, r24
	switch(LCD_CFG.Mode)
     230:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <LCD_CFG+0x2>
     234:	88 32       	cpi	r24, 0x28	; 40
     236:	81 f0       	breq	.+32     	; 0x258 <LCD_SendCmd+0x2c>
     238:	88 33       	cpi	r24, 0x38	; 56
     23a:	09 f5       	brne	.+66     	; 0x27e <LCD_SendCmd+0x52>
	{
		case Eight_Bit_Mode:
		{
			DIO_WriteChannel(LCD_RS, STD_LOW);
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	80 e1       	ldi	r24, 0x10	; 16
     240:	a5 d2       	rcall	.+1354   	; 0x78c <DIO_WriteChannel>
			DIO_WritePort(LCD_Data_Port, Cmd);
     242:	6c 2f       	mov	r22, r28
     244:	80 e0       	ldi	r24, 0x00	; 0
			Enable();
     246:	54 d5       	rcall	.+2728   	; 0xcf0 <DIO_WritePort>
     248:	de df       	rcall	.-68     	; 0x206 <Enable>
     24a:	8f e9       	ldi	r24, 0x9F	; 159
     24c:	9f e0       	ldi	r25, 0x0F	; 15
     24e:	01 97       	sbiw	r24, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <LCD_SendCmd+0x22>
     252:	00 c0       	rjmp	.+0      	; 0x254 <LCD_SendCmd+0x28>
     254:	00 00       	nop
			_delay_ms(1);
			break;
		}
		case Four_Bit_Mode:
		{
			DIO_WriteChannel(LCD_RS, STD_LOW);
     256:	13 c0       	rjmp	.+38     	; 0x27e <LCD_SendCmd+0x52>
     258:	60 e0       	ldi	r22, 0x00	; 0
     25a:	80 e1       	ldi	r24, 0x10	; 16
     25c:	97 d2       	rcall	.+1326   	; 0x78c <DIO_WriteChannel>
			DIO_WriteHighNibble(LCD_Data_Port, Cmd >> 4);
     25e:	6c 2f       	mov	r22, r28
     260:	62 95       	swap	r22
     262:	6f 70       	andi	r22, 0x0F	; 15
     264:	80 e0       	ldi	r24, 0x00	; 0
			Enable();
     266:	76 d5       	rcall	.+2796   	; 0xd54 <DIO_WriteHighNibble>
     268:	ce df       	rcall	.-100    	; 0x206 <Enable>
			DIO_WriteHighNibble(LCD_Data_Port, Cmd);
     26a:	6c 2f       	mov	r22, r28
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	72 d5       	rcall	.+2788   	; 0xd54 <DIO_WriteHighNibble>
     270:	ca df       	rcall	.-108    	; 0x206 <Enable>
			Enable();
     272:	8f e9       	ldi	r24, 0x9F	; 159
     274:	9f e0       	ldi	r25, 0x0F	; 15
     276:	01 97       	sbiw	r24, 0x01	; 1
     278:	f1 f7       	brne	.-4      	; 0x276 <LCD_SendCmd+0x4a>
     27a:	00 c0       	rjmp	.+0      	; 0x27c <LCD_SendCmd+0x50>
     27c:	00 00       	nop
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <LCD_Init>:
			_delay_ms(1);
			break;
		}
	}
}
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
#include "LCD.h"

void LCD_Init()
{
	DIO_ConfigPort(LCD_Data_Port, 0xFF);
     286:	6f ef       	ldi	r22, 0xFF	; 255
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	4b d5       	rcall	.+2710   	; 0xd22 <DIO_ConfigPort>
	DIO_ConfigChannel(LCD_EN, OUTPUT);
     28c:	61 e0       	ldi	r22, 0x01	; 1
     28e:	82 e1       	ldi	r24, 0x12	; 18
     290:	63 d3       	rcall	.+1734   	; 0x958 <DIO_ConfigChannel>
	DIO_ConfigChannel(LCD_RS, OUTPUT);
     292:	61 e0       	ldi	r22, 0x01	; 1
     294:	80 e1       	ldi	r24, 0x10	; 16
     296:	60 d3       	rcall	.+1728   	; 0x958 <DIO_ConfigChannel>
	DIO_ConfigChannel(LCD_RW, OUTPUT);
     298:	61 e0       	ldi	r22, 0x01	; 1
     29a:	81 e1       	ldi	r24, 0x11	; 17
     29c:	5d d3       	rcall	.+1722   	; 0x958 <DIO_ConfigChannel>
     29e:	2f ef       	ldi	r18, 0xFF	; 255
     2a0:	83 ec       	ldi	r24, 0xC3	; 195
     2a2:	99 e0       	ldi	r25, 0x09	; 9
     2a4:	21 50       	subi	r18, 0x01	; 1
     2a6:	80 40       	sbci	r24, 0x00	; 0
     2a8:	90 40       	sbci	r25, 0x00	; 0
     2aa:	e1 f7       	brne	.-8      	; 0x2a4 <LCD_Init+0x22>
     2ac:	00 c0       	rjmp	.+0      	; 0x2ae <LCD_Init+0x2c>
     2ae:	00 00       	nop
	_delay_ms(200);
	DIO_WriteChannel(LCD_RW, STD_LOW);
     2b0:	60 e0       	ldi	r22, 0x00	; 0
     2b2:	81 e1       	ldi	r24, 0x11	; 17
     2b4:	6b d2       	rcall	.+1238   	; 0x78c <DIO_WriteChannel>
     2b6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <LCD_CFG+0x2>
	switch(LCD_CFG.Mode)
     2ba:	88 32       	cpi	r24, 0x28	; 40
     2bc:	21 f1       	breq	.+72     	; 0x306 <LCD_Init+0x84>
     2be:	88 33       	cpi	r24, 0x38	; 56
     2c0:	09 f0       	breq	.+2      	; 0x2c4 <LCD_Init+0x42>
     2c2:	4b c0       	rjmp	.+150    	; 0x35a <LCD_Init+0xd8>
	{
		case Eight_Bit_Mode:
		{
			LCD_SendCmd(LCD_CFG.Mode);
     2c4:	b3 df       	rcall	.-154    	; 0x22c <LCD_SendCmd>
     2c6:	8f e9       	ldi	r24, 0x9F	; 159
     2c8:	9f e0       	ldi	r25, 0x0F	; 15
     2ca:	01 97       	sbiw	r24, 0x01	; 1
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <LCD_Init+0x48>
     2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <LCD_Init+0x4e>
     2d0:	00 00       	nop
			_delay_ms(1);
			LCD_SendCmd(LCD_CFG.Display_Control);
     2d2:	c6 e0       	ldi	r28, 0x06	; 6
     2d4:	d1 e0       	ldi	r29, 0x01	; 1
     2d6:	89 81       	ldd	r24, Y+1	; 0x01
     2d8:	a9 df       	rcall	.-174    	; 0x22c <LCD_SendCmd>
     2da:	8f e9       	ldi	r24, 0x9F	; 159
     2dc:	9f e0       	ldi	r25, 0x0F	; 15
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	f1 f7       	brne	.-4      	; 0x2de <LCD_Init+0x5c>
     2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <LCD_Init+0x62>
     2e4:	00 00       	nop
			_delay_ms(1);
			LCD_SendCmd(LCD_Clear_Screen);
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	a1 df       	rcall	.-190    	; 0x22c <LCD_SendCmd>
     2ea:	8f e3       	ldi	r24, 0x3F	; 63
     2ec:	9c e9       	ldi	r25, 0x9C	; 156
     2ee:	01 97       	sbiw	r24, 0x01	; 1
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <LCD_Init+0x6c>
     2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <LCD_Init+0x72>
     2f4:	00 00       	nop
			_delay_ms(10);
			LCD_SendCmd(LCD_CFG.Entry_Mode);
     2f6:	88 81       	ld	r24, Y
     2f8:	99 df       	rcall	.-206    	; 0x22c <LCD_SendCmd>
     2fa:	8f e9       	ldi	r24, 0x9F	; 159
     2fc:	9f e0       	ldi	r25, 0x0F	; 15
     2fe:	01 97       	sbiw	r24, 0x01	; 1
     300:	f1 f7       	brne	.-4      	; 0x2fe <LCD_Init+0x7c>
     302:	00 c0       	rjmp	.+0      	; 0x304 <LCD_Init+0x82>
     304:	00 00       	nop
			_delay_ms(1);
		}
		case Four_Bit_Mode:
		{
			LCD_SendCmd(LCD_Return_Home);
     306:	82 e0       	ldi	r24, 0x02	; 2
     308:	91 df       	rcall	.-222    	; 0x22c <LCD_SendCmd>
     30a:	8f e3       	ldi	r24, 0x3F	; 63
     30c:	9c e9       	ldi	r25, 0x9C	; 156
     30e:	01 97       	sbiw	r24, 0x01	; 1
     310:	f1 f7       	brne	.-4      	; 0x30e <LCD_Init+0x8c>
     312:	00 c0       	rjmp	.+0      	; 0x314 <LCD_Init+0x92>
     314:	00 00       	nop
			_delay_ms(10);
			LCD_SendCmd(LCD_CFG.Mode);
     316:	c6 e0       	ldi	r28, 0x06	; 6
     318:	d1 e0       	ldi	r29, 0x01	; 1
     31a:	8a 81       	ldd	r24, Y+2	; 0x02
     31c:	87 df       	rcall	.-242    	; 0x22c <LCD_SendCmd>
     31e:	8f e9       	ldi	r24, 0x9F	; 159
     320:	9f e0       	ldi	r25, 0x0F	; 15
     322:	01 97       	sbiw	r24, 0x01	; 1
     324:	f1 f7       	brne	.-4      	; 0x322 <LCD_Init+0xa0>
     326:	00 c0       	rjmp	.+0      	; 0x328 <LCD_Init+0xa6>
			_delay_ms(1);
			LCD_SendCmd(LCD_CFG.Display_Control);
     328:	00 00       	nop
     32a:	89 81       	ldd	r24, Y+1	; 0x01
     32c:	7f df       	rcall	.-258    	; 0x22c <LCD_SendCmd>
     32e:	8f e9       	ldi	r24, 0x9F	; 159
     330:	9f e0       	ldi	r25, 0x0F	; 15
     332:	01 97       	sbiw	r24, 0x01	; 1
     334:	f1 f7       	brne	.-4      	; 0x332 <LCD_Init+0xb0>
     336:	00 c0       	rjmp	.+0      	; 0x338 <LCD_Init+0xb6>
			_delay_ms(1);
			LCD_SendCmd(LCD_Clear_Screen);
     338:	00 00       	nop
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	77 df       	rcall	.-274    	; 0x22c <LCD_SendCmd>
     33e:	8f e3       	ldi	r24, 0x3F	; 63
     340:	9c e9       	ldi	r25, 0x9C	; 156
     342:	01 97       	sbiw	r24, 0x01	; 1
     344:	f1 f7       	brne	.-4      	; 0x342 <LCD_Init+0xc0>
     346:	00 c0       	rjmp	.+0      	; 0x348 <LCD_Init+0xc6>
     348:	00 00       	nop
			_delay_ms(10);
			LCD_SendCmd(LCD_CFG.Entry_Mode);
     34a:	88 81       	ld	r24, Y
     34c:	6f df       	rcall	.-290    	; 0x22c <LCD_SendCmd>
     34e:	8f e9       	ldi	r24, 0x9F	; 159
     350:	9f e0       	ldi	r25, 0x0F	; 15
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	f1 f7       	brne	.-4      	; 0x352 <LCD_Init+0xd0>
     356:	00 c0       	rjmp	.+0      	; 0x358 <LCD_Init+0xd6>
     358:	00 00       	nop
     35a:	df 91       	pop	r29
			_delay_ms(1);
		}
	}
}
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <mfrc522_write>:


}

void mfrc522_write(uint8_t reg, uint8_t data)
{
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	c8 2f       	mov	r28, r24
     366:	d6 2f       	mov	r29, r22
	//ENABLE_CHIP();
	SPI_Cannel_State(DIO_ChannelB0 ,SPI_Enable);
     368:	61 e0       	ldi	r22, 0x01	; 1
     36a:	88 e0       	ldi	r24, 0x08	; 8
     36c:	20 d7       	rcall	.+3648   	; 0x11ae <SPI_Cannel_State>
    //_NOP();
	SPI_Master_TransmitChar((reg<<1)&0x7E);
     36e:	8c 2f       	mov	r24, r28
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	88 0f       	add	r24, r24
     374:	99 1f       	adc	r25, r25
     376:	8e 77       	andi	r24, 0x7E	; 126
     378:	15 d7       	rcall	.+3626   	; 0x11a4 <SPI_Master_TransmitChar>
	SPI_Master_TransmitChar(data);
     37a:	8d 2f       	mov	r24, r29
     37c:	13 d7       	rcall	.+3622   	; 0x11a4 <SPI_Master_TransmitChar>
	SPI_Cannel_State(DIO_ChannelB0 ,SPI_Disable);
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	88 e0       	ldi	r24, 0x08	; 8
     382:	15 d7       	rcall	.+3626   	; 0x11ae <SPI_Cannel_State>
     384:	df 91       	pop	r29
	//DISABLE_CHIP();
}
     386:	cf 91       	pop	r28
     388:	08 95       	ret

0000038a <mfrc522_read>:
     38a:	cf 93       	push	r28

uint8_t mfrc522_read(uint8_t reg)
{
     38c:	c8 2f       	mov	r28, r24
	uint8_t data;	
	//ENABLE_CHIP();
	SPI_Cannel_State(DIO_ChannelB0 ,SPI_Enable);
     38e:	61 e0       	ldi	r22, 0x01	; 1
     390:	88 e0       	ldi	r24, 0x08	; 8
     392:	0d d7       	rcall	.+3610   	; 0x11ae <SPI_Cannel_State>
    //_NOP();
	SPI_Master_TransmitChar(((reg<<1)&0x7E)|0x80);
     394:	8c 2f       	mov	r24, r28
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	88 0f       	add	r24, r24
     39a:	99 1f       	adc	r25, r25
     39c:	8e 77       	andi	r24, 0x7E	; 126
     39e:	80 68       	ori	r24, 0x80	; 128
     3a0:	01 d7       	rcall	.+3586   	; 0x11a4 <SPI_Master_TransmitChar>
	data = SPI_Master_TransmitChar(0x00);
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	ff d6       	rcall	.+3582   	; 0x11a4 <SPI_Master_TransmitChar>
     3a6:	c8 2f       	mov	r28, r24
	//DISABLE_CHIP();
	SPI_Cannel_State(DIO_ChannelB0 ,SPI_Disable);
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	88 e0       	ldi	r24, 0x08	; 8
     3ac:	00 d7       	rcall	.+3584   	; 0x11ae <SPI_Cannel_State>
     3ae:	8c 2f       	mov	r24, r28
	return data;
}
     3b0:	cf 91       	pop	r28
     3b2:	08 95       	ret

000003b4 <mfrc522_reset>:
     3b4:	6f e0       	ldi	r22, 0x0F	; 15

void mfrc522_reset()
{
	mfrc522_write(CommandReg,SoftReset_CMD);
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	d3 cf       	rjmp	.-90     	; 0x360 <mfrc522_write>
     3ba:	08 95       	ret

000003bc <mfrc522_init>:
#include "../../MCAL/SPI/SPI.h"


void mfrc522_init()
{
	SPI_Init();
     3bc:	66 d6       	rcall	.+3276   	; 0x108a <SPI_Init>
	uint8_t byte;
	mfrc522_reset();
     3be:	fa df       	rcall	.-12     	; 0x3b4 <mfrc522_reset>
     3c0:	6d e8       	ldi	r22, 0x8D	; 141
	
	mfrc522_write(TModeReg, 0x8D);
     3c2:	8a e2       	ldi	r24, 0x2A	; 42
     3c4:	cd df       	rcall	.-102    	; 0x360 <mfrc522_write>
     3c6:	6e e3       	ldi	r22, 0x3E	; 62
    mfrc522_write(TPrescalerReg, 0x3E);
     3c8:	8b e2       	ldi	r24, 0x2B	; 43
     3ca:	ca df       	rcall	.-108    	; 0x360 <mfrc522_write>
     3cc:	6e e1       	ldi	r22, 0x1E	; 30
    mfrc522_write(TReloadReg_1, 30);   
     3ce:	8c e2       	ldi	r24, 0x2C	; 44
     3d0:	c7 df       	rcall	.-114    	; 0x360 <mfrc522_write>
     3d2:	60 e0       	ldi	r22, 0x00	; 0
    mfrc522_write(TReloadReg_2, 0);	
     3d4:	8d e2       	ldi	r24, 0x2D	; 45
     3d6:	c4 df       	rcall	.-120    	; 0x360 <mfrc522_write>
     3d8:	60 e4       	ldi	r22, 0x40	; 64
	mfrc522_write(TxASKReg, 0x40);	
     3da:	85 e1       	ldi	r24, 0x15	; 21
     3dc:	c1 df       	rcall	.-126    	; 0x360 <mfrc522_write>
     3de:	6d e3       	ldi	r22, 0x3D	; 61
	mfrc522_write(ModeReg, 0x3D);
     3e0:	81 e1       	ldi	r24, 0x11	; 17
     3e2:	be df       	rcall	.-132    	; 0x360 <mfrc522_write>
     3e4:	84 e1       	ldi	r24, 0x14	; 20
     3e6:	d1 df       	rcall	.-94     	; 0x38a <mfrc522_read>

	byte = mfrc522_read(TxControlReg);
     3e8:	98 2f       	mov	r25, r24
     3ea:	93 70       	andi	r25, 0x03	; 3
	if(!(byte&0x03))
     3ec:	31 f4       	brne	.+12     	; 0x3fa <mfrc522_init+0x3e>
     3ee:	68 2f       	mov	r22, r24
     3f0:	63 60       	ori	r22, 0x03	; 3
	{
		mfrc522_write(TxControlReg,byte|0x03);
     3f2:	84 e1       	ldi	r24, 0x14	; 20
     3f4:	b5 df       	rcall	.-150    	; 0x360 <mfrc522_write>
     3f6:	84 e1       	ldi	r24, 0x14	; 20
     3f8:	c8 cf       	rjmp	.-112    	; 0x38a <mfrc522_read>
     3fa:	08 95       	ret

000003fc <mfrc522_to_card>:

        byte = mfrc522_read(TxControlReg);  // without this reader is not detected
     3fc:	4f 92       	push	r4
     3fe:	5f 92       	push	r5
     400:	6f 92       	push	r6
     402:	7f 92       	push	r7
   
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
     404:	8f 92       	push	r8
     406:	9f 92       	push	r9
     408:	af 92       	push	r10
     40a:	bf 92       	push	r11
     40c:	cf 92       	push	r12
     40e:	df 92       	push	r13
     410:	ef 92       	push	r14
     412:	ff 92       	push	r15
     414:	0f 93       	push	r16
     416:	1f 93       	push	r17
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	d8 2f       	mov	r29, r24
     41e:	7b 01       	movw	r14, r22
     420:	c4 2f       	mov	r28, r20
     422:	59 01       	movw	r10, r18
    uint8_t lastBits;
    uint8_t n;
    uint8_t	tmp;
    uint32_t i;

    switch (cmd)
     424:	8c 30       	cpi	r24, 0x0C	; 12
     426:	29 f0       	breq	.+10     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     428:	8e 30       	cpi	r24, 0x0E	; 14
     42a:	61 f0       	breq	.+24     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
    uint8_t waitIRq = 0x00;
     42c:	91 2c       	mov	r9, r1
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
     42e:	81 2c       	mov	r8, r1
     430:	10 c0       	rjmp	.+32     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
     432:	0f 2e       	mov	r0, r31
     434:	f0 e3       	ldi	r31, 0x30	; 48
     436:	9f 2e       	mov	r9, r31
     438:	f0 2d       	mov	r31, r0
			waitIRq = 0x10;
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
     43a:	0f 2e       	mov	r0, r31
     43c:	f7 e7       	ldi	r31, 0x77	; 119
     43e:	8f 2e       	mov	r8, r31
     440:	f0 2d       	mov	r31, r0
			waitIRq = 0x30;
			break;
     442:	07 c0       	rjmp	.+14     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
     444:	68 94       	set
     446:	99 24       	eor	r9, r9
     448:	94 f8       	bld	r9, 4

    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
     44a:	0f 2e       	mov	r0, r31
     44c:	f2 e1       	ldi	r31, 0x12	; 18
     44e:	8f 2e       	mov	r8, r31
     450:	f0 2d       	mov	r31, r0
		default:
			break;
    }
   
    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
     452:	84 e0       	ldi	r24, 0x04	; 4
     454:	9a df       	rcall	.-204    	; 0x38a <mfrc522_read>
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
     456:	68 2f       	mov	r22, r24
     458:	6f 77       	andi	r22, 0x7F	; 127
     45a:	84 e0       	ldi	r24, 0x04	; 4
     45c:	81 df       	rcall	.-254    	; 0x360 <mfrc522_write>
    n=mfrc522_read(FIFOLevelReg);
     45e:	8a e0       	ldi	r24, 0x0A	; 10
     460:	94 df       	rcall	.-216    	; 0x38a <mfrc522_read>
     462:	68 2f       	mov	r22, r24
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
     464:	60 68       	ori	r22, 0x80	; 128
     466:	8a e0       	ldi	r24, 0x0A	; 10
     468:	7b df       	rcall	.-266    	; 0x360 <mfrc522_write>
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	78 df       	rcall	.-272    	; 0x360 <mfrc522_write>
     470:	41 2c       	mov	r4, r1

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
     472:	51 2c       	mov	r5, r1
     474:	32 01       	movw	r6, r4
     476:	0b c0       	rjmp	.+22     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     478:	f7 01       	movw	r30, r14
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
     47a:	e4 0d       	add	r30, r4
     47c:	f5 1d       	adc	r31, r5
     47e:	60 81       	ld	r22, Z
     480:	89 e0       	ldi	r24, 0x09	; 9
     482:	6e df       	rcall	.-292    	; 0x360 <mfrc522_write>
     484:	8f ef       	ldi	r24, 0xFF	; 255
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
     486:	48 1a       	sub	r4, r24
     488:	58 0a       	sbc	r5, r24
     48a:	68 0a       	sbc	r6, r24
     48c:	78 0a       	sbc	r7, r24
     48e:	8c 2f       	mov	r24, r28
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	a0 e0       	ldi	r26, 0x00	; 0
     494:	b0 e0       	ldi	r27, 0x00	; 0
     496:	48 16       	cp	r4, r24
     498:	59 06       	cpc	r5, r25
     49a:	6a 06       	cpc	r6, r26
     49c:	7b 06       	cpc	r7, r27
     49e:	60 f3       	brcs	.-40     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
     4a0:	6d 2f       	mov	r22, r29
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	5d df       	rcall	.-326    	; 0x360 <mfrc522_write>
    if (cmd == Transceive_CMD)
     4a6:	dc 30       	cpi	r29, 0x0C	; 12
    {    
		n=mfrc522_read(BitFramingReg);
     4a8:	31 f4       	brne	.+12     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4aa:	8d e0       	ldi	r24, 0x0D	; 13
     4ac:	6e df       	rcall	.-292    	; 0x38a <mfrc522_read>
		mfrc522_write(BitFramingReg,n|0x80);  
     4ae:	68 2f       	mov	r22, r24
     4b0:	60 68       	ori	r22, 0x80	; 128
     4b2:	8d e0       	ldi	r24, 0x0D	; 13
     4b4:	55 df       	rcall	.-342    	; 0x360 <mfrc522_write>
     4b6:	0f 2e       	mov	r0, r31
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
     4b8:	f0 ed       	ldi	r31, 0xD0	; 208
     4ba:	cf 2e       	mov	r12, r31
     4bc:	f7 e0       	ldi	r31, 0x07	; 7
     4be:	df 2e       	mov	r13, r31
     4c0:	e1 2c       	mov	r14, r1
     4c2:	f1 2c       	mov	r15, r1
     4c4:	f0 2d       	mov	r31, r0
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
     4c6:	84 e0       	ldi	r24, 0x04	; 4
     4c8:	60 df       	rcall	.-320    	; 0x38a <mfrc522_read>
     4ca:	c8 2f       	mov	r28, r24
     4cc:	e1 e0       	ldi	r30, 0x01	; 1
        i--;
     4ce:	ce 1a       	sub	r12, r30
     4d0:	d1 08       	sbc	r13, r1
     4d2:	e1 08       	sbc	r14, r1
     4d4:	f1 08       	sbc	r15, r1
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
     4d6:	29 f0       	breq	.+10     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
     4d8:	80 fd       	sbrc	r24, 0
     4da:	03 c0       	rjmp	.+6      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
     4dc:	89 2d       	mov	r24, r9
     4de:	8c 23       	and	r24, r28

	tmp=mfrc522_read(BitFramingReg);
     4e0:	91 f3       	breq	.-28     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4e2:	8d e0       	ldi	r24, 0x0D	; 13
	mfrc522_write(BitFramingReg,tmp&(~0x80));
     4e4:	52 df       	rcall	.-348    	; 0x38a <mfrc522_read>
     4e6:	68 2f       	mov	r22, r24
     4e8:	6f 77       	andi	r22, 0x7F	; 127
     4ea:	8d e0       	ldi	r24, 0x0D	; 13
     4ec:	39 df       	rcall	.-398    	; 0x360 <mfrc522_write>
	
    if (i != 0)
     4ee:	cd 28       	or	r12, r13
     4f0:	ce 28       	or	r12, r14
     4f2:	cf 28       	or	r12, r15
     4f4:	09 f4       	brne	.+2      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     4f6:	5c c0       	rjmp	.+184    	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
     4f8:	86 e0       	ldi	r24, 0x06	; 6
     4fa:	47 df       	rcall	.-370    	; 0x38a <mfrc522_read>
     4fc:	8b 71       	andi	r24, 0x1B	; 27
     4fe:	09 f0       	breq	.+2      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
     500:	59 c0       	rjmp	.+178    	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
        {
            status = CARD_FOUND;
            if (n & irqEn & 0x01)
     502:	c8 21       	and	r28, r8
     504:	c0 fd       	sbrc	r28, 0
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = CARD_FOUND;
     506:	02 c0       	rjmp	.+4      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     508:	c1 e0       	ldi	r28, 0x01	; 1
            if (n & irqEn & 0x01)
            {   
				status = CARD_NOT_FOUND;			//??   
     50a:	01 c0       	rjmp	.+2      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
			}

            if (cmd == Transceive_CMD)
     50c:	c2 e0       	ldi	r28, 0x02	; 2
     50e:	dc 30       	cpi	r29, 0x0C	; 12
     510:	09 f0       	breq	.+2      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
            {
               	n = mfrc522_read(FIFOLevelReg);
     512:	51 c0       	rjmp	.+162    	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
     514:	8a e0       	ldi	r24, 0x0A	; 10
     516:	39 df       	rcall	.-398    	; 0x38a <mfrc522_read>
     518:	d8 2f       	mov	r29, r24
              	lastBits = mfrc522_read(ControlReg) & 0x07;
     51a:	8c e0       	ldi	r24, 0x0C	; 12
     51c:	36 df       	rcall	.-404    	; 0x38a <mfrc522_read>
     51e:	28 2f       	mov	r18, r24
     520:	27 70       	andi	r18, 0x07	; 7
     522:	a9 f0       	breq	.+42     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
                if (lastBits)
     524:	8d 2f       	mov	r24, r29
                {   
					*back_data_len = (n-1)*8 + lastBits;   
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	01 97       	sbiw	r24, 0x01	; 1
     52a:	88 0f       	add	r24, r24
     52c:	99 1f       	adc	r25, r25
     52e:	88 0f       	add	r24, r24
     530:	99 1f       	adc	r25, r25
     532:	88 0f       	add	r24, r24
     534:	99 1f       	adc	r25, r25
     536:	82 0f       	add	r24, r18
     538:	91 1d       	adc	r25, r1
     53a:	09 2e       	mov	r0, r25
     53c:	00 0c       	add	r0, r0
     53e:	aa 0b       	sbc	r26, r26
     540:	bb 0b       	sbc	r27, r27
     542:	f8 01       	movw	r30, r16
     544:	80 83       	st	Z, r24
     546:	91 83       	std	Z+1, r25	; 0x01
     548:	a2 83       	std	Z+2, r26	; 0x02
     54a:	b3 83       	std	Z+3, r27	; 0x03
     54c:	11 c0       	rjmp	.+34     	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
     54e:	8d 2f       	mov	r24, r29
				}
                else
                {   
					*back_data_len = n*8;   
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	88 0f       	add	r24, r24
     554:	99 1f       	adc	r25, r25
     556:	88 0f       	add	r24, r24
     558:	99 1f       	adc	r25, r25
     55a:	88 0f       	add	r24, r24
     55c:	99 1f       	adc	r25, r25
     55e:	09 2e       	mov	r0, r25
     560:	00 0c       	add	r0, r0
     562:	aa 0b       	sbc	r26, r26
     564:	bb 0b       	sbc	r27, r27
     566:	f8 01       	movw	r30, r16
     568:	80 83       	st	Z, r24
     56a:	91 83       	std	Z+1, r25	; 0x01
     56c:	a2 83       	std	Z+2, r26	; 0x02
     56e:	b3 83       	std	Z+3, r27	; 0x03
				}

                if (n == 0)
     570:	d1 11       	cpse	r29, r1
     572:	01 c0       	rjmp	.+2      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
                {   
					n = 1;    
     574:	d1 e0       	ldi	r29, 0x01	; 1
				}
                if (n > MAX_LEN)
     576:	d1 31       	cpi	r29, 0x11	; 17
     578:	08 f0       	brcs	.+2      	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
                {   
					n = MAX_LEN;   
     57a:	d0 e1       	ldi	r29, 0x10	; 16
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
     57c:	c1 2c       	mov	r12, r1
     57e:	d1 2c       	mov	r13, r1
     580:	76 01       	movw	r14, r12
     582:	0c c0       	rjmp	.+24     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
                {   
					back_data[i] = mfrc522_read(FIFODataReg);    
     584:	85 01       	movw	r16, r10
     586:	0c 0d       	add	r16, r12
     588:	1d 1d       	adc	r17, r13
     58a:	89 e0       	ldi	r24, 0x09	; 9
     58c:	fe de       	rcall	.-516    	; 0x38a <mfrc522_read>
     58e:	f8 01       	movw	r30, r16
     590:	80 83       	st	Z, r24
     592:	ff ef       	ldi	r31, 0xFF	; 255
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
     594:	cf 1a       	sub	r12, r31
     596:	df 0a       	sbc	r13, r31
     598:	ef 0a       	sbc	r14, r31
     59a:	ff 0a       	sbc	r15, r31
     59c:	8d 2f       	mov	r24, r29
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	a0 e0       	ldi	r26, 0x00	; 0
     5a2:	b0 e0       	ldi	r27, 0x00	; 0
     5a4:	c8 16       	cp	r12, r24
     5a6:	d9 06       	cpc	r13, r25
     5a8:	ea 06       	cpc	r14, r26
     5aa:	fb 06       	cpc	r15, r27
     5ac:	58 f3       	brcs	.-42     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
     5ae:	03 c0       	rjmp	.+6      	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
     5b0:	c3 e0       	ldi	r28, 0x03	; 3
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
     5b2:	01 c0       	rjmp	.+2      	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
     5b4:	c3 e0       	ldi	r28, 0x03	; 3
				}
            }
        }
        else
        {   
			status = ERROR;  
     5b6:	8c 2f       	mov	r24, r28
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //mfrc522_write(cmdReg, PCD_IDLE); 

    return status;
}
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	ff 90       	pop	r15
     5c2:	ef 90       	pop	r14
     5c4:	df 90       	pop	r13
     5c6:	cf 90       	pop	r12
     5c8:	bf 90       	pop	r11
     5ca:	af 90       	pop	r10
     5cc:	9f 90       	pop	r9
     5ce:	8f 90       	pop	r8
     5d0:	7f 90       	pop	r7
     5d2:	6f 90       	pop	r6
     5d4:	5f 90       	pop	r5
     5d6:	4f 90       	pop	r4
     5d8:	08 95       	ret

000005da <mfrc522_request>:
     5da:	ef 92       	push	r14
{
	mfrc522_write(CommandReg,SoftReset_CMD);
}

uint8_t	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
{
     5dc:	ff 92       	push	r15
     5de:	0f 93       	push	r16
     5e0:	1f 93       	push	r17
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	00 d0       	rcall	.+0      	; 0x5e8 <mfrc522_request+0xe>
     5e8:	00 d0       	rcall	.+0      	; 0x5ea <mfrc522_request+0x10>
     5ea:	cd b7       	in	r28, 0x3d	; 61
     5ec:	de b7       	in	r29, 0x3e	; 62
     5ee:	18 2f       	mov	r17, r24
     5f0:	7b 01       	movw	r14, r22
	uint8_t  status;  
	uint32_t backBits;//The received data bits

	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
     5f2:	67 e0       	ldi	r22, 0x07	; 7
     5f4:	8d e0       	ldi	r24, 0x0D	; 13
     5f6:	b4 de       	rcall	.-664    	; 0x360 <mfrc522_write>
	
	tag_type[0] = req_mode;
     5f8:	f7 01       	movw	r30, r14
     5fa:	10 83       	st	Z, r17
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);
     5fc:	8e 01       	movw	r16, r28
     5fe:	0f 5f       	subi	r16, 0xFF	; 255
     600:	1f 4f       	sbci	r17, 0xFF	; 255
     602:	97 01       	movw	r18, r14
     604:	41 e0       	ldi	r20, 0x01	; 1
     606:	b7 01       	movw	r22, r14
     608:	8c e0       	ldi	r24, 0x0C	; 12
     60a:	f8 de       	rcall	.-528    	; 0x3fc <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
     60c:	81 30       	cpi	r24, 0x01	; 1
     60e:	51 f4       	brne	.+20     	; 0x624 <mfrc522_request+0x4a>
     610:	49 81       	ldd	r20, Y+1	; 0x01
     612:	5a 81       	ldd	r21, Y+2	; 0x02
     614:	6b 81       	ldd	r22, Y+3	; 0x03
     616:	7c 81       	ldd	r23, Y+4	; 0x04
     618:	40 31       	cpi	r20, 0x10	; 16
     61a:	51 05       	cpc	r21, r1
     61c:	61 05       	cpc	r22, r1
     61e:	71 05       	cpc	r23, r1
     620:	19 f4       	brne	.+6      	; 0x628 <mfrc522_request+0x4e>
     622:	03 c0       	rjmp	.+6      	; 0x62a <mfrc522_request+0x50>
	{    
		status = ERROR;
     624:	83 e0       	ldi	r24, 0x03	; 3
     626:	01 c0       	rjmp	.+2      	; 0x62a <mfrc522_request+0x50>
     628:	83 e0       	ldi	r24, 0x03	; 3
	}
   
	return status;
}
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	0f 90       	pop	r0
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	ff 90       	pop	r15
     63c:	ef 90       	pop	r14
     63e:	08 95       	ret

00000640 <mfrc522_get_card_serial>:
    return status;
}


uint8_t mfrc522_get_card_serial(uint8_t * serial_out)
{
     640:	ef 92       	push	r14
     642:	ff 92       	push	r15
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	00 d0       	rcall	.+0      	; 0x64e <mfrc522_get_card_serial+0xe>
     64e:	00 d0       	rcall	.+0      	; 0x650 <mfrc522_get_card_serial+0x10>
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
     654:	7c 01       	movw	r14, r24
	uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
    uint32_t unLen;
    
	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
     656:	60 e0       	ldi	r22, 0x00	; 0
     658:	8d e0       	ldi	r24, 0x0D	; 13
     65a:	82 de       	rcall	.-764    	; 0x360 <mfrc522_write>
 
    serial_out[0] = PICC_ANTICOLL;
     65c:	83 e9       	ldi	r24, 0x93	; 147
     65e:	f7 01       	movw	r30, r14
     660:	80 83       	st	Z, r24
    serial_out[1] = 0x20;
     662:	80 e2       	ldi	r24, 0x20	; 32
     664:	81 83       	std	Z+1, r24	; 0x01
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);
     666:	8e 01       	movw	r16, r28
     668:	0f 5f       	subi	r16, 0xFF	; 255
     66a:	1f 4f       	sbci	r17, 0xFF	; 255
     66c:	97 01       	movw	r18, r14
     66e:	42 e0       	ldi	r20, 0x02	; 2
     670:	b7 01       	movw	r22, r14
     672:	8c e0       	ldi	r24, 0x0C	; 12
     674:	c3 de       	rcall	.-634    	; 0x3fc <mfrc522_to_card>

    if (status == CARD_FOUND)
     676:	81 30       	cpi	r24, 0x01	; 1
     678:	91 f4       	brne	.+36     	; 0x69e <mfrc522_get_card_serial+0x5e>
     67a:	07 c0       	rjmp	.+14     	; 0x68a <mfrc522_get_card_serial+0x4a>
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{   
		 	serNumCheck ^= serial_out[i];
     67c:	f7 01       	movw	r30, r14
     67e:	e9 0f       	add	r30, r25
     680:	f1 1d       	adc	r31, r1
     682:	30 81       	ld	r19, Z
     684:	23 27       	eor	r18, r19
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);

    if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
     686:	9f 5f       	subi	r25, 0xFF	; 255
     688:	02 c0       	rjmp	.+4      	; 0x68e <mfrc522_get_card_serial+0x4e>
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	94 30       	cpi	r25, 0x04	; 4
     690:	a8 f3       	brcs	.-22     	; 0x67c <mfrc522_get_card_serial+0x3c>
		{   
		 	serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
     692:	f7 01       	movw	r30, r14
     694:	e9 0f       	add	r30, r25
     696:	f1 1d       	adc	r31, r1
     698:	90 81       	ld	r25, Z
     69a:	29 13       	cpse	r18, r25
		{   
			status = ERROR;    
     69c:	83 e0       	ldi	r24, 0x03	; 3
		}
    }
    return status;
}
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	ff 90       	pop	r15
     6b0:	ef 90       	pop	r14
     6b2:	08 95       	ret

000006b4 <find_string>:
#include "String_Find.h"

unsigned char find_string(unsigned char *string, unsigned char* string_find)
{
     6b4:	ef 92       	push	r14
     6b6:	ff 92       	push	r15
     6b8:	0f 93       	push	r16
     6ba:	1f 93       	push	r17
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	ec 01       	movw	r28, r24
     6c2:	8b 01       	movw	r16, r22
	unsigned int matched = 0;
	unsigned int index_string = 0;
	unsigned int length_of_string = 0;
	unsigned int length_of_string_find = 0;

	length_of_string_find = strlen(string_find);
     6c4:	fb 01       	movw	r30, r22
     6c6:	01 90       	ld	r0, Z+
     6c8:	00 20       	and	r0, r0
     6ca:	e9 f7       	brne	.-6      	; 0x6c6 <find_string+0x12>
     6cc:	31 97       	sbiw	r30, 0x01	; 1
     6ce:	7f 01       	movw	r14, r30
     6d0:	e6 1a       	sub	r14, r22
     6d2:	f7 0a       	sbc	r15, r23
	length_of_string = strlen(string);
     6d4:	dc 01       	movw	r26, r24
     6d6:	0d 90       	ld	r0, X+
     6d8:	00 20       	and	r0, r0
     6da:	e9 f7       	brne	.-6      	; 0x6d6 <find_string+0x22>
     6dc:	11 97       	sbiw	r26, 0x01	; 1
     6de:	a8 1b       	sub	r26, r24
     6e0:	b9 0b       	sbc	r27, r25

	if(length_of_string_find > length_of_string)
     6e2:	ae 15       	cp	r26, r14
     6e4:	bf 05       	cpc	r27, r15
     6e6:	f0 f0       	brcs	.+60     	; 0x724 <find_string+0x70>
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	14 c0       	rjmp	.+40     	; 0x71a <find_string+0x66>
	}
	else
	{
		for(index_string = 0; index_string < length_of_string; index_string++)
		{
			if(string[index_string] == string_find[matched])
     6f2:	fe 01       	movw	r30, r28
     6f4:	e2 0f       	add	r30, r18
     6f6:	f3 1f       	adc	r31, r19
     6f8:	70 81       	ld	r23, Z
     6fa:	f8 01       	movw	r30, r16
     6fc:	e4 0f       	add	r30, r20
     6fe:	f5 1f       	adc	r31, r21
     700:	90 81       	ld	r25, Z
     702:	79 13       	cpse	r23, r25
     704:	06 c0       	rjmp	.+12     	; 0x712 <find_string+0x5e>
			{
				matched++;
     706:	4f 5f       	subi	r20, 0xFF	; 255
     708:	5f 4f       	sbci	r21, 0xFF	; 255
				if(length_of_string_find == matched)
     70a:	e4 16       	cp	r14, r20
     70c:	f5 06       	cpc	r15, r21
     70e:	19 f4       	brne	.+6      	; 0x716 <find_string+0x62>
     710:	0b c0       	rjmp	.+22     	; 0x728 <find_string+0x74>
					return 1;
			}
			else
			{
				matched = 0;
     712:	40 e0       	ldi	r20, 0x00	; 0
     714:	50 e0       	ldi	r21, 0x00	; 0
	{
		return 0;
	}
	else
	{
		for(index_string = 0; index_string < length_of_string; index_string++)
     716:	2f 5f       	subi	r18, 0xFF	; 255
     718:	3f 4f       	sbci	r19, 0xFF	; 255
     71a:	2a 17       	cp	r18, r26
     71c:	3b 07       	cpc	r19, r27
     71e:	48 f3       	brcs	.-46     	; 0x6f2 <find_string+0x3e>
			else
			{
				matched = 0;
			}
		}
		return 0;
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	03 c0       	rjmp	.+6      	; 0x72a <find_string+0x76>
	length_of_string_find = strlen(string_find);
	length_of_string = strlen(string);

	if(length_of_string_find > length_of_string)
	{
		return 0;
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	01 c0       	rjmp	.+2      	; 0x72a <find_string+0x76>
		{
			if(string[index_string] == string_find[matched])
			{
				matched++;
				if(length_of_string_find == matched)
					return 1;
     728:	81 e0       	ldi	r24, 0x01	; 1
				matched = 0;
			}
		}
		return 0;
	}
}
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	1f 91       	pop	r17
     730:	0f 91       	pop	r16
     732:	ff 90       	pop	r15
     734:	ef 90       	pop	r14
     736:	08 95       	ret

00000738 <find_get_string>:

void find_get_string(unsigned char *string, unsigned char* from, unsigned char _from, unsigned char* to, unsigned char _to, unsigned char *get_text)
{
     738:	cf 92       	push	r12
     73a:	df 92       	push	r13
     73c:	ef 92       	push	r14
     73e:	ff 92       	push	r15
     740:	0f 93       	push	r16
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	d4 2e       	mov	r13, r20
     748:	e9 01       	movw	r28, r18
	unsigned char *p1;
	unsigned char *p2;
	unsigned char length = 0;

	p1 = strstr(string, from) + _from;
     74a:	0e 94 49 14 	call	0x2892	; 0x2892 <strstr>
     74e:	8d 0d       	add	r24, r13
     750:	91 1d       	adc	r25, r1
     752:	6c 01       	movw	r12, r24
	p2 = strstr(p1, to) + _to;
     754:	be 01       	movw	r22, r28
     756:	0e 94 49 14 	call	0x2892	; 0x2892 <strstr>
     75a:	80 0f       	add	r24, r16
     75c:	91 1d       	adc	r25, r1
	length = p2 - p1;
     75e:	8c 19       	sub	r24, r12
     760:	9d 09       	sbc	r25, r13

	strncpy(get_text, p1, length);
     762:	ec 01       	movw	r28, r24
     764:	dd 27       	eor	r29, r29
     766:	ae 01       	movw	r20, r28
     768:	b6 01       	movw	r22, r12
     76a:	c7 01       	movw	r24, r14
     76c:	0e 94 3a 14 	call	0x2874	; 0x2874 <strncpy>
	get_text[length] = '\0';
     770:	ce 0d       	add	r28, r14
     772:	df 1d       	adc	r29, r15
     774:	18 82       	st	Y, r1
}
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	0f 91       	pop	r16
     77c:	ff 90       	pop	r15
     77e:	ef 90       	pop	r14
     780:	df 90       	pop	r13
     782:	cf 90       	pop	r12
     784:	08 95       	ret

00000786 <main>:
//void INT4_Function(void);
//void INT5_Function(void);

void main()
{
	startScheduler();
     786:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <startScheduler>
     78a:	08 95       	ret

0000078c <DIO_WriteChannel>:
			break;
		}
		case DIO_PortG:
		{
			PORTG_Register &= 0xF0;
			PORTG_Register |= NibbleValue;
     78c:	e8 2f       	mov	r30, r24
     78e:	e6 95       	lsr	r30
     790:	e6 95       	lsr	r30
     792:	e6 95       	lsr	r30
     794:	87 70       	andi	r24, 0x07	; 7
     796:	66 23       	and	r22, r22
     798:	21 f0       	breq	.+8      	; 0x7a2 <DIO_WriteChannel+0x16>
     79a:	61 30       	cpi	r22, 0x01	; 1
     79c:	09 f4       	brne	.+2      	; 0x7a0 <DIO_WriteChannel+0x14>
     79e:	72 c0       	rjmp	.+228    	; 0x884 <DIO_WriteChannel+0xf8>
     7a0:	08 95       	ret
     7a2:	4e 2f       	mov	r20, r30
     7a4:	50 e0       	ldi	r21, 0x00	; 0
     7a6:	47 30       	cpi	r20, 0x07	; 7
     7a8:	51 05       	cpc	r21, r1
     7aa:	08 f0       	brcs	.+2      	; 0x7ae <DIO_WriteChannel+0x22>
     7ac:	d4 c0       	rjmp	.+424    	; 0x956 <DIO_WriteChannel+0x1ca>
     7ae:	fa 01       	movw	r30, r20
     7b0:	ea 5b       	subi	r30, 0xBA	; 186
     7b2:	ff 4f       	sbci	r31, 0xFF	; 255
     7b4:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__tablejump2__>
     7b8:	4b b3       	in	r20, 0x1b	; 27
     7ba:	21 e0       	ldi	r18, 0x01	; 1
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	b9 01       	movw	r22, r18
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <DIO_WriteChannel+0x3a>
     7c2:	66 0f       	add	r22, r22
     7c4:	77 1f       	adc	r23, r23
     7c6:	8a 95       	dec	r24
     7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <DIO_WriteChannel+0x36>
     7ca:	cb 01       	movw	r24, r22
     7cc:	80 95       	com	r24
     7ce:	84 23       	and	r24, r20
     7d0:	8b bb       	out	0x1b, r24	; 27
     7d2:	08 95       	ret
     7d4:	48 b3       	in	r20, 0x18	; 24
     7d6:	21 e0       	ldi	r18, 0x01	; 1
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	b9 01       	movw	r22, r18
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <DIO_WriteChannel+0x56>
     7de:	66 0f       	add	r22, r22
     7e0:	77 1f       	adc	r23, r23
     7e2:	8a 95       	dec	r24
     7e4:	e2 f7       	brpl	.-8      	; 0x7de <DIO_WriteChannel+0x52>
     7e6:	cb 01       	movw	r24, r22
     7e8:	80 95       	com	r24
     7ea:	84 23       	and	r24, r20
     7ec:	88 bb       	out	0x18, r24	; 24
     7ee:	08 95       	ret
     7f0:	45 b3       	in	r20, 0x15	; 21
     7f2:	21 e0       	ldi	r18, 0x01	; 1
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	b9 01       	movw	r22, r18
     7f8:	02 c0       	rjmp	.+4      	; 0x7fe <DIO_WriteChannel+0x72>
     7fa:	66 0f       	add	r22, r22
     7fc:	77 1f       	adc	r23, r23
     7fe:	8a 95       	dec	r24
     800:	e2 f7       	brpl	.-8      	; 0x7fa <DIO_WriteChannel+0x6e>
     802:	cb 01       	movw	r24, r22
     804:	80 95       	com	r24
     806:	84 23       	and	r24, r20
     808:	85 bb       	out	0x15, r24	; 21
     80a:	08 95       	ret
     80c:	42 b3       	in	r20, 0x12	; 18
     80e:	21 e0       	ldi	r18, 0x01	; 1
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	b9 01       	movw	r22, r18
     814:	02 c0       	rjmp	.+4      	; 0x81a <DIO_WriteChannel+0x8e>
     816:	66 0f       	add	r22, r22
     818:	77 1f       	adc	r23, r23
     81a:	8a 95       	dec	r24
     81c:	e2 f7       	brpl	.-8      	; 0x816 <DIO_WriteChannel+0x8a>
     81e:	cb 01       	movw	r24, r22
     820:	80 95       	com	r24
     822:	84 23       	and	r24, r20
     824:	82 bb       	out	0x12, r24	; 18
     826:	08 95       	ret
     828:	43 b1       	in	r20, 0x03	; 3
     82a:	21 e0       	ldi	r18, 0x01	; 1
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	b9 01       	movw	r22, r18
     830:	02 c0       	rjmp	.+4      	; 0x836 <DIO_WriteChannel+0xaa>
     832:	66 0f       	add	r22, r22
     834:	77 1f       	adc	r23, r23
     836:	8a 95       	dec	r24
     838:	e2 f7       	brpl	.-8      	; 0x832 <DIO_WriteChannel+0xa6>
     83a:	cb 01       	movw	r24, r22
     83c:	80 95       	com	r24
     83e:	84 23       	and	r24, r20
     840:	83 b9       	out	0x03, r24	; 3
     842:	08 95       	ret
     844:	e2 e6       	ldi	r30, 0x62	; 98
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	40 81       	ld	r20, Z
     84a:	21 e0       	ldi	r18, 0x01	; 1
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	b9 01       	movw	r22, r18
     850:	02 c0       	rjmp	.+4      	; 0x856 <DIO_WriteChannel+0xca>
     852:	66 0f       	add	r22, r22
     854:	77 1f       	adc	r23, r23
     856:	8a 95       	dec	r24
     858:	e2 f7       	brpl	.-8      	; 0x852 <DIO_WriteChannel+0xc6>
     85a:	cb 01       	movw	r24, r22
     85c:	80 95       	com	r24
     85e:	84 23       	and	r24, r20
     860:	80 83       	st	Z, r24
     862:	08 95       	ret
     864:	e5 e6       	ldi	r30, 0x65	; 101
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	40 81       	ld	r20, Z
     86a:	21 e0       	ldi	r18, 0x01	; 1
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	b9 01       	movw	r22, r18
     870:	02 c0       	rjmp	.+4      	; 0x876 <DIO_WriteChannel+0xea>
     872:	66 0f       	add	r22, r22
     874:	77 1f       	adc	r23, r23
     876:	8a 95       	dec	r24
     878:	e2 f7       	brpl	.-8      	; 0x872 <DIO_WriteChannel+0xe6>
     87a:	cb 01       	movw	r24, r22
     87c:	80 95       	com	r24
     87e:	84 23       	and	r24, r20
     880:	80 83       	st	Z, r24
     882:	08 95       	ret
     884:	4e 2f       	mov	r20, r30
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	47 30       	cpi	r20, 0x07	; 7
     88a:	51 05       	cpc	r21, r1
     88c:	08 f0       	brcs	.+2      	; 0x890 <DIO_WriteChannel+0x104>
     88e:	63 c0       	rjmp	.+198    	; 0x956 <DIO_WriteChannel+0x1ca>
     890:	fa 01       	movw	r30, r20
     892:	e3 5b       	subi	r30, 0xB3	; 179
     894:	ff 4f       	sbci	r31, 0xFF	; 255
     896:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__tablejump2__>
     89a:	4b b3       	in	r20, 0x1b	; 27
     89c:	21 e0       	ldi	r18, 0x01	; 1
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	b9 01       	movw	r22, r18
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <DIO_WriteChannel+0x11c>
     8a4:	66 0f       	add	r22, r22
     8a6:	77 1f       	adc	r23, r23
     8a8:	8a 95       	dec	r24
     8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <DIO_WriteChannel+0x118>
     8ac:	cb 01       	movw	r24, r22
     8ae:	84 2b       	or	r24, r20
     8b0:	8b bb       	out	0x1b, r24	; 27
     8b2:	08 95       	ret
     8b4:	48 b3       	in	r20, 0x18	; 24
     8b6:	21 e0       	ldi	r18, 0x01	; 1
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	b9 01       	movw	r22, r18
     8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <DIO_WriteChannel+0x136>
     8be:	66 0f       	add	r22, r22
     8c0:	77 1f       	adc	r23, r23
     8c2:	8a 95       	dec	r24
     8c4:	e2 f7       	brpl	.-8      	; 0x8be <DIO_WriteChannel+0x132>
     8c6:	cb 01       	movw	r24, r22
     8c8:	84 2b       	or	r24, r20
     8ca:	88 bb       	out	0x18, r24	; 24
     8cc:	08 95       	ret
     8ce:	45 b3       	in	r20, 0x15	; 21
     8d0:	21 e0       	ldi	r18, 0x01	; 1
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	b9 01       	movw	r22, r18
     8d6:	02 c0       	rjmp	.+4      	; 0x8dc <DIO_WriteChannel+0x150>
     8d8:	66 0f       	add	r22, r22
     8da:	77 1f       	adc	r23, r23
     8dc:	8a 95       	dec	r24
     8de:	e2 f7       	brpl	.-8      	; 0x8d8 <DIO_WriteChannel+0x14c>
     8e0:	cb 01       	movw	r24, r22
     8e2:	84 2b       	or	r24, r20
     8e4:	85 bb       	out	0x15, r24	; 21
     8e6:	08 95       	ret
     8e8:	42 b3       	in	r20, 0x12	; 18
     8ea:	21 e0       	ldi	r18, 0x01	; 1
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	b9 01       	movw	r22, r18
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <DIO_WriteChannel+0x16a>
     8f2:	66 0f       	add	r22, r22
     8f4:	77 1f       	adc	r23, r23
     8f6:	8a 95       	dec	r24
     8f8:	e2 f7       	brpl	.-8      	; 0x8f2 <DIO_WriteChannel+0x166>
     8fa:	cb 01       	movw	r24, r22
     8fc:	84 2b       	or	r24, r20
     8fe:	82 bb       	out	0x12, r24	; 18
     900:	08 95       	ret
     902:	43 b1       	in	r20, 0x03	; 3
     904:	21 e0       	ldi	r18, 0x01	; 1
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	b9 01       	movw	r22, r18
     90a:	02 c0       	rjmp	.+4      	; 0x910 <DIO_WriteChannel+0x184>
     90c:	66 0f       	add	r22, r22
     90e:	77 1f       	adc	r23, r23
     910:	8a 95       	dec	r24
     912:	e2 f7       	brpl	.-8      	; 0x90c <DIO_WriteChannel+0x180>
     914:	cb 01       	movw	r24, r22
     916:	84 2b       	or	r24, r20
     918:	83 b9       	out	0x03, r24	; 3
     91a:	08 95       	ret
     91c:	e2 e6       	ldi	r30, 0x62	; 98
     91e:	f0 e0       	ldi	r31, 0x00	; 0
     920:	40 81       	ld	r20, Z
     922:	21 e0       	ldi	r18, 0x01	; 1
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	b9 01       	movw	r22, r18
     928:	02 c0       	rjmp	.+4      	; 0x92e <DIO_WriteChannel+0x1a2>
     92a:	66 0f       	add	r22, r22
     92c:	77 1f       	adc	r23, r23
     92e:	8a 95       	dec	r24
     930:	e2 f7       	brpl	.-8      	; 0x92a <DIO_WriteChannel+0x19e>
     932:	cb 01       	movw	r24, r22
     934:	84 2b       	or	r24, r20
     936:	80 83       	st	Z, r24
     938:	08 95       	ret
     93a:	e5 e6       	ldi	r30, 0x65	; 101
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	40 81       	ld	r20, Z
     940:	21 e0       	ldi	r18, 0x01	; 1
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	b9 01       	movw	r22, r18
     946:	02 c0       	rjmp	.+4      	; 0x94c <DIO_WriteChannel+0x1c0>
     948:	66 0f       	add	r22, r22
     94a:	77 1f       	adc	r23, r23
     94c:	8a 95       	dec	r24
     94e:	e2 f7       	brpl	.-8      	; 0x948 <DIO_WriteChannel+0x1bc>
     950:	cb 01       	movw	r24, r22
     952:	84 2b       	or	r24, r20
     954:	80 83       	st	Z, r24
     956:	08 95       	ret

00000958 <DIO_ConfigChannel>:
     958:	e8 2f       	mov	r30, r24
     95a:	e6 95       	lsr	r30
     95c:	e6 95       	lsr	r30
     95e:	e6 95       	lsr	r30
     960:	87 70       	andi	r24, 0x07	; 7
     962:	66 23       	and	r22, r22
     964:	21 f0       	breq	.+8      	; 0x96e <DIO_ConfigChannel+0x16>
     966:	61 30       	cpi	r22, 0x01	; 1
     968:	09 f4       	brne	.+2      	; 0x96c <DIO_ConfigChannel+0x14>
     96a:	72 c0       	rjmp	.+228    	; 0xa50 <DIO_ConfigChannel+0xf8>
     96c:	08 95       	ret
     96e:	4e 2f       	mov	r20, r30
     970:	50 e0       	ldi	r21, 0x00	; 0
     972:	47 30       	cpi	r20, 0x07	; 7
     974:	51 05       	cpc	r21, r1
     976:	08 f0       	brcs	.+2      	; 0x97a <DIO_ConfigChannel+0x22>
     978:	d4 c0       	rjmp	.+424    	; 0xb22 <DIO_ConfigChannel+0x1ca>
     97a:	fa 01       	movw	r30, r20
     97c:	ec 5a       	subi	r30, 0xAC	; 172
     97e:	ff 4f       	sbci	r31, 0xFF	; 255
     980:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__tablejump2__>
     984:	4a b3       	in	r20, 0x1a	; 26
     986:	21 e0       	ldi	r18, 0x01	; 1
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	b9 01       	movw	r22, r18
     98c:	02 c0       	rjmp	.+4      	; 0x992 <DIO_ConfigChannel+0x3a>
     98e:	66 0f       	add	r22, r22
     990:	77 1f       	adc	r23, r23
     992:	8a 95       	dec	r24
     994:	e2 f7       	brpl	.-8      	; 0x98e <DIO_ConfigChannel+0x36>
     996:	cb 01       	movw	r24, r22
     998:	80 95       	com	r24
     99a:	84 23       	and	r24, r20
     99c:	8a bb       	out	0x1a, r24	; 26
     99e:	08 95       	ret
     9a0:	47 b3       	in	r20, 0x17	; 23
     9a2:	21 e0       	ldi	r18, 0x01	; 1
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	b9 01       	movw	r22, r18
     9a8:	02 c0       	rjmp	.+4      	; 0x9ae <DIO_ConfigChannel+0x56>
     9aa:	66 0f       	add	r22, r22
     9ac:	77 1f       	adc	r23, r23
     9ae:	8a 95       	dec	r24
     9b0:	e2 f7       	brpl	.-8      	; 0x9aa <DIO_ConfigChannel+0x52>
     9b2:	cb 01       	movw	r24, r22
     9b4:	80 95       	com	r24
     9b6:	84 23       	and	r24, r20
     9b8:	87 bb       	out	0x17, r24	; 23
     9ba:	08 95       	ret
     9bc:	44 b3       	in	r20, 0x14	; 20
     9be:	21 e0       	ldi	r18, 0x01	; 1
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	b9 01       	movw	r22, r18
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <DIO_ConfigChannel+0x72>
     9c6:	66 0f       	add	r22, r22
     9c8:	77 1f       	adc	r23, r23
     9ca:	8a 95       	dec	r24
     9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <DIO_ConfigChannel+0x6e>
     9ce:	cb 01       	movw	r24, r22
     9d0:	80 95       	com	r24
     9d2:	84 23       	and	r24, r20
     9d4:	84 bb       	out	0x14, r24	; 20
     9d6:	08 95       	ret
     9d8:	41 b3       	in	r20, 0x11	; 17
     9da:	21 e0       	ldi	r18, 0x01	; 1
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	b9 01       	movw	r22, r18
     9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <DIO_ConfigChannel+0x8e>
     9e2:	66 0f       	add	r22, r22
     9e4:	77 1f       	adc	r23, r23
     9e6:	8a 95       	dec	r24
     9e8:	e2 f7       	brpl	.-8      	; 0x9e2 <DIO_ConfigChannel+0x8a>
     9ea:	cb 01       	movw	r24, r22
     9ec:	80 95       	com	r24
     9ee:	84 23       	and	r24, r20
     9f0:	81 bb       	out	0x11, r24	; 17
     9f2:	08 95       	ret
     9f4:	42 b1       	in	r20, 0x02	; 2
     9f6:	21 e0       	ldi	r18, 0x01	; 1
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	b9 01       	movw	r22, r18
     9fc:	02 c0       	rjmp	.+4      	; 0xa02 <DIO_ConfigChannel+0xaa>
     9fe:	66 0f       	add	r22, r22
     a00:	77 1f       	adc	r23, r23
     a02:	8a 95       	dec	r24
     a04:	e2 f7       	brpl	.-8      	; 0x9fe <DIO_ConfigChannel+0xa6>
     a06:	cb 01       	movw	r24, r22
     a08:	80 95       	com	r24
     a0a:	84 23       	and	r24, r20
     a0c:	82 b9       	out	0x02, r24	; 2
     a0e:	08 95       	ret
     a10:	e1 e6       	ldi	r30, 0x61	; 97
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	40 81       	ld	r20, Z
     a16:	21 e0       	ldi	r18, 0x01	; 1
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	b9 01       	movw	r22, r18
     a1c:	02 c0       	rjmp	.+4      	; 0xa22 <DIO_ConfigChannel+0xca>
     a1e:	66 0f       	add	r22, r22
     a20:	77 1f       	adc	r23, r23
     a22:	8a 95       	dec	r24
     a24:	e2 f7       	brpl	.-8      	; 0xa1e <DIO_ConfigChannel+0xc6>
     a26:	cb 01       	movw	r24, r22
     a28:	80 95       	com	r24
     a2a:	84 23       	and	r24, r20
     a2c:	80 83       	st	Z, r24
     a2e:	08 95       	ret
     a30:	e4 e6       	ldi	r30, 0x64	; 100
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	40 81       	ld	r20, Z
     a36:	21 e0       	ldi	r18, 0x01	; 1
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	b9 01       	movw	r22, r18
     a3c:	02 c0       	rjmp	.+4      	; 0xa42 <DIO_ConfigChannel+0xea>
     a3e:	66 0f       	add	r22, r22
     a40:	77 1f       	adc	r23, r23
     a42:	8a 95       	dec	r24
     a44:	e2 f7       	brpl	.-8      	; 0xa3e <DIO_ConfigChannel+0xe6>
     a46:	cb 01       	movw	r24, r22
     a48:	80 95       	com	r24
     a4a:	84 23       	and	r24, r20
     a4c:	80 83       	st	Z, r24
     a4e:	08 95       	ret
     a50:	4e 2f       	mov	r20, r30
     a52:	50 e0       	ldi	r21, 0x00	; 0
     a54:	47 30       	cpi	r20, 0x07	; 7
     a56:	51 05       	cpc	r21, r1
     a58:	08 f0       	brcs	.+2      	; 0xa5c <DIO_ConfigChannel+0x104>
     a5a:	63 c0       	rjmp	.+198    	; 0xb22 <DIO_ConfigChannel+0x1ca>
     a5c:	fa 01       	movw	r30, r20
     a5e:	e5 5a       	subi	r30, 0xA5	; 165
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__tablejump2__>
     a66:	4a b3       	in	r20, 0x1a	; 26
     a68:	21 e0       	ldi	r18, 0x01	; 1
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	b9 01       	movw	r22, r18
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <DIO_ConfigChannel+0x11c>
     a70:	66 0f       	add	r22, r22
     a72:	77 1f       	adc	r23, r23
     a74:	8a 95       	dec	r24
     a76:	e2 f7       	brpl	.-8      	; 0xa70 <DIO_ConfigChannel+0x118>
     a78:	cb 01       	movw	r24, r22
     a7a:	84 2b       	or	r24, r20
     a7c:	8a bb       	out	0x1a, r24	; 26
     a7e:	08 95       	ret
     a80:	47 b3       	in	r20, 0x17	; 23
     a82:	21 e0       	ldi	r18, 0x01	; 1
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	b9 01       	movw	r22, r18
     a88:	02 c0       	rjmp	.+4      	; 0xa8e <DIO_ConfigChannel+0x136>
     a8a:	66 0f       	add	r22, r22
     a8c:	77 1f       	adc	r23, r23
     a8e:	8a 95       	dec	r24
     a90:	e2 f7       	brpl	.-8      	; 0xa8a <DIO_ConfigChannel+0x132>
     a92:	cb 01       	movw	r24, r22
     a94:	84 2b       	or	r24, r20
     a96:	87 bb       	out	0x17, r24	; 23
     a98:	08 95       	ret
     a9a:	44 b3       	in	r20, 0x14	; 20
     a9c:	21 e0       	ldi	r18, 0x01	; 1
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	b9 01       	movw	r22, r18
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <DIO_ConfigChannel+0x150>
     aa4:	66 0f       	add	r22, r22
     aa6:	77 1f       	adc	r23, r23
     aa8:	8a 95       	dec	r24
     aaa:	e2 f7       	brpl	.-8      	; 0xaa4 <DIO_ConfigChannel+0x14c>
     aac:	cb 01       	movw	r24, r22
     aae:	84 2b       	or	r24, r20
     ab0:	84 bb       	out	0x14, r24	; 20
     ab2:	08 95       	ret
     ab4:	41 b3       	in	r20, 0x11	; 17
     ab6:	21 e0       	ldi	r18, 0x01	; 1
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	b9 01       	movw	r22, r18
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <DIO_ConfigChannel+0x16a>
     abe:	66 0f       	add	r22, r22
     ac0:	77 1f       	adc	r23, r23
     ac2:	8a 95       	dec	r24
     ac4:	e2 f7       	brpl	.-8      	; 0xabe <DIO_ConfigChannel+0x166>
     ac6:	cb 01       	movw	r24, r22
     ac8:	84 2b       	or	r24, r20
     aca:	81 bb       	out	0x11, r24	; 17
     acc:	08 95       	ret
     ace:	42 b1       	in	r20, 0x02	; 2
     ad0:	21 e0       	ldi	r18, 0x01	; 1
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	b9 01       	movw	r22, r18
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <DIO_ConfigChannel+0x184>
     ad8:	66 0f       	add	r22, r22
     ada:	77 1f       	adc	r23, r23
     adc:	8a 95       	dec	r24
     ade:	e2 f7       	brpl	.-8      	; 0xad8 <DIO_ConfigChannel+0x180>
     ae0:	cb 01       	movw	r24, r22
     ae2:	84 2b       	or	r24, r20
     ae4:	82 b9       	out	0x02, r24	; 2
     ae6:	08 95       	ret
     ae8:	e1 e6       	ldi	r30, 0x61	; 97
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	40 81       	ld	r20, Z
     aee:	21 e0       	ldi	r18, 0x01	; 1
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	b9 01       	movw	r22, r18
     af4:	02 c0       	rjmp	.+4      	; 0xafa <DIO_ConfigChannel+0x1a2>
     af6:	66 0f       	add	r22, r22
     af8:	77 1f       	adc	r23, r23
     afa:	8a 95       	dec	r24
     afc:	e2 f7       	brpl	.-8      	; 0xaf6 <DIO_ConfigChannel+0x19e>
     afe:	cb 01       	movw	r24, r22
     b00:	84 2b       	or	r24, r20
     b02:	80 83       	st	Z, r24
     b04:	08 95       	ret
     b06:	e4 e6       	ldi	r30, 0x64	; 100
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	40 81       	ld	r20, Z
     b0c:	21 e0       	ldi	r18, 0x01	; 1
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	b9 01       	movw	r22, r18
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <DIO_ConfigChannel+0x1c0>
     b14:	66 0f       	add	r22, r22
     b16:	77 1f       	adc	r23, r23
     b18:	8a 95       	dec	r24
     b1a:	e2 f7       	brpl	.-8      	; 0xb14 <DIO_ConfigChannel+0x1bc>
     b1c:	cb 01       	movw	r24, r22
     b1e:	84 2b       	or	r24, r20
     b20:	80 83       	st	Z, r24
     b22:	08 95       	ret

00000b24 <DIO_ConfigPullUp>:
     b24:	e8 2f       	mov	r30, r24
     b26:	e6 95       	lsr	r30
     b28:	e6 95       	lsr	r30
     b2a:	e6 95       	lsr	r30
     b2c:	87 70       	andi	r24, 0x07	; 7
     b2e:	66 23       	and	r22, r22
     b30:	21 f0       	breq	.+8      	; 0xb3a <DIO_ConfigPullUp+0x16>
     b32:	61 30       	cpi	r22, 0x01	; 1
     b34:	09 f4       	brne	.+2      	; 0xb38 <DIO_ConfigPullUp+0x14>
     b36:	72 c0       	rjmp	.+228    	; 0xc1c <DIO_ConfigPullUp+0xf8>
     b38:	08 95       	ret
     b3a:	4e 2f       	mov	r20, r30
     b3c:	50 e0       	ldi	r21, 0x00	; 0
     b3e:	47 30       	cpi	r20, 0x07	; 7
     b40:	51 05       	cpc	r21, r1
     b42:	08 f0       	brcs	.+2      	; 0xb46 <DIO_ConfigPullUp+0x22>
     b44:	d4 c0       	rjmp	.+424    	; 0xcee <DIO_ConfigPullUp+0x1ca>
     b46:	fa 01       	movw	r30, r20
     b48:	ee 59       	subi	r30, 0x9E	; 158
     b4a:	ff 4f       	sbci	r31, 0xFF	; 255
     b4c:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__tablejump2__>
     b50:	4b b3       	in	r20, 0x1b	; 27
     b52:	21 e0       	ldi	r18, 0x01	; 1
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	b9 01       	movw	r22, r18
     b58:	02 c0       	rjmp	.+4      	; 0xb5e <DIO_ConfigPullUp+0x3a>
     b5a:	66 0f       	add	r22, r22
     b5c:	77 1f       	adc	r23, r23
     b5e:	8a 95       	dec	r24
     b60:	e2 f7       	brpl	.-8      	; 0xb5a <DIO_ConfigPullUp+0x36>
     b62:	cb 01       	movw	r24, r22
     b64:	80 95       	com	r24
     b66:	84 23       	and	r24, r20
     b68:	8b bb       	out	0x1b, r24	; 27
     b6a:	08 95       	ret
     b6c:	48 b3       	in	r20, 0x18	; 24
     b6e:	21 e0       	ldi	r18, 0x01	; 1
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	b9 01       	movw	r22, r18
     b74:	02 c0       	rjmp	.+4      	; 0xb7a <DIO_ConfigPullUp+0x56>
     b76:	66 0f       	add	r22, r22
     b78:	77 1f       	adc	r23, r23
     b7a:	8a 95       	dec	r24
     b7c:	e2 f7       	brpl	.-8      	; 0xb76 <DIO_ConfigPullUp+0x52>
     b7e:	cb 01       	movw	r24, r22
     b80:	80 95       	com	r24
     b82:	84 23       	and	r24, r20
     b84:	88 bb       	out	0x18, r24	; 24
     b86:	08 95       	ret
     b88:	45 b3       	in	r20, 0x15	; 21
     b8a:	21 e0       	ldi	r18, 0x01	; 1
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	b9 01       	movw	r22, r18
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <DIO_ConfigPullUp+0x72>
     b92:	66 0f       	add	r22, r22
     b94:	77 1f       	adc	r23, r23
     b96:	8a 95       	dec	r24
     b98:	e2 f7       	brpl	.-8      	; 0xb92 <DIO_ConfigPullUp+0x6e>
     b9a:	cb 01       	movw	r24, r22
     b9c:	80 95       	com	r24
     b9e:	84 23       	and	r24, r20
     ba0:	85 bb       	out	0x15, r24	; 21
     ba2:	08 95       	ret
     ba4:	42 b3       	in	r20, 0x12	; 18
     ba6:	21 e0       	ldi	r18, 0x01	; 1
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	b9 01       	movw	r22, r18
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <DIO_ConfigPullUp+0x8e>
     bae:	66 0f       	add	r22, r22
     bb0:	77 1f       	adc	r23, r23
     bb2:	8a 95       	dec	r24
     bb4:	e2 f7       	brpl	.-8      	; 0xbae <DIO_ConfigPullUp+0x8a>
     bb6:	cb 01       	movw	r24, r22
     bb8:	80 95       	com	r24
     bba:	84 23       	and	r24, r20
     bbc:	82 bb       	out	0x12, r24	; 18
     bbe:	08 95       	ret
     bc0:	43 b1       	in	r20, 0x03	; 3
     bc2:	21 e0       	ldi	r18, 0x01	; 1
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	b9 01       	movw	r22, r18
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <DIO_ConfigPullUp+0xaa>
     bca:	66 0f       	add	r22, r22
     bcc:	77 1f       	adc	r23, r23
     bce:	8a 95       	dec	r24
     bd0:	e2 f7       	brpl	.-8      	; 0xbca <DIO_ConfigPullUp+0xa6>
     bd2:	cb 01       	movw	r24, r22
     bd4:	80 95       	com	r24
     bd6:	84 23       	and	r24, r20
     bd8:	83 b9       	out	0x03, r24	; 3
     bda:	08 95       	ret
     bdc:	e2 e6       	ldi	r30, 0x62	; 98
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	40 81       	ld	r20, Z
     be2:	21 e0       	ldi	r18, 0x01	; 1
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	b9 01       	movw	r22, r18
     be8:	02 c0       	rjmp	.+4      	; 0xbee <DIO_ConfigPullUp+0xca>
     bea:	66 0f       	add	r22, r22
     bec:	77 1f       	adc	r23, r23
     bee:	8a 95       	dec	r24
     bf0:	e2 f7       	brpl	.-8      	; 0xbea <DIO_ConfigPullUp+0xc6>
     bf2:	cb 01       	movw	r24, r22
     bf4:	80 95       	com	r24
     bf6:	84 23       	and	r24, r20
     bf8:	80 83       	st	Z, r24
     bfa:	08 95       	ret
     bfc:	e5 e6       	ldi	r30, 0x65	; 101
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	40 81       	ld	r20, Z
     c02:	21 e0       	ldi	r18, 0x01	; 1
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	b9 01       	movw	r22, r18
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <DIO_ConfigPullUp+0xea>
     c0a:	66 0f       	add	r22, r22
     c0c:	77 1f       	adc	r23, r23
     c0e:	8a 95       	dec	r24
     c10:	e2 f7       	brpl	.-8      	; 0xc0a <DIO_ConfigPullUp+0xe6>
     c12:	cb 01       	movw	r24, r22
     c14:	80 95       	com	r24
     c16:	84 23       	and	r24, r20
     c18:	80 83       	st	Z, r24
     c1a:	08 95       	ret
     c1c:	4e 2f       	mov	r20, r30
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	47 30       	cpi	r20, 0x07	; 7
     c22:	51 05       	cpc	r21, r1
     c24:	08 f0       	brcs	.+2      	; 0xc28 <DIO_ConfigPullUp+0x104>
     c26:	63 c0       	rjmp	.+198    	; 0xcee <DIO_ConfigPullUp+0x1ca>
     c28:	fa 01       	movw	r30, r20
     c2a:	e7 59       	subi	r30, 0x97	; 151
     c2c:	ff 4f       	sbci	r31, 0xFF	; 255
     c2e:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__tablejump2__>
     c32:	4b b3       	in	r20, 0x1b	; 27
     c34:	21 e0       	ldi	r18, 0x01	; 1
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	b9 01       	movw	r22, r18
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <DIO_ConfigPullUp+0x11c>
     c3c:	66 0f       	add	r22, r22
     c3e:	77 1f       	adc	r23, r23
     c40:	8a 95       	dec	r24
     c42:	e2 f7       	brpl	.-8      	; 0xc3c <DIO_ConfigPullUp+0x118>
     c44:	cb 01       	movw	r24, r22
     c46:	84 2b       	or	r24, r20
     c48:	8b bb       	out	0x1b, r24	; 27
     c4a:	08 95       	ret
     c4c:	48 b3       	in	r20, 0x18	; 24
     c4e:	21 e0       	ldi	r18, 0x01	; 1
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	b9 01       	movw	r22, r18
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <DIO_ConfigPullUp+0x136>
     c56:	66 0f       	add	r22, r22
     c58:	77 1f       	adc	r23, r23
     c5a:	8a 95       	dec	r24
     c5c:	e2 f7       	brpl	.-8      	; 0xc56 <DIO_ConfigPullUp+0x132>
     c5e:	cb 01       	movw	r24, r22
     c60:	84 2b       	or	r24, r20
     c62:	88 bb       	out	0x18, r24	; 24
     c64:	08 95       	ret
     c66:	45 b3       	in	r20, 0x15	; 21
     c68:	21 e0       	ldi	r18, 0x01	; 1
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	b9 01       	movw	r22, r18
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <DIO_ConfigPullUp+0x150>
     c70:	66 0f       	add	r22, r22
     c72:	77 1f       	adc	r23, r23
     c74:	8a 95       	dec	r24
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <DIO_ConfigPullUp+0x14c>
     c78:	cb 01       	movw	r24, r22
     c7a:	84 2b       	or	r24, r20
     c7c:	85 bb       	out	0x15, r24	; 21
     c7e:	08 95       	ret
     c80:	42 b3       	in	r20, 0x12	; 18
     c82:	21 e0       	ldi	r18, 0x01	; 1
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	b9 01       	movw	r22, r18
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <DIO_ConfigPullUp+0x16a>
     c8a:	66 0f       	add	r22, r22
     c8c:	77 1f       	adc	r23, r23
     c8e:	8a 95       	dec	r24
     c90:	e2 f7       	brpl	.-8      	; 0xc8a <DIO_ConfigPullUp+0x166>
     c92:	cb 01       	movw	r24, r22
     c94:	84 2b       	or	r24, r20
     c96:	82 bb       	out	0x12, r24	; 18
     c98:	08 95       	ret
     c9a:	43 b1       	in	r20, 0x03	; 3
     c9c:	21 e0       	ldi	r18, 0x01	; 1
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	b9 01       	movw	r22, r18
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <DIO_ConfigPullUp+0x184>
     ca4:	66 0f       	add	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	e2 f7       	brpl	.-8      	; 0xca4 <DIO_ConfigPullUp+0x180>
     cac:	cb 01       	movw	r24, r22
     cae:	84 2b       	or	r24, r20
     cb0:	83 b9       	out	0x03, r24	; 3
     cb2:	08 95       	ret
     cb4:	e2 e6       	ldi	r30, 0x62	; 98
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	40 81       	ld	r20, Z
     cba:	21 e0       	ldi	r18, 0x01	; 1
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	b9 01       	movw	r22, r18
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <DIO_ConfigPullUp+0x1a2>
     cc2:	66 0f       	add	r22, r22
     cc4:	77 1f       	adc	r23, r23
     cc6:	8a 95       	dec	r24
     cc8:	e2 f7       	brpl	.-8      	; 0xcc2 <DIO_ConfigPullUp+0x19e>
     cca:	cb 01       	movw	r24, r22
     ccc:	84 2b       	or	r24, r20
     cce:	80 83       	st	Z, r24
     cd0:	08 95       	ret
     cd2:	e5 e6       	ldi	r30, 0x65	; 101
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	40 81       	ld	r20, Z
     cd8:	21 e0       	ldi	r18, 0x01	; 1
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	b9 01       	movw	r22, r18
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <DIO_ConfigPullUp+0x1c0>
     ce0:	66 0f       	add	r22, r22
     ce2:	77 1f       	adc	r23, r23
     ce4:	8a 95       	dec	r24
     ce6:	e2 f7       	brpl	.-8      	; 0xce0 <DIO_ConfigPullUp+0x1bc>
     ce8:	cb 01       	movw	r24, r22
     cea:	84 2b       	or	r24, r20
     cec:	80 83       	st	Z, r24
     cee:	08 95       	ret

00000cf0 <DIO_WritePort>:
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	87 30       	cpi	r24, 0x07	; 7
     cf4:	91 05       	cpc	r25, r1
     cf6:	a0 f4       	brcc	.+40     	; 0xd20 <DIO_WritePort+0x30>
     cf8:	fc 01       	movw	r30, r24
     cfa:	e0 59       	subi	r30, 0x90	; 144
     cfc:	ff 4f       	sbci	r31, 0xFF	; 255
     cfe:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__tablejump2__>
     d02:	6b bb       	out	0x1b, r22	; 27
     d04:	08 95       	ret
     d06:	68 bb       	out	0x18, r22	; 24
     d08:	08 95       	ret
     d0a:	65 bb       	out	0x15, r22	; 21
     d0c:	08 95       	ret
     d0e:	62 bb       	out	0x12, r22	; 18
     d10:	08 95       	ret
     d12:	63 b9       	out	0x03, r22	; 3
     d14:	08 95       	ret
     d16:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d1a:	08 95       	ret
     d1c:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     d20:	08 95       	ret

00000d22 <DIO_ConfigPort>:
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	87 30       	cpi	r24, 0x07	; 7
     d26:	91 05       	cpc	r25, r1
     d28:	a0 f4       	brcc	.+40     	; 0xd52 <DIO_ConfigPort+0x30>
     d2a:	fc 01       	movw	r30, r24
     d2c:	e9 58       	subi	r30, 0x89	; 137
     d2e:	ff 4f       	sbci	r31, 0xFF	; 255
     d30:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__tablejump2__>
     d34:	6a bb       	out	0x1a, r22	; 26
     d36:	08 95       	ret
     d38:	67 bb       	out	0x17, r22	; 23
     d3a:	08 95       	ret
     d3c:	64 bb       	out	0x14, r22	; 20
     d3e:	08 95       	ret
     d40:	61 bb       	out	0x11, r22	; 17
     d42:	08 95       	ret
     d44:	62 b9       	out	0x02, r22	; 2
     d46:	08 95       	ret
     d48:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     d4c:	08 95       	ret
     d4e:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     d52:	08 95       	ret

00000d54 <DIO_WriteHighNibble>:
	}
}

void DIO_WriteHighNibble(DIO_PortTypes PortID, u_int8 NibbleValue)
{
	NibbleValue &= 0xF0;
     d54:	60 7f       	andi	r22, 0xF0	; 240
	switch(PortID)
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	87 30       	cpi	r24, 0x07	; 7
     d5a:	91 05       	cpc	r25, r1
     d5c:	c8 f5       	brcc	.+114    	; 0xdd0 <DIO_WriteHighNibble+0x7c>
     d5e:	fc 01       	movw	r30, r24
     d60:	e2 58       	subi	r30, 0x82	; 130
     d62:	ff 4f       	sbci	r31, 0xFF	; 255
     d64:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__tablejump2__>
	{
		case DIO_PortA:
		{
			PORTA_Register &= 0x0F;
     d68:	8b b3       	in	r24, 0x1b	; 27
     d6a:	8f 70       	andi	r24, 0x0F	; 15
     d6c:	8b bb       	out	0x1b, r24	; 27
			PORTA_Register |= NibbleValue;
     d6e:	8b b3       	in	r24, 0x1b	; 27
     d70:	68 2b       	or	r22, r24
     d72:	6b bb       	out	0x1b, r22	; 27
			break;
     d74:	08 95       	ret
		}
		case DIO_PortB:
		{
			PORTB_Register &= 0x0F;
     d76:	88 b3       	in	r24, 0x18	; 24
     d78:	8f 70       	andi	r24, 0x0F	; 15
     d7a:	88 bb       	out	0x18, r24	; 24
			PORTB_Register |= NibbleValue;
     d7c:	88 b3       	in	r24, 0x18	; 24
     d7e:	68 2b       	or	r22, r24
     d80:	68 bb       	out	0x18, r22	; 24
			break;
     d82:	08 95       	ret
		}
		case DIO_PortC:
		{
			PORTC_Register &= 0x0F;
     d84:	85 b3       	in	r24, 0x15	; 21
     d86:	8f 70       	andi	r24, 0x0F	; 15
     d88:	85 bb       	out	0x15, r24	; 21
			PORTC_Register |= NibbleValue;
     d8a:	85 b3       	in	r24, 0x15	; 21
     d8c:	68 2b       	or	r22, r24
     d8e:	65 bb       	out	0x15, r22	; 21
			break;
     d90:	08 95       	ret
		}
		case DIO_PortD:
		{
			PORTD_Register &= 0x0F;
     d92:	82 b3       	in	r24, 0x12	; 18
     d94:	8f 70       	andi	r24, 0x0F	; 15
     d96:	82 bb       	out	0x12, r24	; 18
			PORTD_Register |= NibbleValue;
     d98:	82 b3       	in	r24, 0x12	; 18
     d9a:	68 2b       	or	r22, r24
     d9c:	62 bb       	out	0x12, r22	; 18
			break;
     d9e:	08 95       	ret
		}
		case DIO_PortE:
		{
			PORTE_Register &= 0x0F;
     da0:	83 b1       	in	r24, 0x03	; 3
     da2:	8f 70       	andi	r24, 0x0F	; 15
     da4:	83 b9       	out	0x03, r24	; 3
			PORTE_Register |= NibbleValue;
     da6:	83 b1       	in	r24, 0x03	; 3
     da8:	68 2b       	or	r22, r24
     daa:	63 b9       	out	0x03, r22	; 3
			break;
     dac:	08 95       	ret
		}
		case DIO_PortF:
		{
			PORTF_Register &= 0x0F;
     dae:	e2 e6       	ldi	r30, 0x62	; 98
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	8f 70       	andi	r24, 0x0F	; 15
     db6:	80 83       	st	Z, r24
			PORTF_Register |= NibbleValue;
     db8:	80 81       	ld	r24, Z
     dba:	68 2b       	or	r22, r24
     dbc:	60 83       	st	Z, r22
			break;
     dbe:	08 95       	ret
		}
		case DIO_PortG:
		{
			PORTG_Register &= 0x0F;
     dc0:	e5 e6       	ldi	r30, 0x65	; 101
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	8f 70       	andi	r24, 0x0F	; 15
     dc8:	80 83       	st	Z, r24
			PORTG_Register |= NibbleValue;
     dca:	80 81       	ld	r24, Z
     dcc:	68 2b       	or	r22, r24
     dce:	60 83       	st	Z, r22
     dd0:	08 95       	ret

00000dd2 <__vector_1>:
			break;
	}
}

ISR(INT0_vect)
{
     dd2:	1f 92       	push	r1
     dd4:	0f 92       	push	r0
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	0f 92       	push	r0
     dda:	11 24       	eor	r1, r1
     ddc:	0b b6       	in	r0, 0x3b	; 59
     dde:	0f 92       	push	r0
     de0:	2f 93       	push	r18
     de2:	3f 93       	push	r19
     de4:	4f 93       	push	r20
     de6:	5f 93       	push	r21
     de8:	6f 93       	push	r22
     dea:	7f 93       	push	r23
     dec:	8f 93       	push	r24
     dee:	9f 93       	push	r25
     df0:	af 93       	push	r26
     df2:	bf 93       	push	r27
     df4:	ef 93       	push	r30
     df6:	ff 93       	push	r31
	EXT_INTERRUPT0_FUNCTION_PTR();
     df8:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <EXT_INTERRUPT0_FUNCTION_PTR>
     dfc:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <EXT_INTERRUPT0_FUNCTION_PTR+0x1>
     e00:	09 95       	icall
}
     e02:	ff 91       	pop	r31
     e04:	ef 91       	pop	r30
     e06:	bf 91       	pop	r27
     e08:	af 91       	pop	r26
     e0a:	9f 91       	pop	r25
     e0c:	8f 91       	pop	r24
     e0e:	7f 91       	pop	r23
     e10:	6f 91       	pop	r22
     e12:	5f 91       	pop	r21
     e14:	4f 91       	pop	r20
     e16:	3f 91       	pop	r19
     e18:	2f 91       	pop	r18
     e1a:	0f 90       	pop	r0
     e1c:	0b be       	out	0x3b, r0	; 59
     e1e:	0f 90       	pop	r0
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	0f 90       	pop	r0
     e24:	1f 90       	pop	r1
     e26:	18 95       	reti

00000e28 <__vector_2>:

ISR(INT1_vect)
{
     e28:	1f 92       	push	r1
     e2a:	0f 92       	push	r0
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	0f 92       	push	r0
     e30:	11 24       	eor	r1, r1
     e32:	0b b6       	in	r0, 0x3b	; 59
     e34:	0f 92       	push	r0
     e36:	2f 93       	push	r18
     e38:	3f 93       	push	r19
     e3a:	4f 93       	push	r20
     e3c:	5f 93       	push	r21
     e3e:	6f 93       	push	r22
     e40:	7f 93       	push	r23
     e42:	8f 93       	push	r24
     e44:	9f 93       	push	r25
     e46:	af 93       	push	r26
     e48:	bf 93       	push	r27
     e4a:	ef 93       	push	r30
     e4c:	ff 93       	push	r31
	EXT_INTERRUPT1_FUNCTION_PTR();
     e4e:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <EXT_INTERRUPT1_FUNCTION_PTR>
     e52:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <EXT_INTERRUPT1_FUNCTION_PTR+0x1>
     e56:	09 95       	icall
}
     e58:	ff 91       	pop	r31
     e5a:	ef 91       	pop	r30
     e5c:	bf 91       	pop	r27
     e5e:	af 91       	pop	r26
     e60:	9f 91       	pop	r25
     e62:	8f 91       	pop	r24
     e64:	7f 91       	pop	r23
     e66:	6f 91       	pop	r22
     e68:	5f 91       	pop	r21
     e6a:	4f 91       	pop	r20
     e6c:	3f 91       	pop	r19
     e6e:	2f 91       	pop	r18
     e70:	0f 90       	pop	r0
     e72:	0b be       	out	0x3b, r0	; 59
     e74:	0f 90       	pop	r0
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	0f 90       	pop	r0
     e7a:	1f 90       	pop	r1
     e7c:	18 95       	reti

00000e7e <__vector_3>:

ISR(INT2_vect)
{
     e7e:	1f 92       	push	r1
     e80:	0f 92       	push	r0
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	0f 92       	push	r0
     e86:	11 24       	eor	r1, r1
     e88:	0b b6       	in	r0, 0x3b	; 59
     e8a:	0f 92       	push	r0
     e8c:	2f 93       	push	r18
     e8e:	3f 93       	push	r19
     e90:	4f 93       	push	r20
     e92:	5f 93       	push	r21
     e94:	6f 93       	push	r22
     e96:	7f 93       	push	r23
     e98:	8f 93       	push	r24
     e9a:	9f 93       	push	r25
     e9c:	af 93       	push	r26
     e9e:	bf 93       	push	r27
     ea0:	ef 93       	push	r30
     ea2:	ff 93       	push	r31
	EXT_INTERRUPT2_FUNCTION_PTR();
     ea4:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <EXT_INTERRUPT2_FUNCTION_PTR>
     ea8:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <EXT_INTERRUPT2_FUNCTION_PTR+0x1>
     eac:	09 95       	icall
}
     eae:	ff 91       	pop	r31
     eb0:	ef 91       	pop	r30
     eb2:	bf 91       	pop	r27
     eb4:	af 91       	pop	r26
     eb6:	9f 91       	pop	r25
     eb8:	8f 91       	pop	r24
     eba:	7f 91       	pop	r23
     ebc:	6f 91       	pop	r22
     ebe:	5f 91       	pop	r21
     ec0:	4f 91       	pop	r20
     ec2:	3f 91       	pop	r19
     ec4:	2f 91       	pop	r18
     ec6:	0f 90       	pop	r0
     ec8:	0b be       	out	0x3b, r0	; 59
     eca:	0f 90       	pop	r0
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	0f 90       	pop	r0
     ed0:	1f 90       	pop	r1
     ed2:	18 95       	reti

00000ed4 <__vector_4>:

ISR(INT3_vect)
{
     ed4:	1f 92       	push	r1
     ed6:	0f 92       	push	r0
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	0f 92       	push	r0
     edc:	11 24       	eor	r1, r1
     ede:	0b b6       	in	r0, 0x3b	; 59
     ee0:	0f 92       	push	r0
     ee2:	2f 93       	push	r18
     ee4:	3f 93       	push	r19
     ee6:	4f 93       	push	r20
     ee8:	5f 93       	push	r21
     eea:	6f 93       	push	r22
     eec:	7f 93       	push	r23
     eee:	8f 93       	push	r24
     ef0:	9f 93       	push	r25
     ef2:	af 93       	push	r26
     ef4:	bf 93       	push	r27
     ef6:	ef 93       	push	r30
     ef8:	ff 93       	push	r31
	EXT_INTERRUPT3_FUNCTION_PTR();
     efa:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <EXT_INTERRUPT3_FUNCTION_PTR>
     efe:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <EXT_INTERRUPT3_FUNCTION_PTR+0x1>
     f02:	09 95       	icall
}
     f04:	ff 91       	pop	r31
     f06:	ef 91       	pop	r30
     f08:	bf 91       	pop	r27
     f0a:	af 91       	pop	r26
     f0c:	9f 91       	pop	r25
     f0e:	8f 91       	pop	r24
     f10:	7f 91       	pop	r23
     f12:	6f 91       	pop	r22
     f14:	5f 91       	pop	r21
     f16:	4f 91       	pop	r20
     f18:	3f 91       	pop	r19
     f1a:	2f 91       	pop	r18
     f1c:	0f 90       	pop	r0
     f1e:	0b be       	out	0x3b, r0	; 59
     f20:	0f 90       	pop	r0
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	0f 90       	pop	r0
     f26:	1f 90       	pop	r1
     f28:	18 95       	reti

00000f2a <__vector_5>:

ISR(INT4_vect)
{
     f2a:	1f 92       	push	r1
     f2c:	0f 92       	push	r0
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	0f 92       	push	r0
     f32:	11 24       	eor	r1, r1
     f34:	0b b6       	in	r0, 0x3b	; 59
     f36:	0f 92       	push	r0
     f38:	2f 93       	push	r18
     f3a:	3f 93       	push	r19
     f3c:	4f 93       	push	r20
     f3e:	5f 93       	push	r21
     f40:	6f 93       	push	r22
     f42:	7f 93       	push	r23
     f44:	8f 93       	push	r24
     f46:	9f 93       	push	r25
     f48:	af 93       	push	r26
     f4a:	bf 93       	push	r27
     f4c:	ef 93       	push	r30
     f4e:	ff 93       	push	r31
	EXT_INTERRUPT4_FUNCTION_PTR();
     f50:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <EXT_INTERRUPT4_FUNCTION_PTR>
     f54:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <EXT_INTERRUPT4_FUNCTION_PTR+0x1>
     f58:	09 95       	icall
}
     f5a:	ff 91       	pop	r31
     f5c:	ef 91       	pop	r30
     f5e:	bf 91       	pop	r27
     f60:	af 91       	pop	r26
     f62:	9f 91       	pop	r25
     f64:	8f 91       	pop	r24
     f66:	7f 91       	pop	r23
     f68:	6f 91       	pop	r22
     f6a:	5f 91       	pop	r21
     f6c:	4f 91       	pop	r20
     f6e:	3f 91       	pop	r19
     f70:	2f 91       	pop	r18
     f72:	0f 90       	pop	r0
     f74:	0b be       	out	0x3b, r0	; 59
     f76:	0f 90       	pop	r0
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	0f 90       	pop	r0
     f7c:	1f 90       	pop	r1
     f7e:	18 95       	reti

00000f80 <__vector_6>:

ISR(INT5_vect)
{
     f80:	1f 92       	push	r1
     f82:	0f 92       	push	r0
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	0f 92       	push	r0
     f88:	11 24       	eor	r1, r1
     f8a:	0b b6       	in	r0, 0x3b	; 59
     f8c:	0f 92       	push	r0
     f8e:	2f 93       	push	r18
     f90:	3f 93       	push	r19
     f92:	4f 93       	push	r20
     f94:	5f 93       	push	r21
     f96:	6f 93       	push	r22
     f98:	7f 93       	push	r23
     f9a:	8f 93       	push	r24
     f9c:	9f 93       	push	r25
     f9e:	af 93       	push	r26
     fa0:	bf 93       	push	r27
     fa2:	ef 93       	push	r30
     fa4:	ff 93       	push	r31
	EXT_INTERRUPT5_FUNCTION_PTR();
     fa6:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <EXT_INTERRUPT5_FUNCTION_PTR>
     faa:	f0 91 77 01 	lds	r31, 0x0177	; 0x800177 <EXT_INTERRUPT5_FUNCTION_PTR+0x1>
     fae:	09 95       	icall
}
     fb0:	ff 91       	pop	r31
     fb2:	ef 91       	pop	r30
     fb4:	bf 91       	pop	r27
     fb6:	af 91       	pop	r26
     fb8:	9f 91       	pop	r25
     fba:	8f 91       	pop	r24
     fbc:	7f 91       	pop	r23
     fbe:	6f 91       	pop	r22
     fc0:	5f 91       	pop	r21
     fc2:	4f 91       	pop	r20
     fc4:	3f 91       	pop	r19
     fc6:	2f 91       	pop	r18
     fc8:	0f 90       	pop	r0
     fca:	0b be       	out	0x3b, r0	; 59
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <__vector_7>:

ISR(INT6_vect)
{
     fd6:	1f 92       	push	r1
     fd8:	0f 92       	push	r0
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	0f 92       	push	r0
     fde:	11 24       	eor	r1, r1
     fe0:	0b b6       	in	r0, 0x3b	; 59
     fe2:	0f 92       	push	r0
     fe4:	2f 93       	push	r18
     fe6:	3f 93       	push	r19
     fe8:	4f 93       	push	r20
     fea:	5f 93       	push	r21
     fec:	6f 93       	push	r22
     fee:	7f 93       	push	r23
     ff0:	8f 93       	push	r24
     ff2:	9f 93       	push	r25
     ff4:	af 93       	push	r26
     ff6:	bf 93       	push	r27
     ff8:	ef 93       	push	r30
     ffa:	ff 93       	push	r31
	EXT_INTERRUPT6_FUNCTION_PTR();
     ffc:	e0 91 74 01 	lds	r30, 0x0174	; 0x800174 <EXT_INTERRUPT6_FUNCTION_PTR>
    1000:	f0 91 75 01 	lds	r31, 0x0175	; 0x800175 <EXT_INTERRUPT6_FUNCTION_PTR+0x1>
    1004:	09 95       	icall
}
    1006:	ff 91       	pop	r31
    1008:	ef 91       	pop	r30
    100a:	bf 91       	pop	r27
    100c:	af 91       	pop	r26
    100e:	9f 91       	pop	r25
    1010:	8f 91       	pop	r24
    1012:	7f 91       	pop	r23
    1014:	6f 91       	pop	r22
    1016:	5f 91       	pop	r21
    1018:	4f 91       	pop	r20
    101a:	3f 91       	pop	r19
    101c:	2f 91       	pop	r18
    101e:	0f 90       	pop	r0
    1020:	0b be       	out	0x3b, r0	; 59
    1022:	0f 90       	pop	r0
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	0f 90       	pop	r0
    1028:	1f 90       	pop	r1
    102a:	18 95       	reti

0000102c <__vector_8>:

ISR(INT7_vect)
{
    102c:	1f 92       	push	r1
    102e:	0f 92       	push	r0
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	0f 92       	push	r0
    1034:	11 24       	eor	r1, r1
    1036:	0b b6       	in	r0, 0x3b	; 59
    1038:	0f 92       	push	r0
    103a:	2f 93       	push	r18
    103c:	3f 93       	push	r19
    103e:	4f 93       	push	r20
    1040:	5f 93       	push	r21
    1042:	6f 93       	push	r22
    1044:	7f 93       	push	r23
    1046:	8f 93       	push	r24
    1048:	9f 93       	push	r25
    104a:	af 93       	push	r26
    104c:	bf 93       	push	r27
    104e:	ef 93       	push	r30
    1050:	ff 93       	push	r31
	EXT_INTERRUPT7_FUNCTION_PTR();
    1052:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <__data_end>
    1056:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <__data_end+0x1>
    105a:	09 95       	icall
    105c:	ff 91       	pop	r31
    105e:	ef 91       	pop	r30
    1060:	bf 91       	pop	r27
    1062:	af 91       	pop	r26
    1064:	9f 91       	pop	r25
    1066:	8f 91       	pop	r24
    1068:	7f 91       	pop	r23
    106a:	6f 91       	pop	r22
    106c:	5f 91       	pop	r21
    106e:	4f 91       	pop	r20
    1070:	3f 91       	pop	r19
    1072:	2f 91       	pop	r18
    1074:	0f 90       	pop	r0
    1076:	0b be       	out	0x3b, r0	; 59
    1078:	0f 90       	pop	r0
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	0f 90       	pop	r0
    107e:	1f 90       	pop	r1
    1080:	18 95       	reti

00001082 <GIE_Enable>:
	ClearBit(GIE_SREG, GIE_SREG_IBIT);
}

void GIE_Enable(void)
{
	SetBit(GIE_SREG, GIE_SREG_IBIT);
    1082:	8f b7       	in	r24, 0x3f	; 63
    1084:	80 68       	ori	r24, 0x80	; 128
    1086:	8f bf       	out	0x3f, r24	; 63
    1088:	08 95       	ret

0000108a <SPI_Init>:
	{
		SPI_Master_TransmitChar(*String);
		_delay_ms(150);
		String++;
	}
}
    108a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <SPI_CFG>
    108e:	88 23       	and	r24, r24
    1090:	09 f4       	brne	.+2      	; 0x1094 <SPI_Init+0xa>
    1092:	47 c0       	rjmp	.+142    	; 0x1122 <__stack+0x23>
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	09 f0       	breq	.+2      	; 0x109a <SPI_Init+0x10>
    1098:	84 c0       	rjmp	.+264    	; 0x11a2 <__stack+0xa3>
    109a:	61 e0       	ldi	r22, 0x01	; 1
    109c:	8a e0       	ldi	r24, 0x0A	; 10
    109e:	5c dc       	rcall	.-1864   	; 0x958 <DIO_ConfigChannel>
    10a0:	61 e0       	ldi	r22, 0x01	; 1
    10a2:	89 e0       	ldi	r24, 0x09	; 9
    10a4:	59 dc       	rcall	.-1870   	; 0x958 <DIO_ConfigChannel>
    10a6:	61 e0       	ldi	r22, 0x01	; 1
    10a8:	88 e0       	ldi	r24, 0x08	; 8
    10aa:	56 dc       	rcall	.-1876   	; 0x958 <DIO_ConfigChannel>
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	8b e0       	ldi	r24, 0x0B	; 11
    10b0:	53 dc       	rcall	.-1882   	; 0x958 <DIO_ConfigChannel>
    10b2:	61 e0       	ldi	r22, 0x01	; 1
    10b4:	88 e0       	ldi	r24, 0x08	; 8
    10b6:	6a db       	rcall	.-2348   	; 0x78c <DIO_WriteChannel>
    10b8:	2d b1       	in	r18, 0x0d	; 13
    10ba:	e9 e0       	ldi	r30, 0x09	; 9
    10bc:	f1 e0       	ldi	r31, 0x01	; 1
    10be:	90 81       	ld	r25, Z
    10c0:	30 e1       	ldi	r19, 0x10	; 16
    10c2:	93 9f       	mul	r25, r19
    10c4:	c0 01       	movw	r24, r0
    10c6:	11 24       	eor	r1, r1
    10c8:	82 2b       	or	r24, r18
    10ca:	8d b9       	out	0x0d, r24	; 13
    10cc:	9e b1       	in	r25, 0x0e	; 14
    10ce:	82 81       	ldd	r24, Z+2	; 0x02
    10d0:	89 2b       	or	r24, r25
    10d2:	8e b9       	out	0x0e, r24	; 14
    10d4:	9d b1       	in	r25, 0x0d	; 13
    10d6:	81 81       	ldd	r24, Z+1	; 0x01
    10d8:	89 2b       	or	r24, r25
    10da:	8d b9       	out	0x0d, r24	; 13
    10dc:	2d b1       	in	r18, 0x0d	; 13
    10de:	93 81       	ldd	r25, Z+3	; 0x03
    10e0:	30 e2       	ldi	r19, 0x20	; 32
    10e2:	93 9f       	mul	r25, r19
    10e4:	c0 01       	movw	r24, r0
    10e6:	11 24       	eor	r1, r1
    10e8:	82 2b       	or	r24, r18
    10ea:	8d b9       	out	0x0d, r24	; 13
    10ec:	2d b1       	in	r18, 0x0d	; 13
    10ee:	94 81       	ldd	r25, Z+4	; 0x04
    10f0:	30 e8       	ldi	r19, 0x80	; 128
    10f2:	93 9f       	mul	r25, r19
    10f4:	c0 01       	movw	r24, r0
    10f6:	11 24       	eor	r1, r1
    10f8:	82 2b       	or	r24, r18
    10fa:	8d b9       	out	0x0d, r24	; 13
    10fc:	2d b1       	in	r18, 0x0d	; 13
    10fe:	96 81       	ldd	r25, Z+6	; 0x06
    1100:	89 2f       	mov	r24, r25
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	82 2b       	or	r24, r18
    110e:	8d b9       	out	0x0d, r24	; 13
    1110:	2d b1       	in	r18, 0x0d	; 13
    1112:	95 81       	ldd	r25, Z+5	; 0x05
    1114:	30 e4       	ldi	r19, 0x40	; 64
    1116:	93 9f       	mul	r25, r19
    1118:	c0 01       	movw	r24, r0
    111a:	11 24       	eor	r1, r1
    111c:	82 2b       	or	r24, r18
    111e:	8d b9       	out	0x0d, r24	; 13
    1120:	08 95       	ret
    1122:	60 e0       	ldi	r22, 0x00	; 0
    1124:	8a e0       	ldi	r24, 0x0A	; 10
    1126:	18 dc       	rcall	.-2000   	; 0x958 <DIO_ConfigChannel>
    1128:	60 e0       	ldi	r22, 0x00	; 0
    112a:	89 e0       	ldi	r24, 0x09	; 9
    112c:	15 dc       	rcall	.-2006   	; 0x958 <DIO_ConfigChannel>
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	88 e0       	ldi	r24, 0x08	; 8
    1132:	12 dc       	rcall	.-2012   	; 0x958 <DIO_ConfigChannel>
    1134:	61 e0       	ldi	r22, 0x01	; 1
    1136:	8b e0       	ldi	r24, 0x0B	; 11
    1138:	0f dc       	rcall	.-2018   	; 0x958 <DIO_ConfigChannel>
    113a:	2d b1       	in	r18, 0x0d	; 13
    113c:	e9 e0       	ldi	r30, 0x09	; 9
    113e:	f1 e0       	ldi	r31, 0x01	; 1
    1140:	90 81       	ld	r25, Z
    1142:	30 e1       	ldi	r19, 0x10	; 16
    1144:	93 9f       	mul	r25, r19
    1146:	c0 01       	movw	r24, r0
    1148:	11 24       	eor	r1, r1
    114a:	82 2b       	or	r24, r18
    114c:	8d b9       	out	0x0d, r24	; 13
    114e:	9e b1       	in	r25, 0x0e	; 14
    1150:	82 81       	ldd	r24, Z+2	; 0x02
    1152:	89 2b       	or	r24, r25
    1154:	8e b9       	out	0x0e, r24	; 14
    1156:	9d b1       	in	r25, 0x0d	; 13
    1158:	81 81       	ldd	r24, Z+1	; 0x01
    115a:	89 2b       	or	r24, r25
    115c:	8d b9       	out	0x0d, r24	; 13
    115e:	2d b1       	in	r18, 0x0d	; 13
    1160:	93 81       	ldd	r25, Z+3	; 0x03
    1162:	30 e2       	ldi	r19, 0x20	; 32
    1164:	93 9f       	mul	r25, r19
    1166:	c0 01       	movw	r24, r0
    1168:	11 24       	eor	r1, r1
    116a:	82 2b       	or	r24, r18
    116c:	8d b9       	out	0x0d, r24	; 13
    116e:	2d b1       	in	r18, 0x0d	; 13
    1170:	94 81       	ldd	r25, Z+4	; 0x04
    1172:	30 e8       	ldi	r19, 0x80	; 128
    1174:	93 9f       	mul	r25, r19
    1176:	c0 01       	movw	r24, r0
    1178:	11 24       	eor	r1, r1
    117a:	82 2b       	or	r24, r18
    117c:	8d b9       	out	0x0d, r24	; 13
    117e:	2d b1       	in	r18, 0x0d	; 13
    1180:	96 81       	ldd	r25, Z+6	; 0x06
    1182:	89 2f       	mov	r24, r25
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	82 2b       	or	r24, r18
    1190:	8d b9       	out	0x0d, r24	; 13
    1192:	2d b1       	in	r18, 0x0d	; 13
    1194:	95 81       	ldd	r25, Z+5	; 0x05
    1196:	30 e4       	ldi	r19, 0x40	; 64
    1198:	93 9f       	mul	r25, r19
    119a:	c0 01       	movw	r24, r0
    119c:	11 24       	eor	r1, r1
    119e:	82 2b       	or	r24, r18
    11a0:	8d b9       	out	0x0d, r24	; 13
    11a2:	08 95       	ret

000011a4 <SPI_Master_TransmitChar>:
    11a4:	8f b9       	out	0x0f, r24	; 15
    11a6:	77 9b       	sbis	0x0e, 7	; 14
    11a8:	fe cf       	rjmp	.-4      	; 0x11a6 <SPI_Master_TransmitChar+0x2>
    11aa:	8f b1       	in	r24, 0x0f	; 15
    11ac:	08 95       	ret

000011ae <SPI_Cannel_State>:

void SPI_Cannel_State(DIO_ChannelTypes ChannelID,SPI_State State)
{
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	c8 2f       	mov	r28, r24
    11b4:	d6 2f       	mov	r29, r22
	DIO_ConfigChannel(ChannelID,OUTPUT);
    11b6:	61 e0       	ldi	r22, 0x01	; 1
    11b8:	cf db       	rcall	.-2146   	; 0x958 <DIO_ConfigChannel>
	switch (State)
    11ba:	dd 23       	and	r29, r29
    11bc:	19 f0       	breq	.+6      	; 0x11c4 <SPI_Cannel_State+0x16>
    11be:	d1 30       	cpi	r29, 0x01	; 1
    11c0:	29 f0       	breq	.+10     	; 0x11cc <SPI_Cannel_State+0x1e>
    11c2:	07 c0       	rjmp	.+14     	; 0x11d2 <SPI_Cannel_State+0x24>
	{
		case SPI_Disable:DIO_WriteChannel(ChannelID,STD_HIGH);break;
    11c4:	61 e0       	ldi	r22, 0x01	; 1
    11c6:	8c 2f       	mov	r24, r28
    11c8:	e1 da       	rcall	.-2622   	; 0x78c <DIO_WriteChannel>
    11ca:	03 c0       	rjmp	.+6      	; 0x11d2 <SPI_Cannel_State+0x24>
		case SPI_Enable:DIO_WriteChannel(ChannelID,STD_LOW);break;
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	8c 2f       	mov	r24, r28
    11d0:	dd da       	rcall	.-2630   	; 0x78c <DIO_WriteChannel>
	}
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	08 95       	ret

000011d8 <UART0_Init>:

void UART1_sendATCommand(u_int8* String)
{
	UART1_TransmitString(String);
	UART1_Transmit(CR);
	UART1_Transmit(LF);
    11d8:	a5 e9       	ldi	r26, 0x95	; 149
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	2c 91       	ld	r18, X
    11de:	ed e1       	ldi	r30, 0x1D	; 29
    11e0:	f1 e0       	ldi	r31, 0x01	; 1
    11e2:	90 81       	ld	r25, Z
    11e4:	30 e4       	ldi	r19, 0x40	; 64
    11e6:	93 9f       	mul	r25, r19
    11e8:	c0 01       	movw	r24, r0
    11ea:	11 24       	eor	r1, r1
    11ec:	82 2b       	or	r24, r18
    11ee:	8c 93       	st	X, r24
    11f0:	2c 91       	ld	r18, X
    11f2:	91 81       	ldd	r25, Z+1	; 0x01
    11f4:	30 e1       	ldi	r19, 0x10	; 16
    11f6:	93 9f       	mul	r25, r19
    11f8:	c0 01       	movw	r24, r0
    11fa:	11 24       	eor	r1, r1
    11fc:	82 2b       	or	r24, r18
    11fe:	8c 93       	st	X, r24
    1200:	2c 91       	ld	r18, X
    1202:	92 81       	ldd	r25, Z+2	; 0x02
    1204:	89 2f       	mov	r24, r25
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	82 2b       	or	r24, r18
    1216:	8c 93       	st	X, r24
    1218:	2a b1       	in	r18, 0x0a	; 10
    121a:	94 81       	ldd	r25, Z+4	; 0x04
    121c:	89 2f       	mov	r24, r25
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	82 2b       	or	r24, r18
    122e:	8a b9       	out	0x0a, r24	; 10
    1230:	2a b1       	in	r18, 0x0a	; 10
    1232:	95 81       	ldd	r25, Z+5	; 0x05
    1234:	30 e4       	ldi	r19, 0x40	; 64
    1236:	93 9f       	mul	r25, r19
    1238:	c0 01       	movw	r24, r0
    123a:	11 24       	eor	r1, r1
    123c:	82 2b       	or	r24, r18
    123e:	8a b9       	out	0x0a, r24	; 10
    1240:	2a b1       	in	r18, 0x0a	; 10
    1242:	96 81       	ldd	r25, Z+6	; 0x06
    1244:	30 e1       	ldi	r19, 0x10	; 16
    1246:	93 9f       	mul	r25, r19
    1248:	c0 01       	movw	r24, r0
    124a:	11 24       	eor	r1, r1
    124c:	82 2b       	or	r24, r18
    124e:	8a b9       	out	0x0a, r24	; 10
    1250:	2a b1       	in	r18, 0x0a	; 10
    1252:	97 81       	ldd	r25, Z+7	; 0x07
    1254:	30 e8       	ldi	r19, 0x80	; 128
    1256:	93 9f       	mul	r25, r19
    1258:	c0 01       	movw	r24, r0
    125a:	11 24       	eor	r1, r1
    125c:	82 2b       	or	r24, r18
    125e:	8a b9       	out	0x0a, r24	; 10
    1260:	80 85       	ldd	r24, Z+8	; 0x08
    1262:	88 23       	and	r24, r24
    1264:	19 f0       	breq	.+6      	; 0x126c <UART0_Init+0x94>
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	39 f1       	breq	.+78     	; 0x12b8 <UART0_Init+0xe0>
    126a:	48 c0       	rjmp	.+144    	; 0x12fc <UART0_Init+0x124>
    126c:	8b b1       	in	r24, 0x0b	; 11
    126e:	8d 7f       	andi	r24, 0xFD	; 253
    1270:	8b b9       	out	0x0b, r24	; 11
    1272:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <UART0_Cfg+0x9>
    1276:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <UART0_Cfg+0xa>
    127a:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <UART0_Cfg+0xb>
    127e:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <UART0_Cfg+0xc>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	aa 1f       	adc	r26, r26
    1288:	bb 1f       	adc	r27, r27
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	aa 1f       	adc	r26, r26
    1290:	bb 1f       	adc	r27, r27
    1292:	9c 01       	movw	r18, r24
    1294:	ad 01       	movw	r20, r26
    1296:	22 0f       	add	r18, r18
    1298:	33 1f       	adc	r19, r19
    129a:	44 1f       	adc	r20, r20
    129c:	55 1f       	adc	r21, r21
    129e:	22 0f       	add	r18, r18
    12a0:	33 1f       	adc	r19, r19
    12a2:	44 1f       	adc	r20, r20
    12a4:	55 1f       	adc	r21, r21
    12a6:	60 e0       	ldi	r22, 0x00	; 0
    12a8:	74 e2       	ldi	r23, 0x24	; 36
    12aa:	84 ef       	ldi	r24, 0xF4	; 244
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__udivmodsi4>
    12b2:	21 50       	subi	r18, 0x01	; 1
    12b4:	31 09       	sbc	r19, r1
    12b6:	24 c0       	rjmp	.+72     	; 0x1300 <UART0_Init+0x128>
    12b8:	8b b1       	in	r24, 0x0b	; 11
    12ba:	82 60       	ori	r24, 0x02	; 2
    12bc:	8b b9       	out	0x0b, r24	; 11
    12be:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <UART0_Cfg+0x9>
    12c2:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <UART0_Cfg+0xa>
    12c6:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <UART0_Cfg+0xb>
    12ca:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <UART0_Cfg+0xc>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	aa 1f       	adc	r26, r26
    12d4:	bb 1f       	adc	r27, r27
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	aa 1f       	adc	r26, r26
    12dc:	bb 1f       	adc	r27, r27
    12de:	9c 01       	movw	r18, r24
    12e0:	ad 01       	movw	r20, r26
    12e2:	22 0f       	add	r18, r18
    12e4:	33 1f       	adc	r19, r19
    12e6:	44 1f       	adc	r20, r20
    12e8:	55 1f       	adc	r21, r21
    12ea:	60 e0       	ldi	r22, 0x00	; 0
    12ec:	74 e2       	ldi	r23, 0x24	; 36
    12ee:	84 ef       	ldi	r24, 0xF4	; 244
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__udivmodsi4>
    12f6:	21 50       	subi	r18, 0x01	; 1
    12f8:	31 09       	sbc	r19, r1
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <UART0_Init+0x128>
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1304:	29 b9       	out	0x09, r18	; 9
    1306:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <UART0_Cfg+0x3>
    130a:	94 30       	cpi	r25, 0x04	; 4
    130c:	61 f4       	brne	.+24     	; 0x1326 <UART0_Init+0x14e>
    130e:	e5 e9       	ldi	r30, 0x95	; 149
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	82 60       	ori	r24, 0x02	; 2
    1316:	80 83       	st	Z, r24
    1318:	80 81       	ld	r24, Z
    131a:	84 60       	ori	r24, 0x04	; 4
    131c:	80 83       	st	Z, r24
    131e:	8a b1       	in	r24, 0x0a	; 10
    1320:	84 60       	ori	r24, 0x04	; 4
    1322:	8a b9       	out	0x0a, r24	; 10
    1324:	08 95       	ret
    1326:	e5 e9       	ldi	r30, 0x95	; 149
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	20 81       	ld	r18, Z
    132c:	89 2f       	mov	r24, r25
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	82 2b       	or	r24, r18
    1336:	80 83       	st	Z, r24
    1338:	08 95       	ret

0000133a <UART1_Init>:
    133a:	ad e9       	ldi	r26, 0x9D	; 157
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	2c 91       	ld	r18, X
    1340:	e0 e1       	ldi	r30, 0x10	; 16
    1342:	f1 e0       	ldi	r31, 0x01	; 1
    1344:	90 81       	ld	r25, Z
    1346:	30 e4       	ldi	r19, 0x40	; 64
    1348:	93 9f       	mul	r25, r19
    134a:	c0 01       	movw	r24, r0
    134c:	11 24       	eor	r1, r1
    134e:	82 2b       	or	r24, r18
    1350:	8c 93       	st	X, r24
    1352:	2c 91       	ld	r18, X
    1354:	91 81       	ldd	r25, Z+1	; 0x01
    1356:	30 e1       	ldi	r19, 0x10	; 16
    1358:	93 9f       	mul	r25, r19
    135a:	c0 01       	movw	r24, r0
    135c:	11 24       	eor	r1, r1
    135e:	82 2b       	or	r24, r18
    1360:	8c 93       	st	X, r24
    1362:	2c 91       	ld	r18, X
    1364:	92 81       	ldd	r25, Z+2	; 0x02
    1366:	89 2f       	mov	r24, r25
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	82 2b       	or	r24, r18
    1378:	8c 93       	st	X, r24
    137a:	aa e9       	ldi	r26, 0x9A	; 154
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	2c 91       	ld	r18, X
    1380:	94 81       	ldd	r25, Z+4	; 0x04
    1382:	89 2f       	mov	r24, r25
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	82 2b       	or	r24, r18
    1394:	8c 93       	st	X, r24
    1396:	2c 91       	ld	r18, X
    1398:	95 81       	ldd	r25, Z+5	; 0x05
    139a:	30 e4       	ldi	r19, 0x40	; 64
    139c:	93 9f       	mul	r25, r19
    139e:	c0 01       	movw	r24, r0
    13a0:	11 24       	eor	r1, r1
    13a2:	82 2b       	or	r24, r18
    13a4:	8c 93       	st	X, r24
    13a6:	2c 91       	ld	r18, X
    13a8:	96 81       	ldd	r25, Z+6	; 0x06
    13aa:	30 e1       	ldi	r19, 0x10	; 16
    13ac:	93 9f       	mul	r25, r19
    13ae:	c0 01       	movw	r24, r0
    13b0:	11 24       	eor	r1, r1
    13b2:	82 2b       	or	r24, r18
    13b4:	8c 93       	st	X, r24
    13b6:	2c 91       	ld	r18, X
    13b8:	97 81       	ldd	r25, Z+7	; 0x07
    13ba:	30 e8       	ldi	r19, 0x80	; 128
    13bc:	93 9f       	mul	r25, r19
    13be:	c0 01       	movw	r24, r0
    13c0:	11 24       	eor	r1, r1
    13c2:	82 2b       	or	r24, r18
    13c4:	8c 93       	st	X, r24
    13c6:	80 85       	ldd	r24, Z+8	; 0x08
    13c8:	88 23       	and	r24, r24
    13ca:	19 f0       	breq	.+6      	; 0x13d2 <UART1_Init+0x98>
    13cc:	81 30       	cpi	r24, 0x01	; 1
    13ce:	49 f1       	breq	.+82     	; 0x1422 <UART1_Init+0xe8>
    13d0:	4c c0       	rjmp	.+152    	; 0x146a <UART1_Init+0x130>
    13d2:	eb e9       	ldi	r30, 0x9B	; 155
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	8d 7f       	andi	r24, 0xFD	; 253
    13da:	80 83       	st	Z, r24
    13dc:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <UART1_Cfg+0x9>
    13e0:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <UART1_Cfg+0xa>
    13e4:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <UART1_Cfg+0xb>
    13e8:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <UART1_Cfg+0xc>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	aa 1f       	adc	r26, r26
    13f2:	bb 1f       	adc	r27, r27
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	aa 1f       	adc	r26, r26
    13fa:	bb 1f       	adc	r27, r27
    13fc:	9c 01       	movw	r18, r24
    13fe:	ad 01       	movw	r20, r26
    1400:	22 0f       	add	r18, r18
    1402:	33 1f       	adc	r19, r19
    1404:	44 1f       	adc	r20, r20
    1406:	55 1f       	adc	r21, r21
    1408:	22 0f       	add	r18, r18
    140a:	33 1f       	adc	r19, r19
    140c:	44 1f       	adc	r20, r20
    140e:	55 1f       	adc	r21, r21
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	74 e2       	ldi	r23, 0x24	; 36
    1414:	84 ef       	ldi	r24, 0xF4	; 244
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__udivmodsi4>
    141c:	21 50       	subi	r18, 0x01	; 1
    141e:	31 09       	sbc	r19, r1
    1420:	26 c0       	rjmp	.+76     	; 0x146e <UART1_Init+0x134>
    1422:	eb e9       	ldi	r30, 0x9B	; 155
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	82 60       	ori	r24, 0x02	; 2
    142a:	80 83       	st	Z, r24
    142c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <UART1_Cfg+0x9>
    1430:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <UART1_Cfg+0xa>
    1434:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <UART1_Cfg+0xb>
    1438:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <UART1_Cfg+0xc>
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	aa 1f       	adc	r26, r26
    1442:	bb 1f       	adc	r27, r27
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	aa 1f       	adc	r26, r26
    144a:	bb 1f       	adc	r27, r27
    144c:	9c 01       	movw	r18, r24
    144e:	ad 01       	movw	r20, r26
    1450:	22 0f       	add	r18, r18
    1452:	33 1f       	adc	r19, r19
    1454:	44 1f       	adc	r20, r20
    1456:	55 1f       	adc	r21, r21
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	74 e2       	ldi	r23, 0x24	; 36
    145c:	84 ef       	ldi	r24, 0xF4	; 244
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__udivmodsi4>
    1464:	21 50       	subi	r18, 0x01	; 1
    1466:	31 09       	sbc	r19, r1
    1468:	02 c0       	rjmp	.+4      	; 0x146e <UART1_Init+0x134>
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    1472:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1476:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <UART1_Cfg+0x3>
    147a:	94 30       	cpi	r25, 0x04	; 4
    147c:	71 f4       	brne	.+28     	; 0x149a <UART1_Init+0x160>
    147e:	ed e9       	ldi	r30, 0x9D	; 157
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	82 60       	ori	r24, 0x02	; 2
    1486:	80 83       	st	Z, r24
    1488:	80 81       	ld	r24, Z
    148a:	84 60       	ori	r24, 0x04	; 4
    148c:	80 83       	st	Z, r24
    148e:	ea e9       	ldi	r30, 0x9A	; 154
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	84 60       	ori	r24, 0x04	; 4
    1496:	80 83       	st	Z, r24
    1498:	08 95       	ret
    149a:	ed e9       	ldi	r30, 0x9D	; 157
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	20 81       	ld	r18, Z
    14a0:	89 2f       	mov	r24, r25
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	82 2b       	or	r24, r18
    14aa:	80 83       	st	Z, r24
    14ac:	08 95       	ret

000014ae <UART0_Transmit>:
    14ae:	5d 9b       	sbis	0x0b, 5	; 11
    14b0:	fe cf       	rjmp	.-4      	; 0x14ae <UART0_Transmit>
    14b2:	8c b9       	out	0x0c, r24	; 12
    14b4:	08 95       	ret

000014b6 <UART0_Receive>:
}

u_int8 UART0_Receive(void)
{
	u_int8 data = 0;
	while(ReadBit(UCSR0A_Register, RXC) == 0);
    14b6:	5f 9b       	sbis	0x0b, 7	; 11
    14b8:	fe cf       	rjmp	.-4      	; 0x14b6 <UART0_Receive>
	data = UDR0_Register;
    14ba:	8c b1       	in	r24, 0x0c	; 12
	return data;
}
    14bc:	08 95       	ret

000014be <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    14be:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    14c0:	03 96       	adiw	r24, 0x03	; 3
    14c2:	92 83       	std	Z+2, r25	; 0x02
    14c4:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    14c6:	2f ef       	ldi	r18, 0xFF	; 255
    14c8:	3f ef       	ldi	r19, 0xFF	; 255
    14ca:	34 83       	std	Z+4, r19	; 0x04
    14cc:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    14ce:	96 83       	std	Z+6, r25	; 0x06
    14d0:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    14d2:	90 87       	std	Z+8, r25	; 0x08
    14d4:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    14d6:	10 82       	st	Z, r1
    14d8:	08 95       	ret

000014da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
    14da:	fc 01       	movw	r30, r24
    14dc:	11 86       	std	Z+9, r1	; 0x09
    14de:	10 86       	std	Z+8, r1	; 0x08
    14e0:	08 95       	ret

000014e2 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    14e2:	cf 93       	push	r28
    14e4:	df 93       	push	r29
    14e6:	9c 01       	movw	r18, r24
    14e8:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    14ea:	dc 01       	movw	r26, r24
    14ec:	11 96       	adiw	r26, 0x01	; 1
    14ee:	cd 91       	ld	r28, X+
    14f0:	dc 91       	ld	r29, X
    14f2:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    14f4:	d3 83       	std	Z+3, r29	; 0x03
    14f6:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    14f8:	8c 81       	ldd	r24, Y+4	; 0x04
    14fa:	9d 81       	ldd	r25, Y+5	; 0x05
    14fc:	95 83       	std	Z+5, r25	; 0x05
    14fe:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1500:	8c 81       	ldd	r24, Y+4	; 0x04
    1502:	9d 81       	ldd	r25, Y+5	; 0x05
    1504:	dc 01       	movw	r26, r24
    1506:	13 96       	adiw	r26, 0x03	; 3
    1508:	7c 93       	st	X, r23
    150a:	6e 93       	st	-X, r22
    150c:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
    150e:	7d 83       	std	Y+5, r23	; 0x05
    1510:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
    1512:	31 87       	std	Z+9, r19	; 0x09
    1514:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    1516:	f9 01       	movw	r30, r18
    1518:	80 81       	ld	r24, Z
    151a:	8f 5f       	subi	r24, 0xFF	; 255
    151c:	80 83       	st	Z, r24
}
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	08 95       	ret

00001524 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1524:	cf 93       	push	r28
    1526:	df 93       	push	r29
    1528:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    152a:	48 81       	ld	r20, Y
    152c:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    152e:	4f 3f       	cpi	r20, 0xFF	; 255
    1530:	2f ef       	ldi	r18, 0xFF	; 255
    1532:	52 07       	cpc	r21, r18
    1534:	21 f4       	brne	.+8      	; 0x153e <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1536:	fc 01       	movw	r30, r24
    1538:	a7 81       	ldd	r26, Z+7	; 0x07
    153a:	b0 85       	ldd	r27, Z+8	; 0x08
    153c:	0d c0       	rjmp	.+26     	; 0x1558 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    153e:	dc 01       	movw	r26, r24
    1540:	13 96       	adiw	r26, 0x03	; 3
    1542:	01 c0       	rjmp	.+2      	; 0x1546 <vListInsert+0x22>
    1544:	df 01       	movw	r26, r30
    1546:	12 96       	adiw	r26, 0x02	; 2
    1548:	ed 91       	ld	r30, X+
    154a:	fc 91       	ld	r31, X
    154c:	13 97       	sbiw	r26, 0x03	; 3
    154e:	20 81       	ld	r18, Z
    1550:	31 81       	ldd	r19, Z+1	; 0x01
    1552:	42 17       	cp	r20, r18
    1554:	53 07       	cpc	r21, r19
    1556:	b0 f7       	brcc	.-20     	; 0x1544 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1558:	12 96       	adiw	r26, 0x02	; 2
    155a:	ed 91       	ld	r30, X+
    155c:	fc 91       	ld	r31, X
    155e:	13 97       	sbiw	r26, 0x03	; 3
    1560:	fb 83       	std	Y+3, r31	; 0x03
    1562:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1564:	d5 83       	std	Z+5, r29	; 0x05
    1566:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    1568:	bd 83       	std	Y+5, r27	; 0x05
    156a:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
    156c:	13 96       	adiw	r26, 0x03	; 3
    156e:	dc 93       	st	X, r29
    1570:	ce 93       	st	-X, r28
    1572:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
    1574:	99 87       	std	Y+9, r25	; 0x09
    1576:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1578:	fc 01       	movw	r30, r24
    157a:	20 81       	ld	r18, Z
    157c:	2f 5f       	subi	r18, 0xFF	; 255
    157e:	20 83       	st	Z, r18
}
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	08 95       	ret

00001586 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1586:	cf 93       	push	r28
    1588:	df 93       	push	r29
    158a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    158c:	a0 85       	ldd	r26, Z+8	; 0x08
    158e:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1590:	c2 81       	ldd	r28, Z+2	; 0x02
    1592:	d3 81       	ldd	r29, Z+3	; 0x03
    1594:	84 81       	ldd	r24, Z+4	; 0x04
    1596:	95 81       	ldd	r25, Z+5	; 0x05
    1598:	9d 83       	std	Y+5, r25	; 0x05
    159a:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    159c:	c4 81       	ldd	r28, Z+4	; 0x04
    159e:	d5 81       	ldd	r29, Z+5	; 0x05
    15a0:	82 81       	ldd	r24, Z+2	; 0x02
    15a2:	93 81       	ldd	r25, Z+3	; 0x03
    15a4:	9b 83       	std	Y+3, r25	; 0x03
    15a6:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    15a8:	11 96       	adiw	r26, 0x01	; 1
    15aa:	8d 91       	ld	r24, X+
    15ac:	9c 91       	ld	r25, X
    15ae:	12 97       	sbiw	r26, 0x02	; 2
    15b0:	e8 17       	cp	r30, r24
    15b2:	f9 07       	cpc	r31, r25
    15b4:	31 f4       	brne	.+12     	; 0x15c2 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    15b6:	84 81       	ldd	r24, Z+4	; 0x04
    15b8:	95 81       	ldd	r25, Z+5	; 0x05
    15ba:	12 96       	adiw	r26, 0x02	; 2
    15bc:	9c 93       	st	X, r25
    15be:	8e 93       	st	-X, r24
    15c0:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
    15c2:	11 86       	std	Z+9, r1	; 0x09
    15c4:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    15c6:	8c 91       	ld	r24, X
    15c8:	81 50       	subi	r24, 0x01	; 1
    15ca:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
    15cc:	8c 91       	ld	r24, X
}
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	08 95       	ret

000015d4 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    15d4:	1b bc       	out	0x2b, r1	; 43
    15d6:	89 ef       	ldi	r24, 0xF9	; 249
    15d8:	8a bd       	out	0x2a, r24	; 42
    15da:	8b e0       	ldi	r24, 0x0B	; 11
    15dc:	8e bd       	out	0x2e, r24	; 46
    15de:	87 b7       	in	r24, 0x37	; 55
    15e0:	80 61       	ori	r24, 0x10	; 16
    15e2:	87 bf       	out	0x37, r24	; 55
    15e4:	08 95       	ret

000015e6 <pxPortInitialiseStack>:
    15e6:	31 e1       	ldi	r19, 0x11	; 17
    15e8:	fc 01       	movw	r30, r24
    15ea:	30 83       	st	Z, r19
    15ec:	31 97       	sbiw	r30, 0x01	; 1
    15ee:	22 e2       	ldi	r18, 0x22	; 34
    15f0:	20 83       	st	Z, r18
    15f2:	31 97       	sbiw	r30, 0x01	; 1
    15f4:	a3 e3       	ldi	r26, 0x33	; 51
    15f6:	a0 83       	st	Z, r26
    15f8:	31 97       	sbiw	r30, 0x01	; 1
    15fa:	60 83       	st	Z, r22
    15fc:	31 97       	sbiw	r30, 0x01	; 1
    15fe:	70 83       	st	Z, r23
    1600:	31 97       	sbiw	r30, 0x01	; 1
    1602:	10 82       	st	Z, r1
    1604:	31 97       	sbiw	r30, 0x01	; 1
    1606:	60 e8       	ldi	r22, 0x80	; 128
    1608:	60 83       	st	Z, r22
    160a:	31 97       	sbiw	r30, 0x01	; 1
    160c:	10 82       	st	Z, r1
    160e:	31 97       	sbiw	r30, 0x01	; 1
    1610:	62 e0       	ldi	r22, 0x02	; 2
    1612:	60 83       	st	Z, r22
    1614:	31 97       	sbiw	r30, 0x01	; 1
    1616:	63 e0       	ldi	r22, 0x03	; 3
    1618:	60 83       	st	Z, r22
    161a:	31 97       	sbiw	r30, 0x01	; 1
    161c:	64 e0       	ldi	r22, 0x04	; 4
    161e:	60 83       	st	Z, r22
    1620:	31 97       	sbiw	r30, 0x01	; 1
    1622:	65 e0       	ldi	r22, 0x05	; 5
    1624:	60 83       	st	Z, r22
    1626:	31 97       	sbiw	r30, 0x01	; 1
    1628:	66 e0       	ldi	r22, 0x06	; 6
    162a:	60 83       	st	Z, r22
    162c:	31 97       	sbiw	r30, 0x01	; 1
    162e:	67 e0       	ldi	r22, 0x07	; 7
    1630:	60 83       	st	Z, r22
    1632:	31 97       	sbiw	r30, 0x01	; 1
    1634:	68 e0       	ldi	r22, 0x08	; 8
    1636:	60 83       	st	Z, r22
    1638:	31 97       	sbiw	r30, 0x01	; 1
    163a:	69 e0       	ldi	r22, 0x09	; 9
    163c:	60 83       	st	Z, r22
    163e:	31 97       	sbiw	r30, 0x01	; 1
    1640:	60 e1       	ldi	r22, 0x10	; 16
    1642:	60 83       	st	Z, r22
    1644:	31 97       	sbiw	r30, 0x01	; 1
    1646:	30 83       	st	Z, r19
    1648:	31 97       	sbiw	r30, 0x01	; 1
    164a:	32 e1       	ldi	r19, 0x12	; 18
    164c:	30 83       	st	Z, r19
    164e:	31 97       	sbiw	r30, 0x01	; 1
    1650:	33 e1       	ldi	r19, 0x13	; 19
    1652:	30 83       	st	Z, r19
    1654:	31 97       	sbiw	r30, 0x01	; 1
    1656:	34 e1       	ldi	r19, 0x14	; 20
    1658:	30 83       	st	Z, r19
    165a:	31 97       	sbiw	r30, 0x01	; 1
    165c:	35 e1       	ldi	r19, 0x15	; 21
    165e:	30 83       	st	Z, r19
    1660:	31 97       	sbiw	r30, 0x01	; 1
    1662:	36 e1       	ldi	r19, 0x16	; 22
    1664:	30 83       	st	Z, r19
    1666:	31 97       	sbiw	r30, 0x01	; 1
    1668:	37 e1       	ldi	r19, 0x17	; 23
    166a:	30 83       	st	Z, r19
    166c:	31 97       	sbiw	r30, 0x01	; 1
    166e:	38 e1       	ldi	r19, 0x18	; 24
    1670:	30 83       	st	Z, r19
    1672:	31 97       	sbiw	r30, 0x01	; 1
    1674:	39 e1       	ldi	r19, 0x19	; 25
    1676:	30 83       	st	Z, r19
    1678:	31 97       	sbiw	r30, 0x01	; 1
    167a:	30 e2       	ldi	r19, 0x20	; 32
    167c:	30 83       	st	Z, r19
    167e:	31 97       	sbiw	r30, 0x01	; 1
    1680:	31 e2       	ldi	r19, 0x21	; 33
    1682:	30 83       	st	Z, r19
    1684:	31 97       	sbiw	r30, 0x01	; 1
    1686:	20 83       	st	Z, r18
    1688:	31 97       	sbiw	r30, 0x01	; 1
    168a:	23 e2       	ldi	r18, 0x23	; 35
    168c:	20 83       	st	Z, r18
    168e:	31 97       	sbiw	r30, 0x01	; 1
    1690:	40 83       	st	Z, r20
    1692:	31 97       	sbiw	r30, 0x01	; 1
    1694:	50 83       	st	Z, r21
    1696:	31 97       	sbiw	r30, 0x01	; 1
    1698:	26 e2       	ldi	r18, 0x26	; 38
    169a:	20 83       	st	Z, r18
    169c:	31 97       	sbiw	r30, 0x01	; 1
    169e:	27 e2       	ldi	r18, 0x27	; 39
    16a0:	20 83       	st	Z, r18
    16a2:	31 97       	sbiw	r30, 0x01	; 1
    16a4:	28 e2       	ldi	r18, 0x28	; 40
    16a6:	20 83       	st	Z, r18
    16a8:	31 97       	sbiw	r30, 0x01	; 1
    16aa:	29 e2       	ldi	r18, 0x29	; 41
    16ac:	20 83       	st	Z, r18
    16ae:	31 97       	sbiw	r30, 0x01	; 1
    16b0:	20 e3       	ldi	r18, 0x30	; 48
    16b2:	20 83       	st	Z, r18
    16b4:	31 97       	sbiw	r30, 0x01	; 1
    16b6:	21 e3       	ldi	r18, 0x31	; 49
    16b8:	20 83       	st	Z, r18
    16ba:	86 97       	sbiw	r24, 0x26	; 38
    16bc:	08 95       	ret

000016be <xPortStartScheduler>:
    16be:	8a df       	rcall	.-236    	; 0x15d4 <prvSetupTimerInterrupt>
    16c0:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <pxCurrentTCB>
    16c4:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <pxCurrentTCB+0x1>
    16c8:	cd 91       	ld	r28, X+
    16ca:	cd bf       	out	0x3d, r28	; 61
    16cc:	dd 91       	ld	r29, X+
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	ff 91       	pop	r31
    16d2:	ef 91       	pop	r30
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	bf 91       	pop	r27
    16da:	af 91       	pop	r26
    16dc:	9f 91       	pop	r25
    16de:	8f 91       	pop	r24
    16e0:	7f 91       	pop	r23
    16e2:	6f 91       	pop	r22
    16e4:	5f 91       	pop	r21
    16e6:	4f 91       	pop	r20
    16e8:	3f 91       	pop	r19
    16ea:	2f 91       	pop	r18
    16ec:	1f 91       	pop	r17
    16ee:	0f 91       	pop	r16
    16f0:	ff 90       	pop	r15
    16f2:	ef 90       	pop	r14
    16f4:	df 90       	pop	r13
    16f6:	cf 90       	pop	r12
    16f8:	bf 90       	pop	r11
    16fa:	af 90       	pop	r10
    16fc:	9f 90       	pop	r9
    16fe:	8f 90       	pop	r8
    1700:	7f 90       	pop	r7
    1702:	6f 90       	pop	r6
    1704:	5f 90       	pop	r5
    1706:	4f 90       	pop	r4
    1708:	3f 90       	pop	r3
    170a:	2f 90       	pop	r2
    170c:	1f 90       	pop	r1
    170e:	0f 90       	pop	r0
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	0f 90       	pop	r0
    1714:	08 95       	ret
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	08 95       	ret

0000171a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    171a:	0f 92       	push	r0
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	0f 92       	push	r0
    1722:	1f 92       	push	r1
    1724:	11 24       	eor	r1, r1
    1726:	2f 92       	push	r2
    1728:	3f 92       	push	r3
    172a:	4f 92       	push	r4
    172c:	5f 92       	push	r5
    172e:	6f 92       	push	r6
    1730:	7f 92       	push	r7
    1732:	8f 92       	push	r8
    1734:	9f 92       	push	r9
    1736:	af 92       	push	r10
    1738:	bf 92       	push	r11
    173a:	cf 92       	push	r12
    173c:	df 92       	push	r13
    173e:	ef 92       	push	r14
    1740:	ff 92       	push	r15
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	2f 93       	push	r18
    1748:	3f 93       	push	r19
    174a:	4f 93       	push	r20
    174c:	5f 93       	push	r21
    174e:	6f 93       	push	r22
    1750:	7f 93       	push	r23
    1752:	8f 93       	push	r24
    1754:	9f 93       	push	r25
    1756:	af 93       	push	r26
    1758:	bf 93       	push	r27
    175a:	cf 93       	push	r28
    175c:	df 93       	push	r29
    175e:	ef 93       	push	r30
    1760:	ff 93       	push	r31
    1762:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <pxCurrentTCB>
    1766:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <pxCurrentTCB+0x1>
    176a:	0d b6       	in	r0, 0x3d	; 61
    176c:	0d 92       	st	X+, r0
    176e:	0e b6       	in	r0, 0x3e	; 62
    1770:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1772:	46 d6       	rcall	.+3212   	; 0x2400 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1774:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <pxCurrentTCB>
    1778:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <pxCurrentTCB+0x1>
    177c:	cd 91       	ld	r28, X+
    177e:	cd bf       	out	0x3d, r28	; 61
    1780:	dd 91       	ld	r29, X+
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	ff 91       	pop	r31
    1786:	ef 91       	pop	r30
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	bf 91       	pop	r27
    178e:	af 91       	pop	r26
    1790:	9f 91       	pop	r25
    1792:	8f 91       	pop	r24
    1794:	7f 91       	pop	r23
    1796:	6f 91       	pop	r22
    1798:	5f 91       	pop	r21
    179a:	4f 91       	pop	r20
    179c:	3f 91       	pop	r19
    179e:	2f 91       	pop	r18
    17a0:	1f 91       	pop	r17
    17a2:	0f 91       	pop	r16
    17a4:	ff 90       	pop	r15
    17a6:	ef 90       	pop	r14
    17a8:	df 90       	pop	r13
    17aa:	cf 90       	pop	r12
    17ac:	bf 90       	pop	r11
    17ae:	af 90       	pop	r10
    17b0:	9f 90       	pop	r9
    17b2:	8f 90       	pop	r8
    17b4:	7f 90       	pop	r7
    17b6:	6f 90       	pop	r6
    17b8:	5f 90       	pop	r5
    17ba:	4f 90       	pop	r4
    17bc:	3f 90       	pop	r3
    17be:	2f 90       	pop	r2
    17c0:	1f 90       	pop	r1
    17c2:	0f 90       	pop	r0
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	0f 90       	pop	r0

	asm volatile ( "ret" );
    17c8:	08 95       	ret

000017ca <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    17ca:	0f 92       	push	r0
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	0f 92       	push	r0
    17d2:	1f 92       	push	r1
    17d4:	11 24       	eor	r1, r1
    17d6:	2f 92       	push	r2
    17d8:	3f 92       	push	r3
    17da:	4f 92       	push	r4
    17dc:	5f 92       	push	r5
    17de:	6f 92       	push	r6
    17e0:	7f 92       	push	r7
    17e2:	8f 92       	push	r8
    17e4:	9f 92       	push	r9
    17e6:	af 92       	push	r10
    17e8:	bf 92       	push	r11
    17ea:	cf 92       	push	r12
    17ec:	df 92       	push	r13
    17ee:	ef 92       	push	r14
    17f0:	ff 92       	push	r15
    17f2:	0f 93       	push	r16
    17f4:	1f 93       	push	r17
    17f6:	2f 93       	push	r18
    17f8:	3f 93       	push	r19
    17fa:	4f 93       	push	r20
    17fc:	5f 93       	push	r21
    17fe:	6f 93       	push	r22
    1800:	7f 93       	push	r23
    1802:	8f 93       	push	r24
    1804:	9f 93       	push	r25
    1806:	af 93       	push	r26
    1808:	bf 93       	push	r27
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
    180e:	ef 93       	push	r30
    1810:	ff 93       	push	r31
    1812:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <pxCurrentTCB>
    1816:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <pxCurrentTCB+0x1>
    181a:	0d b6       	in	r0, 0x3d	; 61
    181c:	0d 92       	st	X+, r0
    181e:	0e b6       	in	r0, 0x3e	; 62
    1820:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    1822:	ba d4       	rcall	.+2420   	; 0x2198 <xTaskIncrementTick>
    1824:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    1826:	ec d5       	rcall	.+3032   	; 0x2400 <vTaskSwitchContext>
    1828:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <pxCurrentTCB>
	}
	portRESTORE_CONTEXT();
    182c:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <pxCurrentTCB+0x1>
    1830:	cd 91       	ld	r28, X+
    1832:	cd bf       	out	0x3d, r28	; 61
    1834:	dd 91       	ld	r29, X+
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	ff 91       	pop	r31
    183a:	ef 91       	pop	r30
    183c:	df 91       	pop	r29
    183e:	cf 91       	pop	r28
    1840:	bf 91       	pop	r27
    1842:	af 91       	pop	r26
    1844:	9f 91       	pop	r25
    1846:	8f 91       	pop	r24
    1848:	7f 91       	pop	r23
    184a:	6f 91       	pop	r22
    184c:	5f 91       	pop	r21
    184e:	4f 91       	pop	r20
    1850:	3f 91       	pop	r19
    1852:	2f 91       	pop	r18
    1854:	1f 91       	pop	r17
    1856:	0f 91       	pop	r16
    1858:	ff 90       	pop	r15
    185a:	ef 90       	pop	r14
    185c:	df 90       	pop	r13
    185e:	cf 90       	pop	r12
    1860:	bf 90       	pop	r11
    1862:	af 90       	pop	r10
    1864:	9f 90       	pop	r9
    1866:	8f 90       	pop	r8
    1868:	7f 90       	pop	r7
    186a:	6f 90       	pop	r6
    186c:	5f 90       	pop	r5
    186e:	4f 90       	pop	r4
    1870:	3f 90       	pop	r3
    1872:	2f 90       	pop	r2
    1874:	1f 90       	pop	r1
    1876:	0f 90       	pop	r0
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	0f 90       	pop	r0
    187c:	08 95       	ret

0000187e <__vector_12>:

	asm volatile ( "ret" );
    187e:	a5 df       	rcall	.-182    	; 0x17ca <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
    1880:	18 95       	reti

00001882 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	ec 01       	movw	r28, r24
    void * pvReturn;

    vTaskSuspendAll();
    1888:	81 d4       	rcall	.+2306   	; 0x218c <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
    188a:	ce 01       	movw	r24, r28
    188c:	cb d6       	rcall	.+3478   	; 0x2624 <malloc>
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    188e:	ec 01       	movw	r28, r24
    1890:	39 d5       	rcall	.+2674   	; 0x2304 <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
    1892:	ce 01       	movw	r24, r28
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	08 95       	ret

0000189a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    if( pv != NULL )
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	29 f0       	breq	.+10     	; 0x18ac <vPortFree+0x12>
    18a2:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
    18a4:	73 d4       	rcall	.+2278   	; 0x218c <vTaskSuspendAll>
        {
            free( pv );
    18a6:	ce 01       	movw	r24, r28
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
    18a8:	55 d7       	rcall	.+3754   	; 0x2754 <free>
    18aa:	2c d5       	rcall	.+2648   	; 0x2304 <xTaskResumeAll>
    }
}
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	08 95       	ret

000018b2 <prvIsQueueEmpty>:
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	0f 92       	push	r0
    18b8:	fc 01       	movw	r30, r24
    18ba:	82 8d       	ldd	r24, Z+26	; 0x1a
    18bc:	81 11       	cpse	r24, r1
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <prvIsQueueEmpty+0x12>
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	01 c0       	rjmp	.+2      	; 0x18c6 <prvIsQueueEmpty+0x14>
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	0f 90       	pop	r0
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	08 95       	ret

000018cc <prvUnlockQueue>:
    18cc:	1f 93       	push	r17
    18ce:	cf 93       	push	r28
    18d0:	df 93       	push	r29
    18d2:	ec 01       	movw	r28, r24
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	0f 92       	push	r0
    18da:	1e 8d       	ldd	r17, Y+30	; 0x1e
    18dc:	09 c0       	rjmp	.+18     	; 0x18f0 <prvUnlockQueue+0x24>
    18de:	89 89       	ldd	r24, Y+17	; 0x11
    18e0:	88 23       	and	r24, r24
    18e2:	41 f0       	breq	.+16     	; 0x18f4 <prvUnlockQueue+0x28>
    18e4:	ce 01       	movw	r24, r28
    18e6:	41 96       	adiw	r24, 0x11	; 17
    18e8:	ef d5       	rcall	.+3038   	; 0x24c8 <xTaskRemoveFromEventList>
    18ea:	81 11       	cpse	r24, r1
    18ec:	6c d6       	rcall	.+3288   	; 0x25c6 <vTaskMissedYield>
    18ee:	11 50       	subi	r17, 0x01	; 1
    18f0:	11 16       	cp	r1, r17
    18f2:	ac f3       	brlt	.-22     	; 0x18de <prvUnlockQueue+0x12>
    18f4:	8f ef       	ldi	r24, 0xFF	; 255
    18f6:	8e 8f       	std	Y+30, r24	; 0x1e
    18f8:	0f 90       	pop	r0
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	0f 92       	push	r0
    1902:	1d 8d       	ldd	r17, Y+29	; 0x1d
    1904:	09 c0       	rjmp	.+18     	; 0x1918 <prvUnlockQueue+0x4c>
    1906:	88 85       	ldd	r24, Y+8	; 0x08
    1908:	88 23       	and	r24, r24
    190a:	41 f0       	breq	.+16     	; 0x191c <prvUnlockQueue+0x50>
    190c:	ce 01       	movw	r24, r28
    190e:	08 96       	adiw	r24, 0x08	; 8
    1910:	db d5       	rcall	.+2998   	; 0x24c8 <xTaskRemoveFromEventList>
    1912:	81 11       	cpse	r24, r1
    1914:	58 d6       	rcall	.+3248   	; 0x25c6 <vTaskMissedYield>
    1916:	11 50       	subi	r17, 0x01	; 1
    1918:	11 16       	cp	r1, r17
    191a:	ac f3       	brlt	.-22     	; 0x1906 <prvUnlockQueue+0x3a>
    191c:	8f ef       	ldi	r24, 0xFF	; 255
    191e:	8d 8f       	std	Y+29, r24	; 0x1d
    1920:	0f 90       	pop	r0
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	df 91       	pop	r29
    1926:	cf 91       	pop	r28
    1928:	1f 91       	pop	r17
    192a:	08 95       	ret

0000192c <xQueueGenericReset>:
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    1930:	ec 01       	movw	r28, r24
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	f8 94       	cli
    1936:	0f 92       	push	r0
    1938:	e8 81       	ld	r30, Y
    193a:	f9 81       	ldd	r31, Y+1	; 0x01
    193c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    193e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	82 9f       	mul	r24, r18
    1946:	a0 01       	movw	r20, r0
    1948:	83 9f       	mul	r24, r19
    194a:	50 0d       	add	r21, r0
    194c:	92 9f       	mul	r25, r18
    194e:	50 0d       	add	r21, r0
    1950:	11 24       	eor	r1, r1
    1952:	4e 0f       	add	r20, r30
    1954:	5f 1f       	adc	r21, r31
    1956:	5d 83       	std	Y+5, r21	; 0x05
    1958:	4c 83       	std	Y+4, r20	; 0x04
    195a:	1a 8e       	std	Y+26, r1	; 0x1a
    195c:	fb 83       	std	Y+3, r31	; 0x03
    195e:	ea 83       	std	Y+2, r30	; 0x02
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	28 9f       	mul	r18, r24
    1964:	a0 01       	movw	r20, r0
    1966:	29 9f       	mul	r18, r25
    1968:	50 0d       	add	r21, r0
    196a:	38 9f       	mul	r19, r24
    196c:	50 0d       	add	r21, r0
    196e:	11 24       	eor	r1, r1
    1970:	cf 01       	movw	r24, r30
    1972:	84 0f       	add	r24, r20
    1974:	95 1f       	adc	r25, r21
    1976:	9f 83       	std	Y+7, r25	; 0x07
    1978:	8e 83       	std	Y+6, r24	; 0x06
    197a:	8f ef       	ldi	r24, 0xFF	; 255
    197c:	8d 8f       	std	Y+29, r24	; 0x1d
    197e:	8e 8f       	std	Y+30, r24	; 0x1e
    1980:	61 11       	cpse	r22, r1
    1982:	0a c0       	rjmp	.+20     	; 0x1998 <xQueueGenericReset+0x6c>
    1984:	88 85       	ldd	r24, Y+8	; 0x08
    1986:	88 23       	and	r24, r24
    1988:	69 f0       	breq	.+26     	; 0x19a4 <xQueueGenericReset+0x78>
    198a:	ce 01       	movw	r24, r28
    198c:	08 96       	adiw	r24, 0x08	; 8
    198e:	9c d5       	rcall	.+2872   	; 0x24c8 <xTaskRemoveFromEventList>
    1990:	88 23       	and	r24, r24
    1992:	41 f0       	breq	.+16     	; 0x19a4 <xQueueGenericReset+0x78>
    1994:	c2 de       	rcall	.-636    	; 0x171a <vPortYield>
    1996:	06 c0       	rjmp	.+12     	; 0x19a4 <xQueueGenericReset+0x78>
    1998:	ce 01       	movw	r24, r28
    199a:	08 96       	adiw	r24, 0x08	; 8
    199c:	90 dd       	rcall	.-1248   	; 0x14be <vListInitialise>
    199e:	ce 01       	movw	r24, r28
    19a0:	41 96       	adiw	r24, 0x11	; 17
    19a2:	8d dd       	rcall	.-1254   	; 0x14be <vListInitialise>
    19a4:	0f 90       	pop	r0
    19a6:	0f be       	out	0x3f, r0	; 63
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	08 95       	ret

000019b0 <prvInitialiseNewQueue>:
    19b0:	0f 93       	push	r16
    19b2:	1f 93       	push	r17
    19b4:	f8 01       	movw	r30, r16
    19b6:	61 11       	cpse	r22, r1
    19b8:	03 c0       	rjmp	.+6      	; 0x19c0 <prvInitialiseNewQueue+0x10>
    19ba:	11 83       	std	Z+1, r17	; 0x01
    19bc:	00 83       	st	Z, r16
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <prvInitialiseNewQueue+0x14>
    19c0:	51 83       	std	Z+1, r21	; 0x01
    19c2:	40 83       	st	Z, r20
    19c4:	83 8f       	std	Z+27, r24	; 0x1b
    19c6:	64 8f       	std	Z+28, r22	; 0x1c
    19c8:	61 e0       	ldi	r22, 0x01	; 1
    19ca:	cf 01       	movw	r24, r30
    19cc:	af df       	rcall	.-162    	; 0x192c <xQueueGenericReset>
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	08 95       	ret

000019d4 <xQueueGenericCreate>:
    19d4:	df 92       	push	r13
    19d6:	ef 92       	push	r14
    19d8:	ff 92       	push	r15
    19da:	0f 93       	push	r16
    19dc:	1f 93       	push	r17
    19de:	cf 93       	push	r28
    19e0:	df 93       	push	r29
    19e2:	e8 2e       	mov	r14, r24
    19e4:	f6 2e       	mov	r15, r22
    19e6:	d4 2e       	mov	r13, r20
    19e8:	66 23       	and	r22, r22
    19ea:	21 f0       	breq	.+8      	; 0x19f4 <xQueueGenericCreate+0x20>
    19ec:	86 9f       	mul	r24, r22
    19ee:	c0 01       	movw	r24, r0
    19f0:	11 24       	eor	r1, r1
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <xQueueGenericCreate+0x24>
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	4f 96       	adiw	r24, 0x1f	; 31
    19fa:	43 df       	rcall	.-378    	; 0x1882 <pvPortMalloc>
    19fc:	ec 01       	movw	r28, r24
    19fe:	00 97       	sbiw	r24, 0x00	; 0
    1a00:	41 f0       	breq	.+16     	; 0x1a12 <xQueueGenericCreate+0x3e>
    1a02:	8c 01       	movw	r16, r24
    1a04:	2d 2d       	mov	r18, r13
    1a06:	ac 01       	movw	r20, r24
    1a08:	41 5e       	subi	r20, 0xE1	; 225
    1a0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a0c:	6f 2d       	mov	r22, r15
    1a0e:	8e 2d       	mov	r24, r14
    1a10:	cf df       	rcall	.-98     	; 0x19b0 <prvInitialiseNewQueue>
    1a12:	ce 01       	movw	r24, r28
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	1f 91       	pop	r17
    1a1a:	0f 91       	pop	r16
    1a1c:	ff 90       	pop	r15
    1a1e:	ef 90       	pop	r14
    1a20:	df 90       	pop	r13
    1a22:	08 95       	ret

00001a24 <xQueueCreateCountingSemaphore>:
    1a24:	cf 93       	push	r28
    1a26:	c6 2f       	mov	r28, r22
    1a28:	42 e0       	ldi	r20, 0x02	; 2
    1a2a:	60 e0       	ldi	r22, 0x00	; 0
    1a2c:	d3 df       	rcall	.-90     	; 0x19d4 <xQueueGenericCreate>
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	11 f0       	breq	.+4      	; 0x1a36 <xQueueCreateCountingSemaphore+0x12>
    1a32:	fc 01       	movw	r30, r24
    1a34:	c2 8f       	std	Z+26, r28	; 0x1a
    1a36:	cf 91       	pop	r28
    1a38:	08 95       	ret

00001a3a <xQueueGiveFromISR>:
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	fc 01       	movw	r30, r24
    1a40:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a42:	93 8d       	ldd	r25, Z+27	; 0x1b
    1a44:	89 17       	cp	r24, r25
    1a46:	b8 f4       	brcc	.+46     	; 0x1a76 <xQueueGiveFromISR+0x3c>
    1a48:	96 8d       	ldd	r25, Z+30	; 0x1e
    1a4a:	8f 5f       	subi	r24, 0xFF	; 255
    1a4c:	82 8f       	std	Z+26, r24	; 0x1a
    1a4e:	9f 3f       	cpi	r25, 0xFF	; 255
    1a50:	71 f4       	brne	.+28     	; 0x1a6e <xQueueGiveFromISR+0x34>
    1a52:	81 89       	ldd	r24, Z+17	; 0x11
    1a54:	88 23       	and	r24, r24
    1a56:	89 f0       	breq	.+34     	; 0x1a7a <xQueueGiveFromISR+0x40>
    1a58:	eb 01       	movw	r28, r22
    1a5a:	cf 01       	movw	r24, r30
    1a5c:	41 96       	adiw	r24, 0x11	; 17
    1a5e:	34 d5       	rcall	.+2664   	; 0x24c8 <xTaskRemoveFromEventList>
    1a60:	88 23       	and	r24, r24
    1a62:	69 f0       	breq	.+26     	; 0x1a7e <xQueueGiveFromISR+0x44>
    1a64:	20 97       	sbiw	r28, 0x00	; 0
    1a66:	69 f0       	breq	.+26     	; 0x1a82 <xQueueGiveFromISR+0x48>
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	88 83       	st	Y, r24
    1a6c:	0b c0       	rjmp	.+22     	; 0x1a84 <xQueueGiveFromISR+0x4a>
    1a6e:	9f 5f       	subi	r25, 0xFF	; 255
    1a70:	96 8f       	std	Z+30, r25	; 0x1e
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	07 c0       	rjmp	.+14     	; 0x1a84 <xQueueGiveFromISR+0x4a>
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	05 c0       	rjmp	.+10     	; 0x1a84 <xQueueGiveFromISR+0x4a>
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	03 c0       	rjmp	.+6      	; 0x1a84 <xQueueGiveFromISR+0x4a>
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	01 c0       	rjmp	.+2      	; 0x1a84 <xQueueGiveFromISR+0x4a>
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	df 91       	pop	r29
    1a86:	cf 91       	pop	r28
    1a88:	08 95       	ret

00001a8a <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
    1a8a:	ff 92       	push	r15
    1a8c:	0f 93       	push	r16
    1a8e:	1f 93       	push	r17
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	00 d0       	rcall	.+0      	; 0x1a96 <xQueueSemaphoreTake+0xc>
    1a96:	00 d0       	rcall	.+0      	; 0x1a98 <xQueueSemaphoreTake+0xe>
    1a98:	1f 92       	push	r1
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	8c 01       	movw	r16, r24
    1aa0:	7d 83       	std	Y+5, r23	; 0x05
    1aa2:	6c 83       	std	Y+4, r22	; 0x04
BaseType_t xEntryTimeSet = pdFALSE;
    1aa4:	f1 2c       	mov	r15, r1
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	f8 94       	cli
    1aaa:	0f 92       	push	r0
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    1aac:	f8 01       	movw	r30, r16
    1aae:	82 8d       	ldd	r24, Z+26	; 0x1a

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    1ab0:	88 23       	and	r24, r24
    1ab2:	71 f0       	breq	.+28     	; 0x1ad0 <xQueueSemaphoreTake+0x46>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    1ab4:	81 50       	subi	r24, 0x01	; 1
    1ab6:	82 8f       	std	Z+26, r24	; 0x1a
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1ab8:	80 85       	ldd	r24, Z+8	; 0x08
    1aba:	88 23       	and	r24, r24
    1abc:	29 f0       	breq	.+10     	; 0x1ac8 <xQueueSemaphoreTake+0x3e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1abe:	c8 01       	movw	r24, r16
    1ac0:	08 96       	adiw	r24, 0x08	; 8
    1ac2:	02 d5       	rcall	.+2564   	; 0x24c8 <xTaskRemoveFromEventList>
    1ac4:	81 11       	cpse	r24, r1
					{
						queueYIELD_IF_USING_PREEMPTION();
    1ac6:	29 de       	rcall	.-942    	; 0x171a <vPortYield>
    1ac8:	0f 90       	pop	r0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	81 e0       	ldi	r24, 0x01	; 1
				return pdPASS;
    1ace:	46 c0       	rjmp	.+140    	; 0x1b5c <xQueueSemaphoreTake+0xd2>
    1ad0:	8c 81       	ldd	r24, Y+4	; 0x04
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1ad2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad4:	89 2b       	or	r24, r25
    1ad6:	21 f4       	brne	.+8      	; 0x1ae0 <xQueueSemaphoreTake+0x56>
    1ad8:	0f 90       	pop	r0
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	80 e0       	ldi	r24, 0x00	; 0
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1ade:	3e c0       	rjmp	.+124    	; 0x1b5c <xQueueSemaphoreTake+0xd2>
    1ae0:	f1 10       	cpse	r15, r1
				}
				else if( xEntryTimeSet == pdFALSE )
    1ae2:	05 c0       	rjmp	.+10     	; 0x1aee <xQueueSemaphoreTake+0x64>
    1ae4:	ce 01       	movw	r24, r28
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    1ae6:	01 96       	adiw	r24, 0x01	; 1
    1ae8:	35 d5       	rcall	.+2666   	; 0x2554 <vTaskInternalSetTimeOutState>
    1aea:	ff 24       	eor	r15, r15
					xEntryTimeSet = pdTRUE;
    1aec:	f3 94       	inc	r15
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1aee:	0f 90       	pop	r0
    1af0:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
    1af2:	4c d3       	rcall	.+1688   	; 0x218c <vTaskSuspendAll>
    1af4:	0f b6       	in	r0, 0x3f	; 63
		prvLockQueue( pxQueue );
    1af6:	f8 94       	cli
    1af8:	0f 92       	push	r0
    1afa:	f8 01       	movw	r30, r16
    1afc:	85 8d       	ldd	r24, Z+29	; 0x1d
    1afe:	8f 3f       	cpi	r24, 0xFF	; 255
    1b00:	09 f4       	brne	.+2      	; 0x1b04 <xQueueSemaphoreTake+0x7a>
    1b02:	15 8e       	std	Z+29, r1	; 0x1d
    1b04:	f8 01       	movw	r30, r16
    1b06:	86 8d       	ldd	r24, Z+30	; 0x1e
    1b08:	8f 3f       	cpi	r24, 0xFF	; 255
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <xQueueSemaphoreTake+0x84>
    1b0c:	16 8e       	std	Z+30, r1	; 0x1e
    1b0e:	0f 90       	pop	r0
    1b10:	0f be       	out	0x3f, r0	; 63
    1b12:	be 01       	movw	r22, r28

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1b14:	6c 5f       	subi	r22, 0xFC	; 252
    1b16:	7f 4f       	sbci	r23, 0xFF	; 255
    1b18:	ce 01       	movw	r24, r28
    1b1a:	01 96       	adiw	r24, 0x01	; 1
    1b1c:	26 d5       	rcall	.+2636   	; 0x256a <xTaskCheckForTimeOut>
    1b1e:	81 11       	cpse	r24, r1
    1b20:	14 c0       	rjmp	.+40     	; 0x1b4a <xQueueSemaphoreTake+0xc0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1b22:	c8 01       	movw	r24, r16
    1b24:	c6 de       	rcall	.-628    	; 0x18b2 <prvIsQueueEmpty>
    1b26:	88 23       	and	r24, r24
    1b28:	61 f0       	breq	.+24     	; 0x1b42 <xQueueSemaphoreTake+0xb8>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1b2a:	6c 81       	ldd	r22, Y+4	; 0x04
    1b2c:	7d 81       	ldd	r23, Y+5	; 0x05
    1b2e:	c8 01       	movw	r24, r16
    1b30:	41 96       	adiw	r24, 0x11	; 17
				prvUnlockQueue( pxQueue );
    1b32:	ba d4       	rcall	.+2420   	; 0x24a8 <vTaskPlaceOnEventList>
    1b34:	c8 01       	movw	r24, r16
				if( xTaskResumeAll() == pdFALSE )
    1b36:	ca de       	rcall	.-620    	; 0x18cc <prvUnlockQueue>
    1b38:	e5 d3       	rcall	.+1994   	; 0x2304 <xTaskResumeAll>
    1b3a:	81 11       	cpse	r24, r1
				{
					portYIELD_WITHIN_API();
    1b3c:	b4 cf       	rjmp	.-152    	; 0x1aa6 <xQueueSemaphoreTake+0x1c>
    1b3e:	ed dd       	rcall	.-1062   	; 0x171a <vPortYield>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
    1b40:	b2 cf       	rjmp	.-156    	; 0x1aa6 <xQueueSemaphoreTake+0x1c>
    1b42:	c8 01       	movw	r24, r16
    1b44:	c3 de       	rcall	.-634    	; 0x18cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1b46:	de d3       	rcall	.+1980   	; 0x2304 <xTaskResumeAll>
    1b48:	ae cf       	rjmp	.-164    	; 0x1aa6 <xQueueSemaphoreTake+0x1c>
    1b4a:	c8 01       	movw	r24, r16
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
    1b4c:	bf de       	rcall	.-642    	; 0x18cc <prvUnlockQueue>
    1b4e:	da d3       	rcall	.+1972   	; 0x2304 <xTaskResumeAll>
    1b50:	c8 01       	movw	r24, r16
			( void ) xTaskResumeAll();
    1b52:	af de       	rcall	.-674    	; 0x18b2 <prvIsQueueEmpty>
    1b54:	88 23       	and	r24, r24

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <xQueueSemaphoreTake+0xd0>
    1b58:	a6 cf       	rjmp	.-180    	; 0x1aa6 <xQueueSemaphoreTake+0x1c>
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    1b62:	0f 90       	pop	r0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
    1b64:	0f 90       	pop	r0
    1b66:	df 91       	pop	r29
    1b68:	cf 91       	pop	r28
    1b6a:	1f 91       	pop	r17
    1b6c:	0f 91       	pop	r16
    1b6e:	ff 90       	pop	r15
    1b70:	08 95       	ret

00001b72 <ESP01_CheckConnectionTask>:
void ESP01_CheckConnectionTask(void *pvParam)
{
	u_int8 ret = 0;
	while(1)
	{
		ret = xSemaphoreTake(ESP_SEM, 100);
    1b72:	64 e6       	ldi	r22, 0x64	; 100
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <ESP_SEM>
    1b7a:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <ESP_SEM+0x1>
    1b7e:	85 df       	rcall	.-246    	; 0x1a8a <xQueueSemaphoreTake>
		if(ret == 1)
    1b80:	81 30       	cpi	r24, 0x01	; 1
    1b82:	b9 f7       	brne	.-18     	; 0x1b72 <ESP01_CheckConnectionTask>
		{
			if(ESP01_CheckConnection() == 1)
    1b84:	0e 94 be 00 	call	0x17c	; 0x17c <ESP01_CheckConnection>
    1b88:	f4 cf       	rjmp	.-24     	; 0x1b72 <ESP01_CheckConnectionTask>

00001b8a <GPS_GetLocationTask>:


/*--------------------------------------------------------GPS Task-----------------------------------------------*/

void GPS_GetLocationTask(void *pvParam)
{
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    1b92:	6e 97       	sbiw	r28, 0x1e	; 30
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	cd bf       	out	0x3d, r28	; 61
	char longitude[15];
	char latitude[15];
	while(1)
	{
		getGPSLocation();
    1b9e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <getGPSLocation>
		if(find_string(gps_buff, "$GPRMC") == 1)
    1ba2:	63 e3       	ldi	r22, 0x33	; 51
    1ba4:	71 e0       	ldi	r23, 0x01	; 1
    1ba6:	8c e7       	ldi	r24, 0x7C	; 124
    1ba8:	92 e0       	ldi	r25, 0x02	; 2
    1baa:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <find_string>
    1bae:	81 30       	cpi	r24, 0x01	; 1
    1bb0:	41 f5       	brne	.+80     	; 0x1c02 <GPS_GetLocationTask+0x78>
		{
			memset(longitude, 0, 15);
    1bb2:	8f e0       	ldi	r24, 0x0F	; 15
    1bb4:	9e 01       	movw	r18, r28
    1bb6:	2f 5f       	subi	r18, 0xFF	; 255
    1bb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bba:	59 01       	movw	r10, r18
    1bbc:	f9 01       	movw	r30, r18
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	11 92       	st	Z+, r1
    1bc2:	2a 95       	dec	r18
    1bc4:	e9 f7       	brne	.-6      	; 0x1bc0 <GPS_GetLocationTask+0x36>
			memset(latitude, 0, 15);
    1bc6:	6e 01       	movw	r12, r28
    1bc8:	30 e1       	ldi	r19, 0x10	; 16
    1bca:	c3 0e       	add	r12, r19
    1bcc:	d1 1c       	adc	r13, r1
    1bce:	f6 01       	movw	r30, r12
    1bd0:	11 92       	st	Z+, r1
    1bd2:	8a 95       	dec	r24
    1bd4:	e9 f7       	brne	.-6      	; 0x1bd0 <GPS_GetLocationTask+0x46>
			find_get_string(gps_buff, "$GPGLL,", 7, ",", 0, latitude);
    1bd6:	76 01       	movw	r14, r12
    1bd8:	00 e0       	ldi	r16, 0x00	; 0
    1bda:	20 e4       	ldi	r18, 0x40	; 64
    1bdc:	31 e0       	ldi	r19, 0x01	; 1
    1bde:	47 e0       	ldi	r20, 0x07	; 7
    1be0:	6a e3       	ldi	r22, 0x3A	; 58
    1be2:	71 e0       	ldi	r23, 0x01	; 1
    1be4:	8c e7       	ldi	r24, 0x7C	; 124
    1be6:	92 e0       	ldi	r25, 0x02	; 2
    1be8:	0e 94 9c 03 	call	0x738	; 0x738 <find_get_string>
			find_get_string(gps_buff, latitude, 14, ",", 0, longitude);
    1bec:	75 01       	movw	r14, r10
    1bee:	20 e4       	ldi	r18, 0x40	; 64
    1bf0:	31 e0       	ldi	r19, 0x01	; 1
    1bf2:	4e e0       	ldi	r20, 0x0E	; 14
    1bf4:	b6 01       	movw	r22, r12
    1bf6:	8c e7       	ldi	r24, 0x7C	; 124
    1bf8:	92 e0       	ldi	r25, 0x02	; 2
    1bfa:	0e 94 9c 03 	call	0x738	; 0x738 <find_get_string>
			GPS_Buffer_Reset();
    1bfe:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPS_Buffer_Reset>
		}
		else
		{
			
		}
		vTaskDelay(100);
    1c02:	84 e6       	ldi	r24, 0x64	; 100
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	ea d3       	rcall	.+2004   	; 0x23dc <vTaskDelay>
	}
    1c08:	ca cf       	rjmp	.-108    	; 0x1b9e <GPS_GetLocationTask+0x14>

00001c0a <RFID_TakeAttendance>:
}

/*--------------------------------------------------------RFID Task-------------------------------------------------------*/

void RFID_TakeAttendance(void *pvParam)
{
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    1c12:	60 97       	sbiw	r28, 0x10	; 16
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	de bf       	out	0x3e, r29	; 62
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	cd bf       	out	0x3d, r28	; 61
	u_int8 byte;
	u_int8 str[MAX_LEN];

	byte = mfrc522_read(ComIEnReg);
    1c1e:	82 e0       	ldi	r24, 0x02	; 2
    1c20:	0e 94 c5 01 	call	0x38a	; 0x38a <mfrc522_read>
	mfrc522_write(ComIEnReg,byte|0x20);
    1c24:	68 2f       	mov	r22, r24
    1c26:	60 62       	ori	r22, 0x20	; 32
    1c28:	82 e0       	ldi	r24, 0x02	; 2
    1c2a:	0e 94 b0 01 	call	0x360	; 0x360 <mfrc522_write>
	byte = mfrc522_read(DivIEnReg);
    1c2e:	83 e0       	ldi	r24, 0x03	; 3
    1c30:	0e 94 c5 01 	call	0x38a	; 0x38a <mfrc522_read>
	mfrc522_write(DivIEnReg,byte|0x80);
    1c34:	68 2f       	mov	r22, r24
    1c36:	60 68       	ori	r22, 0x80	; 128
    1c38:	83 e0       	ldi	r24, 0x03	; 3
    1c3a:	0e 94 b0 01 	call	0x360	; 0x360 <mfrc522_write>
	
	while(1)
	{
		byte = mfrc522_request(PICC_REQALL,str);
    1c3e:	be 01       	movw	r22, r28
    1c40:	6f 5f       	subi	r22, 0xFF	; 255
    1c42:	7f 4f       	sbci	r23, 0xFF	; 255
    1c44:	82 e5       	ldi	r24, 0x52	; 82
    1c46:	0e 94 ed 02 	call	0x5da	; 0x5da <mfrc522_request>
		if(byte == CARD_FOUND)
    1c4a:	81 30       	cpi	r24, 0x01	; 1
    1c4c:	c1 f7       	brne	.-16     	; 0x1c3e <RFID_TakeAttendance+0x34>
		{
			byte = mfrc522_get_card_serial(str);
    1c4e:	ce 01       	movw	r24, r28
    1c50:	01 96       	adiw	r24, 0x01	; 1
    1c52:	0e 94 20 03 	call	0x640	; 0x640 <mfrc522_get_card_serial>
			if(byte == CARD_FOUND)
    1c56:	81 30       	cpi	r24, 0x01	; 1
    1c58:	91 f7       	brne	.-28     	; 0x1c3e <RFID_TakeAttendance+0x34>
			{
				DIO_WriteChannel(DIO_ChannelA0 ,STD_HIGH);
    1c5a:	61 e0       	ldi	r22, 0x01	; 1
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	0e 94 c6 03 	call	0x78c	; 0x78c <DIO_WriteChannel>
				UART0_Transmit('@');
    1c62:	80 e4       	ldi	r24, 0x40	; 64
    1c64:	24 dc       	rcall	.-1976   	; 0x14ae <UART0_Transmit>
				for(byte=0;byte<8;byte++)
    1c66:	10 e0       	ldi	r17, 0x00	; 0
    1c68:	09 c0       	rjmp	.+18     	; 0x1c7c <RFID_TakeAttendance+0x72>
				{
					UART0_Transmit(str[byte]);
    1c6a:	e1 e0       	ldi	r30, 0x01	; 1
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	ec 0f       	add	r30, r28
    1c70:	fd 1f       	adc	r31, r29
    1c72:	e1 0f       	add	r30, r17
    1c74:	f1 1d       	adc	r31, r1
    1c76:	80 81       	ld	r24, Z
    1c78:	1a dc       	rcall	.-1996   	; 0x14ae <UART0_Transmit>
			byte = mfrc522_get_card_serial(str);
			if(byte == CARD_FOUND)
			{
				DIO_WriteChannel(DIO_ChannelA0 ,STD_HIGH);
				UART0_Transmit('@');
				for(byte=0;byte<8;byte++)
    1c7a:	1f 5f       	subi	r17, 0xFF	; 255
    1c7c:	18 30       	cpi	r17, 0x08	; 8
				{
					UART0_Transmit(str[byte]);
				}
				UART0_Transmit(';');
    1c7e:	a8 f3       	brcs	.-22     	; 0x1c6a <RFID_TakeAttendance+0x60>
    1c80:	8b e3       	ldi	r24, 0x3B	; 59
    1c82:	15 dc       	rcall	.-2006   	; 0x14ae <UART0_Transmit>
    1c84:	dc cf       	rjmp	.-72     	; 0x1c3e <RFID_TakeAttendance+0x34>

00001c86 <System_Init>:
	vTaskStartScheduler();
}

void System_Init()
{
	GIE_Enable();
    1c86:	fd d9       	rcall	.-3078   	; 0x1082 <GIE_Enable>
	ESP01_Init();
    1c88:	0e 94 a4 00 	call	0x148	; 0x148 <ESP01_Init>
	DIO_ConfigChannel(DIO_ChannelG0, OUTPUT);
    1c8c:	61 e0       	ldi	r22, 0x01	; 1
    1c8e:	80 e3       	ldi	r24, 0x30	; 48
    1c90:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_ConfigChannel>
	DIO_ConfigPullUp(DIO_ChannelG0, DISABLE);
    1c94:	60 e0       	ldi	r22, 0x00	; 0
    1c96:	80 e3       	ldi	r24, 0x30	; 48
    1c98:	0e 94 92 05 	call	0xb24	; 0xb24 <DIO_ConfigPullUp>
	GPS_Init();
    1c9c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <GPS_Init>
	LCD_Init();
    1ca0:	0e 94 41 01 	call	0x282	; 0x282 <LCD_Init>
	mfrc522_init();
    1ca4:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <mfrc522_init>
    1ca8:	08 95       	ret

00001caa <startScheduler>:
#define GPS_PRIORITY 8

QueueHandle_t CHECK_CONNECTION;

portSHORT startScheduler()
{
    1caa:	ef 92       	push	r14
    1cac:	ff 92       	push	r15
    1cae:	0f 93       	push	r16
	System_Init();
    1cb0:	ea df       	rcall	.-44     	; 0x1c86 <System_Init>
	
	ESP_SEM = xSemaphoreCreateCounting(1, 0);
    1cb2:	60 e0       	ldi	r22, 0x00	; 0
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	b6 de       	rcall	.-660    	; 0x1a24 <xQueueCreateCountingSemaphore>
    1cb8:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <ESP_SEM+0x1>
    1cbc:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <ESP_SEM>
	xTaskCreate(ESP01_CheckConnectionTask, "CheckConnection", configMINIMAL_STACK_SIZE, NULL, ESP_PRIORITY, NULL);
    1cc0:	e1 2c       	mov	r14, r1
    1cc2:	f1 2c       	mov	r15, r1
    1cc4:	09 e0       	ldi	r16, 0x09	; 9
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	45 e5       	ldi	r20, 0x55	; 85
    1ccc:	50 e0       	ldi	r21, 0x00	; 0
    1cce:	62 e4       	ldi	r22, 0x42	; 66
    1cd0:	71 e0       	ldi	r23, 0x01	; 1
    1cd2:	89 eb       	ldi	r24, 0xB9	; 185
    1cd4:	9d e0       	ldi	r25, 0x0D	; 13
    1cd6:	e3 d1       	rcall	.+966    	; 0x209e <xTaskCreate>
	xTaskCreate(GPS_GetLocationTask, "GPSLocation", 200, NULL, GPS_PRIORITY, NULL);
    1cd8:	08 e0       	ldi	r16, 0x08	; 8
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	48 ec       	ldi	r20, 0xC8	; 200
    1ce0:	50 e0       	ldi	r21, 0x00	; 0
    1ce2:	62 e5       	ldi	r22, 0x52	; 82
    1ce4:	71 e0       	ldi	r23, 0x01	; 1
    1ce6:	85 ec       	ldi	r24, 0xC5	; 197
    1ce8:	9d e0       	ldi	r25, 0x0D	; 13
    1cea:	d9 d1       	rcall	.+946    	; 0x209e <xTaskCreate>
	xTaskCreate(RFID_TakeAttendance, "RFIDAttendance", 200, NULL, RFID_PRIORITY, NULL);
    1cec:	07 e0       	ldi	r16, 0x07	; 7
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	48 ec       	ldi	r20, 0xC8	; 200
    1cf4:	50 e0       	ldi	r21, 0x00	; 0
    1cf6:	6e e5       	ldi	r22, 0x5E	; 94
    1cf8:	71 e0       	ldi	r23, 0x01	; 1
    1cfa:	85 e0       	ldi	r24, 0x05	; 5
    1cfc:	9e e0       	ldi	r25, 0x0E	; 14
	
	vTaskStartScheduler();
    1cfe:	cf d1       	rcall	.+926    	; 0x209e <xTaskCreate>
    1d00:	1d d2       	rcall	.+1082   	; 0x213c <vTaskStartScheduler>
}
    1d02:	0f 91       	pop	r16
    1d04:	ff 90       	pop	r15
    1d06:	ef 90       	pop	r14
    1d08:	08 95       	ret

00001d0a <__vector_30>:
		}
	}
}

ISR(USART1_RX_vect)
{
    1d0a:	1f 92       	push	r1
    1d0c:	0f 92       	push	r0
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	0f 92       	push	r0
    1d12:	11 24       	eor	r1, r1
    1d14:	0b b6       	in	r0, 0x3b	; 59
    1d16:	0f 92       	push	r0
    1d18:	2f 93       	push	r18
    1d1a:	3f 93       	push	r19
    1d1c:	4f 93       	push	r20
    1d1e:	5f 93       	push	r21
    1d20:	6f 93       	push	r22
    1d22:	7f 93       	push	r23
    1d24:	8f 93       	push	r24
    1d26:	9f 93       	push	r25
    1d28:	af 93       	push	r26
    1d2a:	bf 93       	push	r27
    1d2c:	ef 93       	push	r30
    1d2e:	ff 93       	push	r31
	temp = UDR1_Register;
    1d30:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    1d34:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <temp>
	esp_buff[esp_buff_len] = temp;
    1d38:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <esp_buff_len>
    1d3c:	e8 2f       	mov	r30, r24
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	eb 5e       	subi	r30, 0xEB	; 235
    1d42:	fd 4f       	sbci	r31, 0xFD	; 253
    1d44:	90 83       	st	Z, r25
	esp_buff_len++;
    1d46:	8f 5f       	subi	r24, 0xFF	; 255
    1d48:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <esp_buff_len>
	if(esp_buff_len == 100)
    1d4c:	84 36       	cpi	r24, 0x64	; 100
    1d4e:	11 f4       	brne	.+4      	; 0x1d54 <__vector_30+0x4a>
		ESP01_ResetBuffer();
    1d50:	0e 94 b2 00 	call	0x164	; 0x164 <ESP01_ResetBuffer>
	xSemaphoreGiveFromISR(ESP_SEM, NULL);
    1d54:	60 e0       	ldi	r22, 0x00	; 0
    1d56:	70 e0       	ldi	r23, 0x00	; 0
    1d58:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <ESP_SEM>
    1d5c:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <ESP_SEM+0x1>
    1d60:	6c de       	rcall	.-808    	; 0x1a3a <xQueueGiveFromISR>
    1d62:	ff 91       	pop	r31
    1d64:	ef 91       	pop	r30
    1d66:	bf 91       	pop	r27
    1d68:	af 91       	pop	r26
    1d6a:	9f 91       	pop	r25
    1d6c:	8f 91       	pop	r24
    1d6e:	7f 91       	pop	r23
    1d70:	6f 91       	pop	r22
    1d72:	5f 91       	pop	r21
    1d74:	4f 91       	pop	r20
    1d76:	3f 91       	pop	r19
    1d78:	2f 91       	pop	r18
    1d7a:	0f 90       	pop	r0
    1d7c:	0b be       	out	0x3b, r0	; 59
    1d7e:	0f 90       	pop	r0
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	0f 90       	pop	r0
    1d84:	1f 90       	pop	r1
    1d86:	18 95       	reti

00001d88 <prvResetNextTaskUnblockTime>:
	taskENTER_CRITICAL();
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
		pxTimeOut->xTimeOnEntering = xTickCount;
	}
	taskEXIT_CRITICAL();
    1d88:	e0 91 a5 01 	lds	r30, 0x01A5	; 0x8001a5 <pxDelayedTaskList>
    1d8c:	f0 91 a6 01 	lds	r31, 0x01A6	; 0x8001a6 <pxDelayedTaskList+0x1>
    1d90:	80 81       	ld	r24, Z
    1d92:	81 11       	cpse	r24, r1
    1d94:	07 c0       	rjmp	.+14     	; 0x1da4 <prvResetNextTaskUnblockTime+0x1c>
    1d96:	8f ef       	ldi	r24, 0xFF	; 255
    1d98:	9f ef       	ldi	r25, 0xFF	; 255
    1d9a:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <xNextTaskUnblockTime+0x1>
    1d9e:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <xNextTaskUnblockTime>
    1da2:	08 95       	ret
    1da4:	e0 91 a5 01 	lds	r30, 0x01A5	; 0x8001a5 <pxDelayedTaskList>
    1da8:	f0 91 a6 01 	lds	r31, 0x01A6	; 0x8001a6 <pxDelayedTaskList+0x1>
    1dac:	05 80       	ldd	r0, Z+5	; 0x05
    1dae:	f6 81       	ldd	r31, Z+6	; 0x06
    1db0:	e0 2d       	mov	r30, r0
    1db2:	06 80       	ldd	r0, Z+6	; 0x06
    1db4:	f7 81       	ldd	r31, Z+7	; 0x07
    1db6:	e0 2d       	mov	r30, r0
    1db8:	82 81       	ldd	r24, Z+2	; 0x02
    1dba:	93 81       	ldd	r25, Z+3	; 0x03
    1dbc:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <xNextTaskUnblockTime+0x1>
    1dc0:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <xNextTaskUnblockTime>
    1dc4:	08 95       	ret

00001dc6 <prvDeleteTCB>:
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	ec 01       	movw	r28, r24
    1dcc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dce:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd0:	64 dd       	rcall	.-1336   	; 0x189a <vPortFree>
    1dd2:	ce 01       	movw	r24, r28
    1dd4:	62 dd       	rcall	.-1340   	; 0x189a <vPortFree>
    1dd6:	df 91       	pop	r29
    1dd8:	cf 91       	pop	r28
    1dda:	08 95       	ret

00001ddc <prvInitialiseNewTask>:
    1ddc:	6f 92       	push	r6
    1dde:	7f 92       	push	r7
    1de0:	8f 92       	push	r8
    1de2:	9f 92       	push	r9
    1de4:	af 92       	push	r10
    1de6:	bf 92       	push	r11
    1de8:	cf 92       	push	r12
    1dea:	df 92       	push	r13
    1dec:	ef 92       	push	r14
    1dee:	0f 93       	push	r16
    1df0:	1f 93       	push	r17
    1df2:	cf 93       	push	r28
    1df4:	df 93       	push	r29
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
    1dfa:	4c 01       	movw	r8, r24
    1dfc:	f5 01       	movw	r30, r10
    1dfe:	87 89       	ldd	r24, Z+23	; 0x17
    1e00:	90 8d       	ldd	r25, Z+24	; 0x18
    1e02:	21 50       	subi	r18, 0x01	; 1
    1e04:	31 09       	sbc	r19, r1
    1e06:	3c 01       	movw	r6, r24
    1e08:	62 0e       	add	r6, r18
    1e0a:	73 1e       	adc	r7, r19
    1e0c:	61 15       	cp	r22, r1
    1e0e:	71 05       	cpc	r23, r1
    1e10:	89 f4       	brne	.+34     	; 0x1e34 <prvInitialiseNewTask+0x58>
    1e12:	16 c0       	rjmp	.+44     	; 0x1e40 <prvInitialiseNewTask+0x64>
    1e14:	82 2f       	mov	r24, r18
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	fb 01       	movw	r30, r22
    1e1a:	e8 0f       	add	r30, r24
    1e1c:	f9 1f       	adc	r31, r25
    1e1e:	30 81       	ld	r19, Z
    1e20:	d5 01       	movw	r26, r10
    1e22:	a8 0f       	add	r26, r24
    1e24:	b9 1f       	adc	r27, r25
    1e26:	59 96       	adiw	r26, 0x19	; 25
    1e28:	3c 93       	st	X, r19
    1e2a:	80 81       	ld	r24, Z
    1e2c:	88 23       	and	r24, r24
    1e2e:	29 f0       	breq	.+10     	; 0x1e3a <prvInitialiseNewTask+0x5e>
    1e30:	2f 5f       	subi	r18, 0xFF	; 255
    1e32:	01 c0       	rjmp	.+2      	; 0x1e36 <prvInitialiseNewTask+0x5a>
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	28 30       	cpi	r18, 0x08	; 8
    1e38:	68 f3       	brcs	.-38     	; 0x1e14 <prvInitialiseNewTask+0x38>
    1e3a:	f5 01       	movw	r30, r10
    1e3c:	10 a2       	std	Z+32, r1	; 0x20
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <prvInitialiseNewTask+0x68>
    1e40:	f5 01       	movw	r30, r10
    1e42:	11 8e       	std	Z+25, r1	; 0x19
    1e44:	f9 e0       	ldi	r31, 0x09	; 9
    1e46:	fe 15       	cp	r31, r14
    1e48:	20 f4       	brcc	.+8      	; 0x1e52 <prvInitialiseNewTask+0x76>
    1e4a:	0f 2e       	mov	r0, r31
    1e4c:	f9 e0       	ldi	r31, 0x09	; 9
    1e4e:	ef 2e       	mov	r14, r31
    1e50:	f0 2d       	mov	r31, r0
    1e52:	f5 01       	movw	r30, r10
    1e54:	e6 8a       	std	Z+22, r14	; 0x16
    1e56:	c5 01       	movw	r24, r10
    1e58:	02 96       	adiw	r24, 0x02	; 2
    1e5a:	3f db       	rcall	.-2434   	; 0x14da <vListInitialiseItem>
    1e5c:	c5 01       	movw	r24, r10
    1e5e:	0c 96       	adiw	r24, 0x0c	; 12
    1e60:	3c db       	rcall	.-2440   	; 0x14da <vListInitialiseItem>
    1e62:	f5 01       	movw	r30, r10
    1e64:	b1 86       	std	Z+9, r11	; 0x09
    1e66:	a0 86       	std	Z+8, r10	; 0x08
    1e68:	8a e0       	ldi	r24, 0x0A	; 10
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	8e 19       	sub	r24, r14
    1e6e:	91 09       	sbc	r25, r1
    1e70:	95 87       	std	Z+13, r25	; 0x0d
    1e72:	84 87       	std	Z+12, r24	; 0x0c
    1e74:	b3 8a       	std	Z+19, r11	; 0x13
    1e76:	a2 8a       	std	Z+18, r10	; 0x12
    1e78:	11 a2       	std	Z+33, r1	; 0x21
    1e7a:	12 a2       	std	Z+34, r1	; 0x22
    1e7c:	13 a2       	std	Z+35, r1	; 0x23
    1e7e:	14 a2       	std	Z+36, r1	; 0x24
    1e80:	15 a2       	std	Z+37, r1	; 0x25
    1e82:	a8 01       	movw	r20, r16
    1e84:	b4 01       	movw	r22, r8
    1e86:	c3 01       	movw	r24, r6
    1e88:	ae db       	rcall	.-2212   	; 0x15e6 <pxPortInitialiseStack>
    1e8a:	f5 01       	movw	r30, r10
    1e8c:	91 83       	std	Z+1, r25	; 0x01
    1e8e:	80 83       	st	Z, r24
    1e90:	c1 14       	cp	r12, r1
    1e92:	d1 04       	cpc	r13, r1
    1e94:	19 f0       	breq	.+6      	; 0x1e9c <prvInitialiseNewTask+0xc0>
    1e96:	f6 01       	movw	r30, r12
    1e98:	b1 82       	std	Z+1, r11	; 0x01
    1e9a:	a0 82       	st	Z, r10
    1e9c:	df 91       	pop	r29
    1e9e:	cf 91       	pop	r28
    1ea0:	1f 91       	pop	r17
    1ea2:	0f 91       	pop	r16
    1ea4:	ef 90       	pop	r14
    1ea6:	df 90       	pop	r13
    1ea8:	cf 90       	pop	r12
    1eaa:	bf 90       	pop	r11
    1eac:	af 90       	pop	r10
    1eae:	9f 90       	pop	r9
    1eb0:	8f 90       	pop	r8
    1eb2:	7f 90       	pop	r7
    1eb4:	6f 90       	pop	r6
    1eb6:	08 95       	ret

00001eb8 <prvInitialiseTaskLists>:
    1eb8:	cf 93       	push	r28
    1eba:	c0 e0       	ldi	r28, 0x00	; 0
    1ebc:	0f c0       	rjmp	.+30     	; 0x1edc <prvInitialiseTaskLists+0x24>
    1ebe:	8c 2f       	mov	r24, r28
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	9c 01       	movw	r18, r24
    1ec4:	22 0f       	add	r18, r18
    1ec6:	33 1f       	adc	r19, r19
    1ec8:	22 0f       	add	r18, r18
    1eca:	33 1f       	adc	r19, r19
    1ecc:	22 0f       	add	r18, r18
    1ece:	33 1f       	adc	r19, r19
    1ed0:	82 0f       	add	r24, r18
    1ed2:	93 1f       	adc	r25, r19
    1ed4:	87 54       	subi	r24, 0x47	; 71
    1ed6:	9e 4f       	sbci	r25, 0xFE	; 254
    1ed8:	f2 da       	rcall	.-2588   	; 0x14be <vListInitialise>
    1eda:	cf 5f       	subi	r28, 0xFF	; 255
    1edc:	ca 30       	cpi	r28, 0x0A	; 10
    1ede:	78 f3       	brcs	.-34     	; 0x1ebe <prvInitialiseTaskLists+0x6>
    1ee0:	80 eb       	ldi	r24, 0xB0	; 176
    1ee2:	91 e0       	ldi	r25, 0x01	; 1
    1ee4:	ec da       	rcall	.-2600   	; 0x14be <vListInitialise>
    1ee6:	87 ea       	ldi	r24, 0xA7	; 167
    1ee8:	91 e0       	ldi	r25, 0x01	; 1
    1eea:	e9 da       	rcall	.-2606   	; 0x14be <vListInitialise>
    1eec:	8a e9       	ldi	r24, 0x9A	; 154
    1eee:	91 e0       	ldi	r25, 0x01	; 1
    1ef0:	e6 da       	rcall	.-2612   	; 0x14be <vListInitialise>
    1ef2:	81 e9       	ldi	r24, 0x91	; 145
    1ef4:	91 e0       	ldi	r25, 0x01	; 1
    1ef6:	e3 da       	rcall	.-2618   	; 0x14be <vListInitialise>
    1ef8:	80 eb       	ldi	r24, 0xB0	; 176
    1efa:	91 e0       	ldi	r25, 0x01	; 1
    1efc:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <pxDelayedTaskList+0x1>
    1f00:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <pxDelayedTaskList>
    1f04:	87 ea       	ldi	r24, 0xA7	; 167
    1f06:	91 e0       	ldi	r25, 0x01	; 1
    1f08:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <pxOverflowDelayedTaskList+0x1>
    1f0c:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <pxOverflowDelayedTaskList>
    1f10:	cf 91       	pop	r28
    1f12:	08 95       	ret

00001f14 <prvAddNewTaskToReadyList>:
    1f14:	cf 93       	push	r28
    1f16:	df 93       	push	r29
    1f18:	ec 01       	movw	r28, r24
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	f8 94       	cli
    1f1e:	0f 92       	push	r0
    1f20:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <uxCurrentNumberOfTasks>
    1f24:	8f 5f       	subi	r24, 0xFF	; 255
    1f26:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <uxCurrentNumberOfTasks>
    1f2a:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <pxCurrentTCB>
    1f2e:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <pxCurrentTCB+0x1>
    1f32:	89 2b       	or	r24, r25
    1f34:	51 f4       	brne	.+20     	; 0x1f4a <prvAddNewTaskToReadyList+0x36>
    1f36:	d0 93 14 02 	sts	0x0214, r29	; 0x800214 <pxCurrentTCB+0x1>
    1f3a:	c0 93 13 02 	sts	0x0213, r28	; 0x800213 <pxCurrentTCB>
    1f3e:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <uxCurrentNumberOfTasks>
    1f42:	81 30       	cpi	r24, 0x01	; 1
    1f44:	91 f4       	brne	.+36     	; 0x1f6a <prvAddNewTaskToReadyList+0x56>
    1f46:	b8 df       	rcall	.-144    	; 0x1eb8 <prvInitialiseTaskLists>
    1f48:	10 c0       	rjmp	.+32     	; 0x1f6a <prvAddNewTaskToReadyList+0x56>
    1f4a:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <xSchedulerRunning>
    1f4e:	81 11       	cpse	r24, r1
    1f50:	0c c0       	rjmp	.+24     	; 0x1f6a <prvAddNewTaskToReadyList+0x56>
    1f52:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <pxCurrentTCB>
    1f56:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <pxCurrentTCB+0x1>
    1f5a:	96 89       	ldd	r25, Z+22	; 0x16
    1f5c:	8e 89       	ldd	r24, Y+22	; 0x16
    1f5e:	89 17       	cp	r24, r25
    1f60:	20 f0       	brcs	.+8      	; 0x1f6a <prvAddNewTaskToReadyList+0x56>
    1f62:	d0 93 14 02 	sts	0x0214, r29	; 0x800214 <pxCurrentTCB+0x1>
    1f66:	c0 93 13 02 	sts	0x0213, r28	; 0x800213 <pxCurrentTCB>
    1f6a:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <uxTaskNumber>
    1f6e:	8f 5f       	subi	r24, 0xFF	; 255
    1f70:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <uxTaskNumber>
    1f74:	8e 89       	ldd	r24, Y+22	; 0x16
    1f76:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <uxTopReadyPriority>
    1f7a:	98 17       	cp	r25, r24
    1f7c:	10 f4       	brcc	.+4      	; 0x1f82 <prvAddNewTaskToReadyList+0x6e>
    1f7e:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <uxTopReadyPriority>
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	9c 01       	movw	r18, r24
    1f86:	22 0f       	add	r18, r18
    1f88:	33 1f       	adc	r19, r19
    1f8a:	22 0f       	add	r18, r18
    1f8c:	33 1f       	adc	r19, r19
    1f8e:	22 0f       	add	r18, r18
    1f90:	33 1f       	adc	r19, r19
    1f92:	82 0f       	add	r24, r18
    1f94:	93 1f       	adc	r25, r19
    1f96:	be 01       	movw	r22, r28
    1f98:	6e 5f       	subi	r22, 0xFE	; 254
    1f9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9c:	87 54       	subi	r24, 0x47	; 71
    1f9e:	9e 4f       	sbci	r25, 0xFE	; 254
    1fa0:	a0 da       	rcall	.-2752   	; 0x14e2 <vListInsertEnd>
    1fa2:	0f 90       	pop	r0
    1fa4:	0f be       	out	0x3f, r0	; 63
    1fa6:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <xSchedulerRunning>
    1faa:	88 23       	and	r24, r24
    1fac:	49 f0       	breq	.+18     	; 0x1fc0 <prvAddNewTaskToReadyList+0xac>
    1fae:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <pxCurrentTCB>
    1fb2:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <pxCurrentTCB+0x1>
    1fb6:	96 89       	ldd	r25, Z+22	; 0x16
    1fb8:	8e 89       	ldd	r24, Y+22	; 0x16
    1fba:	98 17       	cp	r25, r24
    1fbc:	08 f4       	brcc	.+2      	; 0x1fc0 <prvAddNewTaskToReadyList+0xac>
    1fbe:	ad db       	rcall	.-2214   	; 0x171a <vPortYield>
    1fc0:	df 91       	pop	r29
    1fc2:	cf 91       	pop	r28
    1fc4:	08 95       	ret

00001fc6 <prvCheckTasksWaitingTermination>:
    1fc6:	cf 93       	push	r28
    1fc8:	df 93       	push	r29
    1fca:	1a c0       	rjmp	.+52     	; 0x2000 <prvCheckTasksWaitingTermination+0x3a>
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	f8 94       	cli
    1fd0:	0f 92       	push	r0
    1fd2:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <xTasksWaitingTermination+0x5>
    1fd6:	f0 91 97 01 	lds	r31, 0x0197	; 0x800197 <xTasksWaitingTermination+0x6>
    1fda:	c6 81       	ldd	r28, Z+6	; 0x06
    1fdc:	d7 81       	ldd	r29, Z+7	; 0x07
    1fde:	ce 01       	movw	r24, r28
    1fe0:	02 96       	adiw	r24, 0x02	; 2
    1fe2:	d1 da       	rcall	.-2654   	; 0x1586 <uxListRemove>
    1fe4:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <uxCurrentNumberOfTasks>
    1fe8:	81 50       	subi	r24, 0x01	; 1
    1fea:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <uxCurrentNumberOfTasks>
    1fee:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <uxDeletedTasksWaitingCleanUp>
    1ff2:	81 50       	subi	r24, 0x01	; 1
    1ff4:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <uxDeletedTasksWaitingCleanUp>
    1ff8:	0f 90       	pop	r0
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	ce 01       	movw	r24, r28
    1ffe:	e3 de       	rcall	.-570    	; 0x1dc6 <prvDeleteTCB>
    2000:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <uxDeletedTasksWaitingCleanUp>
    2004:	81 11       	cpse	r24, r1
    2006:	e2 cf       	rjmp	.-60     	; 0x1fcc <prvCheckTasksWaitingTermination+0x6>
    2008:	df 91       	pop	r29
    200a:	cf 91       	pop	r28
    200c:	08 95       	ret

0000200e <prvIdleTask>:
    200e:	db df       	rcall	.-74     	; 0x1fc6 <prvCheckTasksWaitingTermination>
    2010:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <pxReadyTasksLists>
    2014:	82 30       	cpi	r24, 0x02	; 2
    2016:	d8 f3       	brcs	.-10     	; 0x200e <prvIdleTask>
    2018:	80 db       	rcall	.-2304   	; 0x171a <vPortYield>
    201a:	f9 cf       	rjmp	.-14     	; 0x200e <prvIdleTask>

0000201c <prvAddCurrentTaskToDelayedList>:
    201c:	0f 93       	push	r16
    201e:	1f 93       	push	r17
    2020:	cf 93       	push	r28
    2022:	df 93       	push	r29
    2024:	ec 01       	movw	r28, r24
    2026:	00 91 8d 01 	lds	r16, 0x018D	; 0x80018d <xTickCount>
    202a:	10 91 8e 01 	lds	r17, 0x018E	; 0x80018e <xTickCount+0x1>
    202e:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <pxCurrentTCB>
    2032:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <pxCurrentTCB+0x1>
    2036:	02 96       	adiw	r24, 0x02	; 2
    2038:	a6 da       	rcall	.-2740   	; 0x1586 <uxListRemove>
    203a:	c0 0f       	add	r28, r16
    203c:	d1 1f       	adc	r29, r17
    203e:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <pxCurrentTCB>
    2042:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <pxCurrentTCB+0x1>
    2046:	d3 83       	std	Z+3, r29	; 0x03
    2048:	c2 83       	std	Z+2, r28	; 0x02
    204a:	c0 17       	cp	r28, r16
    204c:	d1 07       	cpc	r29, r17
    204e:	60 f4       	brcc	.+24     	; 0x2068 <prvAddCurrentTaskToDelayedList+0x4c>
    2050:	60 91 13 02 	lds	r22, 0x0213	; 0x800213 <pxCurrentTCB>
    2054:	70 91 14 02 	lds	r23, 0x0214	; 0x800214 <pxCurrentTCB+0x1>
    2058:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <pxOverflowDelayedTaskList>
    205c:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <pxOverflowDelayedTaskList+0x1>
    2060:	6e 5f       	subi	r22, 0xFE	; 254
    2062:	7f 4f       	sbci	r23, 0xFF	; 255
    2064:	5f da       	rcall	.-2882   	; 0x1524 <vListInsert>
    2066:	16 c0       	rjmp	.+44     	; 0x2094 <prvAddCurrentTaskToDelayedList+0x78>
    2068:	60 91 13 02 	lds	r22, 0x0213	; 0x800213 <pxCurrentTCB>
    206c:	70 91 14 02 	lds	r23, 0x0214	; 0x800214 <pxCurrentTCB+0x1>
    2070:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <pxDelayedTaskList>
    2074:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <pxDelayedTaskList+0x1>
    2078:	6e 5f       	subi	r22, 0xFE	; 254
    207a:	7f 4f       	sbci	r23, 0xFF	; 255
    207c:	53 da       	rcall	.-2906   	; 0x1524 <vListInsert>
    207e:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <xNextTaskUnblockTime>
    2082:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <xNextTaskUnblockTime+0x1>
    2086:	c8 17       	cp	r28, r24
    2088:	d9 07       	cpc	r29, r25
    208a:	20 f4       	brcc	.+8      	; 0x2094 <prvAddCurrentTaskToDelayedList+0x78>
    208c:	d0 93 86 01 	sts	0x0186, r29	; 0x800186 <xNextTaskUnblockTime+0x1>
    2090:	c0 93 85 01 	sts	0x0185, r28	; 0x800185 <xNextTaskUnblockTime>
    2094:	df 91       	pop	r29
    2096:	cf 91       	pop	r28
    2098:	1f 91       	pop	r17
    209a:	0f 91       	pop	r16
    209c:	08 95       	ret

0000209e <xTaskCreate>:
    209e:	2f 92       	push	r2
    20a0:	3f 92       	push	r3
    20a2:	4f 92       	push	r4
    20a4:	5f 92       	push	r5
    20a6:	6f 92       	push	r6
    20a8:	7f 92       	push	r7
    20aa:	8f 92       	push	r8
    20ac:	9f 92       	push	r9
    20ae:	af 92       	push	r10
    20b0:	bf 92       	push	r11
    20b2:	cf 92       	push	r12
    20b4:	df 92       	push	r13
    20b6:	ef 92       	push	r14
    20b8:	ff 92       	push	r15
    20ba:	0f 93       	push	r16
    20bc:	1f 93       	push	r17
    20be:	cf 93       	push	r28
    20c0:	df 93       	push	r29
    20c2:	3c 01       	movw	r6, r24
    20c4:	1b 01       	movw	r2, r22
    20c6:	5a 01       	movw	r10, r20
    20c8:	29 01       	movw	r4, r18
    20ca:	ca 01       	movw	r24, r20
    20cc:	da db       	rcall	.-2124   	; 0x1882 <pvPortMalloc>
    20ce:	6c 01       	movw	r12, r24
    20d0:	89 2b       	or	r24, r25
    20d2:	61 f0       	breq	.+24     	; 0x20ec <xTaskCreate+0x4e>
    20d4:	86 e2       	ldi	r24, 0x26	; 38
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	d4 db       	rcall	.-2136   	; 0x1882 <pvPortMalloc>
    20da:	ec 01       	movw	r28, r24
    20dc:	89 2b       	or	r24, r25
    20de:	19 f0       	breq	.+6      	; 0x20e6 <xTaskCreate+0x48>
    20e0:	d8 8e       	std	Y+24, r13	; 0x18
    20e2:	cf 8a       	std	Y+23, r12	; 0x17
    20e4:	05 c0       	rjmp	.+10     	; 0x20f0 <xTaskCreate+0x52>
    20e6:	c6 01       	movw	r24, r12
    20e8:	d8 db       	rcall	.-2128   	; 0x189a <vPortFree>
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <xTaskCreate+0x52>
    20ec:	c0 e0       	ldi	r28, 0x00	; 0
    20ee:	d0 e0       	ldi	r29, 0x00	; 0
    20f0:	20 97       	sbiw	r28, 0x00	; 0
    20f2:	81 f0       	breq	.+32     	; 0x2114 <xTaskCreate+0x76>
    20f4:	95 01       	movw	r18, r10
    20f6:	40 e0       	ldi	r20, 0x00	; 0
    20f8:	50 e0       	ldi	r21, 0x00	; 0
    20fa:	81 2c       	mov	r8, r1
    20fc:	91 2c       	mov	r9, r1
    20fe:	5e 01       	movw	r10, r28
    2100:	67 01       	movw	r12, r14
    2102:	e0 2e       	mov	r14, r16
    2104:	82 01       	movw	r16, r4
    2106:	b1 01       	movw	r22, r2
    2108:	c3 01       	movw	r24, r6
    210a:	68 de       	rcall	.-816    	; 0x1ddc <prvInitialiseNewTask>
    210c:	ce 01       	movw	r24, r28
    210e:	02 df       	rcall	.-508    	; 0x1f14 <prvAddNewTaskToReadyList>
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	01 c0       	rjmp	.+2      	; 0x2116 <xTaskCreate+0x78>
    2114:	8f ef       	ldi	r24, 0xFF	; 255
    2116:	df 91       	pop	r29
    2118:	cf 91       	pop	r28
    211a:	1f 91       	pop	r17
    211c:	0f 91       	pop	r16
    211e:	ff 90       	pop	r15
    2120:	ef 90       	pop	r14
    2122:	df 90       	pop	r13
    2124:	cf 90       	pop	r12
    2126:	bf 90       	pop	r11
    2128:	af 90       	pop	r10
    212a:	9f 90       	pop	r9
    212c:	8f 90       	pop	r8
    212e:	7f 90       	pop	r7
    2130:	6f 90       	pop	r6
    2132:	5f 90       	pop	r5
    2134:	4f 90       	pop	r4
    2136:	3f 90       	pop	r3
    2138:	2f 90       	pop	r2
    213a:	08 95       	ret

0000213c <vTaskStartScheduler>:
    213c:	ef 92       	push	r14
    213e:	ff 92       	push	r15
    2140:	0f 93       	push	r16
    2142:	0f 2e       	mov	r0, r31
    2144:	f3 e8       	ldi	r31, 0x83	; 131
    2146:	ef 2e       	mov	r14, r31
    2148:	f1 e0       	ldi	r31, 0x01	; 1
    214a:	ff 2e       	mov	r15, r31
    214c:	f0 2d       	mov	r31, r0
    214e:	00 e0       	ldi	r16, 0x00	; 0
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	45 e5       	ldi	r20, 0x55	; 85
    2156:	50 e0       	ldi	r21, 0x00	; 0
    2158:	6d e6       	ldi	r22, 0x6D	; 109
    215a:	71 e0       	ldi	r23, 0x01	; 1
    215c:	87 e0       	ldi	r24, 0x07	; 7
    215e:	90 e1       	ldi	r25, 0x10	; 16
    2160:	9e df       	rcall	.-196    	; 0x209e <xTaskCreate>
    2162:	81 30       	cpi	r24, 0x01	; 1
    2164:	79 f4       	brne	.+30     	; 0x2184 <vTaskStartScheduler+0x48>
    2166:	f8 94       	cli
    2168:	8f ef       	ldi	r24, 0xFF	; 255
    216a:	9f ef       	ldi	r25, 0xFF	; 255
    216c:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <xNextTaskUnblockTime+0x1>
    2170:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <xNextTaskUnblockTime>
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <xSchedulerRunning>
    217a:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <xTickCount+0x1>
    217e:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <xTickCount>
    2182:	9d da       	rcall	.-2758   	; 0x16be <xPortStartScheduler>
    2184:	0f 91       	pop	r16
    2186:	ff 90       	pop	r15
    2188:	ef 90       	pop	r14
    218a:	08 95       	ret

0000218c <vTaskSuspendAll>:
    218c:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <uxSchedulerSuspended>
    2190:	8f 5f       	subi	r24, 0xFF	; 255
    2192:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <uxSchedulerSuspended>
    2196:	08 95       	ret

00002198 <xTaskIncrementTick>:
    2198:	df 92       	push	r13
    219a:	ef 92       	push	r14
    219c:	ff 92       	push	r15
    219e:	0f 93       	push	r16
    21a0:	1f 93       	push	r17
    21a2:	cf 93       	push	r28
    21a4:	df 93       	push	r29
    21a6:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <uxSchedulerSuspended>
    21aa:	81 11       	cpse	r24, r1
    21ac:	93 c0       	rjmp	.+294    	; 0x22d4 <xTaskIncrementTick+0x13c>
    21ae:	e0 90 8d 01 	lds	r14, 0x018D	; 0x80018d <xTickCount>
    21b2:	f0 90 8e 01 	lds	r15, 0x018E	; 0x80018e <xTickCount+0x1>
    21b6:	8f ef       	ldi	r24, 0xFF	; 255
    21b8:	e8 1a       	sub	r14, r24
    21ba:	f8 0a       	sbc	r15, r24
    21bc:	f0 92 8e 01 	sts	0x018E, r15	; 0x80018e <xTickCount+0x1>
    21c0:	e0 92 8d 01 	sts	0x018D, r14	; 0x80018d <xTickCount>
    21c4:	e1 14       	cp	r14, r1
    21c6:	f1 04       	cpc	r15, r1
    21c8:	b1 f4       	brne	.+44     	; 0x21f6 <xTaskIncrementTick+0x5e>
    21ca:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <pxDelayedTaskList>
    21ce:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <pxDelayedTaskList+0x1>
    21d2:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <pxOverflowDelayedTaskList>
    21d6:	30 91 a4 01 	lds	r19, 0x01A4	; 0x8001a4 <pxOverflowDelayedTaskList+0x1>
    21da:	30 93 a6 01 	sts	0x01A6, r19	; 0x8001a6 <pxDelayedTaskList+0x1>
    21de:	20 93 a5 01 	sts	0x01A5, r18	; 0x8001a5 <pxDelayedTaskList>
    21e2:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <pxOverflowDelayedTaskList+0x1>
    21e6:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <pxOverflowDelayedTaskList>
    21ea:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <xNumOfOverflows>
    21ee:	8f 5f       	subi	r24, 0xFF	; 255
    21f0:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <xNumOfOverflows>
    21f4:	c9 dd       	rcall	.-1134   	; 0x1d88 <prvResetNextTaskUnblockTime>
    21f6:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <xNextTaskUnblockTime>
    21fa:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <xNextTaskUnblockTime+0x1>
    21fe:	e8 16       	cp	r14, r24
    2200:	f9 06       	cpc	r15, r25
    2202:	28 f4       	brcc	.+10     	; 0x220e <xTaskIncrementTick+0x76>
    2204:	d1 2c       	mov	r13, r1
    2206:	50 c0       	rjmp	.+160    	; 0x22a8 <xTaskIncrementTick+0x110>
    2208:	dd 24       	eor	r13, r13
    220a:	d3 94       	inc	r13
    220c:	01 c0       	rjmp	.+2      	; 0x2210 <xTaskIncrementTick+0x78>
    220e:	d1 2c       	mov	r13, r1
    2210:	e0 91 a5 01 	lds	r30, 0x01A5	; 0x8001a5 <pxDelayedTaskList>
    2214:	f0 91 a6 01 	lds	r31, 0x01A6	; 0x8001a6 <pxDelayedTaskList+0x1>
    2218:	80 81       	ld	r24, Z
    221a:	81 11       	cpse	r24, r1
    221c:	07 c0       	rjmp	.+14     	; 0x222c <xTaskIncrementTick+0x94>
    221e:	8f ef       	ldi	r24, 0xFF	; 255
    2220:	9f ef       	ldi	r25, 0xFF	; 255
    2222:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <xNextTaskUnblockTime+0x1>
    2226:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <xNextTaskUnblockTime>
    222a:	3e c0       	rjmp	.+124    	; 0x22a8 <xTaskIncrementTick+0x110>
    222c:	e0 91 a5 01 	lds	r30, 0x01A5	; 0x8001a5 <pxDelayedTaskList>
    2230:	f0 91 a6 01 	lds	r31, 0x01A6	; 0x8001a6 <pxDelayedTaskList+0x1>
    2234:	05 80       	ldd	r0, Z+5	; 0x05
    2236:	f6 81       	ldd	r31, Z+6	; 0x06
    2238:	e0 2d       	mov	r30, r0
    223a:	c6 81       	ldd	r28, Z+6	; 0x06
    223c:	d7 81       	ldd	r29, Z+7	; 0x07
    223e:	8a 81       	ldd	r24, Y+2	; 0x02
    2240:	9b 81       	ldd	r25, Y+3	; 0x03
    2242:	e8 16       	cp	r14, r24
    2244:	f9 06       	cpc	r15, r25
    2246:	28 f4       	brcc	.+10     	; 0x2252 <xTaskIncrementTick+0xba>
    2248:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <xNextTaskUnblockTime+0x1>
    224c:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <xNextTaskUnblockTime>
    2250:	2b c0       	rjmp	.+86     	; 0x22a8 <xTaskIncrementTick+0x110>
    2252:	8e 01       	movw	r16, r28
    2254:	0e 5f       	subi	r16, 0xFE	; 254
    2256:	1f 4f       	sbci	r17, 0xFF	; 255
    2258:	c8 01       	movw	r24, r16
    225a:	95 d9       	rcall	.-3286   	; 0x1586 <uxListRemove>
    225c:	8c 89       	ldd	r24, Y+20	; 0x14
    225e:	9d 89       	ldd	r25, Y+21	; 0x15
    2260:	89 2b       	or	r24, r25
    2262:	19 f0       	breq	.+6      	; 0x226a <xTaskIncrementTick+0xd2>
    2264:	ce 01       	movw	r24, r28
    2266:	0c 96       	adiw	r24, 0x0c	; 12
    2268:	8e d9       	rcall	.-3300   	; 0x1586 <uxListRemove>
    226a:	8e 89       	ldd	r24, Y+22	; 0x16
    226c:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <uxTopReadyPriority>
    2270:	98 17       	cp	r25, r24
    2272:	10 f4       	brcc	.+4      	; 0x2278 <xTaskIncrementTick+0xe0>
    2274:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <uxTopReadyPriority>
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	9c 01       	movw	r18, r24
    227c:	22 0f       	add	r18, r18
    227e:	33 1f       	adc	r19, r19
    2280:	22 0f       	add	r18, r18
    2282:	33 1f       	adc	r19, r19
    2284:	22 0f       	add	r18, r18
    2286:	33 1f       	adc	r19, r19
    2288:	82 0f       	add	r24, r18
    228a:	93 1f       	adc	r25, r19
    228c:	b8 01       	movw	r22, r16
    228e:	87 54       	subi	r24, 0x47	; 71
    2290:	9e 4f       	sbci	r25, 0xFE	; 254
    2292:	27 d9       	rcall	.-3506   	; 0x14e2 <vListInsertEnd>
    2294:	9e 89       	ldd	r25, Y+22	; 0x16
    2296:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <pxCurrentTCB>
    229a:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <pxCurrentTCB+0x1>
    229e:	86 89       	ldd	r24, Z+22	; 0x16
    22a0:	98 17       	cp	r25, r24
    22a2:	08 f0       	brcs	.+2      	; 0x22a6 <xTaskIncrementTick+0x10e>
    22a4:	b1 cf       	rjmp	.-158    	; 0x2208 <xTaskIncrementTick+0x70>
    22a6:	b4 cf       	rjmp	.-152    	; 0x2210 <xTaskIncrementTick+0x78>
    22a8:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <pxCurrentTCB>
    22ac:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <pxCurrentTCB+0x1>
    22b0:	86 89       	ldd	r24, Z+22	; 0x16
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	fc 01       	movw	r30, r24
    22b6:	ee 0f       	add	r30, r30
    22b8:	ff 1f       	adc	r31, r31
    22ba:	ee 0f       	add	r30, r30
    22bc:	ff 1f       	adc	r31, r31
    22be:	ee 0f       	add	r30, r30
    22c0:	ff 1f       	adc	r31, r31
    22c2:	8e 0f       	add	r24, r30
    22c4:	9f 1f       	adc	r25, r31
    22c6:	fc 01       	movw	r30, r24
    22c8:	e7 54       	subi	r30, 0x47	; 71
    22ca:	fe 4f       	sbci	r31, 0xFE	; 254
    22cc:	80 81       	ld	r24, Z
    22ce:	82 30       	cpi	r24, 0x02	; 2
    22d0:	40 f4       	brcc	.+16     	; 0x22e2 <xTaskIncrementTick+0x14a>
    22d2:	09 c0       	rjmp	.+18     	; 0x22e6 <xTaskIncrementTick+0x14e>
    22d4:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <uxPendedTicks>
    22d8:	8f 5f       	subi	r24, 0xFF	; 255
    22da:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <uxPendedTicks>
    22de:	d1 2c       	mov	r13, r1
    22e0:	02 c0       	rjmp	.+4      	; 0x22e6 <xTaskIncrementTick+0x14e>
    22e2:	dd 24       	eor	r13, r13
    22e4:	d3 94       	inc	r13
    22e6:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <xYieldPending>
    22ea:	88 23       	and	r24, r24
    22ec:	11 f0       	breq	.+4      	; 0x22f2 <xTaskIncrementTick+0x15a>
    22ee:	dd 24       	eor	r13, r13
    22f0:	d3 94       	inc	r13
    22f2:	8d 2d       	mov	r24, r13
    22f4:	df 91       	pop	r29
    22f6:	cf 91       	pop	r28
    22f8:	1f 91       	pop	r17
    22fa:	0f 91       	pop	r16
    22fc:	ff 90       	pop	r15
    22fe:	ef 90       	pop	r14
    2300:	df 90       	pop	r13
    2302:	08 95       	ret

00002304 <xTaskResumeAll>:
    2304:	0f 93       	push	r16
    2306:	1f 93       	push	r17
    2308:	cf 93       	push	r28
    230a:	df 93       	push	r29
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	0f 92       	push	r0
    2312:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <uxSchedulerSuspended>
    2316:	81 50       	subi	r24, 0x01	; 1
    2318:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <uxSchedulerSuspended>
    231c:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <uxSchedulerSuspended>
    2320:	81 11       	cpse	r24, r1
    2322:	52 c0       	rjmp	.+164    	; 0x23c8 <xTaskResumeAll+0xc4>
    2324:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <uxCurrentNumberOfTasks>
    2328:	81 11       	cpse	r24, r1
    232a:	30 c0       	rjmp	.+96     	; 0x238c <xTaskResumeAll+0x88>
    232c:	50 c0       	rjmp	.+160    	; 0x23ce <xTaskResumeAll+0xca>
    232e:	e0 91 9f 01 	lds	r30, 0x019F	; 0x80019f <xPendingReadyList+0x5>
    2332:	f0 91 a0 01 	lds	r31, 0x01A0	; 0x8001a0 <xPendingReadyList+0x6>
    2336:	c6 81       	ldd	r28, Z+6	; 0x06
    2338:	d7 81       	ldd	r29, Z+7	; 0x07
    233a:	ce 01       	movw	r24, r28
    233c:	0c 96       	adiw	r24, 0x0c	; 12
    233e:	23 d9       	rcall	.-3514   	; 0x1586 <uxListRemove>
    2340:	8e 01       	movw	r16, r28
    2342:	0e 5f       	subi	r16, 0xFE	; 254
    2344:	1f 4f       	sbci	r17, 0xFF	; 255
    2346:	c8 01       	movw	r24, r16
    2348:	1e d9       	rcall	.-3524   	; 0x1586 <uxListRemove>
    234a:	8e 89       	ldd	r24, Y+22	; 0x16
    234c:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <uxTopReadyPriority>
    2350:	98 17       	cp	r25, r24
    2352:	10 f4       	brcc	.+4      	; 0x2358 <xTaskResumeAll+0x54>
    2354:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <uxTopReadyPriority>
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	9c 01       	movw	r18, r24
    235c:	22 0f       	add	r18, r18
    235e:	33 1f       	adc	r19, r19
    2360:	22 0f       	add	r18, r18
    2362:	33 1f       	adc	r19, r19
    2364:	22 0f       	add	r18, r18
    2366:	33 1f       	adc	r19, r19
    2368:	82 0f       	add	r24, r18
    236a:	93 1f       	adc	r25, r19
    236c:	b8 01       	movw	r22, r16
    236e:	87 54       	subi	r24, 0x47	; 71
    2370:	9e 4f       	sbci	r25, 0xFE	; 254
    2372:	b7 d8       	rcall	.-3730   	; 0x14e2 <vListInsertEnd>
    2374:	9e 89       	ldd	r25, Y+22	; 0x16
    2376:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <pxCurrentTCB>
    237a:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <pxCurrentTCB+0x1>
    237e:	86 89       	ldd	r24, Z+22	; 0x16
    2380:	98 17       	cp	r25, r24
    2382:	30 f0       	brcs	.+12     	; 0x2390 <xTaskResumeAll+0x8c>
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <xYieldPending>
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <xTaskResumeAll+0x8c>
    238c:	c0 e0       	ldi	r28, 0x00	; 0
    238e:	d0 e0       	ldi	r29, 0x00	; 0
    2390:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <xPendingReadyList>
    2394:	81 11       	cpse	r24, r1
    2396:	cb cf       	rjmp	.-106    	; 0x232e <xTaskResumeAll+0x2a>
    2398:	cd 2b       	or	r28, r29
    239a:	09 f0       	breq	.+2      	; 0x239e <xTaskResumeAll+0x9a>
    239c:	f5 dc       	rcall	.-1558   	; 0x1d88 <prvResetNextTaskUnblockTime>
    239e:	c0 91 8a 01 	lds	r28, 0x018A	; 0x80018a <uxPendedTicks>
    23a2:	cc 23       	and	r28, r28
    23a4:	51 f0       	breq	.+20     	; 0x23ba <xTaskResumeAll+0xb6>
    23a6:	f8 de       	rcall	.-528    	; 0x2198 <xTaskIncrementTick>
    23a8:	88 23       	and	r24, r24
    23aa:	19 f0       	breq	.+6      	; 0x23b2 <xTaskResumeAll+0xae>
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <xYieldPending>
    23b2:	c1 50       	subi	r28, 0x01	; 1
    23b4:	c1 f7       	brne	.-16     	; 0x23a6 <xTaskResumeAll+0xa2>
    23b6:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <uxPendedTicks>
    23ba:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <xYieldPending>
    23be:	88 23       	and	r24, r24
    23c0:	29 f0       	breq	.+10     	; 0x23cc <xTaskResumeAll+0xc8>
    23c2:	ab d9       	rcall	.-3242   	; 0x171a <vPortYield>
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	03 c0       	rjmp	.+6      	; 0x23ce <xTaskResumeAll+0xca>
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	01 c0       	rjmp	.+2      	; 0x23ce <xTaskResumeAll+0xca>
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	0f 90       	pop	r0
    23d0:	0f be       	out	0x3f, r0	; 63
    23d2:	df 91       	pop	r29
    23d4:	cf 91       	pop	r28
    23d6:	1f 91       	pop	r17
    23d8:	0f 91       	pop	r16
    23da:	08 95       	ret

000023dc <vTaskDelay>:
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	ec 01       	movw	r28, r24
    23e2:	89 2b       	or	r24, r25
    23e4:	31 f0       	breq	.+12     	; 0x23f2 <vTaskDelay+0x16>
    23e6:	d2 de       	rcall	.-604    	; 0x218c <vTaskSuspendAll>
    23e8:	60 e0       	ldi	r22, 0x00	; 0
    23ea:	ce 01       	movw	r24, r28
    23ec:	17 de       	rcall	.-978    	; 0x201c <prvAddCurrentTaskToDelayedList>
    23ee:	8a df       	rcall	.-236    	; 0x2304 <xTaskResumeAll>
    23f0:	01 c0       	rjmp	.+2      	; 0x23f4 <vTaskDelay+0x18>
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	81 11       	cpse	r24, r1
    23f6:	01 c0       	rjmp	.+2      	; 0x23fa <vTaskDelay+0x1e>
    23f8:	90 d9       	rcall	.-3296   	; 0x171a <vPortYield>
    23fa:	df 91       	pop	r29
    23fc:	cf 91       	pop	r28
    23fe:	08 95       	ret

00002400 <vTaskSwitchContext>:
    2400:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <uxSchedulerSuspended>
    2404:	88 23       	and	r24, r24
    2406:	21 f0       	breq	.+8      	; 0x2410 <vTaskSwitchContext+0x10>
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <xYieldPending>
    240e:	08 95       	ret
    2410:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <xYieldPending>
    2414:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <uxTopReadyPriority>
    2418:	01 c0       	rjmp	.+2      	; 0x241c <vTaskSwitchContext+0x1c>
    241a:	21 50       	subi	r18, 0x01	; 1
    241c:	82 2f       	mov	r24, r18
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	fc 01       	movw	r30, r24
    2422:	ee 0f       	add	r30, r30
    2424:	ff 1f       	adc	r31, r31
    2426:	ee 0f       	add	r30, r30
    2428:	ff 1f       	adc	r31, r31
    242a:	ee 0f       	add	r30, r30
    242c:	ff 1f       	adc	r31, r31
    242e:	e8 0f       	add	r30, r24
    2430:	f9 1f       	adc	r31, r25
    2432:	e7 54       	subi	r30, 0x47	; 71
    2434:	fe 4f       	sbci	r31, 0xFE	; 254
    2436:	30 81       	ld	r19, Z
    2438:	33 23       	and	r19, r19
    243a:	79 f3       	breq	.-34     	; 0x241a <vTaskSwitchContext+0x1a>
    243c:	ac 01       	movw	r20, r24
    243e:	44 0f       	add	r20, r20
    2440:	55 1f       	adc	r21, r21
    2442:	44 0f       	add	r20, r20
    2444:	55 1f       	adc	r21, r21
    2446:	44 0f       	add	r20, r20
    2448:	55 1f       	adc	r21, r21
    244a:	48 0f       	add	r20, r24
    244c:	59 1f       	adc	r21, r25
    244e:	df 01       	movw	r26, r30
    2450:	01 80       	ldd	r0, Z+1	; 0x01
    2452:	f2 81       	ldd	r31, Z+2	; 0x02
    2454:	e0 2d       	mov	r30, r0
    2456:	02 80       	ldd	r0, Z+2	; 0x02
    2458:	f3 81       	ldd	r31, Z+3	; 0x03
    245a:	e0 2d       	mov	r30, r0
    245c:	12 96       	adiw	r26, 0x02	; 2
    245e:	fc 93       	st	X, r31
    2460:	ee 93       	st	-X, r30
    2462:	11 97       	sbiw	r26, 0x01	; 1
    2464:	44 54       	subi	r20, 0x44	; 68
    2466:	5e 4f       	sbci	r21, 0xFE	; 254
    2468:	e4 17       	cp	r30, r20
    246a:	f5 07       	cpc	r31, r21
    246c:	29 f4       	brne	.+10     	; 0x2478 <vTaskSwitchContext+0x78>
    246e:	42 81       	ldd	r20, Z+2	; 0x02
    2470:	53 81       	ldd	r21, Z+3	; 0x03
    2472:	fd 01       	movw	r30, r26
    2474:	52 83       	std	Z+2, r21	; 0x02
    2476:	41 83       	std	Z+1, r20	; 0x01
    2478:	fc 01       	movw	r30, r24
    247a:	ee 0f       	add	r30, r30
    247c:	ff 1f       	adc	r31, r31
    247e:	ee 0f       	add	r30, r30
    2480:	ff 1f       	adc	r31, r31
    2482:	ee 0f       	add	r30, r30
    2484:	ff 1f       	adc	r31, r31
    2486:	8e 0f       	add	r24, r30
    2488:	9f 1f       	adc	r25, r31
    248a:	fc 01       	movw	r30, r24
    248c:	e7 54       	subi	r30, 0x47	; 71
    248e:	fe 4f       	sbci	r31, 0xFE	; 254
    2490:	01 80       	ldd	r0, Z+1	; 0x01
    2492:	f2 81       	ldd	r31, Z+2	; 0x02
    2494:	e0 2d       	mov	r30, r0
    2496:	86 81       	ldd	r24, Z+6	; 0x06
    2498:	97 81       	ldd	r25, Z+7	; 0x07
    249a:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <pxCurrentTCB+0x1>
    249e:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <pxCurrentTCB>
    24a2:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <uxTopReadyPriority>
    24a6:	08 95       	ret

000024a8 <vTaskPlaceOnEventList>:
    24a8:	cf 93       	push	r28
    24aa:	df 93       	push	r29
    24ac:	eb 01       	movw	r28, r22
    24ae:	60 91 13 02 	lds	r22, 0x0213	; 0x800213 <pxCurrentTCB>
    24b2:	70 91 14 02 	lds	r23, 0x0214	; 0x800214 <pxCurrentTCB+0x1>
    24b6:	64 5f       	subi	r22, 0xF4	; 244
    24b8:	7f 4f       	sbci	r23, 0xFF	; 255
    24ba:	34 d8       	rcall	.-3992   	; 0x1524 <vListInsert>
    24bc:	61 e0       	ldi	r22, 0x01	; 1
    24be:	ce 01       	movw	r24, r28
    24c0:	ad dd       	rcall	.-1190   	; 0x201c <prvAddCurrentTaskToDelayedList>
    24c2:	df 91       	pop	r29
    24c4:	cf 91       	pop	r28
    24c6:	08 95       	ret

000024c8 <xTaskRemoveFromEventList>:
    24c8:	0f 93       	push	r16
    24ca:	1f 93       	push	r17
    24cc:	cf 93       	push	r28
    24ce:	df 93       	push	r29
    24d0:	dc 01       	movw	r26, r24
    24d2:	15 96       	adiw	r26, 0x05	; 5
    24d4:	ed 91       	ld	r30, X+
    24d6:	fc 91       	ld	r31, X
    24d8:	16 97       	sbiw	r26, 0x06	; 6
    24da:	c6 81       	ldd	r28, Z+6	; 0x06
    24dc:	d7 81       	ldd	r29, Z+7	; 0x07
    24de:	8e 01       	movw	r16, r28
    24e0:	04 5f       	subi	r16, 0xF4	; 244
    24e2:	1f 4f       	sbci	r17, 0xFF	; 255
    24e4:	c8 01       	movw	r24, r16
    24e6:	4f d8       	rcall	.-3938   	; 0x1586 <uxListRemove>
    24e8:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <uxSchedulerSuspended>
    24ec:	81 11       	cpse	r24, r1
    24ee:	1b c0       	rjmp	.+54     	; 0x2526 <xTaskRemoveFromEventList+0x5e>
    24f0:	0a 50       	subi	r16, 0x0A	; 10
    24f2:	11 09       	sbc	r17, r1
    24f4:	c8 01       	movw	r24, r16
    24f6:	47 d8       	rcall	.-3954   	; 0x1586 <uxListRemove>
    24f8:	8e 89       	ldd	r24, Y+22	; 0x16
    24fa:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <uxTopReadyPriority>
    24fe:	98 17       	cp	r25, r24
    2500:	10 f4       	brcc	.+4      	; 0x2506 <xTaskRemoveFromEventList+0x3e>
    2502:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <uxTopReadyPriority>
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	9c 01       	movw	r18, r24
    250a:	22 0f       	add	r18, r18
    250c:	33 1f       	adc	r19, r19
    250e:	22 0f       	add	r18, r18
    2510:	33 1f       	adc	r19, r19
    2512:	22 0f       	add	r18, r18
    2514:	33 1f       	adc	r19, r19
    2516:	82 0f       	add	r24, r18
    2518:	93 1f       	adc	r25, r19
    251a:	b8 01       	movw	r22, r16
    251c:	87 54       	subi	r24, 0x47	; 71
    251e:	9e 4f       	sbci	r25, 0xFE	; 254
    2520:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <vListInsertEnd>
    2524:	05 c0       	rjmp	.+10     	; 0x2530 <xTaskRemoveFromEventList+0x68>
    2526:	b8 01       	movw	r22, r16
    2528:	8a e9       	ldi	r24, 0x9A	; 154
    252a:	91 e0       	ldi	r25, 0x01	; 1
    252c:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <vListInsertEnd>
    2530:	9e 89       	ldd	r25, Y+22	; 0x16
    2532:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <pxCurrentTCB>
    2536:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <pxCurrentTCB+0x1>
    253a:	86 89       	ldd	r24, Z+22	; 0x16
    253c:	89 17       	cp	r24, r25
    253e:	20 f4       	brcc	.+8      	; 0x2548 <xTaskRemoveFromEventList+0x80>
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <xYieldPending>
    2546:	01 c0       	rjmp	.+2      	; 0x254a <xTaskRemoveFromEventList+0x82>
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	df 91       	pop	r29
    254c:	cf 91       	pop	r28
    254e:	1f 91       	pop	r17
    2550:	0f 91       	pop	r16
    2552:	08 95       	ret

00002554 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    2554:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <xNumOfOverflows>
    2558:	fc 01       	movw	r30, r24
    255a:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    255c:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <xTickCount>
    2560:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <xTickCount+0x1>
    2564:	32 83       	std	Z+2, r19	; 0x02
    2566:	21 83       	std	Z+1, r18	; 0x01
    2568:	08 95       	ret

0000256a <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    256a:	cf 93       	push	r28
    256c:	df 93       	push	r29
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    256e:	0f b6       	in	r0, 0x3f	; 63
    2570:	f8 94       	cli
    2572:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    2574:	40 91 8d 01 	lds	r20, 0x018D	; 0x80018d <xTickCount>
    2578:	50 91 8e 01 	lds	r21, 0x018E	; 0x80018e <xTickCount+0x1>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    257c:	ec 01       	movw	r28, r24
    257e:	29 81       	ldd	r18, Y+1	; 0x01
    2580:	3a 81       	ldd	r19, Y+2	; 0x02
    2582:	da 01       	movw	r26, r20
    2584:	a2 1b       	sub	r26, r18
    2586:	b3 0b       	sbc	r27, r19
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    2588:	f8 81       	ld	r31, Y
    258a:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <xNumOfOverflows>
    258e:	fe 17       	cp	r31, r30
    2590:	19 f0       	breq	.+6      	; 0x2598 <xTaskCheckForTimeOut+0x2e>
    2592:	42 17       	cp	r20, r18
    2594:	53 07       	cpc	r21, r19
    2596:	88 f4       	brcc	.+34     	; 0x25ba <xTaskCheckForTimeOut+0x50>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    2598:	fb 01       	movw	r30, r22
    259a:	20 81       	ld	r18, Z
    259c:	31 81       	ldd	r19, Z+1	; 0x01
    259e:	a2 17       	cp	r26, r18
    25a0:	b3 07       	cpc	r27, r19
    25a2:	38 f4       	brcc	.+14     	; 0x25b2 <xTaskCheckForTimeOut+0x48>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    25a4:	2a 1b       	sub	r18, r26
    25a6:	3b 0b       	sbc	r19, r27
    25a8:	31 83       	std	Z+1, r19	; 0x01
    25aa:	20 83       	st	Z, r18
			vTaskInternalSetTimeOutState( pxTimeOut );
    25ac:	d3 df       	rcall	.-90     	; 0x2554 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	05 c0       	rjmp	.+10     	; 0x25bc <xTaskCheckForTimeOut+0x52>
		}
		else
		{
			*pxTicksToWait = 0;
    25b2:	11 82       	std	Z+1, r1	; 0x01
    25b4:	10 82       	st	Z, r1
			xReturn = pdTRUE;
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	01 c0       	rjmp	.+2      	; 0x25bc <xTaskCheckForTimeOut+0x52>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    25ba:	81 e0       	ldi	r24, 0x01	; 1
		{
			*pxTicksToWait = 0;
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    25bc:	0f 90       	pop	r0
    25be:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    25c0:	df 91       	pop	r29
    25c2:	cf 91       	pop	r28
    25c4:	08 95       	ret

000025c6 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <xYieldPending>
    25cc:	08 95       	ret

000025ce <__udivmodsi4>:
    25ce:	a1 e2       	ldi	r26, 0x21	; 33
    25d0:	1a 2e       	mov	r1, r26
    25d2:	aa 1b       	sub	r26, r26
    25d4:	bb 1b       	sub	r27, r27
    25d6:	fd 01       	movw	r30, r26
    25d8:	0d c0       	rjmp	.+26     	; 0x25f4 <__udivmodsi4_ep>

000025da <__udivmodsi4_loop>:
    25da:	aa 1f       	adc	r26, r26
    25dc:	bb 1f       	adc	r27, r27
    25de:	ee 1f       	adc	r30, r30
    25e0:	ff 1f       	adc	r31, r31
    25e2:	a2 17       	cp	r26, r18
    25e4:	b3 07       	cpc	r27, r19
    25e6:	e4 07       	cpc	r30, r20
    25e8:	f5 07       	cpc	r31, r21
    25ea:	20 f0       	brcs	.+8      	; 0x25f4 <__udivmodsi4_ep>
    25ec:	a2 1b       	sub	r26, r18
    25ee:	b3 0b       	sbc	r27, r19
    25f0:	e4 0b       	sbc	r30, r20
    25f2:	f5 0b       	sbc	r31, r21

000025f4 <__udivmodsi4_ep>:
    25f4:	66 1f       	adc	r22, r22
    25f6:	77 1f       	adc	r23, r23
    25f8:	88 1f       	adc	r24, r24
    25fa:	99 1f       	adc	r25, r25
    25fc:	1a 94       	dec	r1
    25fe:	69 f7       	brne	.-38     	; 0x25da <__udivmodsi4_loop>
    2600:	60 95       	com	r22
    2602:	70 95       	com	r23
    2604:	80 95       	com	r24
    2606:	90 95       	com	r25
    2608:	9b 01       	movw	r18, r22
    260a:	ac 01       	movw	r20, r24
    260c:	bd 01       	movw	r22, r26
    260e:	cf 01       	movw	r24, r30
    2610:	08 95       	ret

00002612 <__tablejump2__>:
    2612:	ee 0f       	add	r30, r30
    2614:	ff 1f       	adc	r31, r31
    2616:	00 24       	eor	r0, r0
    2618:	00 1c       	adc	r0, r0
    261a:	0b be       	out	0x3b, r0	; 59
    261c:	07 90       	elpm	r0, Z+
    261e:	f6 91       	elpm	r31, Z
    2620:	e0 2d       	mov	r30, r0
    2622:	09 94       	ijmp

00002624 <malloc>:
    2624:	0f 93       	push	r16
    2626:	1f 93       	push	r17
    2628:	cf 93       	push	r28
    262a:	df 93       	push	r29
    262c:	82 30       	cpi	r24, 0x02	; 2
    262e:	91 05       	cpc	r25, r1
    2630:	10 f4       	brcc	.+4      	; 0x2636 <malloc+0x12>
    2632:	82 e0       	ldi	r24, 0x02	; 2
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	e0 91 77 04 	lds	r30, 0x0477	; 0x800477 <__flp>
    263a:	f0 91 78 04 	lds	r31, 0x0478	; 0x800478 <__flp+0x1>
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	a0 e0       	ldi	r26, 0x00	; 0
    2644:	b0 e0       	ldi	r27, 0x00	; 0
    2646:	30 97       	sbiw	r30, 0x00	; 0
    2648:	19 f1       	breq	.+70     	; 0x2690 <malloc+0x6c>
    264a:	40 81       	ld	r20, Z
    264c:	51 81       	ldd	r21, Z+1	; 0x01
    264e:	02 81       	ldd	r16, Z+2	; 0x02
    2650:	13 81       	ldd	r17, Z+3	; 0x03
    2652:	48 17       	cp	r20, r24
    2654:	59 07       	cpc	r21, r25
    2656:	c8 f0       	brcs	.+50     	; 0x268a <malloc+0x66>
    2658:	84 17       	cp	r24, r20
    265a:	95 07       	cpc	r25, r21
    265c:	69 f4       	brne	.+26     	; 0x2678 <malloc+0x54>
    265e:	10 97       	sbiw	r26, 0x00	; 0
    2660:	31 f0       	breq	.+12     	; 0x266e <malloc+0x4a>
    2662:	12 96       	adiw	r26, 0x02	; 2
    2664:	0c 93       	st	X, r16
    2666:	12 97       	sbiw	r26, 0x02	; 2
    2668:	13 96       	adiw	r26, 0x03	; 3
    266a:	1c 93       	st	X, r17
    266c:	27 c0       	rjmp	.+78     	; 0x26bc <malloc+0x98>
    266e:	00 93 77 04 	sts	0x0477, r16	; 0x800477 <__flp>
    2672:	10 93 78 04 	sts	0x0478, r17	; 0x800478 <__flp+0x1>
    2676:	22 c0       	rjmp	.+68     	; 0x26bc <malloc+0x98>
    2678:	21 15       	cp	r18, r1
    267a:	31 05       	cpc	r19, r1
    267c:	19 f0       	breq	.+6      	; 0x2684 <malloc+0x60>
    267e:	42 17       	cp	r20, r18
    2680:	53 07       	cpc	r21, r19
    2682:	18 f4       	brcc	.+6      	; 0x268a <malloc+0x66>
    2684:	9a 01       	movw	r18, r20
    2686:	bd 01       	movw	r22, r26
    2688:	ef 01       	movw	r28, r30
    268a:	df 01       	movw	r26, r30
    268c:	f8 01       	movw	r30, r16
    268e:	db cf       	rjmp	.-74     	; 0x2646 <malloc+0x22>
    2690:	21 15       	cp	r18, r1
    2692:	31 05       	cpc	r19, r1
    2694:	f9 f0       	breq	.+62     	; 0x26d4 <malloc+0xb0>
    2696:	28 1b       	sub	r18, r24
    2698:	39 0b       	sbc	r19, r25
    269a:	24 30       	cpi	r18, 0x04	; 4
    269c:	31 05       	cpc	r19, r1
    269e:	80 f4       	brcc	.+32     	; 0x26c0 <malloc+0x9c>
    26a0:	8a 81       	ldd	r24, Y+2	; 0x02
    26a2:	9b 81       	ldd	r25, Y+3	; 0x03
    26a4:	61 15       	cp	r22, r1
    26a6:	71 05       	cpc	r23, r1
    26a8:	21 f0       	breq	.+8      	; 0x26b2 <malloc+0x8e>
    26aa:	fb 01       	movw	r30, r22
    26ac:	93 83       	std	Z+3, r25	; 0x03
    26ae:	82 83       	std	Z+2, r24	; 0x02
    26b0:	04 c0       	rjmp	.+8      	; 0x26ba <malloc+0x96>
    26b2:	90 93 78 04 	sts	0x0478, r25	; 0x800478 <__flp+0x1>
    26b6:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <__flp>
    26ba:	fe 01       	movw	r30, r28
    26bc:	32 96       	adiw	r30, 0x02	; 2
    26be:	44 c0       	rjmp	.+136    	; 0x2748 <malloc+0x124>
    26c0:	fe 01       	movw	r30, r28
    26c2:	e2 0f       	add	r30, r18
    26c4:	f3 1f       	adc	r31, r19
    26c6:	81 93       	st	Z+, r24
    26c8:	91 93       	st	Z+, r25
    26ca:	22 50       	subi	r18, 0x02	; 2
    26cc:	31 09       	sbc	r19, r1
    26ce:	39 83       	std	Y+1, r19	; 0x01
    26d0:	28 83       	st	Y, r18
    26d2:	3a c0       	rjmp	.+116    	; 0x2748 <malloc+0x124>
    26d4:	20 91 75 04 	lds	r18, 0x0475	; 0x800475 <__brkval>
    26d8:	30 91 76 04 	lds	r19, 0x0476	; 0x800476 <__brkval+0x1>
    26dc:	23 2b       	or	r18, r19
    26de:	41 f4       	brne	.+16     	; 0x26f0 <malloc+0xcc>
    26e0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    26e4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    26e8:	30 93 76 04 	sts	0x0476, r19	; 0x800476 <__brkval+0x1>
    26ec:	20 93 75 04 	sts	0x0475, r18	; 0x800475 <__brkval>
    26f0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    26f4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    26f8:	21 15       	cp	r18, r1
    26fa:	31 05       	cpc	r19, r1
    26fc:	41 f4       	brne	.+16     	; 0x270e <malloc+0xea>
    26fe:	2d b7       	in	r18, 0x3d	; 61
    2700:	3e b7       	in	r19, 0x3e	; 62
    2702:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2706:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    270a:	24 1b       	sub	r18, r20
    270c:	35 0b       	sbc	r19, r21
    270e:	e0 91 75 04 	lds	r30, 0x0475	; 0x800475 <__brkval>
    2712:	f0 91 76 04 	lds	r31, 0x0476	; 0x800476 <__brkval+0x1>
    2716:	e2 17       	cp	r30, r18
    2718:	f3 07       	cpc	r31, r19
    271a:	a0 f4       	brcc	.+40     	; 0x2744 <malloc+0x120>
    271c:	2e 1b       	sub	r18, r30
    271e:	3f 0b       	sbc	r19, r31
    2720:	28 17       	cp	r18, r24
    2722:	39 07       	cpc	r19, r25
    2724:	78 f0       	brcs	.+30     	; 0x2744 <malloc+0x120>
    2726:	ac 01       	movw	r20, r24
    2728:	4e 5f       	subi	r20, 0xFE	; 254
    272a:	5f 4f       	sbci	r21, 0xFF	; 255
    272c:	24 17       	cp	r18, r20
    272e:	35 07       	cpc	r19, r21
    2730:	48 f0       	brcs	.+18     	; 0x2744 <malloc+0x120>
    2732:	4e 0f       	add	r20, r30
    2734:	5f 1f       	adc	r21, r31
    2736:	50 93 76 04 	sts	0x0476, r21	; 0x800476 <__brkval+0x1>
    273a:	40 93 75 04 	sts	0x0475, r20	; 0x800475 <__brkval>
    273e:	81 93       	st	Z+, r24
    2740:	91 93       	st	Z+, r25
    2742:	02 c0       	rjmp	.+4      	; 0x2748 <malloc+0x124>
    2744:	e0 e0       	ldi	r30, 0x00	; 0
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	cf 01       	movw	r24, r30
    274a:	df 91       	pop	r29
    274c:	cf 91       	pop	r28
    274e:	1f 91       	pop	r17
    2750:	0f 91       	pop	r16
    2752:	08 95       	ret

00002754 <free>:
    2754:	cf 93       	push	r28
    2756:	df 93       	push	r29
    2758:	00 97       	sbiw	r24, 0x00	; 0
    275a:	09 f4       	brne	.+2      	; 0x275e <free+0xa>
    275c:	81 c0       	rjmp	.+258    	; 0x2860 <free+0x10c>
    275e:	fc 01       	movw	r30, r24
    2760:	32 97       	sbiw	r30, 0x02	; 2
    2762:	13 82       	std	Z+3, r1	; 0x03
    2764:	12 82       	std	Z+2, r1	; 0x02
    2766:	a0 91 77 04 	lds	r26, 0x0477	; 0x800477 <__flp>
    276a:	b0 91 78 04 	lds	r27, 0x0478	; 0x800478 <__flp+0x1>
    276e:	10 97       	sbiw	r26, 0x00	; 0
    2770:	81 f4       	brne	.+32     	; 0x2792 <free+0x3e>
    2772:	20 81       	ld	r18, Z
    2774:	31 81       	ldd	r19, Z+1	; 0x01
    2776:	82 0f       	add	r24, r18
    2778:	93 1f       	adc	r25, r19
    277a:	20 91 75 04 	lds	r18, 0x0475	; 0x800475 <__brkval>
    277e:	30 91 76 04 	lds	r19, 0x0476	; 0x800476 <__brkval+0x1>
    2782:	28 17       	cp	r18, r24
    2784:	39 07       	cpc	r19, r25
    2786:	51 f5       	brne	.+84     	; 0x27dc <free+0x88>
    2788:	f0 93 76 04 	sts	0x0476, r31	; 0x800476 <__brkval+0x1>
    278c:	e0 93 75 04 	sts	0x0475, r30	; 0x800475 <__brkval>
    2790:	67 c0       	rjmp	.+206    	; 0x2860 <free+0x10c>
    2792:	ed 01       	movw	r28, r26
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	ce 17       	cp	r28, r30
    279a:	df 07       	cpc	r29, r31
    279c:	40 f4       	brcc	.+16     	; 0x27ae <free+0x5a>
    279e:	4a 81       	ldd	r20, Y+2	; 0x02
    27a0:	5b 81       	ldd	r21, Y+3	; 0x03
    27a2:	9e 01       	movw	r18, r28
    27a4:	41 15       	cp	r20, r1
    27a6:	51 05       	cpc	r21, r1
    27a8:	f1 f0       	breq	.+60     	; 0x27e6 <free+0x92>
    27aa:	ea 01       	movw	r28, r20
    27ac:	f5 cf       	rjmp	.-22     	; 0x2798 <free+0x44>
    27ae:	d3 83       	std	Z+3, r29	; 0x03
    27b0:	c2 83       	std	Z+2, r28	; 0x02
    27b2:	40 81       	ld	r20, Z
    27b4:	51 81       	ldd	r21, Z+1	; 0x01
    27b6:	84 0f       	add	r24, r20
    27b8:	95 1f       	adc	r25, r21
    27ba:	c8 17       	cp	r28, r24
    27bc:	d9 07       	cpc	r29, r25
    27be:	59 f4       	brne	.+22     	; 0x27d6 <free+0x82>
    27c0:	88 81       	ld	r24, Y
    27c2:	99 81       	ldd	r25, Y+1	; 0x01
    27c4:	84 0f       	add	r24, r20
    27c6:	95 1f       	adc	r25, r21
    27c8:	02 96       	adiw	r24, 0x02	; 2
    27ca:	91 83       	std	Z+1, r25	; 0x01
    27cc:	80 83       	st	Z, r24
    27ce:	8a 81       	ldd	r24, Y+2	; 0x02
    27d0:	9b 81       	ldd	r25, Y+3	; 0x03
    27d2:	93 83       	std	Z+3, r25	; 0x03
    27d4:	82 83       	std	Z+2, r24	; 0x02
    27d6:	21 15       	cp	r18, r1
    27d8:	31 05       	cpc	r19, r1
    27da:	29 f4       	brne	.+10     	; 0x27e6 <free+0x92>
    27dc:	f0 93 78 04 	sts	0x0478, r31	; 0x800478 <__flp+0x1>
    27e0:	e0 93 77 04 	sts	0x0477, r30	; 0x800477 <__flp>
    27e4:	3d c0       	rjmp	.+122    	; 0x2860 <free+0x10c>
    27e6:	e9 01       	movw	r28, r18
    27e8:	fb 83       	std	Y+3, r31	; 0x03
    27ea:	ea 83       	std	Y+2, r30	; 0x02
    27ec:	49 91       	ld	r20, Y+
    27ee:	59 91       	ld	r21, Y+
    27f0:	c4 0f       	add	r28, r20
    27f2:	d5 1f       	adc	r29, r21
    27f4:	ec 17       	cp	r30, r28
    27f6:	fd 07       	cpc	r31, r29
    27f8:	61 f4       	brne	.+24     	; 0x2812 <free+0xbe>
    27fa:	80 81       	ld	r24, Z
    27fc:	91 81       	ldd	r25, Z+1	; 0x01
    27fe:	84 0f       	add	r24, r20
    2800:	95 1f       	adc	r25, r21
    2802:	02 96       	adiw	r24, 0x02	; 2
    2804:	e9 01       	movw	r28, r18
    2806:	99 83       	std	Y+1, r25	; 0x01
    2808:	88 83       	st	Y, r24
    280a:	82 81       	ldd	r24, Z+2	; 0x02
    280c:	93 81       	ldd	r25, Z+3	; 0x03
    280e:	9b 83       	std	Y+3, r25	; 0x03
    2810:	8a 83       	std	Y+2, r24	; 0x02
    2812:	e0 e0       	ldi	r30, 0x00	; 0
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	12 96       	adiw	r26, 0x02	; 2
    2818:	8d 91       	ld	r24, X+
    281a:	9c 91       	ld	r25, X
    281c:	13 97       	sbiw	r26, 0x03	; 3
    281e:	00 97       	sbiw	r24, 0x00	; 0
    2820:	19 f0       	breq	.+6      	; 0x2828 <free+0xd4>
    2822:	fd 01       	movw	r30, r26
    2824:	dc 01       	movw	r26, r24
    2826:	f7 cf       	rjmp	.-18     	; 0x2816 <free+0xc2>
    2828:	8d 91       	ld	r24, X+
    282a:	9c 91       	ld	r25, X
    282c:	11 97       	sbiw	r26, 0x01	; 1
    282e:	9d 01       	movw	r18, r26
    2830:	2e 5f       	subi	r18, 0xFE	; 254
    2832:	3f 4f       	sbci	r19, 0xFF	; 255
    2834:	82 0f       	add	r24, r18
    2836:	93 1f       	adc	r25, r19
    2838:	20 91 75 04 	lds	r18, 0x0475	; 0x800475 <__brkval>
    283c:	30 91 76 04 	lds	r19, 0x0476	; 0x800476 <__brkval+0x1>
    2840:	28 17       	cp	r18, r24
    2842:	39 07       	cpc	r19, r25
    2844:	69 f4       	brne	.+26     	; 0x2860 <free+0x10c>
    2846:	30 97       	sbiw	r30, 0x00	; 0
    2848:	29 f4       	brne	.+10     	; 0x2854 <free+0x100>
    284a:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <__flp+0x1>
    284e:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <__flp>
    2852:	02 c0       	rjmp	.+4      	; 0x2858 <free+0x104>
    2854:	13 82       	std	Z+3, r1	; 0x03
    2856:	12 82       	std	Z+2, r1	; 0x02
    2858:	b0 93 76 04 	sts	0x0476, r27	; 0x800476 <__brkval+0x1>
    285c:	a0 93 75 04 	sts	0x0475, r26	; 0x800475 <__brkval>
    2860:	df 91       	pop	r29
    2862:	cf 91       	pop	r28
    2864:	08 95       	ret

00002866 <memset>:
    2866:	dc 01       	movw	r26, r24
    2868:	01 c0       	rjmp	.+2      	; 0x286c <memset+0x6>
    286a:	6d 93       	st	X+, r22
    286c:	41 50       	subi	r20, 0x01	; 1
    286e:	50 40       	sbci	r21, 0x00	; 0
    2870:	e0 f7       	brcc	.-8      	; 0x286a <memset+0x4>
    2872:	08 95       	ret

00002874 <strncpy>:
    2874:	fb 01       	movw	r30, r22
    2876:	dc 01       	movw	r26, r24
    2878:	41 50       	subi	r20, 0x01	; 1
    287a:	50 40       	sbci	r21, 0x00	; 0
    287c:	48 f0       	brcs	.+18     	; 0x2890 <strncpy+0x1c>
    287e:	01 90       	ld	r0, Z+
    2880:	0d 92       	st	X+, r0
    2882:	00 20       	and	r0, r0
    2884:	c9 f7       	brne	.-14     	; 0x2878 <strncpy+0x4>
    2886:	01 c0       	rjmp	.+2      	; 0x288a <strncpy+0x16>
    2888:	1d 92       	st	X+, r1
    288a:	41 50       	subi	r20, 0x01	; 1
    288c:	50 40       	sbci	r21, 0x00	; 0
    288e:	e0 f7       	brcc	.-8      	; 0x2888 <strncpy+0x14>
    2890:	08 95       	ret

00002892 <strstr>:
    2892:	fb 01       	movw	r30, r22
    2894:	51 91       	ld	r21, Z+
    2896:	55 23       	and	r21, r21
    2898:	a9 f0       	breq	.+42     	; 0x28c4 <strstr+0x32>
    289a:	bf 01       	movw	r22, r30
    289c:	dc 01       	movw	r26, r24
    289e:	4d 91       	ld	r20, X+
    28a0:	45 17       	cp	r20, r21
    28a2:	41 11       	cpse	r20, r1
    28a4:	e1 f7       	brne	.-8      	; 0x289e <strstr+0xc>
    28a6:	59 f4       	brne	.+22     	; 0x28be <strstr+0x2c>
    28a8:	cd 01       	movw	r24, r26
    28aa:	01 90       	ld	r0, Z+
    28ac:	00 20       	and	r0, r0
    28ae:	49 f0       	breq	.+18     	; 0x28c2 <strstr+0x30>
    28b0:	4d 91       	ld	r20, X+
    28b2:	40 15       	cp	r20, r0
    28b4:	41 11       	cpse	r20, r1
    28b6:	c9 f3       	breq	.-14     	; 0x28aa <strstr+0x18>
    28b8:	fb 01       	movw	r30, r22
    28ba:	41 11       	cpse	r20, r1
    28bc:	ef cf       	rjmp	.-34     	; 0x289c <strstr+0xa>
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	08 95       	ret

000028c6 <_exit>:
    28c6:	f8 94       	cli

000028c8 <__stop_program>:
    28c8:	ff cf       	rjmp	.-2      	; 0x28c8 <__stop_program>
