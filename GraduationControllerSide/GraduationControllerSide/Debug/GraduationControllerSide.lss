
GraduationControllerSide.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000114  00800100  00004b5e  00004bf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004b5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000058d  00800214  00800214  00004d06  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004d06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004d64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007b8  00000000  00000000  00004da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a555  00000000  00000000  0000555c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000023ec  00000000  00000000  0000fab1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000053ec  00000000  00000000  00011e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000015c8  00000000  00000000  0001728c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000032eb  00000000  00000000  00018854  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008ad2  00000000  00000000  0001bb3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006e8  00000000  00000000  00024611  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c1       	rjmp	.+594    	; 0x254 <__ctors_end>
       2:	00 00       	nop
       4:	45 c1       	rjmp	.+650    	; 0x290 <__bad_interrupt>
       6:	00 00       	nop
       8:	43 c1       	rjmp	.+646    	; 0x290 <__bad_interrupt>
       a:	00 00       	nop
       c:	41 c1       	rjmp	.+642    	; 0x290 <__bad_interrupt>
       e:	00 00       	nop
      10:	3f c1       	rjmp	.+638    	; 0x290 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__vector_5>
      18:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__vector_6>
      1c:	39 c1       	rjmp	.+626    	; 0x290 <__bad_interrupt>
      1e:	00 00       	nop
      20:	37 c1       	rjmp	.+622    	; 0x290 <__bad_interrupt>
      22:	00 00       	nop
      24:	35 c1       	rjmp	.+618    	; 0x290 <__bad_interrupt>
      26:	00 00       	nop
      28:	33 c1       	rjmp	.+614    	; 0x290 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	31 c1       	rjmp	.+610    	; 0x290 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 a2 0f 	jmp	0x1f44	; 0x1f44 <__vector_12>
      34:	2d c1       	rjmp	.+602    	; 0x290 <__bad_interrupt>
      36:	00 00       	nop
      38:	2b c1       	rjmp	.+598    	; 0x290 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	29 c1       	rjmp	.+594    	; 0x290 <__bad_interrupt>
      3e:	00 00       	nop
      40:	27 c1       	rjmp	.+590    	; 0x290 <__bad_interrupt>
      42:	00 00       	nop
      44:	25 c1       	rjmp	.+586    	; 0x290 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 10 15 	jmp	0x2a20	; 0x2a20 <__vector_18>
      4c:	21 c1       	rjmp	.+578    	; 0x290 <__bad_interrupt>
      4e:	00 00       	nop
      50:	1f c1       	rjmp	.+574    	; 0x290 <__bad_interrupt>
      52:	00 00       	nop
      54:	1d c1       	rjmp	.+570    	; 0x290 <__bad_interrupt>
      56:	00 00       	nop
      58:	1b c1       	rjmp	.+566    	; 0x290 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	19 c1       	rjmp	.+562    	; 0x290 <__bad_interrupt>
      5e:	00 00       	nop
      60:	17 c1       	rjmp	.+558    	; 0x290 <__bad_interrupt>
      62:	00 00       	nop
      64:	15 c1       	rjmp	.+554    	; 0x290 <__bad_interrupt>
      66:	00 00       	nop
      68:	13 c1       	rjmp	.+550    	; 0x290 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	11 c1       	rjmp	.+546    	; 0x290 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0f c1       	rjmp	.+542    	; 0x290 <__bad_interrupt>
      72:	00 00       	nop
      74:	0d c1       	rjmp	.+538    	; 0x290 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 cd 14 	jmp	0x299a	; 0x299a <__vector_30>
      7c:	09 c1       	rjmp	.+530    	; 0x290 <__bad_interrupt>
      7e:	00 00       	nop
      80:	07 c1       	rjmp	.+526    	; 0x290 <__bad_interrupt>
      82:	00 00       	nop
      84:	05 c1       	rjmp	.+522    	; 0x290 <__bad_interrupt>
      86:	00 00       	nop
      88:	03 c1       	rjmp	.+518    	; 0x290 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fc 06       	cpc	r15, r28
      8e:	0a 07       	cpc	r16, r26
      90:	18 07       	cpc	r17, r24
      92:	26 07       	cpc	r18, r22
      94:	34 07       	cpc	r19, r20
      96:	42 07       	cpc	r20, r18
      98:	52 07       	cpc	r21, r18
      9a:	6d 07       	cpc	r22, r29
      9c:	7a 07       	cpc	r23, r26
      9e:	87 07       	cpc	r24, r23
      a0:	94 07       	cpc	r25, r20
      a2:	a1 07       	cpc	r26, r17
      a4:	ae 07       	cpc	r26, r30
      a6:	bd 07       	cpc	r27, r29
      a8:	e2 07       	cpc	r30, r18
      aa:	f0 07       	cpc	r31, r16
      ac:	fe 07       	cpc	r31, r30
      ae:	0c 08       	sbc	r0, r12
      b0:	1a 08       	sbc	r1, r10
      b2:	28 08       	sbc	r2, r8
      b4:	38 08       	sbc	r3, r8
      b6:	53 08       	sbc	r5, r3
      b8:	60 08       	sbc	r6, r0
      ba:	6d 08       	sbc	r6, r13
      bc:	7a 08       	sbc	r7, r10
      be:	87 08       	sbc	r8, r7
      c0:	94 08       	sbc	r9, r4
      c2:	a3 08       	sbc	r10, r3
      c4:	bb 08       	sbc	r11, r11
      c6:	bd 08       	sbc	r11, r13
      c8:	bf 08       	sbc	r11, r15
      ca:	c1 08       	sbc	r12, r1
      cc:	c3 08       	sbc	r12, r3
      ce:	c5 08       	sbc	r12, r5
      d0:	c8 08       	sbc	r12, r8
      d2:	d4 08       	sbc	r13, r4
      d4:	d6 08       	sbc	r13, r6
      d6:	d8 08       	sbc	r13, r8
      d8:	da 08       	sbc	r13, r10
      da:	dc 08       	sbc	r13, r12
      dc:	de 08       	sbc	r13, r14
      de:	e1 08       	sbc	r14, r1
      e0:	ee 08       	sbc	r14, r14
      e2:	f5 08       	sbc	r15, r5
      e4:	fc 08       	sbc	r15, r12
      e6:	03 09       	sbc	r16, r3
      e8:	0a 09       	sbc	r16, r10
      ea:	11 09       	sbc	r17, r1
      ec:	1a 09       	sbc	r17, r10
      ee:	32 09       	sbc	r19, r2
      f0:	36 09       	sbc	r19, r6
      f2:	3a 09       	sbc	r19, r10
      f4:	3e 09       	sbc	r19, r14
      f6:	42 09       	sbc	r20, r2
      f8:	46 09       	sbc	r20, r6
      fa:	4a 09       	sbc	r20, r10
      fc:	4e 09       	sbc	r20, r14
      fe:	5b 09       	sbc	r21, r11
     100:	5f 09       	sbc	r21, r15
     102:	63 09       	sbc	r22, r3
     104:	67 09       	sbc	r22, r7
     106:	6b 09       	sbc	r22, r11
     108:	6f 09       	sbc	r22, r15
     10a:	73 09       	sbc	r23, r3
     10c:	77 09       	sbc	r23, r7
     10e:	85 09       	sbc	r24, r5
     110:	8b 09       	sbc	r24, r11
     112:	96 09       	sbc	r25, r6
     114:	a0 09       	sbc	r26, r0
     116:	aa 09       	sbc	r26, r10
     118:	ae 09       	sbc	r26, r14
     11a:	b7 09       	sbc	r27, r7
     11c:	bf 09       	sbc	r27, r15

0000011e <__trampolines_end>:
     11e:	4e 41       	sbci	r20, 0x1E	; 30
     120:	4e 49       	Address 0x00000120 is out of bounds.
.word	0xffff	; ????

00000121 <pstr_inity>:
     121:	49 4e 49 54 59                                      INITY

00000126 <pstr_inf>:
     126:	49 4e 46                                            INF

00000129 <pwr_m10>:
     129:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     139:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000141 <pwr_p10>:
     141:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     151:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     161:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     171:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     181:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     191:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     1a1:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     1b1:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     1c1:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     1d1:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     1e1:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     1f1:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     201:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     211:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     221:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     231:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     241:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     251:	3d 27 00                                            ='.

00000254 <__ctors_end>:
     254:	11 24       	eor	r1, r1
     256:	1f be       	out	0x3f, r1	; 63
     258:	cf ef       	ldi	r28, 0xFF	; 255
     25a:	d0 e1       	ldi	r29, 0x10	; 16
     25c:	de bf       	out	0x3e, r29	; 62
     25e:	cd bf       	out	0x3d, r28	; 61

00000260 <__do_copy_data>:
     260:	12 e0       	ldi	r17, 0x02	; 2
     262:	a0 e0       	ldi	r26, 0x00	; 0
     264:	b1 e0       	ldi	r27, 0x01	; 1
     266:	ee e5       	ldi	r30, 0x5E	; 94
     268:	fb e4       	ldi	r31, 0x4B	; 75
     26a:	00 e0       	ldi	r16, 0x00	; 0
     26c:	0b bf       	out	0x3b, r16	; 59
     26e:	02 c0       	rjmp	.+4      	; 0x274 <__do_copy_data+0x14>
     270:	07 90       	elpm	r0, Z+
     272:	0d 92       	st	X+, r0
     274:	a4 31       	cpi	r26, 0x14	; 20
     276:	b1 07       	cpc	r27, r17
     278:	d9 f7       	brne	.-10     	; 0x270 <__do_copy_data+0x10>

0000027a <__do_clear_bss>:
     27a:	27 e0       	ldi	r18, 0x07	; 7
     27c:	a4 e1       	ldi	r26, 0x14	; 20
     27e:	b2 e0       	ldi	r27, 0x02	; 2
     280:	01 c0       	rjmp	.+2      	; 0x284 <.do_clear_bss_start>

00000282 <.do_clear_bss_loop>:
     282:	1d 92       	st	X+, r1

00000284 <.do_clear_bss_start>:
     284:	a1 3a       	cpi	r26, 0xA1	; 161
     286:	b2 07       	cpc	r27, r18
     288:	e1 f7       	brne	.-8      	; 0x282 <.do_clear_bss_loop>
     28a:	9b d5       	rcall	.+2870   	; 0xdc2 <main>
     28c:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <_exit>

00000290 <__bad_interrupt>:
     290:	b7 ce       	rjmp	.-658    	; 0x0 <__vectors>

00000292 <setRange>:
	_delay_ms(1);

	Data_ptr->X_Axis = X.Data;
	Data_ptr->Y_Axis = Y.Data;
	Data_ptr->Z_Axis = Z.Data;
}
     292:	48 2f       	mov	r20, r24
     294:	48 60       	ori	r20, 0x08	; 8
     296:	61 e3       	ldi	r22, 0x31	; 49
     298:	83 e5       	ldi	r24, 0x53	; 83
     29a:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <TWI_ByteWrite>
     29e:	08 95       	ret

000002a0 <setDataRate>:
     2a0:	48 2f       	mov	r20, r24
     2a2:	6c e2       	ldi	r22, 0x2C	; 44
     2a4:	83 e5       	ldi	r24, 0x53	; 83
     2a6:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <TWI_ByteWrite>
     2aa:	08 95       	ret

000002ac <clearSettings>:
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	1f 92       	push	r1
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	ec df       	rcall	.-40     	; 0x292 <setRange>
     2ba:	8a e0       	ldi	r24, 0x0A	; 10
     2bc:	f1 df       	rcall	.-30     	; 0x2a0 <setDataRate>
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	6d e1       	ldi	r22, 0x1D	; 29
     2c2:	83 e5       	ldi	r24, 0x53	; 83
     2c4:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_ByteWrite>
     2c8:	40 e0       	ldi	r20, 0x00	; 0
     2ca:	61 e2       	ldi	r22, 0x21	; 33
     2cc:	83 e5       	ldi	r24, 0x53	; 83
     2ce:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_ByteWrite>
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	62 e2       	ldi	r22, 0x22	; 34
     2d6:	83 e5       	ldi	r24, 0x53	; 83
     2d8:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_ByteWrite>
     2dc:	40 e0       	ldi	r20, 0x00	; 0
     2de:	63 e2       	ldi	r22, 0x23	; 35
     2e0:	83 e5       	ldi	r24, 0x53	; 83
     2e2:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_ByteWrite>
     2e6:	40 e0       	ldi	r20, 0x00	; 0
     2e8:	64 e2       	ldi	r22, 0x24	; 36
     2ea:	83 e5       	ldi	r24, 0x53	; 83
     2ec:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_ByteWrite>
     2f0:	40 e0       	ldi	r20, 0x00	; 0
     2f2:	65 e2       	ldi	r22, 0x25	; 37
     2f4:	83 e5       	ldi	r24, 0x53	; 83
     2f6:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_ByteWrite>
     2fa:	40 e0       	ldi	r20, 0x00	; 0
     2fc:	66 e2       	ldi	r22, 0x26	; 38
     2fe:	83 e5       	ldi	r24, 0x53	; 83
     300:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_ByteWrite>
     304:	40 e0       	ldi	r20, 0x00	; 0
     306:	68 e2       	ldi	r22, 0x28	; 40
     308:	83 e5       	ldi	r24, 0x53	; 83
     30a:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_ByteWrite>
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	69 e2       	ldi	r22, 0x29	; 41
     312:	83 e5       	ldi	r24, 0x53	; 83
     314:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_ByteWrite>
     318:	ae 01       	movw	r20, r28
     31a:	4f 5f       	subi	r20, 0xFF	; 255
     31c:	5f 4f       	sbci	r21, 0xFF	; 255
     31e:	67 e2       	ldi	r22, 0x27	; 39
     320:	83 e5       	ldi	r24, 0x53	; 83
     322:	0e 94 8a 0b 	call	0x1714	; 0x1714 <TWI_ByteRead>
     326:	49 81       	ldd	r20, Y+1	; 0x01
     328:	48 78       	andi	r20, 0x88	; 136
     32a:	49 83       	std	Y+1, r20	; 0x01
     32c:	67 e2       	ldi	r22, 0x27	; 39
     32e:	83 e5       	ldi	r24, 0x53	; 83
     330:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_ByteWrite>
     334:	ae 01       	movw	r20, r28
     336:	4f 5f       	subi	r20, 0xFF	; 255
     338:	5f 4f       	sbci	r21, 0xFF	; 255
     33a:	6a e2       	ldi	r22, 0x2A	; 42
     33c:	83 e5       	ldi	r24, 0x53	; 83
     33e:	0e 94 8a 0b 	call	0x1714	; 0x1714 <TWI_ByteRead>
     342:	49 81       	ldd	r20, Y+1	; 0x01
     344:	48 7f       	andi	r20, 0xF8	; 248
     346:	49 83       	std	Y+1, r20	; 0x01
     348:	6a e2       	ldi	r22, 0x2A	; 42
     34a:	83 e5       	ldi	r24, 0x53	; 83
     34c:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_ByteWrite>
     350:	0f 90       	pop	r0
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	08 95       	ret

00000358 <Accelerometor_init>:
     358:	0f 93       	push	r16
     35a:	03 e5       	ldi	r16, 0x53	; 83
     35c:	20 e8       	ldi	r18, 0x80	; 128
     35e:	3a e1       	ldi	r19, 0x1A	; 26
     360:	46 e0       	ldi	r20, 0x06	; 6
     362:	50 e0       	ldi	r21, 0x00	; 0
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	0e 94 76 0a 	call	0x14ec	; 0x14ec <TWI_Init>
     36c:	48 e0       	ldi	r20, 0x08	; 8
     36e:	6d e2       	ldi	r22, 0x2D	; 45
     370:	83 e5       	ldi	r24, 0x53	; 83
     372:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_ByteWrite>
     376:	9a df       	rcall	.-204    	; 0x2ac <clearSettings>
     378:	0f 91       	pop	r16
     37a:	08 95       	ret

0000037c <constrain>:

// make sure that value between range low-high
float constrain(float amt, float low, float high)
{
     37c:	8f 92       	push	r8
     37e:	9f 92       	push	r9
     380:	af 92       	push	r10
     382:	bf 92       	push	r11
     384:	cf 92       	push	r12
     386:	df 92       	push	r13
     388:	ef 92       	push	r14
     38a:	ff 92       	push	r15
     38c:	0f 93       	push	r16
     38e:	1f 93       	push	r17
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	a6 2e       	mov	r10, r22
     396:	b7 2e       	mov	r11, r23
     398:	c8 2e       	mov	r12, r24
     39a:	d9 2e       	mov	r13, r25
     39c:	82 2e       	mov	r8, r18
     39e:	93 2e       	mov	r9, r19
     3a0:	d4 2f       	mov	r29, r20
     3a2:	c5 2f       	mov	r28, r21
	return (amt < low) ? low : ((amt > high) ? high : amt);
     3a4:	0e 94 84 1b 	call	0x3708	; 0x3708 <__cmpsf2>
     3a8:	88 23       	and	r24, r24
     3aa:	8c f0       	brlt	.+34     	; 0x3ce <constrain+0x52>
     3ac:	2e 2d       	mov	r18, r14
     3ae:	3f 2d       	mov	r19, r15
     3b0:	40 2f       	mov	r20, r16
     3b2:	51 2f       	mov	r21, r17
     3b4:	6a 2d       	mov	r22, r10
     3b6:	7b 2d       	mov	r23, r11
     3b8:	8c 2d       	mov	r24, r12
     3ba:	9d 2d       	mov	r25, r13
     3bc:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <__gesf2>
     3c0:	18 16       	cp	r1, r24
     3c2:	44 f4       	brge	.+16     	; 0x3d4 <constrain+0x58>
     3c4:	ae 2c       	mov	r10, r14
     3c6:	bf 2c       	mov	r11, r15
     3c8:	d0 2f       	mov	r29, r16
     3ca:	c1 2f       	mov	r28, r17
     3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <constrain+0x5c>
     3ce:	a8 2c       	mov	r10, r8
     3d0:	b9 2c       	mov	r11, r9
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <constrain+0x5c>
     3d4:	dc 2d       	mov	r29, r12
     3d6:	cd 2d       	mov	r28, r13
}
     3d8:	6a 2d       	mov	r22, r10
     3da:	7b 2d       	mov	r23, r11
     3dc:	8d 2f       	mov	r24, r29
     3de:	9c 2f       	mov	r25, r28
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	1f 91       	pop	r17
     3e6:	0f 91       	pop	r16
     3e8:	ff 90       	pop	r15
     3ea:	ef 90       	pop	r14
     3ec:	df 90       	pop	r13
     3ee:	cf 90       	pop	r12
     3f0:	bf 90       	pop	r11
     3f2:	af 90       	pop	r10
     3f4:	9f 90       	pop	r9
     3f6:	8f 90       	pop	r8
     3f8:	08 95       	ret

000003fa <setFreeFallParameters>:

// th - 0.6, duration - 0.08
void setFreeFallParameters()
{
     3fa:	ef 92       	push	r14
     3fc:	ff 92       	push	r15
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	1f 92       	push	r1
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
	u_int8 value = 0;
     40c:	19 82       	std	Y+1, r1	; 0x01
	TWI_ByteRead(Slave_Address, ADXL345_REG_INT_MAP, &value);
     40e:	ae 01       	movw	r20, r28
     410:	4f 5f       	subi	r20, 0xFF	; 255
     412:	5f 4f       	sbci	r21, 0xFF	; 255
     414:	6f e2       	ldi	r22, 0x2F	; 47
     416:	83 e5       	ldi	r24, 0x53	; 83
     418:	0e 94 8a 0b 	call	0x1714	; 0x1714 <TWI_ByteRead>
	TWI_ByteWrite(Slave_Address, ADXL345_REG_INT_MAP, value | (FF_INTERRupt_NO << ADXL345_FREE_FALL));
     41c:	49 81       	ldd	r20, Y+1	; 0x01
     41e:	6f e2       	ldi	r22, 0x2F	; 47
     420:	83 e5       	ldi	r24, 0x53	; 83
     422:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_ByteWrite>
	TWI_ByteRead(Slave_Address, ADXL345_REG_INT_ENABLE, &value);
     426:	ae 01       	movw	r20, r28
     428:	4f 5f       	subi	r20, 0xFF	; 255
     42a:	5f 4f       	sbci	r21, 0xFF	; 255
     42c:	6e e2       	ldi	r22, 0x2E	; 46
     42e:	83 e5       	ldi	r24, 0x53	; 83
     430:	0e 94 8a 0b 	call	0x1714	; 0x1714 <TWI_ByteRead>
	TWI_ByteWrite(Slave_Address, ADXL345_REG_INT_ENABLE, value | (1 << ADXL345_FREE_FALL));
     434:	49 81       	ldd	r20, Y+1	; 0x01
     436:	44 60       	ori	r20, 0x04	; 4
     438:	6e e2       	ldi	r22, 0x2E	; 46
     43a:	83 e5       	ldi	r24, 0x53	; 83
     43c:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_ByteWrite>
	// Set Free Fall Threshold (65.5mg / LSB)
	u_int8 scaled = constrain(FF_Threshold_Val / 0.0625f, 0, 255);
     440:	e1 2c       	mov	r14, r1
     442:	f1 2c       	mov	r15, r1
     444:	0f e7       	ldi	r16, 0x7F	; 127
     446:	13 e4       	ldi	r17, 0x43	; 67
     448:	20 e0       	ldi	r18, 0x00	; 0
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	a9 01       	movw	r20, r18
     44e:	60 e0       	ldi	r22, 0x00	; 0
     450:	70 e0       	ldi	r23, 0x00	; 0
     452:	80 e8       	ldi	r24, 0x80	; 128
     454:	91 e4       	ldi	r25, 0x41	; 65
     456:	92 df       	rcall	.-220    	; 0x37c <constrain>
     458:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__fixunssfsi>
     45c:	16 2f       	mov	r17, r22
	TWI_ByteWrite(Slave_Address, ADXL345_REG_THRESH_FF, scaled);
     45e:	46 2f       	mov	r20, r22
     460:	68 e2       	ldi	r22, 0x28	; 40
     462:	83 e5       	ldi	r24, 0x53	; 83
     464:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_ByteWrite>
	// Set Free Fall Duration (5ms / LSB)
	u_int8 duration = constrain(FF_Duration/ 0.005f, 0, 255);
	TWI_ByteWrite(Slave_Address, ADXL345_REG_TIME_FF, duration);
     468:	41 2f       	mov	r20, r17
     46a:	69 e2       	ldi	r22, 0x29	; 41
     46c:	83 e5       	ldi	r24, 0x53	; 83
     46e:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_ByteWrite>
}
     472:	0f 90       	pop	r0
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	1f 91       	pop	r17
     47a:	0f 91       	pop	r16
     47c:	ff 90       	pop	r15
     47e:	ef 90       	pop	r14
     480:	08 95       	ret

00000482 <setActivityParameters>:

// th - 2
void setActivityParameters()
{
     482:	ef 92       	push	r14
     484:	ff 92       	push	r15
     486:	0f 93       	push	r16
     488:	1f 93       	push	r17
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	1f 92       	push	r1
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
	u_int8 value = 0;
     494:	19 82       	std	Y+1, r1	; 0x01
	TWI_ByteRead(Slave_Address, ADXL345_REG_INT_MAP, &value);
     496:	ae 01       	movw	r20, r28
     498:	4f 5f       	subi	r20, 0xFF	; 255
     49a:	5f 4f       	sbci	r21, 0xFF	; 255
     49c:	6f e2       	ldi	r22, 0x2F	; 47
     49e:	83 e5       	ldi	r24, 0x53	; 83
     4a0:	0e 94 8a 0b 	call	0x1714	; 0x1714 <TWI_ByteRead>
	TWI_ByteWrite(Slave_Address, ADXL345_REG_INT_MAP, value | (ACT_INTERRupt_NO << ADXL345_ACTIVITY));
     4a4:	49 81       	ldd	r20, Y+1	; 0x01
     4a6:	40 61       	ori	r20, 0x10	; 16
     4a8:	6f e2       	ldi	r22, 0x2F	; 47
     4aa:	83 e5       	ldi	r24, 0x53	; 83
     4ac:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_ByteWrite>
	TWI_ByteRead(Slave_Address, ADXL345_REG_INT_ENABLE, &value);
     4b0:	ae 01       	movw	r20, r28
     4b2:	4f 5f       	subi	r20, 0xFF	; 255
     4b4:	5f 4f       	sbci	r21, 0xFF	; 255
     4b6:	6e e2       	ldi	r22, 0x2E	; 46
     4b8:	83 e5       	ldi	r24, 0x53	; 83
     4ba:	0e 94 8a 0b 	call	0x1714	; 0x1714 <TWI_ByteRead>
	TWI_ByteWrite(Slave_Address, ADXL345_REG_INT_ENABLE, value | (1 << ADXL345_ACTIVITY));
     4be:	49 81       	ldd	r20, Y+1	; 0x01
     4c0:	40 61       	ori	r20, 0x10	; 16
     4c2:	6e e2       	ldi	r22, 0x2E	; 46
     4c4:	83 e5       	ldi	r24, 0x53	; 83
     4c6:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_ByteWrite>
	// Set Activity Threshold (62.5mg / LSB)
	u_int8 threshold = constrain(ACT_Threshold_Val / 0.0625f, 0, 255);
     4ca:	e1 2c       	mov	r14, r1
     4cc:	f1 2c       	mov	r15, r1
     4ce:	0f e7       	ldi	r16, 0x7F	; 127
     4d0:	13 e4       	ldi	r17, 0x43	; 67
     4d2:	20 e0       	ldi	r18, 0x00	; 0
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	a9 01       	movw	r20, r18
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	92 e4       	ldi	r25, 0x42	; 66
     4e0:	4d df       	rcall	.-358    	; 0x37c <constrain>
     4e2:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__fixunssfsi>
     4e6:	46 2f       	mov	r20, r22
	TWI_ByteWrite(Slave_Address, ADXL345_REG_THRESH_ACT, threshold);
     4e8:	64 e2       	ldi	r22, 0x24	; 36
     4ea:	83 e5       	ldi	r24, 0x53	; 83
     4ec:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_ByteWrite>
	// Set Activity Axis
	TWI_ByteWrite(Slave_Address, ADXL345_REG_ACT_INACT_CTL,ACT_AXIS);
     4f0:	40 e2       	ldi	r20, 0x20	; 32
     4f2:	67 e2       	ldi	r22, 0x27	; 39
     4f4:	83 e5       	ldi	r24, 0x53	; 83
     4f6:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <TWI_ByteWrite>
}
     4fa:	0f 90       	pop	r0
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	0f 91       	pop	r16
     504:	ff 90       	pop	r15
     506:	ef 90       	pop	r14
     508:	08 95       	ret

0000050a <ESP01_Init>:
#include "ESP01.h"


void ESP01_Init()
{
	UART1_Init();
     50a:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <UART1_Init>
	result = 0;
     50e:	10 92 92 06 	sts	0x0692, r1	; 0x800692 <result>
	esp_buff_len = 0;
     512:	10 92 91 06 	sts	0x0691, r1	; 0x800691 <esp_buff_len>
	memset(esp_buff, 0, 1000);
     516:	88 ee       	ldi	r24, 0xE8	; 232
     518:	93 e0       	ldi	r25, 0x03	; 3
     51a:	e8 ea       	ldi	r30, 0xA8	; 168
     51c:	f2 e0       	ldi	r31, 0x02	; 2
     51e:	df 01       	movw	r26, r30
     520:	9c 01       	movw	r18, r24
     522:	1d 92       	st	X+, r1
     524:	21 50       	subi	r18, 0x01	; 1
     526:	30 40       	sbci	r19, 0x00	; 0
     528:	e1 f7       	brne	.-8      	; 0x522 <ESP01_Init+0x18>
     52a:	08 95       	ret

0000052c <ESP01_ResetBuffer>:
	return result;
}

void ESP01_ResetBuffer()
{
	memset(esp_buff, 0, esp_buff_len);
     52c:	40 91 91 06 	lds	r20, 0x0691	; 0x800691 <esp_buff_len>
     530:	50 e0       	ldi	r21, 0x00	; 0
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	70 e0       	ldi	r23, 0x00	; 0
     536:	88 ea       	ldi	r24, 0xA8	; 168
     538:	92 e0       	ldi	r25, 0x02	; 2
     53a:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <memset>
	esp_buff_len = 0;
     53e:	10 92 91 06 	sts	0x0691, r1	; 0x800691 <esp_buff_len>
     542:	08 95       	ret

00000544 <ESP01_CheckConnection>:
	memset(esp_buff, 0, 1000);
}

u_int8 ESP01_CheckConnection()
{	
	if(find_string(esp_buff, "ESP CONNECTED") == 1)
     544:	6a e2       	ldi	r22, 0x2A	; 42
     546:	71 e0       	ldi	r23, 0x01	; 1
     548:	88 ea       	ldi	r24, 0xA8	; 168
     54a:	92 e0       	ldi	r25, 0x02	; 2
     54c:	f8 d3       	rcall	.+2032   	; 0xd3e <find_string>
     54e:	81 30       	cpi	r24, 0x01	; 1
     550:	29 f4       	brne	.+10     	; 0x55c <ESP01_CheckConnection+0x18>
	{
		result = 3;
     552:	83 e0       	ldi	r24, 0x03	; 3
     554:	80 93 92 06 	sts	0x0692, r24	; 0x800692 <result>
		ESP01_ResetBuffer();
     558:	e9 df       	rcall	.-46     	; 0x52c <ESP01_ResetBuffer>
     55a:	0b c0       	rjmp	.+22     	; 0x572 <ESP01_CheckConnection+0x2e>
	}
	else if(find_string(esp_buff, "ESP NOT CONNECTED") == 1)
     55c:	68 e3       	ldi	r22, 0x38	; 56
     55e:	71 e0       	ldi	r23, 0x01	; 1
     560:	88 ea       	ldi	r24, 0xA8	; 168
     562:	92 e0       	ldi	r25, 0x02	; 2
     564:	ec d3       	rcall	.+2008   	; 0xd3e <find_string>
     566:	81 30       	cpi	r24, 0x01	; 1
     568:	21 f4       	brne	.+8      	; 0x572 <ESP01_CheckConnection+0x2e>
	{
		result = 2;
     56a:	82 e0       	ldi	r24, 0x02	; 2
     56c:	80 93 92 06 	sts	0x0692, r24	; 0x800692 <result>
		ESP01_ResetBuffer();
     570:	dd df       	rcall	.-70     	; 0x52c <ESP01_ResetBuffer>
	}
	
	return result;
}
     572:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <result>
     576:	08 95       	ret

00000578 <GPS_Init>:
#include "GPS.h"

void GPS_Init()
{
	GGA_Index = 0;
     578:	10 92 5e 07 	sts	0x075E, r1	; 0x80075e <GGA_Index+0x1>
     57c:	10 92 5d 07 	sts	0x075D, r1	; 0x80075d <GGA_Index>
	memset(GGA_Buffer, 0, Buffer_Size);
     580:	86 e9       	ldi	r24, 0x96	; 150
     582:	e3 e9       	ldi	r30, 0x93	; 147
     584:	f6 e0       	ldi	r31, 0x06	; 6
     586:	df 01       	movw	r26, r30
     588:	1d 92       	st	X+, r1
     58a:	8a 95       	dec	r24
     58c:	e9 f7       	brne	.-6      	; 0x588 <GPS_Init+0x10>
	memset(degrees_buffer, 0, degrees_buffer_size);
     58e:	84 e1       	ldi	r24, 0x14	; 20
     590:	e9 e2       	ldi	r30, 0x29	; 41
     592:	f7 e0       	ldi	r31, 0x07	; 7
     594:	df 01       	movw	r26, r30
     596:	1d 92       	st	X+, r1
     598:	8a 95       	dec	r24
     59a:	e9 f7       	brne	.-6      	; 0x596 <GPS_Init+0x1e>
	
	UART0_Init();
     59c:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <UART0_Init>
     5a0:	08 95       	ret

000005a2 <get_altitude>:
	convert_to_degrees(Longitude_Buffer);
	GIE_Enable();
}

void get_altitude(u_int16 alt_pointer)
{
     5a2:	cf 93       	push	r28
     5a4:	c8 2f       	mov	r28, r24
	GIE_Disable();
     5a6:	f3 d6       	rcall	.+3558   	; 0x138e <GIE_Disable>
	u_int8 alt_index = 0;
	u_int8 index = alt_pointer + 1;
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	8c 0f       	add	r24, r28
	
	for(; GGA_Buffer[index] != ','; index++)
     5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <get_altitude+0xe>
     5ae:	8f 5f       	subi	r24, 0xFF	; 255
     5b0:	28 2f       	mov	r18, r24
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	f9 01       	movw	r30, r18
     5b6:	ed 56       	subi	r30, 0x6D	; 109
     5b8:	f9 4f       	sbci	r31, 0xF9	; 249
     5ba:	90 81       	ld	r25, Z
     5bc:	9c 32       	cpi	r25, 0x2C	; 44
     5be:	b9 f7       	brne	.-18     	; 0x5ae <get_altitude+0xc>
	{
		Altitude_Buffer[alt_index] = GGA_Buffer[index];
		alt_index;
	}
	
	Altitude_Buffer[alt_index] = GGA_Buffer[index + 1];
     5c0:	f9 01       	movw	r30, r18
     5c2:	ec 56       	subi	r30, 0x6C	; 108
     5c4:	f9 4f       	sbci	r31, 0xF9	; 249
     5c6:	80 81       	ld	r24, Z
     5c8:	80 93 85 07 	sts	0x0785, r24	; 0x800785 <Altitude_Buffer>
	GIE_Enable();
     5cc:	e4 d6       	rcall	.+3528   	; 0x1396 <GIE_Enable>
}
     5ce:	cf 91       	pop	r28
     5d0:	08 95       	ret

000005d2 <convert_time_to_UTC>:

void convert_time_to_UTC()
{
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
	unsigned int hour, min, sec;
	uint32_t Time_value;
	
	Time_value = atol(Time_Buffer);       /* convert string to integer */
     5d6:	8c e4       	ldi	r24, 0x4C	; 76
     5d8:	97 e0       	ldi	r25, 0x07	; 7
     5da:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <atol>
     5de:	bc 01       	movw	r22, r24
     5e0:	99 0f       	add	r25, r25
     5e2:	88 0b       	sbc	r24, r24
     5e4:	99 0b       	sbc	r25, r25
	hour = (Time_value / 10000);          /* extract hour from integer */
     5e6:	20 e1       	ldi	r18, 0x10	; 16
     5e8:	37 e2       	ldi	r19, 0x27	; 39
     5ea:	40 e0       	ldi	r20, 0x00	; 0
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <__udivmodsi4>
     5f2:	c2 2f       	mov	r28, r18
     5f4:	d3 2f       	mov	r29, r19
	min  = (Time_value % 10000) / 100;    /* extract minute from integer */
     5f6:	24 e6       	ldi	r18, 0x64	; 100
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	40 e0       	ldi	r20, 0x00	; 0
     5fc:	50 e0       	ldi	r21, 0x00	; 0
     5fe:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <__udivmodsi4>
	sec  = (Time_value % 10000) % 100;    /* extract second from integer*/

	sprintf(Time_Buffer, "%d:%d:%d", hour,min,sec);
     602:	7f 93       	push	r23
     604:	6f 93       	push	r22
     606:	3f 93       	push	r19
     608:	2f 93       	push	r18
     60a:	df 93       	push	r29
     60c:	cf 93       	push	r28
     60e:	8a e4       	ldi	r24, 0x4A	; 74
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	9f 93       	push	r25
     614:	8f 93       	push	r24
     616:	8c e4       	ldi	r24, 0x4C	; 76
     618:	97 e0       	ldi	r25, 0x07	; 7
     61a:	9f 93       	push	r25
     61c:	8f 93       	push	r24
     61e:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <sprintf>
	
}
     622:	8d b7       	in	r24, 0x3d	; 61
     624:	9e b7       	in	r25, 0x3e	; 62
     626:	0a 96       	adiw	r24, 0x0a	; 10
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	f8 94       	cli
     62c:	9e bf       	out	0x3e, r25	; 62
     62e:	0f be       	out	0x3f, r0	; 63
     630:	8d bf       	out	0x3d, r24	; 61
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	08 95       	ret

00000638 <get_gpstime>:
	UART0_Init();
}

void get_gpstime()
{
	GIE_Disable();
     638:	aa d6       	rcall	.+3412   	; 0x138e <GIE_Disable>
	u_int8 time_index = 0;
	
	for (u_int8 index = 0; GGA_Buffer[index] != ','; index++)
     63a:	80 e0       	ldi	r24, 0x00	; 0
}

void get_gpstime()
{
	GIE_Disable();
	u_int8 time_index = 0;
     63c:	20 e0       	ldi	r18, 0x00	; 0
	
	for (u_int8 index = 0; GGA_Buffer[index] != ','; index++)
     63e:	07 c0       	rjmp	.+14     	; 0x64e <get_gpstime+0x16>
	{
		Time_Buffer[time_index] = GGA_Buffer[index];
     640:	e2 2f       	mov	r30, r18
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	e4 5b       	subi	r30, 0xB4	; 180
     646:	f8 4f       	sbci	r31, 0xF8	; 248
     648:	90 83       	st	Z, r25
		time_index++;
     64a:	2f 5f       	subi	r18, 0xFF	; 255
void get_gpstime()
{
	GIE_Disable();
	u_int8 time_index = 0;
	
	for (u_int8 index = 0; GGA_Buffer[index] != ','; index++)
     64c:	8f 5f       	subi	r24, 0xFF	; 255
     64e:	e8 2f       	mov	r30, r24
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	ed 56       	subi	r30, 0x6D	; 109
     654:	f9 4f       	sbci	r31, 0xF9	; 249
     656:	90 81       	ld	r25, Z
     658:	9c 32       	cpi	r25, 0x2C	; 44
	{
		Time_Buffer[time_index] = GGA_Buffer[index];
		time_index++;
	}
	convert_time_to_UTC();
     65a:	91 f7       	brne	.-28     	; 0x640 <get_gpstime+0x8>
	GIE_Enable();
     65c:	ba df       	rcall	.-140    	; 0x5d2 <convert_time_to_UTC>
     65e:	9b c6       	rjmp	.+3382   	; 0x1396 <GIE_Enable>
     660:	08 95       	ret

00000662 <convert_to_degrees>:

	sprintf(Time_Buffer, "%d:%d:%d", hour,min,sec);
	
}

void convert_to_degrees(char *raw){
     662:	8f 92       	push	r8
     664:	9f 92       	push	r9
     666:	af 92       	push	r10
     668:	bf 92       	push	r11
     66a:	cf 92       	push	r12
     66c:	df 92       	push	r13
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
	float decimal_value,temp;
	
	int32_t degrees;
	
	float position;
	value = atof(raw);    /* convert string into float for conversion */
     676:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <atof>
     67a:	bc 01       	movw	r22, r24
     67c:	99 0f       	add	r25, r25
     67e:	88 0b       	sbc	r24, r24
     680:	99 0b       	sbc	r25, r25
     682:	0e 94 23 1c 	call	0x3846	; 0x3846 <__floatsisf>
	
	/* convert raw latitude/longitude into degree format */
	decimal_value = (value/100);
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	48 ec       	ldi	r20, 0xC8	; 200
     68c:	52 e4       	ldi	r21, 0x42	; 66
     68e:	0e 94 88 1b 	call	0x3710	; 0x3710 <__divsf3>
     692:	6b 01       	movw	r12, r22
     694:	7c 01       	movw	r14, r24
	degrees       = (int)(decimal_value);
     696:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <__fixsfsi>
	temp          = (decimal_value - (int)decimal_value)/0.6;
     69a:	07 2e       	mov	r0, r23
     69c:	00 0c       	add	r0, r0
     69e:	88 0b       	sbc	r24, r24
     6a0:	99 0b       	sbc	r25, r25
     6a2:	0e 94 23 1c 	call	0x3846	; 0x3846 <__floatsisf>
     6a6:	4b 01       	movw	r8, r22
     6a8:	5c 01       	movw	r10, r24
     6aa:	9b 01       	movw	r18, r22
     6ac:	ac 01       	movw	r20, r24
     6ae:	c7 01       	movw	r24, r14
     6b0:	b6 01       	movw	r22, r12
     6b2:	0e 94 1f 1b 	call	0x363e	; 0x363e <__subsf3>
     6b6:	2a e9       	ldi	r18, 0x9A	; 154
     6b8:	39 e9       	ldi	r19, 0x99	; 153
     6ba:	49 e1       	ldi	r20, 0x19	; 25
     6bc:	5f e3       	ldi	r21, 0x3F	; 63
     6be:	0e 94 88 1b 	call	0x3710	; 0x3710 <__divsf3>
     6c2:	9b 01       	movw	r18, r22
     6c4:	ac 01       	movw	r20, r24
	position      = (float)degrees + temp;
     6c6:	c5 01       	movw	r24, r10
     6c8:	b4 01       	movw	r22, r8
     6ca:	0e 94 20 1b 	call	0x3640	; 0x3640 <__addsf3>
	
	dtostrf(position, 6, 4, degrees_buffer);  /* convert float value into string */
     6ce:	09 e2       	ldi	r16, 0x29	; 41
     6d0:	17 e0       	ldi	r17, 0x07	; 7
     6d2:	24 e0       	ldi	r18, 0x04	; 4
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	46 e0       	ldi	r20, 0x06	; 6
     6d8:	50 e0       	ldi	r21, 0x00	; 0
     6da:	0e 94 65 1d 	call	0x3aca	; 0x3aca <dtostrf>
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	ff 90       	pop	r15
     6e4:	ef 90       	pop	r14
     6e6:	df 90       	pop	r13
     6e8:	cf 90       	pop	r12
     6ea:	bf 90       	pop	r11
     6ec:	af 90       	pop	r10
     6ee:	9f 90       	pop	r9
     6f0:	8f 90       	pop	r8
     6f2:	08 95       	ret

000006f4 <get_latitude>:
	convert_time_to_UTC();
	GIE_Enable();
}

void get_latitude(u_int16 lat_pointer)
{
     6f4:	cf 93       	push	r28
     6f6:	c8 2f       	mov	r28, r24
	GIE_Disable();
     6f8:	4a d6       	rcall	.+3220   	; 0x138e <GIE_Disable>
	u_int8 lat_index = 0;
	u_int8 index = lat_pointer + 1;
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	8c 0f       	add	r24, r28
}

void get_latitude(u_int16 lat_pointer)
{
	GIE_Disable();
	u_int8 lat_index = 0;
     6fe:	90 e0       	ldi	r25, 0x00	; 0
	u_int8 index = lat_pointer + 1;
	
	for(; GGA_Buffer[index] != ','; index++)
     700:	07 c0       	rjmp	.+14     	; 0x710 <get_latitude+0x1c>
	{
		Latitude_Buffer[lat_index] = GGA_Buffer[index];
     702:	e9 2f       	mov	r30, r25
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	ee 59       	subi	r30, 0x9E	; 158
     708:	f8 4f       	sbci	r31, 0xF8	; 248
     70a:	20 83       	st	Z, r18
		lat_index++;
     70c:	9f 5f       	subi	r25, 0xFF	; 255
{
	GIE_Disable();
	u_int8 lat_index = 0;
	u_int8 index = lat_pointer + 1;
	
	for(; GGA_Buffer[index] != ','; index++)
     70e:	8f 5f       	subi	r24, 0xFF	; 255
     710:	e8 2f       	mov	r30, r24
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	ed 56       	subi	r30, 0x6D	; 109
     716:	f9 4f       	sbci	r31, 0xF9	; 249
     718:	20 81       	ld	r18, Z
     71a:	2c 32       	cpi	r18, 0x2C	; 44
     71c:	91 f7       	brne	.-28     	; 0x702 <get_latitude+0xe>
	{
		Latitude_Buffer[lat_index] = GGA_Buffer[index];
		lat_index++;
	}
	
	Latitude_Buffer[lat_index++] = GGA_Buffer[index++];
     71e:	31 e0       	ldi	r19, 0x01	; 1
     720:	39 0f       	add	r19, r25
     722:	e9 2f       	mov	r30, r25
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	8f 5f       	subi	r24, 0xFF	; 255
     728:	ee 59       	subi	r30, 0x9E	; 158
     72a:	f8 4f       	sbci	r31, 0xF8	; 248
     72c:	20 83       	st	Z, r18
	Latitude_Buffer[lat_index] = GGA_Buffer[index];
     72e:	23 2f       	mov	r18, r19
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	e8 2f       	mov	r30, r24
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	ed 56       	subi	r30, 0x6D	; 109
     738:	f9 4f       	sbci	r31, 0xF9	; 249
     73a:	80 81       	ld	r24, Z
     73c:	f9 01       	movw	r30, r18
     73e:	ee 59       	subi	r30, 0x9E	; 158
     740:	f8 4f       	sbci	r31, 0xF8	; 248
     742:	80 83       	st	Z, r24
	convert_to_degrees(Latitude_Buffer);
     744:	82 e6       	ldi	r24, 0x62	; 98
     746:	97 e0       	ldi	r25, 0x07	; 7
	GIE_Enable();
     748:	8c df       	rcall	.-232    	; 0x662 <convert_to_degrees>
     74a:	25 d6       	rcall	.+3146   	; 0x1396 <GIE_Enable>
}
     74c:	cf 91       	pop	r28
     74e:	08 95       	ret

00000750 <get_longitude>:

void get_longitude(u_int16 long_pointer)
{
     750:	cf 93       	push	r28
     752:	c8 2f       	mov	r28, r24
	GIE_Disable();
     754:	1c d6       	rcall	.+3128   	; 0x138e <GIE_Disable>
	u_int8 long_index = 0;
	u_int8 index = long_pointer + 1;
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	8c 0f       	add	r24, r28
}

void get_longitude(u_int16 long_pointer)
{
	GIE_Disable();
	u_int8 long_index = 0;
     75a:	90 e0       	ldi	r25, 0x00	; 0
	u_int8 index = long_pointer + 1;
	
	for(; GGA_Buffer[index] != ','; index++)
     75c:	07 c0       	rjmp	.+14     	; 0x76c <get_longitude+0x1c>
	{
		Longitude_Buffer[long_index] = GGA_Buffer[index];
     75e:	e9 2f       	mov	r30, r25
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	e3 5c       	subi	r30, 0xC3	; 195
     764:	f8 4f       	sbci	r31, 0xF8	; 248
     766:	20 83       	st	Z, r18
		long_index++;
     768:	9f 5f       	subi	r25, 0xFF	; 255
{
	GIE_Disable();
	u_int8 long_index = 0;
	u_int8 index = long_pointer + 1;
	
	for(; GGA_Buffer[index] != ','; index++)
     76a:	8f 5f       	subi	r24, 0xFF	; 255
     76c:	e8 2f       	mov	r30, r24
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	ed 56       	subi	r30, 0x6D	; 109
     772:	f9 4f       	sbci	r31, 0xF9	; 249
     774:	20 81       	ld	r18, Z
     776:	2c 32       	cpi	r18, 0x2C	; 44
     778:	91 f7       	brne	.-28     	; 0x75e <get_longitude+0xe>
	{
		Longitude_Buffer[long_index] = GGA_Buffer[index];
		long_index++;
	}
	
	Longitude_Buffer[long_index++] = GGA_Buffer[index++];
     77a:	31 e0       	ldi	r19, 0x01	; 1
     77c:	39 0f       	add	r19, r25
     77e:	e9 2f       	mov	r30, r25
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	8f 5f       	subi	r24, 0xFF	; 255
     784:	e3 5c       	subi	r30, 0xC3	; 195
     786:	f8 4f       	sbci	r31, 0xF8	; 248
     788:	20 83       	st	Z, r18
	Longitude_Buffer[long_index] = GGA_Buffer[index];
     78a:	23 2f       	mov	r18, r19
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	e8 2f       	mov	r30, r24
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	ed 56       	subi	r30, 0x6D	; 109
     794:	f9 4f       	sbci	r31, 0xF9	; 249
     796:	80 81       	ld	r24, Z
     798:	f9 01       	movw	r30, r18
     79a:	e3 5c       	subi	r30, 0xC3	; 195
     79c:	f8 4f       	sbci	r31, 0xF8	; 248
     79e:	80 83       	st	Z, r24
	convert_to_degrees(Longitude_Buffer);
     7a0:	8d e3       	ldi	r24, 0x3D	; 61
     7a2:	97 e0       	ldi	r25, 0x07	; 7
	GIE_Enable();
     7a4:	5e df       	rcall	.-324    	; 0x662 <convert_to_degrees>
     7a6:	f7 d5       	rcall	.+3054   	; 0x1396 <GIE_Enable>
}
     7a8:	cf 91       	pop	r28
     7aa:	08 95       	ret

000007ac <Enable>:
	}
}

void Enable()
{
	DIO_WriteChannel(LCD_EN, STD_HIGH);
     7ac:	61 e0       	ldi	r22, 0x01	; 1
     7ae:	82 e1       	ldi	r24, 0x12	; 18
     7b0:	0d d3       	rcall	.+1562   	; 0xdcc <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7b2:	8f e3       	ldi	r24, 0x3F	; 63
     7b4:	9f e1       	ldi	r25, 0x1F	; 31
     7b6:	01 97       	sbiw	r24, 0x01	; 1
     7b8:	f1 f7       	brne	.-4      	; 0x7b6 <Enable+0xa>
     7ba:	00 c0       	rjmp	.+0      	; 0x7bc <Enable+0x10>
     7bc:	00 00       	nop
	_delay_ms(2);
	DIO_WriteChannel(LCD_EN, STD_LOW);
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	82 e1       	ldi	r24, 0x12	; 18
     7c2:	04 d3       	rcall	.+1544   	; 0xdcc <DIO_WriteChannel>
     7c4:	8f e3       	ldi	r24, 0x3F	; 63
     7c6:	9f e1       	ldi	r25, 0x1F	; 31
     7c8:	01 97       	sbiw	r24, 0x01	; 1
     7ca:	f1 f7       	brne	.-4      	; 0x7c8 <Enable+0x1c>
     7cc:	00 c0       	rjmp	.+0      	; 0x7ce <Enable+0x22>
     7ce:	00 00       	nop
     7d0:	08 95       	ret

000007d2 <LCD_SendCmd>:
	}
	LCD_SendCmd(cmd);
}

void LCD_SendCmd(u_int8 Cmd)
{
     7d2:	cf 93       	push	r28
     7d4:	c8 2f       	mov	r28, r24
	switch(LCD_CFG.Mode)
     7d6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <LCD_CFG+0x2>
     7da:	88 32       	cpi	r24, 0x28	; 40
     7dc:	81 f0       	breq	.+32     	; 0x7fe <LCD_SendCmd+0x2c>
     7de:	88 33       	cpi	r24, 0x38	; 56
     7e0:	09 f5       	brne	.+66     	; 0x824 <LCD_SendCmd+0x52>
	{
		case Eight_Bit_Mode:
		{
			DIO_WriteChannel(LCD_RS, STD_LOW);
     7e2:	60 e0       	ldi	r22, 0x00	; 0
     7e4:	80 e1       	ldi	r24, 0x10	; 16
     7e6:	f2 d2       	rcall	.+1508   	; 0xdcc <DIO_WriteChannel>
			DIO_WritePort(LCD_Data_Port, Cmd);
     7e8:	6c 2f       	mov	r22, r28
     7ea:	80 e0       	ldi	r24, 0x00	; 0
			Enable();
     7ec:	bb d4       	rcall	.+2422   	; 0x1164 <DIO_WritePort>
     7ee:	de df       	rcall	.-68     	; 0x7ac <Enable>
     7f0:	8f e9       	ldi	r24, 0x9F	; 159
     7f2:	9f e0       	ldi	r25, 0x0F	; 15
     7f4:	01 97       	sbiw	r24, 0x01	; 1
     7f6:	f1 f7       	brne	.-4      	; 0x7f4 <LCD_SendCmd+0x22>
     7f8:	00 c0       	rjmp	.+0      	; 0x7fa <LCD_SendCmd+0x28>
     7fa:	00 00       	nop
			_delay_ms(1);
			break;
		}
		case Four_Bit_Mode:
		{
			DIO_WriteChannel(LCD_RS, STD_LOW);
     7fc:	13 c0       	rjmp	.+38     	; 0x824 <LCD_SendCmd+0x52>
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	80 e1       	ldi	r24, 0x10	; 16
			DIO_WriteHighNibble(LCD_Data_Port, Cmd);
     802:	e4 d2       	rcall	.+1480   	; 0xdcc <DIO_WriteChannel>
     804:	6c 2f       	mov	r22, r28
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	df d4       	rcall	.+2494   	; 0x11c8 <DIO_WriteHighNibble>
			Enable();
     80a:	d0 df       	rcall	.-96     	; 0x7ac <Enable>
			DIO_WriteHighNibble(LCD_Data_Port, Cmd << 4);
     80c:	6c 2f       	mov	r22, r28
     80e:	62 95       	swap	r22
     810:	60 7f       	andi	r22, 0xF0	; 240
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	d9 d4       	rcall	.+2482   	; 0x11c8 <DIO_WriteHighNibble>
     816:	ca df       	rcall	.-108    	; 0x7ac <Enable>
			Enable();
     818:	8f e9       	ldi	r24, 0x9F	; 159
     81a:	9f e0       	ldi	r25, 0x0F	; 15
     81c:	01 97       	sbiw	r24, 0x01	; 1
     81e:	f1 f7       	brne	.-4      	; 0x81c <LCD_SendCmd+0x4a>
     820:	00 c0       	rjmp	.+0      	; 0x822 <LCD_SendCmd+0x50>
     822:	00 00       	nop
     824:	cf 91       	pop	r28
     826:	08 95       	ret

00000828 <LCD_Init>:
			_delay_ms(1);
			break;
		}
	}
}
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
#include "LCD.h"

void LCD_Init()
{
	switch(LCD_CFG.Mode)
     82c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <LCD_CFG+0x2>
     830:	88 32       	cpi	r24, 0x28	; 40
     832:	a1 f1       	breq	.+104    	; 0x89c <LCD_Init+0x74>
     834:	88 33       	cpi	r24, 0x38	; 56
     836:	09 f0       	breq	.+2      	; 0x83a <LCD_Init+0x12>
     838:	73 c0       	rjmp	.+230    	; 0x920 <LCD_Init+0xf8>
	{
		case Eight_Bit_Mode:
		{
			DIO_ConfigPort(LCD_Data_Port, 0xFF);
     83a:	6f ef       	ldi	r22, 0xFF	; 255
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	ab d4       	rcall	.+2390   	; 0x1196 <DIO_ConfigPort>
			DIO_ConfigChannel(LCD_EN, OUTPUT);
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	82 e1       	ldi	r24, 0x12	; 18
     844:	a9 d3       	rcall	.+1874   	; 0xf98 <DIO_ConfigChannel>
			DIO_ConfigChannel(LCD_RS, OUTPUT);
     846:	61 e0       	ldi	r22, 0x01	; 1
     848:	80 e1       	ldi	r24, 0x10	; 16
     84a:	a6 d3       	rcall	.+1868   	; 0xf98 <DIO_ConfigChannel>
			DIO_ConfigChannel(LCD_RW, OUTPUT);
     84c:	61 e0       	ldi	r22, 0x01	; 1
     84e:	81 e1       	ldi	r24, 0x11	; 17
     850:	a3 d3       	rcall	.+1862   	; 0xf98 <DIO_ConfigChannel>
			DIO_WriteChannel(LCD_RW, STD_LOW);
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	81 e1       	ldi	r24, 0x11	; 17
     856:	ba d2       	rcall	.+1396   	; 0xdcc <DIO_WriteChannel>
			LCD_SendCmd(LCD_CFG.Mode);
     858:	c6 e0       	ldi	r28, 0x06	; 6
     85a:	d1 e0       	ldi	r29, 0x01	; 1
     85c:	8a 81       	ldd	r24, Y+2	; 0x02
     85e:	b9 df       	rcall	.-142    	; 0x7d2 <LCD_SendCmd>
     860:	8f e9       	ldi	r24, 0x9F	; 159
     862:	9f e0       	ldi	r25, 0x0F	; 15
     864:	01 97       	sbiw	r24, 0x01	; 1
     866:	f1 f7       	brne	.-4      	; 0x864 <LCD_Init+0x3c>
     868:	00 c0       	rjmp	.+0      	; 0x86a <LCD_Init+0x42>
     86a:	00 00       	nop
			_delay_ms(1);
			LCD_SendCmd(LCD_CFG.Display_Control);
     86c:	89 81       	ldd	r24, Y+1	; 0x01
     86e:	b1 df       	rcall	.-158    	; 0x7d2 <LCD_SendCmd>
     870:	8f e9       	ldi	r24, 0x9F	; 159
     872:	9f e0       	ldi	r25, 0x0F	; 15
     874:	01 97       	sbiw	r24, 0x01	; 1
     876:	f1 f7       	brne	.-4      	; 0x874 <LCD_Init+0x4c>
     878:	00 c0       	rjmp	.+0      	; 0x87a <LCD_Init+0x52>
     87a:	00 00       	nop
			_delay_ms(1);
			LCD_SendCmd(LCD_Clear_Screen);
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	a9 df       	rcall	.-174    	; 0x7d2 <LCD_SendCmd>
     880:	8f e3       	ldi	r24, 0x3F	; 63
     882:	9c e9       	ldi	r25, 0x9C	; 156
     884:	01 97       	sbiw	r24, 0x01	; 1
     886:	f1 f7       	brne	.-4      	; 0x884 <LCD_Init+0x5c>
     888:	00 c0       	rjmp	.+0      	; 0x88a <LCD_Init+0x62>
     88a:	00 00       	nop
			_delay_ms(10);
			LCD_SendCmd(LCD_CFG.Entry_Mode);
     88c:	88 81       	ld	r24, Y
     88e:	a1 df       	rcall	.-190    	; 0x7d2 <LCD_SendCmd>
     890:	8f e9       	ldi	r24, 0x9F	; 159
     892:	9f e0       	ldi	r25, 0x0F	; 15
     894:	01 97       	sbiw	r24, 0x01	; 1
     896:	f1 f7       	brne	.-4      	; 0x894 <LCD_Init+0x6c>
     898:	00 c0       	rjmp	.+0      	; 0x89a <LCD_Init+0x72>
			_delay_ms(1);
		}
		case Four_Bit_Mode:
		{
			DIO_ConfigChannel(DIO_ChannelA4, OUTPUT);
     89a:	00 00       	nop
     89c:	61 e0       	ldi	r22, 0x01	; 1
     89e:	84 e0       	ldi	r24, 0x04	; 4
			DIO_ConfigChannel(DIO_ChannelA5, OUTPUT);
     8a0:	7b d3       	rcall	.+1782   	; 0xf98 <DIO_ConfigChannel>
     8a2:	61 e0       	ldi	r22, 0x01	; 1
     8a4:	85 e0       	ldi	r24, 0x05	; 5
			DIO_ConfigChannel(DIO_ChannelA6, OUTPUT);
     8a6:	78 d3       	rcall	.+1776   	; 0xf98 <DIO_ConfigChannel>
     8a8:	61 e0       	ldi	r22, 0x01	; 1
     8aa:	86 e0       	ldi	r24, 0x06	; 6
			DIO_ConfigChannel(DIO_ChannelA7, OUTPUT);
     8ac:	75 d3       	rcall	.+1770   	; 0xf98 <DIO_ConfigChannel>
     8ae:	61 e0       	ldi	r22, 0x01	; 1
     8b0:	87 e0       	ldi	r24, 0x07	; 7
			DIO_ConfigChannel(LCD_EN, OUTPUT);
     8b2:	72 d3       	rcall	.+1764   	; 0xf98 <DIO_ConfigChannel>
     8b4:	61 e0       	ldi	r22, 0x01	; 1
     8b6:	82 e1       	ldi	r24, 0x12	; 18
			DIO_ConfigChannel(LCD_RS, OUTPUT);
     8b8:	6f d3       	rcall	.+1758   	; 0xf98 <DIO_ConfigChannel>
     8ba:	61 e0       	ldi	r22, 0x01	; 1
     8bc:	80 e1       	ldi	r24, 0x10	; 16
     8be:	6c d3       	rcall	.+1752   	; 0xf98 <DIO_ConfigChannel>
			DIO_ConfigChannel(LCD_RW, OUTPUT);
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	81 e1       	ldi	r24, 0x11	; 17
     8c4:	69 d3       	rcall	.+1746   	; 0xf98 <DIO_ConfigChannel>
			DIO_WriteChannel(LCD_RW, STD_LOW);
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	81 e1       	ldi	r24, 0x11	; 17
     8ca:	80 d2       	rcall	.+1280   	; 0xdcc <DIO_WriteChannel>
     8cc:	82 e0       	ldi	r24, 0x02	; 2
			LCD_SendCmd(LCD_Return_Home);
     8ce:	81 df       	rcall	.-254    	; 0x7d2 <LCD_SendCmd>
     8d0:	8f e3       	ldi	r24, 0x3F	; 63
     8d2:	9c e9       	ldi	r25, 0x9C	; 156
     8d4:	01 97       	sbiw	r24, 0x01	; 1
     8d6:	f1 f7       	brne	.-4      	; 0x8d4 <LCD_Init+0xac>
     8d8:	00 c0       	rjmp	.+0      	; 0x8da <LCD_Init+0xb2>
     8da:	00 00       	nop
     8dc:	c6 e0       	ldi	r28, 0x06	; 6
			_delay_ms(10);
			LCD_SendCmd(LCD_CFG.Mode);
     8de:	d1 e0       	ldi	r29, 0x01	; 1
     8e0:	8a 81       	ldd	r24, Y+2	; 0x02
     8e2:	77 df       	rcall	.-274    	; 0x7d2 <LCD_SendCmd>
     8e4:	8f e9       	ldi	r24, 0x9F	; 159
     8e6:	9f e0       	ldi	r25, 0x0F	; 15
     8e8:	01 97       	sbiw	r24, 0x01	; 1
     8ea:	f1 f7       	brne	.-4      	; 0x8e8 <LCD_Init+0xc0>
     8ec:	00 c0       	rjmp	.+0      	; 0x8ee <LCD_Init+0xc6>
     8ee:	00 00       	nop
			_delay_ms(1);
			LCD_SendCmd(LCD_CFG.Display_Control);
     8f0:	89 81       	ldd	r24, Y+1	; 0x01
     8f2:	6f df       	rcall	.-290    	; 0x7d2 <LCD_SendCmd>
     8f4:	8f e9       	ldi	r24, 0x9F	; 159
     8f6:	9f e0       	ldi	r25, 0x0F	; 15
     8f8:	01 97       	sbiw	r24, 0x01	; 1
     8fa:	f1 f7       	brne	.-4      	; 0x8f8 <LCD_Init+0xd0>
     8fc:	00 c0       	rjmp	.+0      	; 0x8fe <LCD_Init+0xd6>
     8fe:	00 00       	nop
     900:	81 e0       	ldi	r24, 0x01	; 1
			_delay_ms(1);
			LCD_SendCmd(LCD_Clear_Screen);
     902:	67 df       	rcall	.-306    	; 0x7d2 <LCD_SendCmd>
     904:	8f e3       	ldi	r24, 0x3F	; 63
     906:	9c e9       	ldi	r25, 0x9C	; 156
     908:	01 97       	sbiw	r24, 0x01	; 1
     90a:	f1 f7       	brne	.-4      	; 0x908 <LCD_Init+0xe0>
     90c:	00 c0       	rjmp	.+0      	; 0x90e <LCD_Init+0xe6>
     90e:	00 00       	nop
     910:	88 81       	ld	r24, Y
     912:	5f df       	rcall	.-322    	; 0x7d2 <LCD_SendCmd>
			_delay_ms(10);
			LCD_SendCmd(LCD_CFG.Entry_Mode);
     914:	8f e9       	ldi	r24, 0x9F	; 159
     916:	9f e0       	ldi	r25, 0x0F	; 15
     918:	01 97       	sbiw	r24, 0x01	; 1
     91a:	f1 f7       	brne	.-4      	; 0x918 <LCD_Init+0xf0>
     91c:	00 c0       	rjmp	.+0      	; 0x91e <LCD_Init+0xf6>
     91e:	00 00       	nop
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	08 95       	ret

00000926 <LCD_SetCursor>:
			_delay_ms(1);
		}
	}
}
     926:	9f ef       	ldi	r25, 0xFF	; 255
     928:	98 0f       	add	r25, r24
     92a:	94 30       	cpi	r25, 0x04	; 4
}

void LCD_SetCursor(u_int8 row, u_int8 column)
{
	u_int8 cmd = 0;
	if(row < 1 || row > 4 || column < 1 || column > 16)
     92c:	d8 f4       	brcc	.+54     	; 0x964 <LCD_SetCursor+0x3e>
     92e:	66 23       	and	r22, r22
     930:	d9 f0       	breq	.+54     	; 0x968 <LCD_SetCursor+0x42>
     932:	61 31       	cpi	r22, 0x11	; 17
     934:	d8 f4       	brcc	.+54     	; 0x96c <LCD_SetCursor+0x46>
	{
		cmd = 0x80;
	}
	else
	{
		switch(row)
     936:	82 30       	cpi	r24, 0x02	; 2
     938:	61 f0       	breq	.+24     	; 0x952 <LCD_SetCursor+0x2c>
     93a:	18 f4       	brcc	.+6      	; 0x942 <LCD_SetCursor+0x1c>
     93c:	81 30       	cpi	r24, 0x01	; 1
     93e:	31 f0       	breq	.+12     	; 0x94c <LCD_SetCursor+0x26>
     940:	17 c0       	rjmp	.+46     	; 0x970 <LCD_SetCursor+0x4a>
     942:	83 30       	cpi	r24, 0x03	; 3
     944:	49 f0       	breq	.+18     	; 0x958 <LCD_SetCursor+0x32>
     946:	84 30       	cpi	r24, 0x04	; 4
     948:	51 f0       	breq	.+20     	; 0x95e <LCD_SetCursor+0x38>
     94a:	12 c0       	rjmp	.+36     	; 0x970 <LCD_SetCursor+0x4a>
		{
			case 1:
			cmd = 0x80 + column - 1;
     94c:	8f e7       	ldi	r24, 0x7F	; 127
     94e:	86 0f       	add	r24, r22
			break;
     950:	10 c0       	rjmp	.+32     	; 0x972 <LCD_SetCursor+0x4c>
			case 2:
			cmd = 0xC0 + column - 1;
     952:	8f eb       	ldi	r24, 0xBF	; 191
     954:	86 0f       	add	r24, r22
			break;
     956:	0d c0       	rjmp	.+26     	; 0x972 <LCD_SetCursor+0x4c>
			case 3:
			cmd = 0x90 + column - 1;
     958:	8f e8       	ldi	r24, 0x8F	; 143
     95a:	86 0f       	add	r24, r22
			break;
     95c:	0a c0       	rjmp	.+20     	; 0x972 <LCD_SetCursor+0x4c>
			case 4:
			cmd = 0xD0 + column - 1;
     95e:	8f ec       	ldi	r24, 0xCF	; 207
     960:	86 0f       	add	r24, r22
			break;
     962:	07 c0       	rjmp	.+14     	; 0x972 <LCD_SetCursor+0x4c>
void LCD_SetCursor(u_int8 row, u_int8 column)
{
	u_int8 cmd = 0;
	if(row < 1 || row > 4 || column < 1 || column > 16)
	{
		cmd = 0x80;
     964:	80 e8       	ldi	r24, 0x80	; 128
     966:	05 c0       	rjmp	.+10     	; 0x972 <LCD_SetCursor+0x4c>
     968:	80 e8       	ldi	r24, 0x80	; 128
     96a:	03 c0       	rjmp	.+6      	; 0x972 <LCD_SetCursor+0x4c>
     96c:	80 e8       	ldi	r24, 0x80	; 128
     96e:	01 c0       	rjmp	.+2      	; 0x972 <LCD_SetCursor+0x4c>
	_delay_ms(2);
}

void LCD_SetCursor(u_int8 row, u_int8 column)
{
	u_int8 cmd = 0;
     970:	80 e0       	ldi	r24, 0x00	; 0
			case 4:
			cmd = 0xD0 + column - 1;
			break;
		}
	}
	LCD_SendCmd(cmd);
     972:	2f cf       	rjmp	.-418    	; 0x7d2 <LCD_SendCmd>
     974:	08 95       	ret

00000976 <LCD_SendChar>:
		}
	}
}

void LCD_SendChar(u_int8 Data)
{	
     976:	cf 93       	push	r28
     978:	c8 2f       	mov	r28, r24
	switch(LCD_CFG.Mode)
     97a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <LCD_CFG+0x2>
     97e:	88 32       	cpi	r24, 0x28	; 40
     980:	81 f0       	breq	.+32     	; 0x9a2 <LCD_SendChar+0x2c>
     982:	88 33       	cpi	r24, 0x38	; 56
     984:	09 f5       	brne	.+66     	; 0x9c8 <LCD_SendChar+0x52>
	{
		case Eight_Bit_Mode:
		{
			DIO_WriteChannel(LCD_RS, STD_HIGH);
     986:	61 e0       	ldi	r22, 0x01	; 1
     988:	80 e1       	ldi	r24, 0x10	; 16
     98a:	20 d2       	rcall	.+1088   	; 0xdcc <DIO_WriteChannel>
			DIO_WritePort(LCD_Data_Port, Data);
     98c:	6c 2f       	mov	r22, r28
     98e:	80 e0       	ldi	r24, 0x00	; 0
			Enable();
     990:	e9 d3       	rcall	.+2002   	; 0x1164 <DIO_WritePort>
     992:	0c df       	rcall	.-488    	; 0x7ac <Enable>
     994:	8f e9       	ldi	r24, 0x9F	; 159
     996:	9f e0       	ldi	r25, 0x0F	; 15
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	f1 f7       	brne	.-4      	; 0x998 <LCD_SendChar+0x22>
     99c:	00 c0       	rjmp	.+0      	; 0x99e <LCD_SendChar+0x28>
     99e:	00 00       	nop
			_delay_ms(1);
			break;
		}
		case Four_Bit_Mode:
		{
			DIO_WriteChannel(LCD_RS, STD_HIGH);
     9a0:	13 c0       	rjmp	.+38     	; 0x9c8 <LCD_SendChar+0x52>
     9a2:	61 e0       	ldi	r22, 0x01	; 1
     9a4:	80 e1       	ldi	r24, 0x10	; 16
			DIO_WriteHighNibble(LCD_Data_Port, Data);
     9a6:	12 d2       	rcall	.+1060   	; 0xdcc <DIO_WriteChannel>
     9a8:	6c 2f       	mov	r22, r28
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	0d d4       	rcall	.+2074   	; 0x11c8 <DIO_WriteHighNibble>
			Enable();
     9ae:	fe de       	rcall	.-516    	; 0x7ac <Enable>
			DIO_WriteHighNibble(LCD_Data_Port, Data << 4);
     9b0:	6c 2f       	mov	r22, r28
     9b2:	62 95       	swap	r22
     9b4:	60 7f       	andi	r22, 0xF0	; 240
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	07 d4       	rcall	.+2062   	; 0x11c8 <DIO_WriteHighNibble>
     9ba:	f8 de       	rcall	.-528    	; 0x7ac <Enable>
			Enable();
     9bc:	8f e9       	ldi	r24, 0x9F	; 159
     9be:	9f e0       	ldi	r25, 0x0F	; 15
     9c0:	01 97       	sbiw	r24, 0x01	; 1
     9c2:	f1 f7       	brne	.-4      	; 0x9c0 <LCD_SendChar+0x4a>
     9c4:	00 c0       	rjmp	.+0      	; 0x9c6 <LCD_SendChar+0x50>
     9c6:	00 00       	nop
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <LCD_SendString>:
			_delay_ms(1);
			break;
		}
	}
}
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29

void LCD_SendString(u_int8* String)
{
     9d0:	ec 01       	movw	r28, r24
	while((*String) != 0)
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <LCD_SendString+0xc>
	{
		LCD_SendChar(*String);
     9d4:	d0 df       	rcall	.-96     	; 0x976 <LCD_SendChar>
		String++;
     9d6:	21 96       	adiw	r28, 0x01	; 1
	}
}

void LCD_SendString(u_int8* String)
{
	while((*String) != 0)
     9d8:	88 81       	ld	r24, Y
     9da:	81 11       	cpse	r24, r1
     9dc:	fb cf       	rjmp	.-10     	; 0x9d4 <LCD_SendString+0x8>
	{
		LCD_SendChar(*String);
		String++;
	}
}
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	08 95       	ret

000009e4 <LCD_ClearScreen>:

void LCD_ClearScreen()
{
	LCD_SendCmd(LCD_Clear_Screen);
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	f5 ce       	rjmp	.-534    	; 0x7d2 <LCD_SendCmd>
     9e8:	08 95       	ret

000009ea <mfrc522_write>:


}

void mfrc522_write(uint8_t reg, uint8_t data)
{
     9ea:	cf 93       	push	r28
     9ec:	df 93       	push	r29
     9ee:	c8 2f       	mov	r28, r24
     9f0:	d6 2f       	mov	r29, r22
	//ENABLE_CHIP();
	SPI_Cannel_State(DIO_ChannelB0 ,SPI_Enable);
     9f2:	61 e0       	ldi	r22, 0x01	; 1
     9f4:	88 e0       	ldi	r24, 0x08	; 8
     9f6:	65 d5       	rcall	.+2762   	; 0x14c2 <SPI_Cannel_State>
    //_NOP();
	SPI_Master_TransmitChar((reg<<1)&0x7E);
     9f8:	8c 2f       	mov	r24, r28
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	88 0f       	add	r24, r24
     9fe:	99 1f       	adc	r25, r25
     a00:	8e 77       	andi	r24, 0x7E	; 126
     a02:	5a d5       	rcall	.+2740   	; 0x14b8 <SPI_Master_TransmitChar>
	SPI_Master_TransmitChar(data);
     a04:	8d 2f       	mov	r24, r29
     a06:	58 d5       	rcall	.+2736   	; 0x14b8 <SPI_Master_TransmitChar>
	SPI_Cannel_State(DIO_ChannelB0 ,SPI_Disable);
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	88 e0       	ldi	r24, 0x08	; 8
     a0c:	5a d5       	rcall	.+2740   	; 0x14c2 <SPI_Cannel_State>
     a0e:	df 91       	pop	r29
	//DISABLE_CHIP();
}
     a10:	cf 91       	pop	r28
     a12:	08 95       	ret

00000a14 <mfrc522_read>:
     a14:	cf 93       	push	r28

u_int8 mfrc522_read(uint8_t reg)
{
     a16:	c8 2f       	mov	r28, r24
	uint8_t data;	
	//ENABLE_CHIP();
	SPI_Cannel_State(DIO_ChannelB0 ,SPI_Enable);
     a18:	61 e0       	ldi	r22, 0x01	; 1
     a1a:	88 e0       	ldi	r24, 0x08	; 8
     a1c:	52 d5       	rcall	.+2724   	; 0x14c2 <SPI_Cannel_State>
    //_NOP();
	SPI_Master_TransmitChar(((reg<<1)&0x7E)|0x80);
     a1e:	8c 2f       	mov	r24, r28
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	88 0f       	add	r24, r24
     a24:	99 1f       	adc	r25, r25
     a26:	8e 77       	andi	r24, 0x7E	; 126
     a28:	80 68       	ori	r24, 0x80	; 128
     a2a:	46 d5       	rcall	.+2700   	; 0x14b8 <SPI_Master_TransmitChar>
	data = SPI_Master_TransmitChar(0x00);
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	44 d5       	rcall	.+2696   	; 0x14b8 <SPI_Master_TransmitChar>
     a30:	c8 2f       	mov	r28, r24
	//DISABLE_CHIP();
	SPI_Cannel_State(DIO_ChannelB0 ,SPI_Disable);
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	88 e0       	ldi	r24, 0x08	; 8
     a36:	45 d5       	rcall	.+2698   	; 0x14c2 <SPI_Cannel_State>
     a38:	8c 2f       	mov	r24, r28
	return data;
}
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <mfrc522_reset>:
     a3e:	6f e0       	ldi	r22, 0x0F	; 15

void mfrc522_reset()
{
	mfrc522_write(CommandReg,SoftReset_CMD);
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	d3 cf       	rjmp	.-90     	; 0x9ea <mfrc522_write>
     a44:	08 95       	ret

00000a46 <mfrc522_init>:
#include "../../MCAL/SPI/SPI.h"


void mfrc522_init()
{
	SPI_Init();
     a46:	ab d4       	rcall	.+2390   	; 0x139e <SPI_Init>
	uint8_t byte;
	mfrc522_reset();
     a48:	fa df       	rcall	.-12     	; 0xa3e <mfrc522_reset>
     a4a:	6d e8       	ldi	r22, 0x8D	; 141
	
	mfrc522_write(TModeReg, 0x8D);
     a4c:	8a e2       	ldi	r24, 0x2A	; 42
     a4e:	cd df       	rcall	.-102    	; 0x9ea <mfrc522_write>
     a50:	6e e3       	ldi	r22, 0x3E	; 62
    mfrc522_write(TPrescalerReg, 0x3E);
     a52:	8b e2       	ldi	r24, 0x2B	; 43
     a54:	ca df       	rcall	.-108    	; 0x9ea <mfrc522_write>
     a56:	6e e1       	ldi	r22, 0x1E	; 30
    mfrc522_write(TReloadReg_1, 30);   
     a58:	8c e2       	ldi	r24, 0x2C	; 44
     a5a:	c7 df       	rcall	.-114    	; 0x9ea <mfrc522_write>
     a5c:	60 e0       	ldi	r22, 0x00	; 0
    mfrc522_write(TReloadReg_2, 0);	
     a5e:	8d e2       	ldi	r24, 0x2D	; 45
     a60:	c4 df       	rcall	.-120    	; 0x9ea <mfrc522_write>
     a62:	60 e4       	ldi	r22, 0x40	; 64
	mfrc522_write(TxASKReg, 0x40);	
     a64:	85 e1       	ldi	r24, 0x15	; 21
     a66:	c1 df       	rcall	.-126    	; 0x9ea <mfrc522_write>
     a68:	6d e3       	ldi	r22, 0x3D	; 61
	mfrc522_write(ModeReg, 0x3D);
     a6a:	81 e1       	ldi	r24, 0x11	; 17
     a6c:	be df       	rcall	.-132    	; 0x9ea <mfrc522_write>
     a6e:	84 e1       	ldi	r24, 0x14	; 20
     a70:	d1 df       	rcall	.-94     	; 0xa14 <mfrc522_read>

	byte = mfrc522_read(TxControlReg);
     a72:	98 2f       	mov	r25, r24
     a74:	93 70       	andi	r25, 0x03	; 3
	if(!(byte&0x03))
     a76:	31 f4       	brne	.+12     	; 0xa84 <mfrc522_init+0x3e>
     a78:	68 2f       	mov	r22, r24
     a7a:	63 60       	ori	r22, 0x03	; 3
	{
		mfrc522_write(TxControlReg,byte|0x03);
     a7c:	84 e1       	ldi	r24, 0x14	; 20
     a7e:	b5 df       	rcall	.-150    	; 0x9ea <mfrc522_write>
     a80:	84 e1       	ldi	r24, 0x14	; 20
     a82:	c8 cf       	rjmp	.-112    	; 0xa14 <mfrc522_read>
     a84:	08 95       	ret

00000a86 <mfrc522_to_card>:

        byte = mfrc522_read(TxControlReg);  // without this reader is not detected
     a86:	4f 92       	push	r4
     a88:	5f 92       	push	r5
     a8a:	6f 92       	push	r6
     a8c:	7f 92       	push	r7
   
	return status;
}

u_int8 mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
     a8e:	8f 92       	push	r8
     a90:	9f 92       	push	r9
     a92:	af 92       	push	r10
     a94:	bf 92       	push	r11
     a96:	cf 92       	push	r12
     a98:	df 92       	push	r13
     a9a:	ef 92       	push	r14
     a9c:	ff 92       	push	r15
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	d8 2f       	mov	r29, r24
     aa8:	7b 01       	movw	r14, r22
     aaa:	c4 2f       	mov	r28, r20
     aac:	59 01       	movw	r10, r18
    uint8_t lastBits;
    uint8_t n;
    uint8_t	tmp;
    uint32_t i;

    switch (cmd)
     aae:	8c 30       	cpi	r24, 0x0C	; 12
     ab0:	29 f0       	breq	.+10     	; 0xabc <mfrc522_to_card+0x36>
     ab2:	8e 30       	cpi	r24, 0x0E	; 14
     ab4:	61 f0       	breq	.+24     	; 0xace <mfrc522_to_card+0x48>

u_int8 mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
    uint8_t waitIRq = 0x00;
     ab6:	91 2c       	mov	r9, r1
}

u_int8 mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
     ab8:	81 2c       	mov	r8, r1
     aba:	10 c0       	rjmp	.+32     	; 0xadc <mfrc522_to_card+0x56>
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
     abc:	0f 2e       	mov	r0, r31
     abe:	f0 e3       	ldi	r31, 0x30	; 48
     ac0:	9f 2e       	mov	r9, r31
     ac2:	f0 2d       	mov	r31, r0
			waitIRq = 0x10;
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
     ac4:	0f 2e       	mov	r0, r31
     ac6:	f7 e7       	ldi	r31, 0x77	; 119
     ac8:	8f 2e       	mov	r8, r31
     aca:	f0 2d       	mov	r31, r0
			waitIRq = 0x30;
			break;
     acc:	07 c0       	rjmp	.+14     	; 0xadc <mfrc522_to_card+0x56>
    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
     ace:	68 94       	set
     ad0:	99 24       	eor	r9, r9
     ad2:	94 f8       	bld	r9, 4

    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
     ad4:	0f 2e       	mov	r0, r31
     ad6:	f2 e1       	ldi	r31, 0x12	; 18
     ad8:	8f 2e       	mov	r8, r31
     ada:	f0 2d       	mov	r31, r0
		default:
			break;
    }
   
    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
     adc:	84 e0       	ldi	r24, 0x04	; 4
     ade:	9a df       	rcall	.-204    	; 0xa14 <mfrc522_read>
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
     ae0:	68 2f       	mov	r22, r24
     ae2:	6f 77       	andi	r22, 0x7F	; 127
     ae4:	84 e0       	ldi	r24, 0x04	; 4
     ae6:	81 df       	rcall	.-254    	; 0x9ea <mfrc522_write>
    n=mfrc522_read(FIFOLevelReg);
     ae8:	8a e0       	ldi	r24, 0x0A	; 10
     aea:	94 df       	rcall	.-216    	; 0xa14 <mfrc522_read>
     aec:	68 2f       	mov	r22, r24
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
     aee:	60 68       	ori	r22, 0x80	; 128
     af0:	8a e0       	ldi	r24, 0x0A	; 10
     af2:	7b df       	rcall	.-266    	; 0x9ea <mfrc522_write>
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
     af4:	60 e0       	ldi	r22, 0x00	; 0
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	78 df       	rcall	.-272    	; 0x9ea <mfrc522_write>
     afa:	41 2c       	mov	r4, r1

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
     afc:	51 2c       	mov	r5, r1
     afe:	32 01       	movw	r6, r4
     b00:	0b c0       	rjmp	.+22     	; 0xb18 <mfrc522_to_card+0x92>
     b02:	f7 01       	movw	r30, r14
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
     b04:	e4 0d       	add	r30, r4
     b06:	f5 1d       	adc	r31, r5
     b08:	60 81       	ld	r22, Z
     b0a:	89 e0       	ldi	r24, 0x09	; 9
     b0c:	6e df       	rcall	.-292    	; 0x9ea <mfrc522_write>
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
     b10:	48 1a       	sub	r4, r24
     b12:	58 0a       	sbc	r5, r24
     b14:	68 0a       	sbc	r6, r24
     b16:	78 0a       	sbc	r7, r24
     b18:	8c 2f       	mov	r24, r28
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	a0 e0       	ldi	r26, 0x00	; 0
     b1e:	b0 e0       	ldi	r27, 0x00	; 0
     b20:	48 16       	cp	r4, r24
     b22:	59 06       	cpc	r5, r25
     b24:	6a 06       	cpc	r6, r26
     b26:	7b 06       	cpc	r7, r27
     b28:	60 f3       	brcs	.-40     	; 0xb02 <mfrc522_to_card+0x7c>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
     b2a:	6d 2f       	mov	r22, r29
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	5d df       	rcall	.-326    	; 0x9ea <mfrc522_write>
    if (cmd == Transceive_CMD)
     b30:	dc 30       	cpi	r29, 0x0C	; 12
    {    
		n=mfrc522_read(BitFramingReg);
     b32:	31 f4       	brne	.+12     	; 0xb40 <mfrc522_to_card+0xba>
     b34:	8d e0       	ldi	r24, 0x0D	; 13
     b36:	6e df       	rcall	.-292    	; 0xa14 <mfrc522_read>
		mfrc522_write(BitFramingReg,n|0x80);  
     b38:	68 2f       	mov	r22, r24
     b3a:	60 68       	ori	r22, 0x80	; 128
     b3c:	8d e0       	ldi	r24, 0x0D	; 13
     b3e:	55 df       	rcall	.-342    	; 0x9ea <mfrc522_write>
     b40:	0f 2e       	mov	r0, r31
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
     b42:	f0 ed       	ldi	r31, 0xD0	; 208
     b44:	cf 2e       	mov	r12, r31
     b46:	f7 e0       	ldi	r31, 0x07	; 7
     b48:	df 2e       	mov	r13, r31
     b4a:	e1 2c       	mov	r14, r1
     b4c:	f1 2c       	mov	r15, r1
     b4e:	f0 2d       	mov	r31, r0
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
     b50:	84 e0       	ldi	r24, 0x04	; 4
     b52:	60 df       	rcall	.-320    	; 0xa14 <mfrc522_read>
     b54:	c8 2f       	mov	r28, r24
     b56:	e1 e0       	ldi	r30, 0x01	; 1
        i--;
     b58:	ce 1a       	sub	r12, r30
     b5a:	d1 08       	sbc	r13, r1
     b5c:	e1 08       	sbc	r14, r1
     b5e:	f1 08       	sbc	r15, r1
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
     b60:	29 f0       	breq	.+10     	; 0xb6c <mfrc522_to_card+0xe6>
     b62:	80 fd       	sbrc	r24, 0
     b64:	03 c0       	rjmp	.+6      	; 0xb6c <mfrc522_to_card+0xe6>
     b66:	89 2d       	mov	r24, r9
     b68:	8c 23       	and	r24, r28

	tmp=mfrc522_read(BitFramingReg);
     b6a:	91 f3       	breq	.-28     	; 0xb50 <mfrc522_to_card+0xca>
     b6c:	8d e0       	ldi	r24, 0x0D	; 13
	mfrc522_write(BitFramingReg,tmp&(~0x80));
     b6e:	52 df       	rcall	.-348    	; 0xa14 <mfrc522_read>
     b70:	68 2f       	mov	r22, r24
     b72:	6f 77       	andi	r22, 0x7F	; 127
     b74:	8d e0       	ldi	r24, 0x0D	; 13
     b76:	39 df       	rcall	.-398    	; 0x9ea <mfrc522_write>
	
    if (i != 0)
     b78:	cd 28       	or	r12, r13
     b7a:	ce 28       	or	r12, r14
     b7c:	cf 28       	or	r12, r15
     b7e:	09 f4       	brne	.+2      	; 0xb82 <mfrc522_to_card+0xfc>
     b80:	5c c0       	rjmp	.+184    	; 0xc3a <mfrc522_to_card+0x1b4>
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
     b82:	86 e0       	ldi	r24, 0x06	; 6
     b84:	47 df       	rcall	.-370    	; 0xa14 <mfrc522_read>
     b86:	8b 71       	andi	r24, 0x1B	; 27
     b88:	09 f0       	breq	.+2      	; 0xb8c <mfrc522_to_card+0x106>
     b8a:	59 c0       	rjmp	.+178    	; 0xc3e <mfrc522_to_card+0x1b8>
        {
            status = CARD_FOUND;
            if (n & irqEn & 0x01)
     b8c:	c8 21       	and	r28, r8
     b8e:	c0 fd       	sbrc	r28, 0
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = CARD_FOUND;
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <mfrc522_to_card+0x110>
     b92:	c1 e0       	ldi	r28, 0x01	; 1
            if (n & irqEn & 0x01)
            {   
				status = CARD_NOT_FOUND;			//??   
     b94:	01 c0       	rjmp	.+2      	; 0xb98 <mfrc522_to_card+0x112>
			}

            if (cmd == Transceive_CMD)
     b96:	c2 e0       	ldi	r28, 0x02	; 2
     b98:	dc 30       	cpi	r29, 0x0C	; 12
     b9a:	09 f0       	breq	.+2      	; 0xb9e <mfrc522_to_card+0x118>
            {
               	n = mfrc522_read(FIFOLevelReg);
     b9c:	51 c0       	rjmp	.+162    	; 0xc40 <mfrc522_to_card+0x1ba>
     b9e:	8a e0       	ldi	r24, 0x0A	; 10
     ba0:	39 df       	rcall	.-398    	; 0xa14 <mfrc522_read>
     ba2:	d8 2f       	mov	r29, r24
              	lastBits = mfrc522_read(ControlReg) & 0x07;
     ba4:	8c e0       	ldi	r24, 0x0C	; 12
     ba6:	36 df       	rcall	.-404    	; 0xa14 <mfrc522_read>
     ba8:	28 2f       	mov	r18, r24
     baa:	27 70       	andi	r18, 0x07	; 7
     bac:	a9 f0       	breq	.+42     	; 0xbd8 <mfrc522_to_card+0x152>
                if (lastBits)
     bae:	8d 2f       	mov	r24, r29
                {   
					*back_data_len = (n-1)*8 + lastBits;   
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	01 97       	sbiw	r24, 0x01	; 1
     bb4:	88 0f       	add	r24, r24
     bb6:	99 1f       	adc	r25, r25
     bb8:	88 0f       	add	r24, r24
     bba:	99 1f       	adc	r25, r25
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	82 0f       	add	r24, r18
     bc2:	91 1d       	adc	r25, r1
     bc4:	09 2e       	mov	r0, r25
     bc6:	00 0c       	add	r0, r0
     bc8:	aa 0b       	sbc	r26, r26
     bca:	bb 0b       	sbc	r27, r27
     bcc:	f8 01       	movw	r30, r16
     bce:	80 83       	st	Z, r24
     bd0:	91 83       	std	Z+1, r25	; 0x01
     bd2:	a2 83       	std	Z+2, r26	; 0x02
     bd4:	b3 83       	std	Z+3, r27	; 0x03
     bd6:	11 c0       	rjmp	.+34     	; 0xbfa <mfrc522_to_card+0x174>
     bd8:	8d 2f       	mov	r24, r29
				}
                else
                {   
					*back_data_len = n*8;   
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	88 0f       	add	r24, r24
     bde:	99 1f       	adc	r25, r25
     be0:	88 0f       	add	r24, r24
     be2:	99 1f       	adc	r25, r25
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	09 2e       	mov	r0, r25
     bea:	00 0c       	add	r0, r0
     bec:	aa 0b       	sbc	r26, r26
     bee:	bb 0b       	sbc	r27, r27
     bf0:	f8 01       	movw	r30, r16
     bf2:	80 83       	st	Z, r24
     bf4:	91 83       	std	Z+1, r25	; 0x01
     bf6:	a2 83       	std	Z+2, r26	; 0x02
     bf8:	b3 83       	std	Z+3, r27	; 0x03
				}

                if (n == 0)
     bfa:	d1 11       	cpse	r29, r1
     bfc:	01 c0       	rjmp	.+2      	; 0xc00 <mfrc522_to_card+0x17a>
                {   
					n = 1;    
     bfe:	d1 e0       	ldi	r29, 0x01	; 1
				}
                if (n > MAX_LEN)
     c00:	d1 31       	cpi	r29, 0x11	; 17
     c02:	08 f0       	brcs	.+2      	; 0xc06 <mfrc522_to_card+0x180>
                {   
					n = MAX_LEN;   
     c04:	d0 e1       	ldi	r29, 0x10	; 16
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
     c06:	c1 2c       	mov	r12, r1
     c08:	d1 2c       	mov	r13, r1
     c0a:	76 01       	movw	r14, r12
     c0c:	0c c0       	rjmp	.+24     	; 0xc26 <mfrc522_to_card+0x1a0>
                {   
					back_data[i] = mfrc522_read(FIFODataReg);    
     c0e:	85 01       	movw	r16, r10
     c10:	0c 0d       	add	r16, r12
     c12:	1d 1d       	adc	r17, r13
     c14:	89 e0       	ldi	r24, 0x09	; 9
     c16:	fe de       	rcall	.-516    	; 0xa14 <mfrc522_read>
     c18:	f8 01       	movw	r30, r16
     c1a:	80 83       	st	Z, r24
     c1c:	ff ef       	ldi	r31, 0xFF	; 255
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
     c1e:	cf 1a       	sub	r12, r31
     c20:	df 0a       	sbc	r13, r31
     c22:	ef 0a       	sbc	r14, r31
     c24:	ff 0a       	sbc	r15, r31
     c26:	8d 2f       	mov	r24, r29
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	c8 16       	cp	r12, r24
     c30:	d9 06       	cpc	r13, r25
     c32:	ea 06       	cpc	r14, r26
     c34:	fb 06       	cpc	r15, r27
     c36:	58 f3       	brcs	.-42     	; 0xc0e <mfrc522_to_card+0x188>
     c38:	03 c0       	rjmp	.+6      	; 0xc40 <mfrc522_to_card+0x1ba>
     c3a:	c3 e0       	ldi	r28, 0x03	; 3
	return status;
}

u_int8 mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
     c3c:	01 c0       	rjmp	.+2      	; 0xc40 <mfrc522_to_card+0x1ba>
     c3e:	c3 e0       	ldi	r28, 0x03	; 3
				}
            }
        }
        else
        {   
			status = ERROR;  
     c40:	8c 2f       	mov	r24, r28
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //mfrc522_write(cmdReg, PCD_IDLE); 

    return status;
}
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	ff 90       	pop	r15
     c4c:	ef 90       	pop	r14
     c4e:	df 90       	pop	r13
     c50:	cf 90       	pop	r12
     c52:	bf 90       	pop	r11
     c54:	af 90       	pop	r10
     c56:	9f 90       	pop	r9
     c58:	8f 90       	pop	r8
     c5a:	7f 90       	pop	r7
     c5c:	6f 90       	pop	r6
     c5e:	5f 90       	pop	r5
     c60:	4f 90       	pop	r4
     c62:	08 95       	ret

00000c64 <mfrc522_request>:
     c64:	ef 92       	push	r14
{
	mfrc522_write(CommandReg,SoftReset_CMD);
}

u_int8	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
{
     c66:	ff 92       	push	r15
     c68:	0f 93       	push	r16
     c6a:	1f 93       	push	r17
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	00 d0       	rcall	.+0      	; 0xc72 <mfrc522_request+0xe>
     c72:	00 d0       	rcall	.+0      	; 0xc74 <mfrc522_request+0x10>
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
     c78:	18 2f       	mov	r17, r24
     c7a:	7b 01       	movw	r14, r22
	uint8_t  status;  
	uint32_t backBits;//The received data bits

	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
     c7c:	67 e0       	ldi	r22, 0x07	; 7
     c7e:	8d e0       	ldi	r24, 0x0D	; 13
     c80:	b4 de       	rcall	.-664    	; 0x9ea <mfrc522_write>
	
	tag_type[0] = req_mode;
     c82:	f7 01       	movw	r30, r14
     c84:	10 83       	st	Z, r17
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);
     c86:	8e 01       	movw	r16, r28
     c88:	0f 5f       	subi	r16, 0xFF	; 255
     c8a:	1f 4f       	sbci	r17, 0xFF	; 255
     c8c:	97 01       	movw	r18, r14
     c8e:	41 e0       	ldi	r20, 0x01	; 1
     c90:	b7 01       	movw	r22, r14
     c92:	8c e0       	ldi	r24, 0x0C	; 12
     c94:	f8 de       	rcall	.-528    	; 0xa86 <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
     c96:	81 30       	cpi	r24, 0x01	; 1
     c98:	51 f4       	brne	.+20     	; 0xcae <mfrc522_request+0x4a>
     c9a:	49 81       	ldd	r20, Y+1	; 0x01
     c9c:	5a 81       	ldd	r21, Y+2	; 0x02
     c9e:	6b 81       	ldd	r22, Y+3	; 0x03
     ca0:	7c 81       	ldd	r23, Y+4	; 0x04
     ca2:	40 31       	cpi	r20, 0x10	; 16
     ca4:	51 05       	cpc	r21, r1
     ca6:	61 05       	cpc	r22, r1
     ca8:	71 05       	cpc	r23, r1
     caa:	19 f4       	brne	.+6      	; 0xcb2 <mfrc522_request+0x4e>
     cac:	03 c0       	rjmp	.+6      	; 0xcb4 <mfrc522_request+0x50>
	{    
		status = ERROR;
     cae:	83 e0       	ldi	r24, 0x03	; 3
     cb0:	01 c0       	rjmp	.+2      	; 0xcb4 <mfrc522_request+0x50>
     cb2:	83 e0       	ldi	r24, 0x03	; 3
	}
   
	return status;
}
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	ff 90       	pop	r15
     cc6:	ef 90       	pop	r14
     cc8:	08 95       	ret

00000cca <mfrc522_get_card_serial>:
    return status;
}


u_int8 mfrc522_get_card_serial(uint8_t * serial_out)
{
     cca:	ef 92       	push	r14
     ccc:	ff 92       	push	r15
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <mfrc522_get_card_serial+0xe>
     cd8:	00 d0       	rcall	.+0      	; 0xcda <mfrc522_get_card_serial+0x10>
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	7c 01       	movw	r14, r24
	uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
    uint32_t unLen;
    
	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	8d e0       	ldi	r24, 0x0D	; 13
     ce4:	82 de       	rcall	.-764    	; 0x9ea <mfrc522_write>
 
    serial_out[0] = PICC_ANTICOLL;
     ce6:	83 e9       	ldi	r24, 0x93	; 147
     ce8:	f7 01       	movw	r30, r14
     cea:	80 83       	st	Z, r24
    serial_out[1] = 0x20;
     cec:	80 e2       	ldi	r24, 0x20	; 32
     cee:	81 83       	std	Z+1, r24	; 0x01
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);
     cf0:	8e 01       	movw	r16, r28
     cf2:	0f 5f       	subi	r16, 0xFF	; 255
     cf4:	1f 4f       	sbci	r17, 0xFF	; 255
     cf6:	97 01       	movw	r18, r14
     cf8:	42 e0       	ldi	r20, 0x02	; 2
     cfa:	b7 01       	movw	r22, r14
     cfc:	8c e0       	ldi	r24, 0x0C	; 12
     cfe:	c3 de       	rcall	.-634    	; 0xa86 <mfrc522_to_card>

    if (status == CARD_FOUND)
     d00:	81 30       	cpi	r24, 0x01	; 1
     d02:	91 f4       	brne	.+36     	; 0xd28 <mfrc522_get_card_serial+0x5e>
     d04:	07 c0       	rjmp	.+14     	; 0xd14 <mfrc522_get_card_serial+0x4a>
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{   
		 	serNumCheck ^= serial_out[i];
     d06:	f7 01       	movw	r30, r14
     d08:	e9 0f       	add	r30, r25
     d0a:	f1 1d       	adc	r31, r1
     d0c:	30 81       	ld	r19, Z
     d0e:	23 27       	eor	r18, r19
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);

    if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
     d10:	9f 5f       	subi	r25, 0xFF	; 255
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <mfrc522_get_card_serial+0x4e>
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	94 30       	cpi	r25, 0x04	; 4
     d1a:	a8 f3       	brcs	.-22     	; 0xd06 <mfrc522_get_card_serial+0x3c>
		{   
		 	serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
     d1c:	f7 01       	movw	r30, r14
     d1e:	e9 0f       	add	r30, r25
     d20:	f1 1d       	adc	r31, r1
     d22:	90 81       	ld	r25, Z
     d24:	29 13       	cpse	r18, r25
		{   
			status = ERROR;    
     d26:	83 e0       	ldi	r24, 0x03	; 3
		}
    }
    return status;
}
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	1f 91       	pop	r17
     d36:	0f 91       	pop	r16
     d38:	ff 90       	pop	r15
     d3a:	ef 90       	pop	r14
     d3c:	08 95       	ret

00000d3e <find_string>:
#include "String_Find.h"

unsigned char find_string(const char *string, const char* string_find)
{
     d3e:	ef 92       	push	r14
     d40:	ff 92       	push	r15
     d42:	0f 93       	push	r16
     d44:	1f 93       	push	r17
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	ec 01       	movw	r28, r24
     d4c:	8b 01       	movw	r16, r22
	int matched = 0;
	int index_string = 0;
	int length_of_string = 0;
	int length_of_string_find = 0;

	length_of_string_find = strlen(string_find);
     d4e:	fb 01       	movw	r30, r22
     d50:	01 90       	ld	r0, Z+
     d52:	00 20       	and	r0, r0
     d54:	e9 f7       	brne	.-6      	; 0xd50 <find_string+0x12>
     d56:	31 97       	sbiw	r30, 0x01	; 1
     d58:	7f 01       	movw	r14, r30
     d5a:	e6 1a       	sub	r14, r22
     d5c:	f7 0a       	sbc	r15, r23
	length_of_string = strlen(string);
     d5e:	dc 01       	movw	r26, r24
     d60:	0d 90       	ld	r0, X+
     d62:	00 20       	and	r0, r0
     d64:	e9 f7       	brne	.-6      	; 0xd60 <find_string+0x22>
     d66:	11 97       	sbiw	r26, 0x01	; 1
     d68:	a8 1b       	sub	r26, r24
     d6a:	b9 0b       	sbc	r27, r25

	if(length_of_string_find > length_of_string)
     d6c:	ae 15       	cp	r26, r14
     d6e:	bf 05       	cpc	r27, r15
     d70:	f4 f0       	brlt	.+60     	; 0xdae <find_string+0x70>
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	40 e0       	ldi	r20, 0x00	; 0
     d78:	50 e0       	ldi	r21, 0x00	; 0
     d7a:	14 c0       	rjmp	.+40     	; 0xda4 <find_string+0x66>
	}
	else
	{
		for(index_string = 0; index_string < length_of_string; index_string++)
		{
			if(string[index_string] == string_find[matched])
     d7c:	fe 01       	movw	r30, r28
     d7e:	e2 0f       	add	r30, r18
     d80:	f3 1f       	adc	r31, r19
     d82:	70 81       	ld	r23, Z
     d84:	f8 01       	movw	r30, r16
     d86:	e4 0f       	add	r30, r20
     d88:	f5 1f       	adc	r31, r21
     d8a:	90 81       	ld	r25, Z
     d8c:	79 13       	cpse	r23, r25
     d8e:	06 c0       	rjmp	.+12     	; 0xd9c <find_string+0x5e>
			{
				matched++;
     d90:	4f 5f       	subi	r20, 0xFF	; 255
     d92:	5f 4f       	sbci	r21, 0xFF	; 255
				if(length_of_string_find == matched)
     d94:	e4 16       	cp	r14, r20
     d96:	f5 06       	cpc	r15, r21
     d98:	19 f4       	brne	.+6      	; 0xda0 <find_string+0x62>
     d9a:	0b c0       	rjmp	.+22     	; 0xdb2 <find_string+0x74>
					return 1;
			}
			else
			{
				matched = 0;
     d9c:	40 e0       	ldi	r20, 0x00	; 0
     d9e:	50 e0       	ldi	r21, 0x00	; 0
	{
		return 0;
	}
	else
	{
		for(index_string = 0; index_string < length_of_string; index_string++)
     da0:	2f 5f       	subi	r18, 0xFF	; 255
     da2:	3f 4f       	sbci	r19, 0xFF	; 255
     da4:	2a 17       	cp	r18, r26
     da6:	3b 07       	cpc	r19, r27
     da8:	4c f3       	brlt	.-46     	; 0xd7c <find_string+0x3e>
			else
			{
				matched = 0;
			}
		}
		return 0;
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	03 c0       	rjmp	.+6      	; 0xdb4 <find_string+0x76>
	length_of_string_find = strlen(string_find);
	length_of_string = strlen(string);

	if(length_of_string_find > length_of_string)
	{
		return 0;
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	01 c0       	rjmp	.+2      	; 0xdb4 <find_string+0x76>
		{
			if(string[index_string] == string_find[matched])
			{
				matched++;
				if(length_of_string_find == matched)
					return 1;
     db2:	81 e0       	ldi	r24, 0x01	; 1
				matched = 0;
			}
		}
		return 0;
	}
}
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	ff 90       	pop	r15
     dbe:	ef 90       	pop	r14
     dc0:	08 95       	ret

00000dc2 <main>:
#include "../../Service/service.h"


int main(void)
{
	startScheduler();
     dc2:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <startScheduler>
}
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	08 95       	ret

00000dcc <DIO_WriteChannel>:
			break;
		}
		case DIO_PortG:
		{
			PORTG_Register &= 0xF0;
			PORTG_Register |= NibbleValue;
     dcc:	e8 2f       	mov	r30, r24
     dce:	e6 95       	lsr	r30
     dd0:	e6 95       	lsr	r30
     dd2:	e6 95       	lsr	r30
     dd4:	87 70       	andi	r24, 0x07	; 7
     dd6:	66 23       	and	r22, r22
     dd8:	21 f0       	breq	.+8      	; 0xde2 <DIO_WriteChannel+0x16>
     dda:	61 30       	cpi	r22, 0x01	; 1
     ddc:	09 f4       	brne	.+2      	; 0xde0 <DIO_WriteChannel+0x14>
     dde:	72 c0       	rjmp	.+228    	; 0xec4 <DIO_WriteChannel+0xf8>
     de0:	08 95       	ret
     de2:	4e 2f       	mov	r20, r30
     de4:	50 e0       	ldi	r21, 0x00	; 0
     de6:	47 30       	cpi	r20, 0x07	; 7
     de8:	51 05       	cpc	r21, r1
     dea:	08 f0       	brcs	.+2      	; 0xdee <DIO_WriteChannel+0x22>
     dec:	d4 c0       	rjmp	.+424    	; 0xf96 <DIO_WriteChannel+0x1ca>
     dee:	fa 01       	movw	r30, r20
     df0:	ea 5b       	subi	r30, 0xBA	; 186
     df2:	ff 4f       	sbci	r31, 0xFF	; 255
     df4:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <__tablejump2__>
     df8:	4b b3       	in	r20, 0x1b	; 27
     dfa:	21 e0       	ldi	r18, 0x01	; 1
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	b9 01       	movw	r22, r18
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <DIO_WriteChannel+0x3a>
     e02:	66 0f       	add	r22, r22
     e04:	77 1f       	adc	r23, r23
     e06:	8a 95       	dec	r24
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <DIO_WriteChannel+0x36>
     e0a:	cb 01       	movw	r24, r22
     e0c:	80 95       	com	r24
     e0e:	84 23       	and	r24, r20
     e10:	8b bb       	out	0x1b, r24	; 27
     e12:	08 95       	ret
     e14:	48 b3       	in	r20, 0x18	; 24
     e16:	21 e0       	ldi	r18, 0x01	; 1
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	b9 01       	movw	r22, r18
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <DIO_WriteChannel+0x56>
     e1e:	66 0f       	add	r22, r22
     e20:	77 1f       	adc	r23, r23
     e22:	8a 95       	dec	r24
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <DIO_WriteChannel+0x52>
     e26:	cb 01       	movw	r24, r22
     e28:	80 95       	com	r24
     e2a:	84 23       	and	r24, r20
     e2c:	88 bb       	out	0x18, r24	; 24
     e2e:	08 95       	ret
     e30:	45 b3       	in	r20, 0x15	; 21
     e32:	21 e0       	ldi	r18, 0x01	; 1
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	b9 01       	movw	r22, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <DIO_WriteChannel+0x72>
     e3a:	66 0f       	add	r22, r22
     e3c:	77 1f       	adc	r23, r23
     e3e:	8a 95       	dec	r24
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <DIO_WriteChannel+0x6e>
     e42:	cb 01       	movw	r24, r22
     e44:	80 95       	com	r24
     e46:	84 23       	and	r24, r20
     e48:	85 bb       	out	0x15, r24	; 21
     e4a:	08 95       	ret
     e4c:	42 b3       	in	r20, 0x12	; 18
     e4e:	21 e0       	ldi	r18, 0x01	; 1
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	b9 01       	movw	r22, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <DIO_WriteChannel+0x8e>
     e56:	66 0f       	add	r22, r22
     e58:	77 1f       	adc	r23, r23
     e5a:	8a 95       	dec	r24
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <DIO_WriteChannel+0x8a>
     e5e:	cb 01       	movw	r24, r22
     e60:	80 95       	com	r24
     e62:	84 23       	and	r24, r20
     e64:	82 bb       	out	0x12, r24	; 18
     e66:	08 95       	ret
     e68:	43 b1       	in	r20, 0x03	; 3
     e6a:	21 e0       	ldi	r18, 0x01	; 1
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	b9 01       	movw	r22, r18
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <DIO_WriteChannel+0xaa>
     e72:	66 0f       	add	r22, r22
     e74:	77 1f       	adc	r23, r23
     e76:	8a 95       	dec	r24
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <DIO_WriteChannel+0xa6>
     e7a:	cb 01       	movw	r24, r22
     e7c:	80 95       	com	r24
     e7e:	84 23       	and	r24, r20
     e80:	83 b9       	out	0x03, r24	; 3
     e82:	08 95       	ret
     e84:	e2 e6       	ldi	r30, 0x62	; 98
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	40 81       	ld	r20, Z
     e8a:	21 e0       	ldi	r18, 0x01	; 1
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	b9 01       	movw	r22, r18
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <DIO_WriteChannel+0xca>
     e92:	66 0f       	add	r22, r22
     e94:	77 1f       	adc	r23, r23
     e96:	8a 95       	dec	r24
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <DIO_WriteChannel+0xc6>
     e9a:	cb 01       	movw	r24, r22
     e9c:	80 95       	com	r24
     e9e:	84 23       	and	r24, r20
     ea0:	80 83       	st	Z, r24
     ea2:	08 95       	ret
     ea4:	e5 e6       	ldi	r30, 0x65	; 101
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	40 81       	ld	r20, Z
     eaa:	21 e0       	ldi	r18, 0x01	; 1
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	b9 01       	movw	r22, r18
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <DIO_WriteChannel+0xea>
     eb2:	66 0f       	add	r22, r22
     eb4:	77 1f       	adc	r23, r23
     eb6:	8a 95       	dec	r24
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <DIO_WriteChannel+0xe6>
     eba:	cb 01       	movw	r24, r22
     ebc:	80 95       	com	r24
     ebe:	84 23       	and	r24, r20
     ec0:	80 83       	st	Z, r24
     ec2:	08 95       	ret
     ec4:	4e 2f       	mov	r20, r30
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	47 30       	cpi	r20, 0x07	; 7
     eca:	51 05       	cpc	r21, r1
     ecc:	08 f0       	brcs	.+2      	; 0xed0 <DIO_WriteChannel+0x104>
     ece:	63 c0       	rjmp	.+198    	; 0xf96 <DIO_WriteChannel+0x1ca>
     ed0:	fa 01       	movw	r30, r20
     ed2:	e3 5b       	subi	r30, 0xB3	; 179
     ed4:	ff 4f       	sbci	r31, 0xFF	; 255
     ed6:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <__tablejump2__>
     eda:	4b b3       	in	r20, 0x1b	; 27
     edc:	21 e0       	ldi	r18, 0x01	; 1
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	b9 01       	movw	r22, r18
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <DIO_WriteChannel+0x11c>
     ee4:	66 0f       	add	r22, r22
     ee6:	77 1f       	adc	r23, r23
     ee8:	8a 95       	dec	r24
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <DIO_WriteChannel+0x118>
     eec:	cb 01       	movw	r24, r22
     eee:	84 2b       	or	r24, r20
     ef0:	8b bb       	out	0x1b, r24	; 27
     ef2:	08 95       	ret
     ef4:	48 b3       	in	r20, 0x18	; 24
     ef6:	21 e0       	ldi	r18, 0x01	; 1
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	b9 01       	movw	r22, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <DIO_WriteChannel+0x136>
     efe:	66 0f       	add	r22, r22
     f00:	77 1f       	adc	r23, r23
     f02:	8a 95       	dec	r24
     f04:	e2 f7       	brpl	.-8      	; 0xefe <DIO_WriteChannel+0x132>
     f06:	cb 01       	movw	r24, r22
     f08:	84 2b       	or	r24, r20
     f0a:	88 bb       	out	0x18, r24	; 24
     f0c:	08 95       	ret
     f0e:	45 b3       	in	r20, 0x15	; 21
     f10:	21 e0       	ldi	r18, 0x01	; 1
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	b9 01       	movw	r22, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <DIO_WriteChannel+0x150>
     f18:	66 0f       	add	r22, r22
     f1a:	77 1f       	adc	r23, r23
     f1c:	8a 95       	dec	r24
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <DIO_WriteChannel+0x14c>
     f20:	cb 01       	movw	r24, r22
     f22:	84 2b       	or	r24, r20
     f24:	85 bb       	out	0x15, r24	; 21
     f26:	08 95       	ret
     f28:	42 b3       	in	r20, 0x12	; 18
     f2a:	21 e0       	ldi	r18, 0x01	; 1
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	b9 01       	movw	r22, r18
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <DIO_WriteChannel+0x16a>
     f32:	66 0f       	add	r22, r22
     f34:	77 1f       	adc	r23, r23
     f36:	8a 95       	dec	r24
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <DIO_WriteChannel+0x166>
     f3a:	cb 01       	movw	r24, r22
     f3c:	84 2b       	or	r24, r20
     f3e:	82 bb       	out	0x12, r24	; 18
     f40:	08 95       	ret
     f42:	43 b1       	in	r20, 0x03	; 3
     f44:	21 e0       	ldi	r18, 0x01	; 1
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	b9 01       	movw	r22, r18
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <DIO_WriteChannel+0x184>
     f4c:	66 0f       	add	r22, r22
     f4e:	77 1f       	adc	r23, r23
     f50:	8a 95       	dec	r24
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <DIO_WriteChannel+0x180>
     f54:	cb 01       	movw	r24, r22
     f56:	84 2b       	or	r24, r20
     f58:	83 b9       	out	0x03, r24	; 3
     f5a:	08 95       	ret
     f5c:	e2 e6       	ldi	r30, 0x62	; 98
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	40 81       	ld	r20, Z
     f62:	21 e0       	ldi	r18, 0x01	; 1
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	b9 01       	movw	r22, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <DIO_WriteChannel+0x1a2>
     f6a:	66 0f       	add	r22, r22
     f6c:	77 1f       	adc	r23, r23
     f6e:	8a 95       	dec	r24
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <DIO_WriteChannel+0x19e>
     f72:	cb 01       	movw	r24, r22
     f74:	84 2b       	or	r24, r20
     f76:	80 83       	st	Z, r24
     f78:	08 95       	ret
     f7a:	e5 e6       	ldi	r30, 0x65	; 101
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	40 81       	ld	r20, Z
     f80:	21 e0       	ldi	r18, 0x01	; 1
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	b9 01       	movw	r22, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <DIO_WriteChannel+0x1c0>
     f88:	66 0f       	add	r22, r22
     f8a:	77 1f       	adc	r23, r23
     f8c:	8a 95       	dec	r24
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <DIO_WriteChannel+0x1bc>
     f90:	cb 01       	movw	r24, r22
     f92:	84 2b       	or	r24, r20
     f94:	80 83       	st	Z, r24
     f96:	08 95       	ret

00000f98 <DIO_ConfigChannel>:
     f98:	e8 2f       	mov	r30, r24
     f9a:	e6 95       	lsr	r30
     f9c:	e6 95       	lsr	r30
     f9e:	e6 95       	lsr	r30
     fa0:	87 70       	andi	r24, 0x07	; 7
     fa2:	66 23       	and	r22, r22
     fa4:	21 f0       	breq	.+8      	; 0xfae <DIO_ConfigChannel+0x16>
     fa6:	61 30       	cpi	r22, 0x01	; 1
     fa8:	09 f4       	brne	.+2      	; 0xfac <DIO_ConfigChannel+0x14>
     faa:	72 c0       	rjmp	.+228    	; 0x1090 <__DATA_REGION_LENGTH__+0x90>
     fac:	08 95       	ret
     fae:	4e 2f       	mov	r20, r30
     fb0:	50 e0       	ldi	r21, 0x00	; 0
     fb2:	47 30       	cpi	r20, 0x07	; 7
     fb4:	51 05       	cpc	r21, r1
     fb6:	08 f0       	brcs	.+2      	; 0xfba <DIO_ConfigChannel+0x22>
     fb8:	d4 c0       	rjmp	.+424    	; 0x1162 <__stack+0x63>
     fba:	fa 01       	movw	r30, r20
     fbc:	ec 5a       	subi	r30, 0xAC	; 172
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <__tablejump2__>
     fc4:	4a b3       	in	r20, 0x1a	; 26
     fc6:	21 e0       	ldi	r18, 0x01	; 1
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	b9 01       	movw	r22, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <DIO_ConfigChannel+0x3a>
     fce:	66 0f       	add	r22, r22
     fd0:	77 1f       	adc	r23, r23
     fd2:	8a 95       	dec	r24
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <DIO_ConfigChannel+0x36>
     fd6:	cb 01       	movw	r24, r22
     fd8:	80 95       	com	r24
     fda:	84 23       	and	r24, r20
     fdc:	8a bb       	out	0x1a, r24	; 26
     fde:	08 95       	ret
     fe0:	47 b3       	in	r20, 0x17	; 23
     fe2:	21 e0       	ldi	r18, 0x01	; 1
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	b9 01       	movw	r22, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <DIO_ConfigChannel+0x56>
     fea:	66 0f       	add	r22, r22
     fec:	77 1f       	adc	r23, r23
     fee:	8a 95       	dec	r24
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <DIO_ConfigChannel+0x52>
     ff2:	cb 01       	movw	r24, r22
     ff4:	80 95       	com	r24
     ff6:	84 23       	and	r24, r20
     ff8:	87 bb       	out	0x17, r24	; 23
     ffa:	08 95       	ret
     ffc:	44 b3       	in	r20, 0x14	; 20
     ffe:	21 e0       	ldi	r18, 0x01	; 1
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	b9 01       	movw	r22, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <__DATA_REGION_LENGTH__+0xa>
    1006:	66 0f       	add	r22, r22
    1008:	77 1f       	adc	r23, r23
    100a:	8a 95       	dec	r24
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <__DATA_REGION_LENGTH__+0x6>
    100e:	cb 01       	movw	r24, r22
    1010:	80 95       	com	r24
    1012:	84 23       	and	r24, r20
    1014:	84 bb       	out	0x14, r24	; 20
    1016:	08 95       	ret
    1018:	41 b3       	in	r20, 0x11	; 17
    101a:	21 e0       	ldi	r18, 0x01	; 1
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	b9 01       	movw	r22, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <__DATA_REGION_LENGTH__+0x26>
    1022:	66 0f       	add	r22, r22
    1024:	77 1f       	adc	r23, r23
    1026:	8a 95       	dec	r24
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
    102a:	cb 01       	movw	r24, r22
    102c:	80 95       	com	r24
    102e:	84 23       	and	r24, r20
    1030:	81 bb       	out	0x11, r24	; 17
    1032:	08 95       	ret
    1034:	42 b1       	in	r20, 0x02	; 2
    1036:	21 e0       	ldi	r18, 0x01	; 1
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	b9 01       	movw	r22, r18
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <__DATA_REGION_LENGTH__+0x42>
    103e:	66 0f       	add	r22, r22
    1040:	77 1f       	adc	r23, r23
    1042:	8a 95       	dec	r24
    1044:	e2 f7       	brpl	.-8      	; 0x103e <__DATA_REGION_LENGTH__+0x3e>
    1046:	cb 01       	movw	r24, r22
    1048:	80 95       	com	r24
    104a:	84 23       	and	r24, r20
    104c:	82 b9       	out	0x02, r24	; 2
    104e:	08 95       	ret
    1050:	e1 e6       	ldi	r30, 0x61	; 97
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	40 81       	ld	r20, Z
    1056:	21 e0       	ldi	r18, 0x01	; 1
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	b9 01       	movw	r22, r18
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <__DATA_REGION_LENGTH__+0x62>
    105e:	66 0f       	add	r22, r22
    1060:	77 1f       	adc	r23, r23
    1062:	8a 95       	dec	r24
    1064:	e2 f7       	brpl	.-8      	; 0x105e <__DATA_REGION_LENGTH__+0x5e>
    1066:	cb 01       	movw	r24, r22
    1068:	80 95       	com	r24
    106a:	84 23       	and	r24, r20
    106c:	80 83       	st	Z, r24
    106e:	08 95       	ret
    1070:	e4 e6       	ldi	r30, 0x64	; 100
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	40 81       	ld	r20, Z
    1076:	21 e0       	ldi	r18, 0x01	; 1
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	b9 01       	movw	r22, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <__DATA_REGION_LENGTH__+0x82>
    107e:	66 0f       	add	r22, r22
    1080:	77 1f       	adc	r23, r23
    1082:	8a 95       	dec	r24
    1084:	e2 f7       	brpl	.-8      	; 0x107e <__DATA_REGION_LENGTH__+0x7e>
    1086:	cb 01       	movw	r24, r22
    1088:	80 95       	com	r24
    108a:	84 23       	and	r24, r20
    108c:	80 83       	st	Z, r24
    108e:	08 95       	ret
    1090:	4e 2f       	mov	r20, r30
    1092:	50 e0       	ldi	r21, 0x00	; 0
    1094:	47 30       	cpi	r20, 0x07	; 7
    1096:	51 05       	cpc	r21, r1
    1098:	08 f0       	brcs	.+2      	; 0x109c <__DATA_REGION_LENGTH__+0x9c>
    109a:	63 c0       	rjmp	.+198    	; 0x1162 <__stack+0x63>
    109c:	fa 01       	movw	r30, r20
    109e:	e5 5a       	subi	r30, 0xA5	; 165
    10a0:	ff 4f       	sbci	r31, 0xFF	; 255
    10a2:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <__tablejump2__>
    10a6:	4a b3       	in	r20, 0x1a	; 26
    10a8:	21 e0       	ldi	r18, 0x01	; 1
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	b9 01       	movw	r22, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <__DATA_REGION_LENGTH__+0xb4>
    10b0:	66 0f       	add	r22, r22
    10b2:	77 1f       	adc	r23, r23
    10b4:	8a 95       	dec	r24
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <__DATA_REGION_LENGTH__+0xb0>
    10b8:	cb 01       	movw	r24, r22
    10ba:	84 2b       	or	r24, r20
    10bc:	8a bb       	out	0x1a, r24	; 26
    10be:	08 95       	ret
    10c0:	47 b3       	in	r20, 0x17	; 23
    10c2:	21 e0       	ldi	r18, 0x01	; 1
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	b9 01       	movw	r22, r18
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <__DATA_REGION_LENGTH__+0xce>
    10ca:	66 0f       	add	r22, r22
    10cc:	77 1f       	adc	r23, r23
    10ce:	8a 95       	dec	r24
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <__DATA_REGION_LENGTH__+0xca>
    10d2:	cb 01       	movw	r24, r22
    10d4:	84 2b       	or	r24, r20
    10d6:	87 bb       	out	0x17, r24	; 23
    10d8:	08 95       	ret
    10da:	44 b3       	in	r20, 0x14	; 20
    10dc:	21 e0       	ldi	r18, 0x01	; 1
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	b9 01       	movw	r22, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <__DATA_REGION_LENGTH__+0xe8>
    10e4:	66 0f       	add	r22, r22
    10e6:	77 1f       	adc	r23, r23
    10e8:	8a 95       	dec	r24
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <__DATA_REGION_LENGTH__+0xe4>
    10ec:	cb 01       	movw	r24, r22
    10ee:	84 2b       	or	r24, r20
    10f0:	84 bb       	out	0x14, r24	; 20
    10f2:	08 95       	ret
    10f4:	41 b3       	in	r20, 0x11	; 17
    10f6:	21 e0       	ldi	r18, 0x01	; 1
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	b9 01       	movw	r22, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <__stack+0x3>
    10fe:	66 0f       	add	r22, r22
    1100:	77 1f       	adc	r23, r23
    1102:	8a 95       	dec	r24
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <__DATA_REGION_LENGTH__+0xfe>
    1106:	cb 01       	movw	r24, r22
    1108:	84 2b       	or	r24, r20
    110a:	81 bb       	out	0x11, r24	; 17
    110c:	08 95       	ret
    110e:	42 b1       	in	r20, 0x02	; 2
    1110:	21 e0       	ldi	r18, 0x01	; 1
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	b9 01       	movw	r22, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <__stack+0x1d>
    1118:	66 0f       	add	r22, r22
    111a:	77 1f       	adc	r23, r23
    111c:	8a 95       	dec	r24
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <__stack+0x19>
    1120:	cb 01       	movw	r24, r22
    1122:	84 2b       	or	r24, r20
    1124:	82 b9       	out	0x02, r24	; 2
    1126:	08 95       	ret
    1128:	e1 e6       	ldi	r30, 0x61	; 97
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	40 81       	ld	r20, Z
    112e:	21 e0       	ldi	r18, 0x01	; 1
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	b9 01       	movw	r22, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <__stack+0x3b>
    1136:	66 0f       	add	r22, r22
    1138:	77 1f       	adc	r23, r23
    113a:	8a 95       	dec	r24
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <__stack+0x37>
    113e:	cb 01       	movw	r24, r22
    1140:	84 2b       	or	r24, r20
    1142:	80 83       	st	Z, r24
    1144:	08 95       	ret
    1146:	e4 e6       	ldi	r30, 0x64	; 100
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	40 81       	ld	r20, Z
    114c:	21 e0       	ldi	r18, 0x01	; 1
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	b9 01       	movw	r22, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <__stack+0x59>
    1154:	66 0f       	add	r22, r22
    1156:	77 1f       	adc	r23, r23
    1158:	8a 95       	dec	r24
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <__stack+0x55>
    115c:	cb 01       	movw	r24, r22
    115e:	84 2b       	or	r24, r20
    1160:	80 83       	st	Z, r24
    1162:	08 95       	ret

00001164 <DIO_WritePort>:
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	87 30       	cpi	r24, 0x07	; 7
    1168:	91 05       	cpc	r25, r1
    116a:	a0 f4       	brcc	.+40     	; 0x1194 <DIO_WritePort+0x30>
    116c:	fc 01       	movw	r30, r24
    116e:	ee 59       	subi	r30, 0x9E	; 158
    1170:	ff 4f       	sbci	r31, 0xFF	; 255
    1172:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <__tablejump2__>
    1176:	6b bb       	out	0x1b, r22	; 27
    1178:	08 95       	ret
    117a:	68 bb       	out	0x18, r22	; 24
    117c:	08 95       	ret
    117e:	65 bb       	out	0x15, r22	; 21
    1180:	08 95       	ret
    1182:	62 bb       	out	0x12, r22	; 18
    1184:	08 95       	ret
    1186:	63 b9       	out	0x03, r22	; 3
    1188:	08 95       	ret
    118a:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    118e:	08 95       	ret
    1190:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
    1194:	08 95       	ret

00001196 <DIO_ConfigPort>:
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	87 30       	cpi	r24, 0x07	; 7
    119a:	91 05       	cpc	r25, r1
    119c:	a0 f4       	brcc	.+40     	; 0x11c6 <DIO_ConfigPort+0x30>
    119e:	fc 01       	movw	r30, r24
    11a0:	e7 59       	subi	r30, 0x97	; 151
    11a2:	ff 4f       	sbci	r31, 0xFF	; 255
    11a4:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <__tablejump2__>
    11a8:	6a bb       	out	0x1a, r22	; 26
    11aa:	08 95       	ret
    11ac:	67 bb       	out	0x17, r22	; 23
    11ae:	08 95       	ret
    11b0:	64 bb       	out	0x14, r22	; 20
    11b2:	08 95       	ret
    11b4:	61 bb       	out	0x11, r22	; 17
    11b6:	08 95       	ret
    11b8:	62 b9       	out	0x02, r22	; 2
    11ba:	08 95       	ret
    11bc:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    11c0:	08 95       	ret
    11c2:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    11c6:	08 95       	ret

000011c8 <DIO_WriteHighNibble>:
	}
}

void DIO_WriteHighNibble(DIO_PortTypes PortID, u_int8 NibbleValue)
{
	NibbleValue &= 0xF0;
    11c8:	60 7f       	andi	r22, 0xF0	; 240
	switch(PortID)
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	87 30       	cpi	r24, 0x07	; 7
    11ce:	91 05       	cpc	r25, r1
    11d0:	c8 f5       	brcc	.+114    	; 0x1244 <DIO_WriteHighNibble+0x7c>
    11d2:	fc 01       	movw	r30, r24
    11d4:	e0 59       	subi	r30, 0x90	; 144
    11d6:	ff 4f       	sbci	r31, 0xFF	; 255
    11d8:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <__tablejump2__>
	{
		case DIO_PortA:
		{
			PORTA_Register &= 0x0F;
    11dc:	8b b3       	in	r24, 0x1b	; 27
    11de:	8f 70       	andi	r24, 0x0F	; 15
    11e0:	8b bb       	out	0x1b, r24	; 27
			PORTA_Register |= NibbleValue;
    11e2:	8b b3       	in	r24, 0x1b	; 27
    11e4:	68 2b       	or	r22, r24
    11e6:	6b bb       	out	0x1b, r22	; 27
			break;
    11e8:	08 95       	ret
		}
		case DIO_PortB:
		{
			PORTB_Register &= 0x0F;
    11ea:	88 b3       	in	r24, 0x18	; 24
    11ec:	8f 70       	andi	r24, 0x0F	; 15
    11ee:	88 bb       	out	0x18, r24	; 24
			PORTB_Register |= NibbleValue;
    11f0:	88 b3       	in	r24, 0x18	; 24
    11f2:	68 2b       	or	r22, r24
    11f4:	68 bb       	out	0x18, r22	; 24
			break;
    11f6:	08 95       	ret
		}
		case DIO_PortC:
		{
			PORTC_Register &= 0x0F;
    11f8:	85 b3       	in	r24, 0x15	; 21
    11fa:	8f 70       	andi	r24, 0x0F	; 15
    11fc:	85 bb       	out	0x15, r24	; 21
			PORTC_Register |= NibbleValue;
    11fe:	85 b3       	in	r24, 0x15	; 21
    1200:	68 2b       	or	r22, r24
    1202:	65 bb       	out	0x15, r22	; 21
			break;
    1204:	08 95       	ret
		}
		case DIO_PortD:
		{
			PORTD_Register &= 0x0F;
    1206:	82 b3       	in	r24, 0x12	; 18
    1208:	8f 70       	andi	r24, 0x0F	; 15
    120a:	82 bb       	out	0x12, r24	; 18
			PORTD_Register |= NibbleValue;
    120c:	82 b3       	in	r24, 0x12	; 18
    120e:	68 2b       	or	r22, r24
    1210:	62 bb       	out	0x12, r22	; 18
			break;
    1212:	08 95       	ret
		}
		case DIO_PortE:
		{
			PORTE_Register &= 0x0F;
    1214:	83 b1       	in	r24, 0x03	; 3
    1216:	8f 70       	andi	r24, 0x0F	; 15
    1218:	83 b9       	out	0x03, r24	; 3
			PORTE_Register |= NibbleValue;
    121a:	83 b1       	in	r24, 0x03	; 3
    121c:	68 2b       	or	r22, r24
    121e:	63 b9       	out	0x03, r22	; 3
			break;
    1220:	08 95       	ret
		}
		case DIO_PortF:
		{
			PORTF_Register &= 0x0F;
    1222:	e2 e6       	ldi	r30, 0x62	; 98
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	8f 70       	andi	r24, 0x0F	; 15
    122a:	80 83       	st	Z, r24
			PORTF_Register |= NibbleValue;
    122c:	80 81       	ld	r24, Z
    122e:	68 2b       	or	r22, r24
    1230:	60 83       	st	Z, r22
			break;
    1232:	08 95       	ret
		}
		case DIO_PortG:
		{
			PORTG_Register &= 0x0F;
    1234:	e5 e6       	ldi	r30, 0x65	; 101
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	8f 70       	andi	r24, 0x0F	; 15
    123c:	80 83       	st	Z, r24
			PORTG_Register |= NibbleValue;
    123e:	80 81       	ld	r24, Z
    1240:	68 2b       	or	r22, r24
    1242:	60 83       	st	Z, r22
    1244:	08 95       	ret

00001246 <EXT_INTERRUPTS_STATE>:
#include "EXTI.h"

void EXT_INTERRUPTS_STATE(EXT_INTERRUPT_Types INTERRUPT_NO,EXT_INTERRUPT_STATE_Types STATE)
{
	switch(STATE)
    1246:	66 23       	and	r22, r22
    1248:	19 f0       	breq	.+6      	; 0x1250 <EXT_INTERRUPTS_STATE+0xa>
    124a:	61 30       	cpi	r22, 0x01	; 1
    124c:	59 f1       	breq	.+86     	; 0x12a4 <EXT_INTERRUPTS_STATE+0x5e>
    124e:	08 95       	ret
	{
		case EXT_INTERRUPT_ENABLE:
		{
			switch(INTERRUPT_NO)
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	88 30       	cpi	r24, 0x08	; 8
    1254:	91 05       	cpc	r25, r1
    1256:	08 f0       	brcs	.+2      	; 0x125a <EXT_INTERRUPTS_STATE+0x14>
    1258:	4d c0       	rjmp	.+154    	; 0x12f4 <EXT_INTERRUPTS_STATE+0xae>
    125a:	fc 01       	movw	r30, r24
    125c:	e9 58       	subi	r30, 0x89	; 137
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <__tablejump2__>
			{
				case EXT_INTERRUPT0:
					SetBit(EIMSK_Register, INT0);
    1264:	89 b7       	in	r24, 0x39	; 57
    1266:	81 60       	ori	r24, 0x01	; 1
    1268:	89 bf       	out	0x39, r24	; 57
					break;
    126a:	08 95       	ret
				case EXT_INTERRUPT1:
					SetBit(EIMSK_Register, INT1);
    126c:	89 b7       	in	r24, 0x39	; 57
    126e:	82 60       	ori	r24, 0x02	; 2
    1270:	89 bf       	out	0x39, r24	; 57
					break;
    1272:	08 95       	ret
				case EXT_INTERRUPT2:
					SetBit(EIMSK_Register, INT2);
    1274:	89 b7       	in	r24, 0x39	; 57
    1276:	84 60       	ori	r24, 0x04	; 4
    1278:	89 bf       	out	0x39, r24	; 57
					break;
    127a:	08 95       	ret
				case EXT_INTERRUPT3:
					SetBit(EIMSK_Register, INT3);
    127c:	89 b7       	in	r24, 0x39	; 57
    127e:	88 60       	ori	r24, 0x08	; 8
    1280:	89 bf       	out	0x39, r24	; 57
					break;
    1282:	08 95       	ret
				case EXT_INTERRUPT4:
					SetBit(EIMSK_Register, INT4);
    1284:	89 b7       	in	r24, 0x39	; 57
    1286:	80 61       	ori	r24, 0x10	; 16
    1288:	89 bf       	out	0x39, r24	; 57
					break;
    128a:	08 95       	ret
				case EXT_INTERRUPT5:
					SetBit(EIMSK_Register, INT5);
    128c:	89 b7       	in	r24, 0x39	; 57
    128e:	80 62       	ori	r24, 0x20	; 32
    1290:	89 bf       	out	0x39, r24	; 57
					break;
    1292:	08 95       	ret
				case EXT_INTERRUPT6:
					SetBit(EIMSK_Register, INT6);
    1294:	89 b7       	in	r24, 0x39	; 57
    1296:	80 64       	ori	r24, 0x40	; 64
    1298:	89 bf       	out	0x39, r24	; 57
					break;
    129a:	08 95       	ret
				case EXT_INTERRUPT7:
					SetBit(EIMSK_Register, INT7);
    129c:	89 b7       	in	r24, 0x39	; 57
    129e:	80 68       	ori	r24, 0x80	; 128
    12a0:	89 bf       	out	0x39, r24	; 57
					break;
    12a2:	08 95       	ret
			}
			break;
		}
		case EXT_INTERRUPT_DISABLE:
		{
			switch(INTERRUPT_NO)
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	88 30       	cpi	r24, 0x08	; 8
    12a8:	91 05       	cpc	r25, r1
    12aa:	20 f5       	brcc	.+72     	; 0x12f4 <EXT_INTERRUPTS_STATE+0xae>
    12ac:	fc 01       	movw	r30, r24
    12ae:	e1 58       	subi	r30, 0x81	; 129
    12b0:	ff 4f       	sbci	r31, 0xFF	; 255
    12b2:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <__tablejump2__>
			{
				case EXT_INTERRUPT0:
					ClearBit(EIMSK_Register, INT0);
    12b6:	89 b7       	in	r24, 0x39	; 57
    12b8:	8e 7f       	andi	r24, 0xFE	; 254
    12ba:	89 bf       	out	0x39, r24	; 57
					break;
    12bc:	08 95       	ret
				case EXT_INTERRUPT1:
					ClearBit(EIMSK_Register, INT1);
    12be:	89 b7       	in	r24, 0x39	; 57
    12c0:	8d 7f       	andi	r24, 0xFD	; 253
    12c2:	89 bf       	out	0x39, r24	; 57
					break;
    12c4:	08 95       	ret
				case EXT_INTERRUPT2:
					ClearBit(EIMSK_Register, INT2);
    12c6:	89 b7       	in	r24, 0x39	; 57
    12c8:	8b 7f       	andi	r24, 0xFB	; 251
    12ca:	89 bf       	out	0x39, r24	; 57
					break;
    12cc:	08 95       	ret
				case EXT_INTERRUPT3:
					ClearBit(EIMSK_Register, INT3);
    12ce:	89 b7       	in	r24, 0x39	; 57
    12d0:	87 7f       	andi	r24, 0xF7	; 247
    12d2:	89 bf       	out	0x39, r24	; 57
					break;
    12d4:	08 95       	ret
				case EXT_INTERRUPT4:
					ClearBit(EIMSK_Register, INT4);
    12d6:	89 b7       	in	r24, 0x39	; 57
    12d8:	8f 7e       	andi	r24, 0xEF	; 239
    12da:	89 bf       	out	0x39, r24	; 57
					break;
    12dc:	08 95       	ret
				case EXT_INTERRUPT5:
					ClearBit(EIMSK_Register, INT5);
    12de:	89 b7       	in	r24, 0x39	; 57
    12e0:	8f 7d       	andi	r24, 0xDF	; 223
    12e2:	89 bf       	out	0x39, r24	; 57
					break;
    12e4:	08 95       	ret
				case EXT_INTERRUPT6:
					ClearBit(EIMSK_Register, INT6);
    12e6:	89 b7       	in	r24, 0x39	; 57
    12e8:	8f 7b       	andi	r24, 0xBF	; 191
    12ea:	89 bf       	out	0x39, r24	; 57
					break;
    12ec:	08 95       	ret
				case EXT_INTERRUPT7:
					ClearBit(EIMSK_Register, INT7);
    12ee:	89 b7       	in	r24, 0x39	; 57
    12f0:	8f 77       	andi	r24, 0x7F	; 127
    12f2:	89 bf       	out	0x39, r24	; 57
    12f4:	08 95       	ret

000012f6 <EXT_INTERRUPTS_SNCONTROL_MODE>:
	}
}

void EXT_INTERRUPTS_SNCONTROL_MODE(EXT_INTERRUPT_Types INTERRUPT_NO,SNC_MODE_Types MODE)
{
	switch(INTERRUPT_NO)
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	88 30       	cpi	r24, 0x08	; 8
    12fa:	91 05       	cpc	r25, r1
    12fc:	08 f0       	brcs	.+2      	; 0x1300 <EXT_INTERRUPTS_SNCONTROL_MODE+0xa>
    12fe:	46 c0       	rjmp	.+140    	; 0x138c <EXT_INTERRUPTS_SNCONTROL_MODE+0x96>
    1300:	fc 01       	movw	r30, r24
    1302:	e9 57       	subi	r30, 0x79	; 121
    1304:	ff 4f       	sbci	r31, 0xFF	; 255
    1306:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <__tablejump2__>
	{
		case EXT_INTERRUPT0:
			EICRA_Register |= (MODE << ISC00);
    130a:	ea e6       	ldi	r30, 0x6A	; 106
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	68 2b       	or	r22, r24
    1312:	60 83       	st	Z, r22
			break;
    1314:	08 95       	ret
		case EXT_INTERRUPT1:
			EICRA_Register |= (MODE << ISC10);
    1316:	ea e6       	ldi	r30, 0x6A	; 106
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	70 e0       	ldi	r23, 0x00	; 0
    131e:	66 0f       	add	r22, r22
    1320:	77 1f       	adc	r23, r23
    1322:	66 0f       	add	r22, r22
    1324:	77 1f       	adc	r23, r23
    1326:	68 2b       	or	r22, r24
    1328:	60 83       	st	Z, r22
			break;
    132a:	08 95       	ret
		case EXT_INTERRUPT2:
			EICRA_Register |= (MODE << ISC20);
    132c:	ea e6       	ldi	r30, 0x6A	; 106
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	90 e1       	ldi	r25, 0x10	; 16
    1334:	69 9f       	mul	r22, r25
    1336:	b0 01       	movw	r22, r0
    1338:	11 24       	eor	r1, r1
    133a:	68 2b       	or	r22, r24
    133c:	60 83       	st	Z, r22
			break;
    133e:	08 95       	ret
		case EXT_INTERRUPT3:
			EICRA_Register |= (MODE << ISC30);
    1340:	ea e6       	ldi	r30, 0x6A	; 106
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	90 e4       	ldi	r25, 0x40	; 64
    1348:	69 9f       	mul	r22, r25
    134a:	b0 01       	movw	r22, r0
    134c:	11 24       	eor	r1, r1
    134e:	68 2b       	or	r22, r24
    1350:	60 83       	st	Z, r22
			break;
    1352:	08 95       	ret
		case EXT_INTERRUPT4:
			EICRB_Register |= (MODE << ISC40);
    1354:	8a b7       	in	r24, 0x3a	; 58
    1356:	68 2b       	or	r22, r24
    1358:	6a bf       	out	0x3a, r22	; 58
			break;
    135a:	08 95       	ret
		case EXT_INTERRUPT5:
			EICRB_Register |= (MODE << ISC50);
    135c:	8a b7       	in	r24, 0x3a	; 58
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	66 0f       	add	r22, r22
    1362:	77 1f       	adc	r23, r23
    1364:	66 0f       	add	r22, r22
    1366:	77 1f       	adc	r23, r23
    1368:	68 2b       	or	r22, r24
    136a:	6a bf       	out	0x3a, r22	; 58
			break;
    136c:	08 95       	ret
		case EXT_INTERRUPT6:
			EICRB_Register |= (MODE << ISC60);
    136e:	8a b7       	in	r24, 0x3a	; 58
    1370:	90 e1       	ldi	r25, 0x10	; 16
    1372:	69 9f       	mul	r22, r25
    1374:	b0 01       	movw	r22, r0
    1376:	11 24       	eor	r1, r1
    1378:	68 2b       	or	r22, r24
    137a:	6a bf       	out	0x3a, r22	; 58
			break;
    137c:	08 95       	ret
		case EXT_INTERRUPT7:
			EICRB_Register |= (MODE << ISC70);
    137e:	8a b7       	in	r24, 0x3a	; 58
    1380:	90 e4       	ldi	r25, 0x40	; 64
    1382:	69 9f       	mul	r22, r25
    1384:	b0 01       	movw	r22, r0
    1386:	11 24       	eor	r1, r1
    1388:	68 2b       	or	r22, r24
    138a:	6a bf       	out	0x3a, r22	; 58
    138c:	08 95       	ret

0000138e <GIE_Disable>:
#include "GIE.h"

void GIE_Disable(void)
{
	ClearBit(GIE_SREG, GIE_SREG_IBIT);
    138e:	8f b7       	in	r24, 0x3f	; 63
    1390:	8f 77       	andi	r24, 0x7F	; 127
    1392:	8f bf       	out	0x3f, r24	; 63
    1394:	08 95       	ret

00001396 <GIE_Enable>:
}

void GIE_Enable(void)
{
	SetBit(GIE_SREG, GIE_SREG_IBIT);
    1396:	8f b7       	in	r24, 0x3f	; 63
    1398:	80 68       	ori	r24, 0x80	; 128
    139a:	8f bf       	out	0x3f, r24	; 63
    139c:	08 95       	ret

0000139e <SPI_Init>:
	{
		SPI_Master_TransmitChar(*String);
		_delay_ms(150);
		String++;
	}
}
    139e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <SPI_CFG>
    13a2:	88 23       	and	r24, r24
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <SPI_Init+0xa>
    13a6:	47 c0       	rjmp	.+142    	; 0x1436 <SPI_Init+0x98>
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	09 f0       	breq	.+2      	; 0x13ae <SPI_Init+0x10>
    13ac:	84 c0       	rjmp	.+264    	; 0x14b6 <SPI_Init+0x118>
    13ae:	61 e0       	ldi	r22, 0x01	; 1
    13b0:	8a e0       	ldi	r24, 0x0A	; 10
    13b2:	f2 dd       	rcall	.-1052   	; 0xf98 <DIO_ConfigChannel>
    13b4:	61 e0       	ldi	r22, 0x01	; 1
    13b6:	89 e0       	ldi	r24, 0x09	; 9
    13b8:	ef dd       	rcall	.-1058   	; 0xf98 <DIO_ConfigChannel>
    13ba:	61 e0       	ldi	r22, 0x01	; 1
    13bc:	88 e0       	ldi	r24, 0x08	; 8
    13be:	ec dd       	rcall	.-1064   	; 0xf98 <DIO_ConfigChannel>
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	8b e0       	ldi	r24, 0x0B	; 11
    13c4:	e9 dd       	rcall	.-1070   	; 0xf98 <DIO_ConfigChannel>
    13c6:	61 e0       	ldi	r22, 0x01	; 1
    13c8:	88 e0       	ldi	r24, 0x08	; 8
    13ca:	00 dd       	rcall	.-1536   	; 0xdcc <DIO_WriteChannel>
    13cc:	2d b1       	in	r18, 0x0d	; 13
    13ce:	e9 e0       	ldi	r30, 0x09	; 9
    13d0:	f1 e0       	ldi	r31, 0x01	; 1
    13d2:	90 81       	ld	r25, Z
    13d4:	30 e1       	ldi	r19, 0x10	; 16
    13d6:	93 9f       	mul	r25, r19
    13d8:	c0 01       	movw	r24, r0
    13da:	11 24       	eor	r1, r1
    13dc:	82 2b       	or	r24, r18
    13de:	8d b9       	out	0x0d, r24	; 13
    13e0:	9e b1       	in	r25, 0x0e	; 14
    13e2:	82 81       	ldd	r24, Z+2	; 0x02
    13e4:	89 2b       	or	r24, r25
    13e6:	8e b9       	out	0x0e, r24	; 14
    13e8:	9d b1       	in	r25, 0x0d	; 13
    13ea:	81 81       	ldd	r24, Z+1	; 0x01
    13ec:	89 2b       	or	r24, r25
    13ee:	8d b9       	out	0x0d, r24	; 13
    13f0:	2d b1       	in	r18, 0x0d	; 13
    13f2:	93 81       	ldd	r25, Z+3	; 0x03
    13f4:	30 e2       	ldi	r19, 0x20	; 32
    13f6:	93 9f       	mul	r25, r19
    13f8:	c0 01       	movw	r24, r0
    13fa:	11 24       	eor	r1, r1
    13fc:	82 2b       	or	r24, r18
    13fe:	8d b9       	out	0x0d, r24	; 13
    1400:	2d b1       	in	r18, 0x0d	; 13
    1402:	94 81       	ldd	r25, Z+4	; 0x04
    1404:	30 e8       	ldi	r19, 0x80	; 128
    1406:	93 9f       	mul	r25, r19
    1408:	c0 01       	movw	r24, r0
    140a:	11 24       	eor	r1, r1
    140c:	82 2b       	or	r24, r18
    140e:	8d b9       	out	0x0d, r24	; 13
    1410:	2d b1       	in	r18, 0x0d	; 13
    1412:	96 81       	ldd	r25, Z+6	; 0x06
    1414:	89 2f       	mov	r24, r25
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	82 2b       	or	r24, r18
    1422:	8d b9       	out	0x0d, r24	; 13
    1424:	2d b1       	in	r18, 0x0d	; 13
    1426:	95 81       	ldd	r25, Z+5	; 0x05
    1428:	30 e4       	ldi	r19, 0x40	; 64
    142a:	93 9f       	mul	r25, r19
    142c:	c0 01       	movw	r24, r0
    142e:	11 24       	eor	r1, r1
    1430:	82 2b       	or	r24, r18
    1432:	8d b9       	out	0x0d, r24	; 13
    1434:	08 95       	ret
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	8a e0       	ldi	r24, 0x0A	; 10
    143a:	ae dd       	rcall	.-1188   	; 0xf98 <DIO_ConfigChannel>
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	89 e0       	ldi	r24, 0x09	; 9
    1440:	ab dd       	rcall	.-1194   	; 0xf98 <DIO_ConfigChannel>
    1442:	60 e0       	ldi	r22, 0x00	; 0
    1444:	88 e0       	ldi	r24, 0x08	; 8
    1446:	a8 dd       	rcall	.-1200   	; 0xf98 <DIO_ConfigChannel>
    1448:	61 e0       	ldi	r22, 0x01	; 1
    144a:	8b e0       	ldi	r24, 0x0B	; 11
    144c:	a5 dd       	rcall	.-1206   	; 0xf98 <DIO_ConfigChannel>
    144e:	2d b1       	in	r18, 0x0d	; 13
    1450:	e9 e0       	ldi	r30, 0x09	; 9
    1452:	f1 e0       	ldi	r31, 0x01	; 1
    1454:	90 81       	ld	r25, Z
    1456:	30 e1       	ldi	r19, 0x10	; 16
    1458:	93 9f       	mul	r25, r19
    145a:	c0 01       	movw	r24, r0
    145c:	11 24       	eor	r1, r1
    145e:	82 2b       	or	r24, r18
    1460:	8d b9       	out	0x0d, r24	; 13
    1462:	9e b1       	in	r25, 0x0e	; 14
    1464:	82 81       	ldd	r24, Z+2	; 0x02
    1466:	89 2b       	or	r24, r25
    1468:	8e b9       	out	0x0e, r24	; 14
    146a:	9d b1       	in	r25, 0x0d	; 13
    146c:	81 81       	ldd	r24, Z+1	; 0x01
    146e:	89 2b       	or	r24, r25
    1470:	8d b9       	out	0x0d, r24	; 13
    1472:	2d b1       	in	r18, 0x0d	; 13
    1474:	93 81       	ldd	r25, Z+3	; 0x03
    1476:	30 e2       	ldi	r19, 0x20	; 32
    1478:	93 9f       	mul	r25, r19
    147a:	c0 01       	movw	r24, r0
    147c:	11 24       	eor	r1, r1
    147e:	82 2b       	or	r24, r18
    1480:	8d b9       	out	0x0d, r24	; 13
    1482:	2d b1       	in	r18, 0x0d	; 13
    1484:	94 81       	ldd	r25, Z+4	; 0x04
    1486:	30 e8       	ldi	r19, 0x80	; 128
    1488:	93 9f       	mul	r25, r19
    148a:	c0 01       	movw	r24, r0
    148c:	11 24       	eor	r1, r1
    148e:	82 2b       	or	r24, r18
    1490:	8d b9       	out	0x0d, r24	; 13
    1492:	2d b1       	in	r18, 0x0d	; 13
    1494:	96 81       	ldd	r25, Z+6	; 0x06
    1496:	89 2f       	mov	r24, r25
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	82 2b       	or	r24, r18
    14a4:	8d b9       	out	0x0d, r24	; 13
    14a6:	2d b1       	in	r18, 0x0d	; 13
    14a8:	95 81       	ldd	r25, Z+5	; 0x05
    14aa:	30 e4       	ldi	r19, 0x40	; 64
    14ac:	93 9f       	mul	r25, r19
    14ae:	c0 01       	movw	r24, r0
    14b0:	11 24       	eor	r1, r1
    14b2:	82 2b       	or	r24, r18
    14b4:	8d b9       	out	0x0d, r24	; 13
    14b6:	08 95       	ret

000014b8 <SPI_Master_TransmitChar>:
    14b8:	8f b9       	out	0x0f, r24	; 15
    14ba:	77 9b       	sbis	0x0e, 7	; 14
    14bc:	fe cf       	rjmp	.-4      	; 0x14ba <SPI_Master_TransmitChar+0x2>
    14be:	8f b1       	in	r24, 0x0f	; 15
    14c0:	08 95       	ret

000014c2 <SPI_Cannel_State>:

void SPI_Cannel_State(DIO_ChannelTypes ChannelID,SPI_State State)
{
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	c8 2f       	mov	r28, r24
    14c8:	d6 2f       	mov	r29, r22
	DIO_ConfigChannel(ChannelID,OUTPUT);
    14ca:	61 e0       	ldi	r22, 0x01	; 1
    14cc:	65 dd       	rcall	.-1334   	; 0xf98 <DIO_ConfigChannel>
	switch (State)
    14ce:	dd 23       	and	r29, r29
    14d0:	19 f0       	breq	.+6      	; 0x14d8 <SPI_Cannel_State+0x16>
    14d2:	d1 30       	cpi	r29, 0x01	; 1
    14d4:	29 f0       	breq	.+10     	; 0x14e0 <SPI_Cannel_State+0x1e>
    14d6:	07 c0       	rjmp	.+14     	; 0x14e6 <SPI_Cannel_State+0x24>
	{
		case SPI_Disable:DIO_WriteChannel(ChannelID,STD_HIGH);break;
    14d8:	61 e0       	ldi	r22, 0x01	; 1
    14da:	8c 2f       	mov	r24, r28
    14dc:	77 dc       	rcall	.-1810   	; 0xdcc <DIO_WriteChannel>
    14de:	03 c0       	rjmp	.+6      	; 0x14e6 <SPI_Cannel_State+0x24>
		case SPI_Enable:DIO_WriteChannel(ChannelID,STD_LOW);break;
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	8c 2f       	mov	r24, r28
    14e4:	73 dc       	rcall	.-1818   	; 0xdcc <DIO_WriteChannel>
	}
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	08 95       	ret

000014ec <TWI_Init>:
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(ISBETCLEAR(TWCR,TWINT));
    /* Read Data */
    return TWDR;
}
    14ec:	0f 93       	push	r16
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
    14f2:	c8 2f       	mov	r28, r24
    14f4:	d6 2f       	mov	r29, r22
    14f6:	00 0f       	add	r16, r16
    14f8:	00 93 72 00 	sts	0x0072, r16	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
    14fc:	81 30       	cpi	r24, 0x01	; 1
    14fe:	11 f1       	breq	.+68     	; 0x1544 <TWI_Init+0x58>
    1500:	30 f0       	brcs	.+12     	; 0x150e <TWI_Init+0x22>
    1502:	82 30       	cpi	r24, 0x02	; 2
    1504:	e1 f1       	breq	.+120    	; 0x157e <TWI_Init+0x92>
    1506:	83 30       	cpi	r24, 0x03	; 3
    1508:	09 f4       	brne	.+2      	; 0x150c <TWI_Init+0x20>
    150a:	66 c0       	rjmp	.+204    	; 0x15d8 <TWI_Init+0xec>
    150c:	99 c0       	rjmp	.+306    	; 0x1640 <TWI_Init+0x154>
    150e:	ca 01       	movw	r24, r20
    1510:	b9 01       	movw	r22, r18
    1512:	0e 94 21 1c 	call	0x3842	; 0x3842 <__floatunsisf>
    1516:	9b 01       	movw	r18, r22
    1518:	ac 01       	movw	r20, r24
    151a:	0e 94 20 1b 	call	0x3640	; 0x3640 <__addsf3>
    151e:	9b 01       	movw	r18, r22
    1520:	ac 01       	movw	r20, r24
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	74 e2       	ldi	r23, 0x24	; 36
    1526:	84 e7       	ldi	r24, 0x74	; 116
    1528:	9b e4       	ldi	r25, 0x4B	; 75
    152a:	0e 94 88 1b 	call	0x3710	; 0x3710 <__divsf3>
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	40 e0       	ldi	r20, 0x00	; 0
    1534:	51 e4       	ldi	r21, 0x41	; 65
    1536:	0e 94 1f 1b 	call	0x363e	; 0x363e <__subsf3>
    153a:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__fixunssfsi>
    153e:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    1542:	7e c0       	rjmp	.+252    	; 0x1640 <TWI_Init+0x154>
    1544:	ca 01       	movw	r24, r20
    1546:	b9 01       	movw	r22, r18
    1548:	0e 94 21 1c 	call	0x3842	; 0x3842 <__floatunsisf>
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e0       	ldi	r20, 0x00	; 0
    1552:	51 e4       	ldi	r21, 0x41	; 65
    1554:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <__mulsf3>
    1558:	9b 01       	movw	r18, r22
    155a:	ac 01       	movw	r20, r24
    155c:	60 e0       	ldi	r22, 0x00	; 0
    155e:	74 e2       	ldi	r23, 0x24	; 36
    1560:	84 e7       	ldi	r24, 0x74	; 116
    1562:	9b e4       	ldi	r25, 0x4B	; 75
    1564:	0e 94 88 1b 	call	0x3710	; 0x3710 <__divsf3>
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	40 e0       	ldi	r20, 0x00	; 0
    156e:	50 e4       	ldi	r21, 0x40	; 64
    1570:	0e 94 1f 1b 	call	0x363e	; 0x363e <__subsf3>
    1574:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__fixunssfsi>
    1578:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    157c:	61 c0       	rjmp	.+194    	; 0x1640 <TWI_Init+0x154>
    157e:	da 01       	movw	r26, r20
    1580:	c9 01       	movw	r24, r18
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	aa 1f       	adc	r26, r26
    1588:	bb 1f       	adc	r27, r27
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	aa 1f       	adc	r26, r26
    1590:	bb 1f       	adc	r27, r27
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	aa 1f       	adc	r26, r26
    1598:	bb 1f       	adc	r27, r27
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	aa 1f       	adc	r26, r26
    15a0:	bb 1f       	adc	r27, r27
    15a2:	bc 01       	movw	r22, r24
    15a4:	cd 01       	movw	r24, r26
    15a6:	66 0f       	add	r22, r22
    15a8:	77 1f       	adc	r23, r23
    15aa:	88 1f       	adc	r24, r24
    15ac:	99 1f       	adc	r25, r25
    15ae:	0e 94 21 1c 	call	0x3842	; 0x3842 <__floatunsisf>
    15b2:	9b 01       	movw	r18, r22
    15b4:	ac 01       	movw	r20, r24
    15b6:	60 e0       	ldi	r22, 0x00	; 0
    15b8:	74 e2       	ldi	r23, 0x24	; 36
    15ba:	84 e7       	ldi	r24, 0x74	; 116
    15bc:	9b e4       	ldi	r25, 0x4B	; 75
    15be:	0e 94 88 1b 	call	0x3710	; 0x3710 <__divsf3>
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	40 e0       	ldi	r20, 0x00	; 0
    15c8:	5f e3       	ldi	r21, 0x3F	; 63
    15ca:	0e 94 1f 1b 	call	0x363e	; 0x363e <__subsf3>
    15ce:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__fixunssfsi>
    15d2:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    15d6:	34 c0       	rjmp	.+104    	; 0x1640 <TWI_Init+0x154>
    15d8:	da 01       	movw	r26, r20
    15da:	c9 01       	movw	r24, r18
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	aa 1f       	adc	r26, r26
    15e2:	bb 1f       	adc	r27, r27
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	aa 1f       	adc	r26, r26
    15ea:	bb 1f       	adc	r27, r27
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	aa 1f       	adc	r26, r26
    15f2:	bb 1f       	adc	r27, r27
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	aa 1f       	adc	r26, r26
    15fa:	bb 1f       	adc	r27, r27
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	aa 1f       	adc	r26, r26
    1602:	bb 1f       	adc	r27, r27
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	aa 1f       	adc	r26, r26
    160a:	bb 1f       	adc	r27, r27
    160c:	bc 01       	movw	r22, r24
    160e:	cd 01       	movw	r24, r26
    1610:	66 0f       	add	r22, r22
    1612:	77 1f       	adc	r23, r23
    1614:	88 1f       	adc	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	0e 94 21 1c 	call	0x3842	; 0x3842 <__floatunsisf>
    161c:	9b 01       	movw	r18, r22
    161e:	ac 01       	movw	r20, r24
    1620:	60 e0       	ldi	r22, 0x00	; 0
    1622:	74 e2       	ldi	r23, 0x24	; 36
    1624:	84 e7       	ldi	r24, 0x74	; 116
    1626:	9b e4       	ldi	r25, 0x4B	; 75
    1628:	0e 94 88 1b 	call	0x3710	; 0x3710 <__divsf3>
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	40 e0       	ldi	r20, 0x00	; 0
    1632:	5e e3       	ldi	r21, 0x3E	; 62
    1634:	0e 94 1f 1b 	call	0x363e	; 0x363e <__subsf3>
    1638:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__fixunssfsi>
    163c:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    1640:	e1 e7       	ldi	r30, 0x71	; 113
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	c3 70       	andi	r28, 0x03	; 3
    1648:	c8 2b       	or	r28, r24
    164a:	c0 83       	st	Z, r28
    164c:	e4 e7       	ldi	r30, 0x74	; 116
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	6d 2f       	mov	r22, r29
    1654:	61 70       	andi	r22, 0x01	; 1
    1656:	68 2b       	or	r22, r24
    1658:	64 60       	ori	r22, 0x04	; 4
    165a:	60 83       	st	Z, r22
    165c:	df 91       	pop	r29
    165e:	cf 91       	pop	r28
    1660:	0f 91       	pop	r16
    1662:	08 95       	ret

00001664 <TWI_Start>:
    1664:	e4 e7       	ldi	r30, 0x74	; 116
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	87 70       	andi	r24, 0x07	; 7
    166c:	80 83       	st	Z, r24
    166e:	80 81       	ld	r24, Z
    1670:	80 6a       	ori	r24, 0xA0	; 160
    1672:	80 83       	st	Z, r24
    1674:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1678:	88 23       	and	r24, r24
    167a:	e4 f7       	brge	.-8      	; 0x1674 <TWI_Start+0x10>
    167c:	08 95       	ret

0000167e <TWI_Stop>:
    167e:	e4 e7       	ldi	r30, 0x74	; 116
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	87 70       	andi	r24, 0x07	; 7
    1686:	80 83       	st	Z, r24
    1688:	80 81       	ld	r24, Z
    168a:	80 69       	ori	r24, 0x90	; 144
    168c:	80 83       	st	Z, r24
    168e:	08 95       	ret

00001690 <TWI_Write>:
    1690:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    1694:	e4 e7       	ldi	r30, 0x74	; 116
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	87 70       	andi	r24, 0x07	; 7
    169c:	80 83       	st	Z, r24
    169e:	80 81       	ld	r24, Z
    16a0:	80 68       	ori	r24, 0x80	; 128
    16a2:	80 83       	st	Z, r24
    16a4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    16a8:	88 23       	and	r24, r24
    16aa:	e4 f7       	brge	.-8      	; 0x16a4 <TWI_Write+0x14>
    16ac:	08 95       	ret

000016ae <TWI_Read_With_NACK>:

u_int8 TWI_Read_With_NACK(void)
{

	TWCR &= 0X07;
    16ae:	e4 e7       	ldi	r30, 0x74	; 116
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	87 70       	andi	r24, 0x07	; 7
    16b6:	80 83       	st	Z, r24
	TWCR |= (1<<TWINT);
    16b8:	80 81       	ld	r24, Z
    16ba:	80 68       	ori	r24, 0x80	; 128
    16bc:	80 83       	st	Z, r24
	
	
	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(ISBETCLEAR(TWCR,TWINT));
    16be:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    16c2:	88 23       	and	r24, r24
    16c4:	e4 f7       	brge	.-8      	; 0x16be <TWI_Read_With_NACK+0x10>
	/* Read Data */
	return TWDR;
    16c6:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
}
    16ca:	08 95       	ret

000016cc <TWI_Get_Status>:

u_int8 TWI_Get_Status(void)
{
   
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    return (TWSR & 0xF8);
    16cc:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
}
    16d0:	88 7f       	andi	r24, 0xF8	; 248
    16d2:	08 95       	ret

000016d4 <TWI_ByteWrite>:


TWI_States TWI_ByteWrite(u_int8 SL_Address,u_int8 Reg_Address ,u_int8 Data )
{
    16d4:	1f 93       	push	r17
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	18 2f       	mov	r17, r24
    16dc:	d6 2f       	mov	r29, r22
    16de:	c4 2f       	mov	r28, r20
	TWI_Start();
    16e0:	c1 df       	rcall	.-126    	; 0x1664 <TWI_Start>
	while (TWI_Get_Status() != TW_START); // 0x08 
    16e2:	f4 df       	rcall	.-24     	; 0x16cc <TWI_Get_Status>
    16e4:	88 30       	cpi	r24, 0x08	; 8
    16e6:	e9 f7       	brne	.-6      	; 0x16e2 <TWI_ByteWrite+0xe>
    16e8:	81 2f       	mov	r24, r17
	
	TWI_Write((SL_Address<<1));
    16ea:	88 0f       	add	r24, r24
    16ec:	d1 df       	rcall	.-94     	; 0x1690 <TWI_Write>
	while (TWI_Get_Status() != TW_MT_SLA_W_ACK);
    16ee:	ee df       	rcall	.-36     	; 0x16cc <TWI_Get_Status>
    16f0:	88 31       	cpi	r24, 0x18	; 24
	
	TWI_Write(Reg_Address);
    16f2:	e9 f7       	brne	.-6      	; 0x16ee <TWI_ByteWrite+0x1a>
    16f4:	8d 2f       	mov	r24, r29
	while (TWI_Get_Status() != TW_MT_DATA_ACK);
    16f6:	cc df       	rcall	.-104    	; 0x1690 <TWI_Write>
    16f8:	e9 df       	rcall	.-46     	; 0x16cc <TWI_Get_Status>
    16fa:	88 32       	cpi	r24, 0x28	; 40
	
	TWI_Write(Data);
    16fc:	e9 f7       	brne	.-6      	; 0x16f8 <TWI_ByteWrite+0x24>
    16fe:	8c 2f       	mov	r24, r28
    1700:	c7 df       	rcall	.-114    	; 0x1690 <TWI_Write>
	while (TWI_Get_Status() != TW_MT_DATA_ACK);
    1702:	e4 df       	rcall	.-56     	; 0x16cc <TWI_Get_Status>
    1704:	88 32       	cpi	r24, 0x28	; 40
    1706:	e9 f7       	brne	.-6      	; 0x1702 <TWI_ByteWrite+0x2e>
    1708:	ba df       	rcall	.-140    	; 0x167e <TWI_Stop>
	
	TWI_Stop(); // Send A stop  // Release The Clock Bus 
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	df 91       	pop	r29
	return 0;
}
    170e:	cf 91       	pop	r28
    1710:	1f 91       	pop	r17
    1712:	08 95       	ret

00001714 <TWI_ByteRead>:
    1714:	0f 93       	push	r16
    1716:	1f 93       	push	r17

 
TWI_States TWI_ByteRead(u_int8 SL_Address , u_int8 Reg_Address , u_int8 * DataRcv)
{
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	c8 2f       	mov	r28, r24
    171e:	d6 2f       	mov	r29, r22
    1720:	8a 01       	movw	r16, r20
	
	TWI_Start();
    1722:	a0 df       	rcall	.-192    	; 0x1664 <TWI_Start>
	while (TWI_Get_Status() != TW_START);
    1724:	d3 df       	rcall	.-90     	; 0x16cc <TWI_Get_Status>
    1726:	88 30       	cpi	r24, 0x08	; 8
    1728:	e9 f7       	brne	.-6      	; 0x1724 <TWI_ByteRead+0x10>
    172a:	8c 2f       	mov	r24, r28
	
	TWI_Write((SL_Address<<1));
    172c:	88 0f       	add	r24, r24
    172e:	b0 df       	rcall	.-160    	; 0x1690 <TWI_Write>
	while (TWI_Get_Status() != TW_MT_SLA_W_ACK);
    1730:	cd df       	rcall	.-102    	; 0x16cc <TWI_Get_Status>
    1732:	88 31       	cpi	r24, 0x18	; 24
	
	TWI_Write(Reg_Address);
    1734:	e9 f7       	brne	.-6      	; 0x1730 <TWI_ByteRead+0x1c>
    1736:	8d 2f       	mov	r24, r29
	while (TWI_Get_Status() != TW_MT_DATA_ACK);
    1738:	ab df       	rcall	.-170    	; 0x1690 <TWI_Write>
    173a:	c8 df       	rcall	.-112    	; 0x16cc <TWI_Get_Status>
    173c:	88 32       	cpi	r24, 0x28	; 40
    173e:	e9 f7       	brne	.-6      	; 0x173a <TWI_ByteRead+0x26>
	
	TWI_Start(); //rep start
    1740:	91 df       	rcall	.-222    	; 0x1664 <TWI_Start>
    1742:	c4 df       	rcall	.-120    	; 0x16cc <TWI_Get_Status>
	while (TWI_Get_Status() != TW_REP_START);
    1744:	80 31       	cpi	r24, 0x10	; 16
    1746:	e9 f7       	brne	.-6      	; 0x1742 <TWI_ByteRead+0x2e>
	
	TWI_Write((SL_Address<<1) | READ);
    1748:	8c 2f       	mov	r24, r28
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	81 60       	ori	r24, 0x01	; 1
	while (TWI_Get_Status() != TW_MT_SLA_R_ACK);
    1752:	9e df       	rcall	.-196    	; 0x1690 <TWI_Write>
    1754:	bb df       	rcall	.-138    	; 0x16cc <TWI_Get_Status>
    1756:	80 34       	cpi	r24, 0x40	; 64
    1758:	e9 f7       	brne	.-6      	; 0x1754 <TWI_ByteRead+0x40>
	
	*DataRcv=TWI_Read_With_NACK();
    175a:	a9 df       	rcall	.-174    	; 0x16ae <TWI_Read_With_NACK>
    175c:	f8 01       	movw	r30, r16
    175e:	80 83       	st	Z, r24
    1760:	8e df       	rcall	.-228    	; 0x167e <TWI_Stop>
	TWI_Stop();
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	df 91       	pop	r29

	return 0;		
}
    1766:	cf 91       	pop	r28
    1768:	1f 91       	pop	r17
    176a:	0f 91       	pop	r16
    176c:	08 95       	ret

0000176e <UART0_Init>:
    176e:	a5 e9       	ldi	r26, 0x95	; 149
    1770:	b0 e0       	ldi	r27, 0x00	; 0
	while(String[j] != 0)
	{
		UART0_Transmit(String[j]);
		j++;
	}
}
    1772:	2c 91       	ld	r18, X
    1774:	ed e1       	ldi	r30, 0x1D	; 29
    1776:	f1 e0       	ldi	r31, 0x01	; 1
    1778:	90 81       	ld	r25, Z
    177a:	30 e4       	ldi	r19, 0x40	; 64
    177c:	93 9f       	mul	r25, r19
    177e:	c0 01       	movw	r24, r0
    1780:	11 24       	eor	r1, r1
    1782:	82 2b       	or	r24, r18
    1784:	8c 93       	st	X, r24
    1786:	2c 91       	ld	r18, X
    1788:	91 81       	ldd	r25, Z+1	; 0x01
    178a:	30 e1       	ldi	r19, 0x10	; 16
    178c:	93 9f       	mul	r25, r19
    178e:	c0 01       	movw	r24, r0
    1790:	11 24       	eor	r1, r1
    1792:	82 2b       	or	r24, r18
    1794:	8c 93       	st	X, r24
    1796:	2c 91       	ld	r18, X
    1798:	92 81       	ldd	r25, Z+2	; 0x02
    179a:	89 2f       	mov	r24, r25
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	88 0f       	add	r24, r24
    17a0:	99 1f       	adc	r25, r25
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	82 2b       	or	r24, r18
    17ac:	8c 93       	st	X, r24
    17ae:	2a b1       	in	r18, 0x0a	; 10
    17b0:	94 81       	ldd	r25, Z+4	; 0x04
    17b2:	89 2f       	mov	r24, r25
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	88 0f       	add	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	88 0f       	add	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	88 0f       	add	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	82 2b       	or	r24, r18
    17c4:	8a b9       	out	0x0a, r24	; 10
    17c6:	2a b1       	in	r18, 0x0a	; 10
    17c8:	95 81       	ldd	r25, Z+5	; 0x05
    17ca:	30 e4       	ldi	r19, 0x40	; 64
    17cc:	93 9f       	mul	r25, r19
    17ce:	c0 01       	movw	r24, r0
    17d0:	11 24       	eor	r1, r1
    17d2:	82 2b       	or	r24, r18
    17d4:	8a b9       	out	0x0a, r24	; 10
    17d6:	2a b1       	in	r18, 0x0a	; 10
    17d8:	96 81       	ldd	r25, Z+6	; 0x06
    17da:	30 e1       	ldi	r19, 0x10	; 16
    17dc:	93 9f       	mul	r25, r19
    17de:	c0 01       	movw	r24, r0
    17e0:	11 24       	eor	r1, r1
    17e2:	82 2b       	or	r24, r18
    17e4:	8a b9       	out	0x0a, r24	; 10
    17e6:	2a b1       	in	r18, 0x0a	; 10
    17e8:	97 81       	ldd	r25, Z+7	; 0x07
    17ea:	30 e8       	ldi	r19, 0x80	; 128
    17ec:	93 9f       	mul	r25, r19
    17ee:	c0 01       	movw	r24, r0
    17f0:	11 24       	eor	r1, r1
    17f2:	82 2b       	or	r24, r18
    17f4:	8a b9       	out	0x0a, r24	; 10
    17f6:	80 85       	ldd	r24, Z+8	; 0x08
    17f8:	88 23       	and	r24, r24
    17fa:	19 f0       	breq	.+6      	; 0x1802 <UART0_Init+0x94>
    17fc:	81 30       	cpi	r24, 0x01	; 1
    17fe:	39 f1       	breq	.+78     	; 0x184e <UART0_Init+0xe0>
    1800:	48 c0       	rjmp	.+144    	; 0x1892 <UART0_Init+0x124>
    1802:	8b b1       	in	r24, 0x0b	; 11
    1804:	8d 7f       	andi	r24, 0xFD	; 253
    1806:	8b b9       	out	0x0b, r24	; 11
    1808:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <UART0_Cfg+0x9>
    180c:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <UART0_Cfg+0xa>
    1810:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <UART0_Cfg+0xb>
    1814:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <UART0_Cfg+0xc>
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	aa 1f       	adc	r26, r26
    181e:	bb 1f       	adc	r27, r27
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	aa 1f       	adc	r26, r26
    1826:	bb 1f       	adc	r27, r27
    1828:	9c 01       	movw	r18, r24
    182a:	ad 01       	movw	r20, r26
    182c:	22 0f       	add	r18, r18
    182e:	33 1f       	adc	r19, r19
    1830:	44 1f       	adc	r20, r20
    1832:	55 1f       	adc	r21, r21
    1834:	22 0f       	add	r18, r18
    1836:	33 1f       	adc	r19, r19
    1838:	44 1f       	adc	r20, r20
    183a:	55 1f       	adc	r21, r21
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	74 e2       	ldi	r23, 0x24	; 36
    1840:	84 ef       	ldi	r24, 0xF4	; 244
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <__udivmodsi4>
    1848:	21 50       	subi	r18, 0x01	; 1
    184a:	31 09       	sbc	r19, r1
    184c:	24 c0       	rjmp	.+72     	; 0x1896 <UART0_Init+0x128>
    184e:	8b b1       	in	r24, 0x0b	; 11
    1850:	82 60       	ori	r24, 0x02	; 2
    1852:	8b b9       	out	0x0b, r24	; 11
    1854:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <UART0_Cfg+0x9>
    1858:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <UART0_Cfg+0xa>
    185c:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <UART0_Cfg+0xb>
    1860:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <UART0_Cfg+0xc>
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	aa 1f       	adc	r26, r26
    186a:	bb 1f       	adc	r27, r27
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	aa 1f       	adc	r26, r26
    1872:	bb 1f       	adc	r27, r27
    1874:	9c 01       	movw	r18, r24
    1876:	ad 01       	movw	r20, r26
    1878:	22 0f       	add	r18, r18
    187a:	33 1f       	adc	r19, r19
    187c:	44 1f       	adc	r20, r20
    187e:	55 1f       	adc	r21, r21
    1880:	60 e0       	ldi	r22, 0x00	; 0
    1882:	74 e2       	ldi	r23, 0x24	; 36
    1884:	84 ef       	ldi	r24, 0xF4	; 244
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <__udivmodsi4>
    188c:	21 50       	subi	r18, 0x01	; 1
    188e:	31 09       	sbc	r19, r1
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <UART0_Init+0x128>
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    189a:	29 b9       	out	0x09, r18	; 9
    189c:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <UART0_Cfg+0x3>
    18a0:	94 30       	cpi	r25, 0x04	; 4
    18a2:	61 f4       	brne	.+24     	; 0x18bc <UART0_Init+0x14e>
    18a4:	e5 e9       	ldi	r30, 0x95	; 149
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	82 60       	ori	r24, 0x02	; 2
    18ac:	80 83       	st	Z, r24
    18ae:	80 81       	ld	r24, Z
    18b0:	84 60       	ori	r24, 0x04	; 4
    18b2:	80 83       	st	Z, r24
    18b4:	8a b1       	in	r24, 0x0a	; 10
    18b6:	84 60       	ori	r24, 0x04	; 4
    18b8:	8a b9       	out	0x0a, r24	; 10
    18ba:	08 95       	ret
    18bc:	e5 e9       	ldi	r30, 0x95	; 149
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	20 81       	ld	r18, Z
    18c2:	89 2f       	mov	r24, r25
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	82 2b       	or	r24, r18
    18cc:	80 83       	st	Z, r24
    18ce:	08 95       	ret

000018d0 <UART1_Init>:
    18d0:	ad e9       	ldi	r26, 0x9D	; 157
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	2c 91       	ld	r18, X
    18d6:	e0 e1       	ldi	r30, 0x10	; 16
    18d8:	f1 e0       	ldi	r31, 0x01	; 1
    18da:	90 81       	ld	r25, Z
    18dc:	30 e4       	ldi	r19, 0x40	; 64
    18de:	93 9f       	mul	r25, r19
    18e0:	c0 01       	movw	r24, r0
    18e2:	11 24       	eor	r1, r1
    18e4:	82 2b       	or	r24, r18
    18e6:	8c 93       	st	X, r24
    18e8:	2c 91       	ld	r18, X
    18ea:	91 81       	ldd	r25, Z+1	; 0x01
    18ec:	30 e1       	ldi	r19, 0x10	; 16
    18ee:	93 9f       	mul	r25, r19
    18f0:	c0 01       	movw	r24, r0
    18f2:	11 24       	eor	r1, r1
    18f4:	82 2b       	or	r24, r18
    18f6:	8c 93       	st	X, r24
    18f8:	2c 91       	ld	r18, X
    18fa:	92 81       	ldd	r25, Z+2	; 0x02
    18fc:	89 2f       	mov	r24, r25
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	82 2b       	or	r24, r18
    190e:	8c 93       	st	X, r24
    1910:	aa e9       	ldi	r26, 0x9A	; 154
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	2c 91       	ld	r18, X
    1916:	94 81       	ldd	r25, Z+4	; 0x04
    1918:	89 2f       	mov	r24, r25
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	88 0f       	add	r24, r24
    1922:	99 1f       	adc	r25, r25
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	82 2b       	or	r24, r18
    192a:	8c 93       	st	X, r24
    192c:	2c 91       	ld	r18, X
    192e:	95 81       	ldd	r25, Z+5	; 0x05
    1930:	30 e4       	ldi	r19, 0x40	; 64
    1932:	93 9f       	mul	r25, r19
    1934:	c0 01       	movw	r24, r0
    1936:	11 24       	eor	r1, r1
    1938:	82 2b       	or	r24, r18
    193a:	8c 93       	st	X, r24
    193c:	2c 91       	ld	r18, X
    193e:	96 81       	ldd	r25, Z+6	; 0x06
    1940:	30 e1       	ldi	r19, 0x10	; 16
    1942:	93 9f       	mul	r25, r19
    1944:	c0 01       	movw	r24, r0
    1946:	11 24       	eor	r1, r1
    1948:	82 2b       	or	r24, r18
    194a:	8c 93       	st	X, r24
    194c:	2c 91       	ld	r18, X
    194e:	97 81       	ldd	r25, Z+7	; 0x07
    1950:	30 e8       	ldi	r19, 0x80	; 128
    1952:	93 9f       	mul	r25, r19
    1954:	c0 01       	movw	r24, r0
    1956:	11 24       	eor	r1, r1
    1958:	82 2b       	or	r24, r18
    195a:	8c 93       	st	X, r24
    195c:	80 85       	ldd	r24, Z+8	; 0x08
    195e:	88 23       	and	r24, r24
    1960:	19 f0       	breq	.+6      	; 0x1968 <UART1_Init+0x98>
    1962:	81 30       	cpi	r24, 0x01	; 1
    1964:	49 f1       	breq	.+82     	; 0x19b8 <UART1_Init+0xe8>
    1966:	4c c0       	rjmp	.+152    	; 0x1a00 <UART1_Init+0x130>
    1968:	eb e9       	ldi	r30, 0x9B	; 155
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	8d 7f       	andi	r24, 0xFD	; 253
    1970:	80 83       	st	Z, r24
    1972:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <UART1_Cfg+0x9>
    1976:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <UART1_Cfg+0xa>
    197a:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <UART1_Cfg+0xb>
    197e:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <UART1_Cfg+0xc>
    1982:	88 0f       	add	r24, r24
    1984:	99 1f       	adc	r25, r25
    1986:	aa 1f       	adc	r26, r26
    1988:	bb 1f       	adc	r27, r27
    198a:	88 0f       	add	r24, r24
    198c:	99 1f       	adc	r25, r25
    198e:	aa 1f       	adc	r26, r26
    1990:	bb 1f       	adc	r27, r27
    1992:	9c 01       	movw	r18, r24
    1994:	ad 01       	movw	r20, r26
    1996:	22 0f       	add	r18, r18
    1998:	33 1f       	adc	r19, r19
    199a:	44 1f       	adc	r20, r20
    199c:	55 1f       	adc	r21, r21
    199e:	22 0f       	add	r18, r18
    19a0:	33 1f       	adc	r19, r19
    19a2:	44 1f       	adc	r20, r20
    19a4:	55 1f       	adc	r21, r21
    19a6:	60 e0       	ldi	r22, 0x00	; 0
    19a8:	74 e2       	ldi	r23, 0x24	; 36
    19aa:	84 ef       	ldi	r24, 0xF4	; 244
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <__udivmodsi4>
    19b2:	21 50       	subi	r18, 0x01	; 1
    19b4:	31 09       	sbc	r19, r1
    19b6:	26 c0       	rjmp	.+76     	; 0x1a04 <UART1_Init+0x134>
    19b8:	eb e9       	ldi	r30, 0x9B	; 155
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	82 60       	ori	r24, 0x02	; 2
    19c0:	80 83       	st	Z, r24
    19c2:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <UART1_Cfg+0x9>
    19c6:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <UART1_Cfg+0xa>
    19ca:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <UART1_Cfg+0xb>
    19ce:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <UART1_Cfg+0xc>
    19d2:	88 0f       	add	r24, r24
    19d4:	99 1f       	adc	r25, r25
    19d6:	aa 1f       	adc	r26, r26
    19d8:	bb 1f       	adc	r27, r27
    19da:	88 0f       	add	r24, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	aa 1f       	adc	r26, r26
    19e0:	bb 1f       	adc	r27, r27
    19e2:	9c 01       	movw	r18, r24
    19e4:	ad 01       	movw	r20, r26
    19e6:	22 0f       	add	r18, r18
    19e8:	33 1f       	adc	r19, r19
    19ea:	44 1f       	adc	r20, r20
    19ec:	55 1f       	adc	r21, r21
    19ee:	60 e0       	ldi	r22, 0x00	; 0
    19f0:	74 e2       	ldi	r23, 0x24	; 36
    19f2:	84 ef       	ldi	r24, 0xF4	; 244
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <__udivmodsi4>
    19fa:	21 50       	subi	r18, 0x01	; 1
    19fc:	31 09       	sbc	r19, r1
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <UART1_Init+0x134>
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    1a08:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1a0c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <UART1_Cfg+0x3>
    1a10:	94 30       	cpi	r25, 0x04	; 4
    1a12:	71 f4       	brne	.+28     	; 0x1a30 <UART1_Init+0x160>
    1a14:	ed e9       	ldi	r30, 0x9D	; 157
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	82 60       	ori	r24, 0x02	; 2
    1a1c:	80 83       	st	Z, r24
    1a1e:	80 81       	ld	r24, Z
    1a20:	84 60       	ori	r24, 0x04	; 4
    1a22:	80 83       	st	Z, r24
    1a24:	ea e9       	ldi	r30, 0x9A	; 154
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	84 60       	ori	r24, 0x04	; 4
    1a2c:	80 83       	st	Z, r24
    1a2e:	08 95       	ret
    1a30:	ed e9       	ldi	r30, 0x9D	; 157
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	20 81       	ld	r18, Z
    1a36:	89 2f       	mov	r24, r25
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	82 2b       	or	r24, r18
    1a40:	80 83       	st	Z, r24
    1a42:	08 95       	ret

00001a44 <UART1_Transmit>:
    1a44:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1a48:	95 ff       	sbrs	r25, 5
    1a4a:	fc cf       	rjmp	.-8      	; 0x1a44 <UART1_Transmit>
    1a4c:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    1a50:	08 95       	ret

00001a52 <UART1_TransmitString>:

void UART1_TransmitString(u_int8 * String)
{
    1a52:	0f 93       	push	r16
    1a54:	1f 93       	push	r17
    1a56:	cf 93       	push	r28
    1a58:	8c 01       	movw	r16, r24
	u_int8 j = 0;
    1a5a:	c0 e0       	ldi	r28, 0x00	; 0
	while(String[j] != 0)
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <UART1_TransmitString+0x10>
	{
		UART1_Transmit(String[j]);
    1a5e:	f2 df       	rcall	.-28     	; 0x1a44 <UART1_Transmit>
		j++;
    1a60:	cf 5f       	subi	r28, 0xFF	; 255
}

void UART1_TransmitString(u_int8 * String)
{
	u_int8 j = 0;
	while(String[j] != 0)
    1a62:	f8 01       	movw	r30, r16
    1a64:	ec 0f       	add	r30, r28
    1a66:	f1 1d       	adc	r31, r1
    1a68:	80 81       	ld	r24, Z
    1a6a:	81 11       	cpse	r24, r1
    1a6c:	f8 cf       	rjmp	.-16     	; 0x1a5e <UART1_TransmitString+0xc>
	{
		UART1_Transmit(String[j]);
		j++;
	}
}
    1a6e:	cf 91       	pop	r28
    1a70:	1f 91       	pop	r17
    1a72:	0f 91       	pop	r16
    1a74:	08 95       	ret

00001a76 <xEventGroupCreate>:
		uxReturn = pxEventBits->uxEventBits;
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	8b e0       	ldi	r24, 0x0B	; 11
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	64 d2       	rcall	.+1224   	; 0x1f48 <pvPortMalloc>
    1a80:	ec 01       	movw	r28, r24
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	29 f0       	breq	.+10     	; 0x1a90 <xEventGroupCreate+0x1a>
    1a86:	fc 01       	movw	r30, r24
    1a88:	11 92       	st	Z+, r1
    1a8a:	11 92       	st	Z+, r1
    1a8c:	cf 01       	movw	r24, r30
    1a8e:	77 d0       	rcall	.+238    	; 0x1b7e <vListInitialise>
    1a90:	ce 01       	movw	r24, r28
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	08 95       	ret

00001a98 <xEventGroupClearBits>:
    1a98:	fc 01       	movw	r30, r24
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	0f 92       	push	r0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	91 81       	ldd	r25, Z+1	; 0x01
    1aa4:	60 95       	com	r22
    1aa6:	70 95       	com	r23
    1aa8:	68 23       	and	r22, r24
    1aaa:	79 23       	and	r23, r25
    1aac:	71 83       	std	Z+1, r23	; 0x01
    1aae:	60 83       	st	Z, r22
    1ab0:	0f 90       	pop	r0
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	08 95       	ret

00001ab6 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    1ab6:	cf 92       	push	r12
    1ab8:	df 92       	push	r13
    1aba:	ef 92       	push	r14
    1abc:	ff 92       	push	r15
    1abe:	0f 93       	push	r16
    1ac0:	1f 93       	push	r17
    1ac2:	cf 93       	push	r28
    1ac4:	df 93       	push	r29
    1ac6:	7c 01       	movw	r14, r24
    1ac8:	8b 01       	movw	r16, r22
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1aca:	ec 01       	movw	r28, r24
    1acc:	25 96       	adiw	r28, 0x05	; 5
	vTaskSuspendAll();
    1ace:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
    1ad2:	d7 01       	movw	r26, r14
    1ad4:	17 96       	adiw	r26, 0x07	; 7
    1ad6:	ed 91       	ld	r30, X+
    1ad8:	fc 91       	ld	r31, X
    1ada:	18 97       	sbiw	r26, 0x08	; 8

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
    1adc:	8d 91       	ld	r24, X+
    1ade:	9c 91       	ld	r25, X
    1ae0:	11 97       	sbiw	r26, 0x01	; 1
    1ae2:	08 2b       	or	r16, r24
    1ae4:	19 2b       	or	r17, r25
    1ae6:	0d 93       	st	X+, r16
    1ae8:	1c 93       	st	X, r17
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    1aea:	00 e0       	ldi	r16, 0x00	; 0
    1aec:	10 e0       	ldi	r17, 0x00	; 0

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
    1aee:	2d c0       	rjmp	.+90     	; 0x1b4a <xEventGroupSetBits+0x94>
		{
			pxNext = listGET_NEXT( pxListItem );
    1af0:	c2 80       	ldd	r12, Z+2	; 0x02
    1af2:	d3 80       	ldd	r13, Z+3	; 0x03
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    1af4:	80 81       	ld	r24, Z
    1af6:	91 81       	ldd	r25, Z+1	; 0x01
			xMatchFound = pdFALSE;

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    1af8:	9c 01       	movw	r18, r24
    1afa:	33 27       	eor	r19, r19

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    1afc:	92 fd       	sbrc	r25, 2
    1afe:	09 c0       	rjmp	.+18     	; 0x1b12 <xEventGroupSetBits+0x5c>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    1b00:	d7 01       	movw	r26, r14
    1b02:	4d 91       	ld	r20, X+
    1b04:	5c 91       	ld	r21, X
    1b06:	42 23       	and	r20, r18
    1b08:	53 23       	and	r21, r19
    1b0a:	45 2b       	or	r20, r21
    1b0c:	61 f4       	brne	.+24     	; 0x1b26 <xEventGroupSetBits+0x70>
		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
		{
			pxNext = listGET_NEXT( pxListItem );
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
			xMatchFound = pdFALSE;
    1b0e:	40 e0       	ldi	r20, 0x00	; 0
    1b10:	0d c0       	rjmp	.+26     	; 0x1b2c <xEventGroupSetBits+0x76>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    1b12:	d7 01       	movw	r26, r14
    1b14:	4d 91       	ld	r20, X+
    1b16:	5c 91       	ld	r21, X
    1b18:	42 23       	and	r20, r18
    1b1a:	53 23       	and	r21, r19
    1b1c:	24 17       	cp	r18, r20
    1b1e:	35 07       	cpc	r19, r21
    1b20:	21 f0       	breq	.+8      	; 0x1b2a <xEventGroupSetBits+0x74>
		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
		{
			pxNext = listGET_NEXT( pxListItem );
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
			xMatchFound = pdFALSE;
    1b22:	40 e0       	ldi	r20, 0x00	; 0
    1b24:	03 c0       	rjmp	.+6      	; 0x1b2c <xEventGroupSetBits+0x76>
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
				{
					xMatchFound = pdTRUE;
    1b26:	41 e0       	ldi	r20, 0x01	; 1
    1b28:	01 c0       	rjmp	.+2      	; 0x1b2c <xEventGroupSetBits+0x76>
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
    1b2a:	41 e0       	ldi	r20, 0x01	; 1
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
    1b2c:	44 23       	and	r20, r20
    1b2e:	59 f0       	breq	.+22     	; 0x1b46 <xEventGroupSetBits+0x90>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    1b30:	90 ff       	sbrs	r25, 0
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <xEventGroupSetBits+0x82>
				{
					uxBitsToClear |= uxBitsWaitedFor;
    1b34:	02 2b       	or	r16, r18
    1b36:	13 2b       	or	r17, r19
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    1b38:	d7 01       	movw	r26, r14
    1b3a:	6d 91       	ld	r22, X+
    1b3c:	7c 91       	ld	r23, X
    1b3e:	72 60       	ori	r23, 0x02	; 2
    1b40:	cf 01       	movw	r24, r30
    1b42:	0e 94 96 19 	call	0x332c	; 0x332c <vTaskRemoveFromUnorderedEventList>
		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
		{
			pxNext = listGET_NEXT( pxListItem );
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
			xMatchFound = pdFALSE;
    1b46:	ec 2d       	mov	r30, r12
    1b48:	fd 2d       	mov	r31, r13

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
    1b4a:	ec 17       	cp	r30, r28
    1b4c:	fd 07       	cpc	r31, r29
    1b4e:	81 f6       	brne	.-96     	; 0x1af0 <xEventGroupSetBits+0x3a>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    1b50:	00 95       	com	r16
    1b52:	10 95       	com	r17
    1b54:	f7 01       	movw	r30, r14
    1b56:	80 81       	ld	r24, Z
    1b58:	91 81       	ldd	r25, Z+1	; 0x01
    1b5a:	08 23       	and	r16, r24
    1b5c:	19 23       	and	r17, r25
    1b5e:	11 83       	std	Z+1, r17	; 0x01
    1b60:	00 83       	st	Z, r16
	}
	( void ) xTaskResumeAll();
    1b62:	0e 94 66 18 	call	0x30cc	; 0x30cc <xTaskResumeAll>

	return pxEventBits->uxEventBits;
}
    1b66:	d7 01       	movw	r26, r14
    1b68:	8d 91       	ld	r24, X+
    1b6a:	9c 91       	ld	r25, X
    1b6c:	df 91       	pop	r29
    1b6e:	cf 91       	pop	r28
    1b70:	1f 91       	pop	r17
    1b72:	0f 91       	pop	r16
    1b74:	ff 90       	pop	r15
    1b76:	ef 90       	pop	r14
    1b78:	df 90       	pop	r13
    1b7a:	cf 90       	pop	r12
    1b7c:	08 95       	ret

00001b7e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1b7e:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1b80:	03 96       	adiw	r24, 0x03	; 3
    1b82:	92 83       	std	Z+2, r25	; 0x02
    1b84:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1b86:	2f ef       	ldi	r18, 0xFF	; 255
    1b88:	3f ef       	ldi	r19, 0xFF	; 255
    1b8a:	34 83       	std	Z+4, r19	; 0x04
    1b8c:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1b8e:	96 83       	std	Z+6, r25	; 0x06
    1b90:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1b92:	90 87       	std	Z+8, r25	; 0x08
    1b94:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1b96:	10 82       	st	Z, r1
    1b98:	08 95       	ret

00001b9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	11 86       	std	Z+9, r1	; 0x09
    1b9e:	10 86       	std	Z+8, r1	; 0x08
    1ba0:	08 95       	ret

00001ba2 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1ba2:	cf 93       	push	r28
    1ba4:	df 93       	push	r29
    1ba6:	9c 01       	movw	r18, r24
    1ba8:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1baa:	dc 01       	movw	r26, r24
    1bac:	11 96       	adiw	r26, 0x01	; 1
    1bae:	cd 91       	ld	r28, X+
    1bb0:	dc 91       	ld	r29, X
    1bb2:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1bb4:	d3 83       	std	Z+3, r29	; 0x03
    1bb6:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1bb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bba:	9d 81       	ldd	r25, Y+5	; 0x05
    1bbc:	95 83       	std	Z+5, r25	; 0x05
    1bbe:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1bc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	13 96       	adiw	r26, 0x03	; 3
    1bc8:	7c 93       	st	X, r23
    1bca:	6e 93       	st	-X, r22
    1bcc:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
    1bce:	7d 83       	std	Y+5, r23	; 0x05
    1bd0:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
    1bd2:	31 87       	std	Z+9, r19	; 0x09
    1bd4:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    1bd6:	f9 01       	movw	r30, r18
    1bd8:	80 81       	ld	r24, Z
    1bda:	8f 5f       	subi	r24, 0xFF	; 255
    1bdc:	80 83       	st	Z, r24
}
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	08 95       	ret

00001be4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1be4:	cf 93       	push	r28
    1be6:	df 93       	push	r29
    1be8:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1bea:	48 81       	ld	r20, Y
    1bec:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1bee:	4f 3f       	cpi	r20, 0xFF	; 255
    1bf0:	2f ef       	ldi	r18, 0xFF	; 255
    1bf2:	52 07       	cpc	r21, r18
    1bf4:	21 f4       	brne	.+8      	; 0x1bfe <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	a7 81       	ldd	r26, Z+7	; 0x07
    1bfa:	b0 85       	ldd	r27, Z+8	; 0x08
    1bfc:	0d c0       	rjmp	.+26     	; 0x1c18 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1bfe:	dc 01       	movw	r26, r24
    1c00:	13 96       	adiw	r26, 0x03	; 3
    1c02:	01 c0       	rjmp	.+2      	; 0x1c06 <vListInsert+0x22>
    1c04:	df 01       	movw	r26, r30
    1c06:	12 96       	adiw	r26, 0x02	; 2
    1c08:	ed 91       	ld	r30, X+
    1c0a:	fc 91       	ld	r31, X
    1c0c:	13 97       	sbiw	r26, 0x03	; 3
    1c0e:	20 81       	ld	r18, Z
    1c10:	31 81       	ldd	r19, Z+1	; 0x01
    1c12:	42 17       	cp	r20, r18
    1c14:	53 07       	cpc	r21, r19
    1c16:	b0 f7       	brcc	.-20     	; 0x1c04 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1c18:	12 96       	adiw	r26, 0x02	; 2
    1c1a:	ed 91       	ld	r30, X+
    1c1c:	fc 91       	ld	r31, X
    1c1e:	13 97       	sbiw	r26, 0x03	; 3
    1c20:	fb 83       	std	Y+3, r31	; 0x03
    1c22:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1c24:	d5 83       	std	Z+5, r29	; 0x05
    1c26:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    1c28:	bd 83       	std	Y+5, r27	; 0x05
    1c2a:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
    1c2c:	13 96       	adiw	r26, 0x03	; 3
    1c2e:	dc 93       	st	X, r29
    1c30:	ce 93       	st	-X, r28
    1c32:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
    1c34:	99 87       	std	Y+9, r25	; 0x09
    1c36:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1c38:	fc 01       	movw	r30, r24
    1c3a:	20 81       	ld	r18, Z
    1c3c:	2f 5f       	subi	r18, 0xFF	; 255
    1c3e:	20 83       	st	Z, r18
}
    1c40:	df 91       	pop	r29
    1c42:	cf 91       	pop	r28
    1c44:	08 95       	ret

00001c46 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
    1c4a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    1c4c:	a0 85       	ldd	r26, Z+8	; 0x08
    1c4e:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1c50:	c2 81       	ldd	r28, Z+2	; 0x02
    1c52:	d3 81       	ldd	r29, Z+3	; 0x03
    1c54:	84 81       	ldd	r24, Z+4	; 0x04
    1c56:	95 81       	ldd	r25, Z+5	; 0x05
    1c58:	9d 83       	std	Y+5, r25	; 0x05
    1c5a:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1c5c:	c4 81       	ldd	r28, Z+4	; 0x04
    1c5e:	d5 81       	ldd	r29, Z+5	; 0x05
    1c60:	82 81       	ldd	r24, Z+2	; 0x02
    1c62:	93 81       	ldd	r25, Z+3	; 0x03
    1c64:	9b 83       	std	Y+3, r25	; 0x03
    1c66:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1c68:	11 96       	adiw	r26, 0x01	; 1
    1c6a:	8d 91       	ld	r24, X+
    1c6c:	9c 91       	ld	r25, X
    1c6e:	12 97       	sbiw	r26, 0x02	; 2
    1c70:	e8 17       	cp	r30, r24
    1c72:	f9 07       	cpc	r31, r25
    1c74:	31 f4       	brne	.+12     	; 0x1c82 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1c76:	84 81       	ldd	r24, Z+4	; 0x04
    1c78:	95 81       	ldd	r25, Z+5	; 0x05
    1c7a:	12 96       	adiw	r26, 0x02	; 2
    1c7c:	9c 93       	st	X, r25
    1c7e:	8e 93       	st	-X, r24
    1c80:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
    1c82:	11 86       	std	Z+9, r1	; 0x09
    1c84:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1c86:	8c 91       	ld	r24, X
    1c88:	81 50       	subi	r24, 0x01	; 1
    1c8a:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
    1c8c:	8c 91       	ld	r24, X
}
    1c8e:	df 91       	pop	r29
    1c90:	cf 91       	pop	r28
    1c92:	08 95       	ret

00001c94 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    1c94:	1b bc       	out	0x2b, r1	; 43
    1c96:	89 ef       	ldi	r24, 0xF9	; 249
    1c98:	8a bd       	out	0x2a, r24	; 42
    1c9a:	8b e0       	ldi	r24, 0x0B	; 11
    1c9c:	8e bd       	out	0x2e, r24	; 46
    1c9e:	87 b7       	in	r24, 0x37	; 55
    1ca0:	80 61       	ori	r24, 0x10	; 16
    1ca2:	87 bf       	out	0x37, r24	; 55
    1ca4:	08 95       	ret

00001ca6 <pxPortInitialiseStack>:
    1ca6:	31 e1       	ldi	r19, 0x11	; 17
    1ca8:	fc 01       	movw	r30, r24
    1caa:	30 83       	st	Z, r19
    1cac:	31 97       	sbiw	r30, 0x01	; 1
    1cae:	22 e2       	ldi	r18, 0x22	; 34
    1cb0:	20 83       	st	Z, r18
    1cb2:	31 97       	sbiw	r30, 0x01	; 1
    1cb4:	a3 e3       	ldi	r26, 0x33	; 51
    1cb6:	a0 83       	st	Z, r26
    1cb8:	31 97       	sbiw	r30, 0x01	; 1
    1cba:	60 83       	st	Z, r22
    1cbc:	31 97       	sbiw	r30, 0x01	; 1
    1cbe:	70 83       	st	Z, r23
    1cc0:	31 97       	sbiw	r30, 0x01	; 1
    1cc2:	10 82       	st	Z, r1
    1cc4:	31 97       	sbiw	r30, 0x01	; 1
    1cc6:	60 e8       	ldi	r22, 0x80	; 128
    1cc8:	60 83       	st	Z, r22
    1cca:	31 97       	sbiw	r30, 0x01	; 1
    1ccc:	10 82       	st	Z, r1
    1cce:	31 97       	sbiw	r30, 0x01	; 1
    1cd0:	62 e0       	ldi	r22, 0x02	; 2
    1cd2:	60 83       	st	Z, r22
    1cd4:	31 97       	sbiw	r30, 0x01	; 1
    1cd6:	63 e0       	ldi	r22, 0x03	; 3
    1cd8:	60 83       	st	Z, r22
    1cda:	31 97       	sbiw	r30, 0x01	; 1
    1cdc:	64 e0       	ldi	r22, 0x04	; 4
    1cde:	60 83       	st	Z, r22
    1ce0:	31 97       	sbiw	r30, 0x01	; 1
    1ce2:	65 e0       	ldi	r22, 0x05	; 5
    1ce4:	60 83       	st	Z, r22
    1ce6:	31 97       	sbiw	r30, 0x01	; 1
    1ce8:	66 e0       	ldi	r22, 0x06	; 6
    1cea:	60 83       	st	Z, r22
    1cec:	31 97       	sbiw	r30, 0x01	; 1
    1cee:	67 e0       	ldi	r22, 0x07	; 7
    1cf0:	60 83       	st	Z, r22
    1cf2:	31 97       	sbiw	r30, 0x01	; 1
    1cf4:	68 e0       	ldi	r22, 0x08	; 8
    1cf6:	60 83       	st	Z, r22
    1cf8:	31 97       	sbiw	r30, 0x01	; 1
    1cfa:	69 e0       	ldi	r22, 0x09	; 9
    1cfc:	60 83       	st	Z, r22
    1cfe:	31 97       	sbiw	r30, 0x01	; 1
    1d00:	60 e1       	ldi	r22, 0x10	; 16
    1d02:	60 83       	st	Z, r22
    1d04:	31 97       	sbiw	r30, 0x01	; 1
    1d06:	30 83       	st	Z, r19
    1d08:	31 97       	sbiw	r30, 0x01	; 1
    1d0a:	32 e1       	ldi	r19, 0x12	; 18
    1d0c:	30 83       	st	Z, r19
    1d0e:	31 97       	sbiw	r30, 0x01	; 1
    1d10:	33 e1       	ldi	r19, 0x13	; 19
    1d12:	30 83       	st	Z, r19
    1d14:	31 97       	sbiw	r30, 0x01	; 1
    1d16:	34 e1       	ldi	r19, 0x14	; 20
    1d18:	30 83       	st	Z, r19
    1d1a:	31 97       	sbiw	r30, 0x01	; 1
    1d1c:	35 e1       	ldi	r19, 0x15	; 21
    1d1e:	30 83       	st	Z, r19
    1d20:	31 97       	sbiw	r30, 0x01	; 1
    1d22:	36 e1       	ldi	r19, 0x16	; 22
    1d24:	30 83       	st	Z, r19
    1d26:	31 97       	sbiw	r30, 0x01	; 1
    1d28:	37 e1       	ldi	r19, 0x17	; 23
    1d2a:	30 83       	st	Z, r19
    1d2c:	31 97       	sbiw	r30, 0x01	; 1
    1d2e:	38 e1       	ldi	r19, 0x18	; 24
    1d30:	30 83       	st	Z, r19
    1d32:	31 97       	sbiw	r30, 0x01	; 1
    1d34:	39 e1       	ldi	r19, 0x19	; 25
    1d36:	30 83       	st	Z, r19
    1d38:	31 97       	sbiw	r30, 0x01	; 1
    1d3a:	30 e2       	ldi	r19, 0x20	; 32
    1d3c:	30 83       	st	Z, r19
    1d3e:	31 97       	sbiw	r30, 0x01	; 1
    1d40:	31 e2       	ldi	r19, 0x21	; 33
    1d42:	30 83       	st	Z, r19
    1d44:	31 97       	sbiw	r30, 0x01	; 1
    1d46:	20 83       	st	Z, r18
    1d48:	31 97       	sbiw	r30, 0x01	; 1
    1d4a:	23 e2       	ldi	r18, 0x23	; 35
    1d4c:	20 83       	st	Z, r18
    1d4e:	31 97       	sbiw	r30, 0x01	; 1
    1d50:	40 83       	st	Z, r20
    1d52:	31 97       	sbiw	r30, 0x01	; 1
    1d54:	50 83       	st	Z, r21
    1d56:	31 97       	sbiw	r30, 0x01	; 1
    1d58:	26 e2       	ldi	r18, 0x26	; 38
    1d5a:	20 83       	st	Z, r18
    1d5c:	31 97       	sbiw	r30, 0x01	; 1
    1d5e:	27 e2       	ldi	r18, 0x27	; 39
    1d60:	20 83       	st	Z, r18
    1d62:	31 97       	sbiw	r30, 0x01	; 1
    1d64:	28 e2       	ldi	r18, 0x28	; 40
    1d66:	20 83       	st	Z, r18
    1d68:	31 97       	sbiw	r30, 0x01	; 1
    1d6a:	29 e2       	ldi	r18, 0x29	; 41
    1d6c:	20 83       	st	Z, r18
    1d6e:	31 97       	sbiw	r30, 0x01	; 1
    1d70:	20 e3       	ldi	r18, 0x30	; 48
    1d72:	20 83       	st	Z, r18
    1d74:	31 97       	sbiw	r30, 0x01	; 1
    1d76:	21 e3       	ldi	r18, 0x31	; 49
    1d78:	20 83       	st	Z, r18
    1d7a:	86 97       	sbiw	r24, 0x26	; 38
    1d7c:	08 95       	ret

00001d7e <xPortStartScheduler>:
    1d7e:	8a df       	rcall	.-236    	; 0x1c94 <prvSetupTimerInterrupt>
    1d80:	a0 91 a6 02 	lds	r26, 0x02A6	; 0x8002a6 <pxCurrentTCB>
    1d84:	b0 91 a7 02 	lds	r27, 0x02A7	; 0x8002a7 <pxCurrentTCB+0x1>
    1d88:	cd 91       	ld	r28, X+
    1d8a:	cd bf       	out	0x3d, r28	; 61
    1d8c:	dd 91       	ld	r29, X+
    1d8e:	de bf       	out	0x3e, r29	; 62
    1d90:	ff 91       	pop	r31
    1d92:	ef 91       	pop	r30
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	bf 91       	pop	r27
    1d9a:	af 91       	pop	r26
    1d9c:	9f 91       	pop	r25
    1d9e:	8f 91       	pop	r24
    1da0:	7f 91       	pop	r23
    1da2:	6f 91       	pop	r22
    1da4:	5f 91       	pop	r21
    1da6:	4f 91       	pop	r20
    1da8:	3f 91       	pop	r19
    1daa:	2f 91       	pop	r18
    1dac:	1f 91       	pop	r17
    1dae:	0f 91       	pop	r16
    1db0:	ff 90       	pop	r15
    1db2:	ef 90       	pop	r14
    1db4:	df 90       	pop	r13
    1db6:	cf 90       	pop	r12
    1db8:	bf 90       	pop	r11
    1dba:	af 90       	pop	r10
    1dbc:	9f 90       	pop	r9
    1dbe:	8f 90       	pop	r8
    1dc0:	7f 90       	pop	r7
    1dc2:	6f 90       	pop	r6
    1dc4:	5f 90       	pop	r5
    1dc6:	4f 90       	pop	r4
    1dc8:	3f 90       	pop	r3
    1dca:	2f 90       	pop	r2
    1dcc:	1f 90       	pop	r1
    1dce:	0f 90       	pop	r0
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	0f 90       	pop	r0
    1dd4:	08 95       	ret
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	08 95       	ret

00001dda <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1dda:	0f 92       	push	r0
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	f8 94       	cli
    1de0:	0f 92       	push	r0
    1de2:	1f 92       	push	r1
    1de4:	11 24       	eor	r1, r1
    1de6:	2f 92       	push	r2
    1de8:	3f 92       	push	r3
    1dea:	4f 92       	push	r4
    1dec:	5f 92       	push	r5
    1dee:	6f 92       	push	r6
    1df0:	7f 92       	push	r7
    1df2:	8f 92       	push	r8
    1df4:	9f 92       	push	r9
    1df6:	af 92       	push	r10
    1df8:	bf 92       	push	r11
    1dfa:	cf 92       	push	r12
    1dfc:	df 92       	push	r13
    1dfe:	ef 92       	push	r14
    1e00:	ff 92       	push	r15
    1e02:	0f 93       	push	r16
    1e04:	1f 93       	push	r17
    1e06:	2f 93       	push	r18
    1e08:	3f 93       	push	r19
    1e0a:	4f 93       	push	r20
    1e0c:	5f 93       	push	r21
    1e0e:	6f 93       	push	r22
    1e10:	7f 93       	push	r23
    1e12:	8f 93       	push	r24
    1e14:	9f 93       	push	r25
    1e16:	af 93       	push	r26
    1e18:	bf 93       	push	r27
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
    1e1e:	ef 93       	push	r30
    1e20:	ff 93       	push	r31
    1e22:	a0 91 a6 02 	lds	r26, 0x02A6	; 0x8002a6 <pxCurrentTCB>
    1e26:	b0 91 a7 02 	lds	r27, 0x02A7	; 0x8002a7 <pxCurrentTCB+0x1>
    1e2a:	0d b6       	in	r0, 0x3d	; 61
    1e2c:	0d 92       	st	X+, r0
    1e2e:	0e b6       	in	r0, 0x3e	; 62
    1e30:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1e32:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1e36:	a0 91 a6 02 	lds	r26, 0x02A6	; 0x8002a6 <pxCurrentTCB>
    1e3a:	b0 91 a7 02 	lds	r27, 0x02A7	; 0x8002a7 <pxCurrentTCB+0x1>
    1e3e:	cd 91       	ld	r28, X+
    1e40:	cd bf       	out	0x3d, r28	; 61
    1e42:	dd 91       	ld	r29, X+
    1e44:	de bf       	out	0x3e, r29	; 62
    1e46:	ff 91       	pop	r31
    1e48:	ef 91       	pop	r30
    1e4a:	df 91       	pop	r29
    1e4c:	cf 91       	pop	r28
    1e4e:	bf 91       	pop	r27
    1e50:	af 91       	pop	r26
    1e52:	9f 91       	pop	r25
    1e54:	8f 91       	pop	r24
    1e56:	7f 91       	pop	r23
    1e58:	6f 91       	pop	r22
    1e5a:	5f 91       	pop	r21
    1e5c:	4f 91       	pop	r20
    1e5e:	3f 91       	pop	r19
    1e60:	2f 91       	pop	r18
    1e62:	1f 91       	pop	r17
    1e64:	0f 91       	pop	r16
    1e66:	ff 90       	pop	r15
    1e68:	ef 90       	pop	r14
    1e6a:	df 90       	pop	r13
    1e6c:	cf 90       	pop	r12
    1e6e:	bf 90       	pop	r11
    1e70:	af 90       	pop	r10
    1e72:	9f 90       	pop	r9
    1e74:	8f 90       	pop	r8
    1e76:	7f 90       	pop	r7
    1e78:	6f 90       	pop	r6
    1e7a:	5f 90       	pop	r5
    1e7c:	4f 90       	pop	r4
    1e7e:	3f 90       	pop	r3
    1e80:	2f 90       	pop	r2
    1e82:	1f 90       	pop	r1
    1e84:	0f 90       	pop	r0
    1e86:	0f be       	out	0x3f, r0	; 63
    1e88:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1e8a:	08 95       	ret

00001e8c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1e8c:	0f 92       	push	r0
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	0f 92       	push	r0
    1e94:	1f 92       	push	r1
    1e96:	11 24       	eor	r1, r1
    1e98:	2f 92       	push	r2
    1e9a:	3f 92       	push	r3
    1e9c:	4f 92       	push	r4
    1e9e:	5f 92       	push	r5
    1ea0:	6f 92       	push	r6
    1ea2:	7f 92       	push	r7
    1ea4:	8f 92       	push	r8
    1ea6:	9f 92       	push	r9
    1ea8:	af 92       	push	r10
    1eaa:	bf 92       	push	r11
    1eac:	cf 92       	push	r12
    1eae:	df 92       	push	r13
    1eb0:	ef 92       	push	r14
    1eb2:	ff 92       	push	r15
    1eb4:	0f 93       	push	r16
    1eb6:	1f 93       	push	r17
    1eb8:	2f 93       	push	r18
    1eba:	3f 93       	push	r19
    1ebc:	4f 93       	push	r20
    1ebe:	5f 93       	push	r21
    1ec0:	6f 93       	push	r22
    1ec2:	7f 93       	push	r23
    1ec4:	8f 93       	push	r24
    1ec6:	9f 93       	push	r25
    1ec8:	af 93       	push	r26
    1eca:	bf 93       	push	r27
    1ecc:	cf 93       	push	r28
    1ece:	df 93       	push	r29
    1ed0:	ef 93       	push	r30
    1ed2:	ff 93       	push	r31
    1ed4:	a0 91 a6 02 	lds	r26, 0x02A6	; 0x8002a6 <pxCurrentTCB>
    1ed8:	b0 91 a7 02 	lds	r27, 0x02A7	; 0x8002a7 <pxCurrentTCB+0x1>
    1edc:	0d b6       	in	r0, 0x3d	; 61
    1ede:	0d 92       	st	X+, r0
    1ee0:	0e b6       	in	r0, 0x3e	; 62
    1ee2:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    1ee4:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <xTaskIncrementTick>
    1ee8:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    1eea:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    1eee:	a0 91 a6 02 	lds	r26, 0x02A6	; 0x8002a6 <pxCurrentTCB>
    1ef2:	b0 91 a7 02 	lds	r27, 0x02A7	; 0x8002a7 <pxCurrentTCB+0x1>
    1ef6:	cd 91       	ld	r28, X+
    1ef8:	cd bf       	out	0x3d, r28	; 61
    1efa:	dd 91       	ld	r29, X+
    1efc:	de bf       	out	0x3e, r29	; 62
    1efe:	ff 91       	pop	r31
    1f00:	ef 91       	pop	r30
    1f02:	df 91       	pop	r29
    1f04:	cf 91       	pop	r28
    1f06:	bf 91       	pop	r27
    1f08:	af 91       	pop	r26
    1f0a:	9f 91       	pop	r25
    1f0c:	8f 91       	pop	r24
    1f0e:	7f 91       	pop	r23
    1f10:	6f 91       	pop	r22
    1f12:	5f 91       	pop	r21
    1f14:	4f 91       	pop	r20
    1f16:	3f 91       	pop	r19
    1f18:	2f 91       	pop	r18
    1f1a:	1f 91       	pop	r17
    1f1c:	0f 91       	pop	r16
    1f1e:	ff 90       	pop	r15
    1f20:	ef 90       	pop	r14
    1f22:	df 90       	pop	r13
    1f24:	cf 90       	pop	r12
    1f26:	bf 90       	pop	r11
    1f28:	af 90       	pop	r10
    1f2a:	9f 90       	pop	r9
    1f2c:	8f 90       	pop	r8
    1f2e:	7f 90       	pop	r7
    1f30:	6f 90       	pop	r6
    1f32:	5f 90       	pop	r5
    1f34:	4f 90       	pop	r4
    1f36:	3f 90       	pop	r3
    1f38:	2f 90       	pop	r2
    1f3a:	1f 90       	pop	r1
    1f3c:	0f 90       	pop	r0
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1f42:	08 95       	ret

00001f44 <__vector_12>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    1f44:	a3 df       	rcall	.-186    	; 0x1e8c <vPortYieldFromTick>
		asm volatile ( "reti" );
    1f46:	18 95       	reti

00001f48 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    1f48:	cf 93       	push	r28
    1f4a:	df 93       	push	r29
    1f4c:	ec 01       	movw	r28, r24
    void * pvReturn;

    vTaskSuspendAll();
    1f4e:	ff d7       	rcall	.+4094   	; 0x2f4e <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
    1f50:	ce 01       	movw	r24, r28
    1f52:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <malloc>
    1f56:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    1f58:	0e 94 66 18 	call	0x30cc	; 0x30cc <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
    1f5c:	ce 01       	movw	r24, r28
    1f5e:	df 91       	pop	r29
    1f60:	cf 91       	pop	r28
    1f62:	08 95       	ret

00001f64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    1f64:	cf 93       	push	r28
    1f66:	df 93       	push	r29
    if( pv != NULL )
    1f68:	00 97       	sbiw	r24, 0x00	; 0
    1f6a:	39 f0       	breq	.+14     	; 0x1f7a <vPortFree+0x16>
    1f6c:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
    1f6e:	ef d7       	rcall	.+4062   	; 0x2f4e <vTaskSuspendAll>
        {
            free( pv );
    1f70:	ce 01       	movw	r24, r28
    1f72:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
    1f76:	0e 94 66 18 	call	0x30cc	; 0x30cc <xTaskResumeAll>
    }
}
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	08 95       	ret

00001f80 <prvGetDisinheritPriorityAfterTimeout>:
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
    1f80:	dc 01       	movw	r26, r24
    1f82:	51 96       	adiw	r26, 0x11	; 17
    1f84:	2c 91       	ld	r18, X
    1f86:	51 97       	sbiw	r26, 0x11	; 17
    1f88:	22 23       	and	r18, r18
    1f8a:	41 f0       	breq	.+16     	; 0x1f9c <prvGetDisinheritPriorityAfterTimeout+0x1c>
    1f8c:	56 96       	adiw	r26, 0x16	; 22
    1f8e:	ed 91       	ld	r30, X+
    1f90:	fc 91       	ld	r31, X
    1f92:	57 97       	sbiw	r26, 0x17	; 23
    1f94:	90 81       	ld	r25, Z
    1f96:	8a e0       	ldi	r24, 0x0A	; 10
    1f98:	89 1b       	sub	r24, r25
    1f9a:	08 95       	ret
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	08 95       	ret

00001fa0 <prvIsQueueEmpty>:
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	f8 94       	cli
    1fa4:	0f 92       	push	r0
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	82 8d       	ldd	r24, Z+26	; 0x1a
    1faa:	81 11       	cpse	r24, r1
    1fac:	02 c0       	rjmp	.+4      	; 0x1fb2 <prvIsQueueEmpty+0x12>
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	01 c0       	rjmp	.+2      	; 0x1fb4 <prvIsQueueEmpty+0x14>
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f be       	out	0x3f, r0	; 63
    1fb8:	08 95       	ret

00001fba <prvIsQueueFull>:
    1fba:	0f b6       	in	r0, 0x3f	; 63
    1fbc:	f8 94       	cli
    1fbe:	0f 92       	push	r0
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	22 8d       	ldd	r18, Z+26	; 0x1a
    1fc4:	83 8d       	ldd	r24, Z+27	; 0x1b
    1fc6:	28 13       	cpse	r18, r24
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <prvIsQueueFull+0x14>
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	01 c0       	rjmp	.+2      	; 0x1fd0 <prvIsQueueFull+0x16>
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	0f 90       	pop	r0
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	08 95       	ret

00001fd6 <prvCopyDataToQueue>:
    1fd6:	0f 93       	push	r16
    1fd8:	1f 93       	push	r17
    1fda:	cf 93       	push	r28
    1fdc:	df 93       	push	r29
    1fde:	ec 01       	movw	r28, r24
    1fe0:	04 2f       	mov	r16, r20
    1fe2:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1fe4:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1fe6:	41 11       	cpse	r20, r1
    1fe8:	0c c0       	rjmp	.+24     	; 0x2002 <prvCopyDataToQueue+0x2c>
    1fea:	88 81       	ld	r24, Y
    1fec:	99 81       	ldd	r25, Y+1	; 0x01
    1fee:	89 2b       	or	r24, r25
    1ff0:	09 f0       	breq	.+2      	; 0x1ff4 <prvCopyDataToQueue+0x1e>
    1ff2:	42 c0       	rjmp	.+132    	; 0x2078 <prvCopyDataToQueue+0xa2>
    1ff4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff8:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <xTaskPriorityDisinherit>
    1ffc:	1d 82       	std	Y+5, r1	; 0x05
    1ffe:	1c 82       	std	Y+4, r1	; 0x04
    2000:	42 c0       	rjmp	.+132    	; 0x2086 <prvCopyDataToQueue+0xb0>
    2002:	01 11       	cpse	r16, r1
    2004:	17 c0       	rjmp	.+46     	; 0x2034 <prvCopyDataToQueue+0x5e>
    2006:	50 e0       	ldi	r21, 0x00	; 0
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
    200a:	9b 81       	ldd	r25, Y+3	; 0x03
    200c:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <memcpy>
    2010:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
    2014:	9b 81       	ldd	r25, Y+3	; 0x03
    2016:	82 0f       	add	r24, r18
    2018:	91 1d       	adc	r25, r1
    201a:	9b 83       	std	Y+3, r25	; 0x03
    201c:	8a 83       	std	Y+2, r24	; 0x02
    201e:	2c 81       	ldd	r18, Y+4	; 0x04
    2020:	3d 81       	ldd	r19, Y+5	; 0x05
    2022:	82 17       	cp	r24, r18
    2024:	93 07       	cpc	r25, r19
    2026:	50 f1       	brcs	.+84     	; 0x207c <prvCopyDataToQueue+0xa6>
    2028:	88 81       	ld	r24, Y
    202a:	99 81       	ldd	r25, Y+1	; 0x01
    202c:	9b 83       	std	Y+3, r25	; 0x03
    202e:	8a 83       	std	Y+2, r24	; 0x02
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	29 c0       	rjmp	.+82     	; 0x2086 <prvCopyDataToQueue+0xb0>
    2034:	50 e0       	ldi	r21, 0x00	; 0
    2036:	8e 81       	ldd	r24, Y+6	; 0x06
    2038:	9f 81       	ldd	r25, Y+7	; 0x07
    203a:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <memcpy>
    203e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	91 95       	neg	r25
    2044:	81 95       	neg	r24
    2046:	91 09       	sbc	r25, r1
    2048:	2e 81       	ldd	r18, Y+6	; 0x06
    204a:	3f 81       	ldd	r19, Y+7	; 0x07
    204c:	28 0f       	add	r18, r24
    204e:	39 1f       	adc	r19, r25
    2050:	3f 83       	std	Y+7, r19	; 0x07
    2052:	2e 83       	std	Y+6, r18	; 0x06
    2054:	48 81       	ld	r20, Y
    2056:	59 81       	ldd	r21, Y+1	; 0x01
    2058:	24 17       	cp	r18, r20
    205a:	35 07       	cpc	r19, r21
    205c:	30 f4       	brcc	.+12     	; 0x206a <prvCopyDataToQueue+0x94>
    205e:	2c 81       	ldd	r18, Y+4	; 0x04
    2060:	3d 81       	ldd	r19, Y+5	; 0x05
    2062:	82 0f       	add	r24, r18
    2064:	93 1f       	adc	r25, r19
    2066:	9f 83       	std	Y+7, r25	; 0x07
    2068:	8e 83       	std	Y+6, r24	; 0x06
    206a:	02 30       	cpi	r16, 0x02	; 2
    206c:	49 f4       	brne	.+18     	; 0x2080 <prvCopyDataToQueue+0xaa>
    206e:	11 23       	and	r17, r17
    2070:	49 f0       	breq	.+18     	; 0x2084 <prvCopyDataToQueue+0xae>
    2072:	11 50       	subi	r17, 0x01	; 1
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	07 c0       	rjmp	.+14     	; 0x2086 <prvCopyDataToQueue+0xb0>
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	05 c0       	rjmp	.+10     	; 0x2086 <prvCopyDataToQueue+0xb0>
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	03 c0       	rjmp	.+6      	; 0x2086 <prvCopyDataToQueue+0xb0>
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	01 c0       	rjmp	.+2      	; 0x2086 <prvCopyDataToQueue+0xb0>
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	1f 5f       	subi	r17, 0xFF	; 255
    2088:	1a 8f       	std	Y+26, r17	; 0x1a
    208a:	df 91       	pop	r29
    208c:	cf 91       	pop	r28
    208e:	1f 91       	pop	r17
    2090:	0f 91       	pop	r16
    2092:	08 95       	ret

00002094 <prvUnlockQueue>:
    2094:	1f 93       	push	r17
    2096:	cf 93       	push	r28
    2098:	df 93       	push	r29
    209a:	ec 01       	movw	r28, r24
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	0f 92       	push	r0
    20a2:	1e 8d       	ldd	r17, Y+30	; 0x1e
    20a4:	0b c0       	rjmp	.+22     	; 0x20bc <prvUnlockQueue+0x28>
    20a6:	89 89       	ldd	r24, Y+17	; 0x11
    20a8:	88 23       	and	r24, r24
    20aa:	51 f0       	breq	.+20     	; 0x20c0 <prvUnlockQueue+0x2c>
    20ac:	ce 01       	movw	r24, r28
    20ae:	41 96       	adiw	r24, 0x11	; 17
    20b0:	0e 94 4e 19 	call	0x329c	; 0x329c <xTaskRemoveFromEventList>
    20b4:	81 11       	cpse	r24, r1
    20b6:	0e 94 07 1a 	call	0x340e	; 0x340e <vTaskMissedYield>
    20ba:	11 50       	subi	r17, 0x01	; 1
    20bc:	11 16       	cp	r1, r17
    20be:	9c f3       	brlt	.-26     	; 0x20a6 <prvUnlockQueue+0x12>
    20c0:	8f ef       	ldi	r24, 0xFF	; 255
    20c2:	8e 8f       	std	Y+30, r24	; 0x1e
    20c4:	0f 90       	pop	r0
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	0f b6       	in	r0, 0x3f	; 63
    20ca:	f8 94       	cli
    20cc:	0f 92       	push	r0
    20ce:	1d 8d       	ldd	r17, Y+29	; 0x1d
    20d0:	0b c0       	rjmp	.+22     	; 0x20e8 <prvUnlockQueue+0x54>
    20d2:	88 85       	ldd	r24, Y+8	; 0x08
    20d4:	88 23       	and	r24, r24
    20d6:	51 f0       	breq	.+20     	; 0x20ec <prvUnlockQueue+0x58>
    20d8:	ce 01       	movw	r24, r28
    20da:	08 96       	adiw	r24, 0x08	; 8
    20dc:	0e 94 4e 19 	call	0x329c	; 0x329c <xTaskRemoveFromEventList>
    20e0:	81 11       	cpse	r24, r1
    20e2:	0e 94 07 1a 	call	0x340e	; 0x340e <vTaskMissedYield>
    20e6:	11 50       	subi	r17, 0x01	; 1
    20e8:	11 16       	cp	r1, r17
    20ea:	9c f3       	brlt	.-26     	; 0x20d2 <prvUnlockQueue+0x3e>
    20ec:	8f ef       	ldi	r24, 0xFF	; 255
    20ee:	8d 8f       	std	Y+29, r24	; 0x1d
    20f0:	0f 90       	pop	r0
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	df 91       	pop	r29
    20f6:	cf 91       	pop	r28
    20f8:	1f 91       	pop	r17
    20fa:	08 95       	ret

000020fc <xQueueGenericReset>:
    20fc:	cf 93       	push	r28
    20fe:	df 93       	push	r29
    2100:	ec 01       	movw	r28, r24
    2102:	0f b6       	in	r0, 0x3f	; 63
    2104:	f8 94       	cli
    2106:	0f 92       	push	r0
    2108:	e8 81       	ld	r30, Y
    210a:	f9 81       	ldd	r31, Y+1	; 0x01
    210c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    210e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	82 9f       	mul	r24, r18
    2116:	a0 01       	movw	r20, r0
    2118:	83 9f       	mul	r24, r19
    211a:	50 0d       	add	r21, r0
    211c:	92 9f       	mul	r25, r18
    211e:	50 0d       	add	r21, r0
    2120:	11 24       	eor	r1, r1
    2122:	4e 0f       	add	r20, r30
    2124:	5f 1f       	adc	r21, r31
    2126:	5d 83       	std	Y+5, r21	; 0x05
    2128:	4c 83       	std	Y+4, r20	; 0x04
    212a:	1a 8e       	std	Y+26, r1	; 0x1a
    212c:	fb 83       	std	Y+3, r31	; 0x03
    212e:	ea 83       	std	Y+2, r30	; 0x02
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	28 9f       	mul	r18, r24
    2134:	a0 01       	movw	r20, r0
    2136:	29 9f       	mul	r18, r25
    2138:	50 0d       	add	r21, r0
    213a:	38 9f       	mul	r19, r24
    213c:	50 0d       	add	r21, r0
    213e:	11 24       	eor	r1, r1
    2140:	cf 01       	movw	r24, r30
    2142:	84 0f       	add	r24, r20
    2144:	95 1f       	adc	r25, r21
    2146:	9f 83       	std	Y+7, r25	; 0x07
    2148:	8e 83       	std	Y+6, r24	; 0x06
    214a:	8f ef       	ldi	r24, 0xFF	; 255
    214c:	8d 8f       	std	Y+29, r24	; 0x1d
    214e:	8e 8f       	std	Y+30, r24	; 0x1e
    2150:	61 11       	cpse	r22, r1
    2152:	0b c0       	rjmp	.+22     	; 0x216a <xQueueGenericReset+0x6e>
    2154:	88 85       	ldd	r24, Y+8	; 0x08
    2156:	88 23       	and	r24, r24
    2158:	71 f0       	breq	.+28     	; 0x2176 <xQueueGenericReset+0x7a>
    215a:	ce 01       	movw	r24, r28
    215c:	08 96       	adiw	r24, 0x08	; 8
    215e:	0e 94 4e 19 	call	0x329c	; 0x329c <xTaskRemoveFromEventList>
    2162:	88 23       	and	r24, r24
    2164:	41 f0       	breq	.+16     	; 0x2176 <xQueueGenericReset+0x7a>
    2166:	39 de       	rcall	.-910    	; 0x1dda <vPortYield>
    2168:	06 c0       	rjmp	.+12     	; 0x2176 <xQueueGenericReset+0x7a>
    216a:	ce 01       	movw	r24, r28
    216c:	08 96       	adiw	r24, 0x08	; 8
    216e:	07 dd       	rcall	.-1522   	; 0x1b7e <vListInitialise>
    2170:	ce 01       	movw	r24, r28
    2172:	41 96       	adiw	r24, 0x11	; 17
    2174:	04 dd       	rcall	.-1528   	; 0x1b7e <vListInitialise>
    2176:	0f 90       	pop	r0
    2178:	0f be       	out	0x3f, r0	; 63
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	df 91       	pop	r29
    217e:	cf 91       	pop	r28
    2180:	08 95       	ret

00002182 <prvInitialiseNewQueue>:
    2182:	0f 93       	push	r16
    2184:	1f 93       	push	r17
    2186:	f8 01       	movw	r30, r16
    2188:	61 11       	cpse	r22, r1
    218a:	03 c0       	rjmp	.+6      	; 0x2192 <prvInitialiseNewQueue+0x10>
    218c:	11 83       	std	Z+1, r17	; 0x01
    218e:	00 83       	st	Z, r16
    2190:	02 c0       	rjmp	.+4      	; 0x2196 <prvInitialiseNewQueue+0x14>
    2192:	51 83       	std	Z+1, r21	; 0x01
    2194:	40 83       	st	Z, r20
    2196:	83 8f       	std	Z+27, r24	; 0x1b
    2198:	64 8f       	std	Z+28, r22	; 0x1c
    219a:	61 e0       	ldi	r22, 0x01	; 1
    219c:	cf 01       	movw	r24, r30
    219e:	ae df       	rcall	.-164    	; 0x20fc <xQueueGenericReset>
    21a0:	1f 91       	pop	r17
    21a2:	0f 91       	pop	r16
    21a4:	08 95       	ret

000021a6 <xQueueGenericCreate>:
    21a6:	df 92       	push	r13
    21a8:	ef 92       	push	r14
    21aa:	ff 92       	push	r15
    21ac:	0f 93       	push	r16
    21ae:	1f 93       	push	r17
    21b0:	cf 93       	push	r28
    21b2:	df 93       	push	r29
    21b4:	e8 2e       	mov	r14, r24
    21b6:	f6 2e       	mov	r15, r22
    21b8:	d4 2e       	mov	r13, r20
    21ba:	66 23       	and	r22, r22
    21bc:	21 f0       	breq	.+8      	; 0x21c6 <xQueueGenericCreate+0x20>
    21be:	86 9f       	mul	r24, r22
    21c0:	c0 01       	movw	r24, r0
    21c2:	11 24       	eor	r1, r1
    21c4:	02 c0       	rjmp	.+4      	; 0x21ca <xQueueGenericCreate+0x24>
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	4f 96       	adiw	r24, 0x1f	; 31
    21cc:	bd de       	rcall	.-646    	; 0x1f48 <pvPortMalloc>
    21ce:	ec 01       	movw	r28, r24
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	41 f0       	breq	.+16     	; 0x21e4 <xQueueGenericCreate+0x3e>
    21d4:	8c 01       	movw	r16, r24
    21d6:	2d 2d       	mov	r18, r13
    21d8:	ac 01       	movw	r20, r24
    21da:	41 5e       	subi	r20, 0xE1	; 225
    21dc:	5f 4f       	sbci	r21, 0xFF	; 255
    21de:	6f 2d       	mov	r22, r15
    21e0:	8e 2d       	mov	r24, r14
    21e2:	cf df       	rcall	.-98     	; 0x2182 <prvInitialiseNewQueue>
    21e4:	ce 01       	movw	r24, r28
    21e6:	df 91       	pop	r29
    21e8:	cf 91       	pop	r28
    21ea:	1f 91       	pop	r17
    21ec:	0f 91       	pop	r16
    21ee:	ff 90       	pop	r15
    21f0:	ef 90       	pop	r14
    21f2:	df 90       	pop	r13
    21f4:	08 95       	ret

000021f6 <xQueueCreateCountingSemaphore>:
    21f6:	cf 93       	push	r28
    21f8:	c6 2f       	mov	r28, r22
    21fa:	42 e0       	ldi	r20, 0x02	; 2
    21fc:	60 e0       	ldi	r22, 0x00	; 0
    21fe:	d3 df       	rcall	.-90     	; 0x21a6 <xQueueGenericCreate>
    2200:	00 97       	sbiw	r24, 0x00	; 0
    2202:	11 f0       	breq	.+4      	; 0x2208 <xQueueCreateCountingSemaphore+0x12>
    2204:	fc 01       	movw	r30, r24
    2206:	c2 8f       	std	Z+26, r28	; 0x1a
    2208:	cf 91       	pop	r28
    220a:	08 95       	ret

0000220c <xQueueGenericSend>:
    220c:	cf 92       	push	r12
    220e:	df 92       	push	r13
    2210:	ef 92       	push	r14
    2212:	ff 92       	push	r15
    2214:	0f 93       	push	r16
    2216:	1f 93       	push	r17
    2218:	cf 93       	push	r28
    221a:	df 93       	push	r29
    221c:	00 d0       	rcall	.+0      	; 0x221e <xQueueGenericSend+0x12>
    221e:	00 d0       	rcall	.+0      	; 0x2220 <xQueueGenericSend+0x14>
    2220:	1f 92       	push	r1
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	8c 01       	movw	r16, r24
    2228:	7b 01       	movw	r14, r22
    222a:	5d 83       	std	Y+5, r21	; 0x05
    222c:	4c 83       	std	Y+4, r20	; 0x04
    222e:	c2 2e       	mov	r12, r18
    2230:	d1 2c       	mov	r13, r1
    2232:	0f b6       	in	r0, 0x3f	; 63
    2234:	f8 94       	cli
    2236:	0f 92       	push	r0
    2238:	f8 01       	movw	r30, r16
    223a:	92 8d       	ldd	r25, Z+26	; 0x1a
    223c:	83 8d       	ldd	r24, Z+27	; 0x1b
    223e:	98 17       	cp	r25, r24
    2240:	18 f0       	brcs	.+6      	; 0x2248 <xQueueGenericSend+0x3c>
    2242:	f2 e0       	ldi	r31, 0x02	; 2
    2244:	cf 12       	cpse	r12, r31
    2246:	16 c0       	rjmp	.+44     	; 0x2274 <xQueueGenericSend+0x68>
    2248:	4c 2d       	mov	r20, r12
    224a:	b7 01       	movw	r22, r14
    224c:	c8 01       	movw	r24, r16
    224e:	c3 de       	rcall	.-634    	; 0x1fd6 <prvCopyDataToQueue>
    2250:	f8 01       	movw	r30, r16
    2252:	91 89       	ldd	r25, Z+17	; 0x11
    2254:	99 23       	and	r25, r25
    2256:	41 f0       	breq	.+16     	; 0x2268 <xQueueGenericSend+0x5c>
    2258:	c8 01       	movw	r24, r16
    225a:	41 96       	adiw	r24, 0x11	; 17
    225c:	0e 94 4e 19 	call	0x329c	; 0x329c <xTaskRemoveFromEventList>
    2260:	88 23       	and	r24, r24
    2262:	21 f0       	breq	.+8      	; 0x226c <xQueueGenericSend+0x60>
    2264:	ba dd       	rcall	.-1164   	; 0x1dda <vPortYield>
    2266:	02 c0       	rjmp	.+4      	; 0x226c <xQueueGenericSend+0x60>
    2268:	81 11       	cpse	r24, r1
    226a:	b7 dd       	rcall	.-1170   	; 0x1dda <vPortYield>
    226c:	0f 90       	pop	r0
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	43 c0       	rjmp	.+134    	; 0x22fa <xQueueGenericSend+0xee>
    2274:	8c 81       	ldd	r24, Y+4	; 0x04
    2276:	9d 81       	ldd	r25, Y+5	; 0x05
    2278:	89 2b       	or	r24, r25
    227a:	21 f4       	brne	.+8      	; 0x2284 <xQueueGenericSend+0x78>
    227c:	0f 90       	pop	r0
    227e:	0f be       	out	0x3f, r0	; 63
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	3b c0       	rjmp	.+118    	; 0x22fa <xQueueGenericSend+0xee>
    2284:	d1 10       	cpse	r13, r1
    2286:	06 c0       	rjmp	.+12     	; 0x2294 <xQueueGenericSend+0x88>
    2288:	ce 01       	movw	r24, r28
    228a:	01 96       	adiw	r24, 0x01	; 1
    228c:	0e 94 ce 19 	call	0x339c	; 0x339c <vTaskInternalSetTimeOutState>
    2290:	dd 24       	eor	r13, r13
    2292:	d3 94       	inc	r13
    2294:	0f 90       	pop	r0
    2296:	0f be       	out	0x3f, r0	; 63
    2298:	5a d6       	rcall	.+3252   	; 0x2f4e <vTaskSuspendAll>
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	0f 92       	push	r0
    22a0:	f8 01       	movw	r30, r16
    22a2:	85 8d       	ldd	r24, Z+29	; 0x1d
    22a4:	8f 3f       	cpi	r24, 0xFF	; 255
    22a6:	09 f4       	brne	.+2      	; 0x22aa <xQueueGenericSend+0x9e>
    22a8:	15 8e       	std	Z+29, r1	; 0x1d
    22aa:	f8 01       	movw	r30, r16
    22ac:	86 8d       	ldd	r24, Z+30	; 0x1e
    22ae:	8f 3f       	cpi	r24, 0xFF	; 255
    22b0:	09 f4       	brne	.+2      	; 0x22b4 <xQueueGenericSend+0xa8>
    22b2:	16 8e       	std	Z+30, r1	; 0x1e
    22b4:	0f 90       	pop	r0
    22b6:	0f be       	out	0x3f, r0	; 63
    22b8:	be 01       	movw	r22, r28
    22ba:	6c 5f       	subi	r22, 0xFC	; 252
    22bc:	7f 4f       	sbci	r23, 0xFF	; 255
    22be:	ce 01       	movw	r24, r28
    22c0:	01 96       	adiw	r24, 0x01	; 1
    22c2:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <xTaskCheckForTimeOut>
    22c6:	81 11       	cpse	r24, r1
    22c8:	14 c0       	rjmp	.+40     	; 0x22f2 <xQueueGenericSend+0xe6>
    22ca:	c8 01       	movw	r24, r16
    22cc:	76 de       	rcall	.-788    	; 0x1fba <prvIsQueueFull>
    22ce:	88 23       	and	r24, r24
    22d0:	61 f0       	breq	.+24     	; 0x22ea <xQueueGenericSend+0xde>
    22d2:	6c 81       	ldd	r22, Y+4	; 0x04
    22d4:	7d 81       	ldd	r23, Y+5	; 0x05
    22d6:	c8 01       	movw	r24, r16
    22d8:	08 96       	adiw	r24, 0x08	; 8
    22da:	cf d7       	rcall	.+3998   	; 0x327a <vTaskPlaceOnEventList>
    22dc:	c8 01       	movw	r24, r16
    22de:	da de       	rcall	.-588    	; 0x2094 <prvUnlockQueue>
    22e0:	f5 d6       	rcall	.+3562   	; 0x30cc <xTaskResumeAll>
    22e2:	81 11       	cpse	r24, r1
    22e4:	a6 cf       	rjmp	.-180    	; 0x2232 <xQueueGenericSend+0x26>
    22e6:	79 dd       	rcall	.-1294   	; 0x1dda <vPortYield>
    22e8:	a4 cf       	rjmp	.-184    	; 0x2232 <xQueueGenericSend+0x26>
    22ea:	c8 01       	movw	r24, r16
    22ec:	d3 de       	rcall	.-602    	; 0x2094 <prvUnlockQueue>
    22ee:	ee d6       	rcall	.+3548   	; 0x30cc <xTaskResumeAll>
    22f0:	a0 cf       	rjmp	.-192    	; 0x2232 <xQueueGenericSend+0x26>
    22f2:	c8 01       	movw	r24, r16
    22f4:	cf de       	rcall	.-610    	; 0x2094 <prvUnlockQueue>
    22f6:	ea d6       	rcall	.+3540   	; 0x30cc <xTaskResumeAll>
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	df 91       	pop	r29
    2306:	cf 91       	pop	r28
    2308:	1f 91       	pop	r17
    230a:	0f 91       	pop	r16
    230c:	ff 90       	pop	r15
    230e:	ef 90       	pop	r14
    2310:	df 90       	pop	r13
    2312:	cf 90       	pop	r12
    2314:	08 95       	ret

00002316 <prvInitialiseMutex>:
    2316:	00 97       	sbiw	r24, 0x00	; 0
    2318:	61 f0       	breq	.+24     	; 0x2332 <prvInitialiseMutex+0x1c>
    231a:	fc 01       	movw	r30, r24
    231c:	15 82       	std	Z+5, r1	; 0x05
    231e:	14 82       	std	Z+4, r1	; 0x04
    2320:	11 82       	std	Z+1, r1	; 0x01
    2322:	10 82       	st	Z, r1
    2324:	16 82       	std	Z+6, r1	; 0x06
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	40 e0       	ldi	r20, 0x00	; 0
    232a:	50 e0       	ldi	r21, 0x00	; 0
    232c:	60 e0       	ldi	r22, 0x00	; 0
    232e:	70 e0       	ldi	r23, 0x00	; 0
    2330:	6d cf       	rjmp	.-294    	; 0x220c <xQueueGenericSend>
    2332:	08 95       	ret

00002334 <xQueueCreateMutex>:
    2334:	cf 93       	push	r28
    2336:	df 93       	push	r29
    2338:	48 2f       	mov	r20, r24
    233a:	60 e0       	ldi	r22, 0x00	; 0
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	33 df       	rcall	.-410    	; 0x21a6 <xQueueGenericCreate>
    2340:	ec 01       	movw	r28, r24
    2342:	e9 df       	rcall	.-46     	; 0x2316 <prvInitialiseMutex>
    2344:	ce 01       	movw	r24, r28
    2346:	df 91       	pop	r29
    2348:	cf 91       	pop	r28
    234a:	08 95       	ret

0000234c <xQueueGiveFromISR>:
    234c:	cf 93       	push	r28
    234e:	df 93       	push	r29
    2350:	fc 01       	movw	r30, r24
    2352:	82 8d       	ldd	r24, Z+26	; 0x1a
    2354:	93 8d       	ldd	r25, Z+27	; 0x1b
    2356:	89 17       	cp	r24, r25
    2358:	b8 f4       	brcc	.+46     	; 0x2388 <xQueueGiveFromISR+0x3c>
    235a:	96 8d       	ldd	r25, Z+30	; 0x1e
    235c:	8f 5f       	subi	r24, 0xFF	; 255
    235e:	82 8f       	std	Z+26, r24	; 0x1a
    2360:	9f 3f       	cpi	r25, 0xFF	; 255
    2362:	71 f4       	brne	.+28     	; 0x2380 <xQueueGiveFromISR+0x34>
    2364:	81 89       	ldd	r24, Z+17	; 0x11
    2366:	88 23       	and	r24, r24
    2368:	89 f0       	breq	.+34     	; 0x238c <xQueueGiveFromISR+0x40>
    236a:	eb 01       	movw	r28, r22
    236c:	cf 01       	movw	r24, r30
    236e:	41 96       	adiw	r24, 0x11	; 17
    2370:	95 d7       	rcall	.+3882   	; 0x329c <xTaskRemoveFromEventList>
    2372:	88 23       	and	r24, r24
    2374:	69 f0       	breq	.+26     	; 0x2390 <xQueueGiveFromISR+0x44>
    2376:	20 97       	sbiw	r28, 0x00	; 0
    2378:	69 f0       	breq	.+26     	; 0x2394 <xQueueGiveFromISR+0x48>
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	88 83       	st	Y, r24
    237e:	0b c0       	rjmp	.+22     	; 0x2396 <xQueueGiveFromISR+0x4a>
    2380:	9f 5f       	subi	r25, 0xFF	; 255
    2382:	96 8f       	std	Z+30, r25	; 0x1e
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	07 c0       	rjmp	.+14     	; 0x2396 <xQueueGiveFromISR+0x4a>
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	05 c0       	rjmp	.+10     	; 0x2396 <xQueueGiveFromISR+0x4a>
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	03 c0       	rjmp	.+6      	; 0x2396 <xQueueGiveFromISR+0x4a>
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	01 c0       	rjmp	.+2      	; 0x2396 <xQueueGiveFromISR+0x4a>
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	df 91       	pop	r29
    2398:	cf 91       	pop	r28
    239a:	08 95       	ret

0000239c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
    239c:	ef 92       	push	r14
    239e:	ff 92       	push	r15
    23a0:	0f 93       	push	r16
    23a2:	1f 93       	push	r17
    23a4:	cf 93       	push	r28
    23a6:	df 93       	push	r29
    23a8:	00 d0       	rcall	.+0      	; 0x23aa <xQueueSemaphoreTake+0xe>
    23aa:	00 d0       	rcall	.+0      	; 0x23ac <xQueueSemaphoreTake+0x10>
    23ac:	1f 92       	push	r1
    23ae:	cd b7       	in	r28, 0x3d	; 61
    23b0:	de b7       	in	r29, 0x3e	; 62
    23b2:	8c 01       	movw	r16, r24
    23b4:	7d 83       	std	Y+5, r23	; 0x05
    23b6:	6c 83       	std	Y+4, r22	; 0x04
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
    23b8:	e1 2c       	mov	r14, r1
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
BaseType_t xEntryTimeSet = pdFALSE;
    23ba:	f1 2c       	mov	r15, r1
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    23bc:	0f b6       	in	r0, 0x3f	; 63
    23be:	f8 94       	cli
    23c0:	0f 92       	push	r0
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    23c2:	f8 01       	movw	r30, r16
    23c4:	82 8d       	ldd	r24, Z+26	; 0x1a

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    23c6:	88 23       	and	r24, r24
    23c8:	c1 f0       	breq	.+48     	; 0x23fa <xQueueSemaphoreTake+0x5e>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    23ca:	81 50       	subi	r24, 0x01	; 1
    23cc:	82 8f       	std	Z+26, r24	; 0x1a

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    23ce:	80 81       	ld	r24, Z
    23d0:	91 81       	ldd	r25, Z+1	; 0x01
    23d2:	89 2b       	or	r24, r25
    23d4:	29 f4       	brne	.+10     	; 0x23e0 <xQueueSemaphoreTake+0x44>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
    23d6:	0e 94 0d 1b 	call	0x361a	; 0x361a <pvTaskIncrementMutexHeldCount>
    23da:	f8 01       	movw	r30, r16
    23dc:	95 83       	std	Z+5, r25	; 0x05
    23de:	84 83       	std	Z+4, r24	; 0x04
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    23e0:	f8 01       	movw	r30, r16
    23e2:	80 85       	ldd	r24, Z+8	; 0x08
    23e4:	88 23       	and	r24, r24
    23e6:	29 f0       	breq	.+10     	; 0x23f2 <xQueueSemaphoreTake+0x56>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    23e8:	c8 01       	movw	r24, r16
    23ea:	08 96       	adiw	r24, 0x08	; 8
    23ec:	57 d7       	rcall	.+3758   	; 0x329c <xTaskRemoveFromEventList>
    23ee:	81 11       	cpse	r24, r1
					{
						queueYIELD_IF_USING_PREEMPTION();
    23f0:	f4 dc       	rcall	.-1560   	; 0x1dda <vPortYield>
    23f2:	0f 90       	pop	r0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	81 e0       	ldi	r24, 0x01	; 1
				return pdPASS;
    23f8:	65 c0       	rjmp	.+202    	; 0x24c4 <xQueueSemaphoreTake+0x128>
    23fa:	8c 81       	ldd	r24, Y+4	; 0x04
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    23fc:	9d 81       	ldd	r25, Y+5	; 0x05
    23fe:	89 2b       	or	r24, r25
    2400:	21 f4       	brne	.+8      	; 0x240a <xQueueSemaphoreTake+0x6e>
    2402:	0f 90       	pop	r0
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	80 e0       	ldi	r24, 0x00	; 0
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2408:	5d c0       	rjmp	.+186    	; 0x24c4 <xQueueSemaphoreTake+0x128>
    240a:	f1 10       	cpse	r15, r1
				}
				else if( xEntryTimeSet == pdFALSE )
    240c:	05 c0       	rjmp	.+10     	; 0x2418 <xQueueSemaphoreTake+0x7c>
    240e:	ce 01       	movw	r24, r28
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    2410:	01 96       	adiw	r24, 0x01	; 1
    2412:	c4 d7       	rcall	.+3976   	; 0x339c <vTaskInternalSetTimeOutState>
    2414:	ff 24       	eor	r15, r15
					xEntryTimeSet = pdTRUE;
    2416:	f3 94       	inc	r15
    2418:	0f 90       	pop	r0
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    241a:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
    241c:	98 d5       	rcall	.+2864   	; 0x2f4e <vTaskSuspendAll>
    241e:	0f b6       	in	r0, 0x3f	; 63
		prvLockQueue( pxQueue );
    2420:	f8 94       	cli
    2422:	0f 92       	push	r0
    2424:	f8 01       	movw	r30, r16
    2426:	85 8d       	ldd	r24, Z+29	; 0x1d
    2428:	8f 3f       	cpi	r24, 0xFF	; 255
    242a:	09 f4       	brne	.+2      	; 0x242e <xQueueSemaphoreTake+0x92>
    242c:	15 8e       	std	Z+29, r1	; 0x1d
    242e:	f8 01       	movw	r30, r16
    2430:	86 8d       	ldd	r24, Z+30	; 0x1e
    2432:	8f 3f       	cpi	r24, 0xFF	; 255
    2434:	09 f4       	brne	.+2      	; 0x2438 <xQueueSemaphoreTake+0x9c>
    2436:	16 8e       	std	Z+30, r1	; 0x1e
    2438:	0f 90       	pop	r0
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	be 01       	movw	r22, r28

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    243e:	6c 5f       	subi	r22, 0xFC	; 252
    2440:	7f 4f       	sbci	r23, 0xFF	; 255
    2442:	ce 01       	movw	r24, r28
    2444:	01 96       	adiw	r24, 0x01	; 1
    2446:	b5 d7       	rcall	.+3946   	; 0x33b2 <xTaskCheckForTimeOut>
    2448:	81 11       	cpse	r24, r1
    244a:	22 c0       	rjmp	.+68     	; 0x2490 <xQueueSemaphoreTake+0xf4>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    244c:	c8 01       	movw	r24, r16
    244e:	a8 dd       	rcall	.-1200   	; 0x1fa0 <prvIsQueueEmpty>
    2450:	88 23       	and	r24, r24
    2452:	d1 f0       	breq	.+52     	; 0x2488 <xQueueSemaphoreTake+0xec>
    2454:	f8 01       	movw	r30, r16
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2456:	80 81       	ld	r24, Z
    2458:	91 81       	ldd	r25, Z+1	; 0x01
    245a:	89 2b       	or	r24, r25
    245c:	49 f4       	brne	.+18     	; 0x2470 <xQueueSemaphoreTake+0xd4>
					{
						taskENTER_CRITICAL();
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	0f 92       	push	r0
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
    2464:	84 81       	ldd	r24, Z+4	; 0x04
    2466:	95 81       	ldd	r25, Z+5	; 0x05
    2468:	d6 d7       	rcall	.+4012   	; 0x3416 <xTaskPriorityInherit>
    246a:	e8 2e       	mov	r14, r24
    246c:	0f 90       	pop	r0
						}
						taskEXIT_CRITICAL();
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	6c 81       	ldd	r22, Y+4	; 0x04
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2472:	7d 81       	ldd	r23, Y+5	; 0x05
    2474:	c8 01       	movw	r24, r16
    2476:	41 96       	adiw	r24, 0x11	; 17
				prvUnlockQueue( pxQueue );
    2478:	00 d7       	rcall	.+3584   	; 0x327a <vTaskPlaceOnEventList>
    247a:	c8 01       	movw	r24, r16
				if( xTaskResumeAll() == pdFALSE )
    247c:	0b de       	rcall	.-1002   	; 0x2094 <prvUnlockQueue>
    247e:	26 d6       	rcall	.+3148   	; 0x30cc <xTaskResumeAll>
				{
					portYIELD_WITHIN_API();
    2480:	81 11       	cpse	r24, r1
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
    2482:	9c cf       	rjmp	.-200    	; 0x23bc <xQueueSemaphoreTake+0x20>
    2484:	aa dc       	rcall	.-1708   	; 0x1dda <vPortYield>
				( void ) xTaskResumeAll();
    2486:	9a cf       	rjmp	.-204    	; 0x23bc <xQueueSemaphoreTake+0x20>
    2488:	c8 01       	movw	r24, r16
    248a:	04 de       	rcall	.-1016   	; 0x2094 <prvUnlockQueue>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
    248c:	1f d6       	rcall	.+3134   	; 0x30cc <xTaskResumeAll>
    248e:	96 cf       	rjmp	.-212    	; 0x23bc <xQueueSemaphoreTake+0x20>
    2490:	c8 01       	movw	r24, r16
			( void ) xTaskResumeAll();
    2492:	00 de       	rcall	.-1024   	; 0x2094 <prvUnlockQueue>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2494:	1b d6       	rcall	.+3126   	; 0x30cc <xTaskResumeAll>
    2496:	c8 01       	movw	r24, r16
    2498:	83 dd       	rcall	.-1274   	; 0x1fa0 <prvIsQueueEmpty>
    249a:	88 23       	and	r24, r24
    249c:	09 f4       	brne	.+2      	; 0x24a0 <xQueueSemaphoreTake+0x104>
    249e:	8e cf       	rjmp	.-228    	; 0x23bc <xQueueSemaphoreTake+0x20>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
    24a0:	ee 20       	and	r14, r14
    24a2:	79 f0       	breq	.+30     	; 0x24c2 <xQueueSemaphoreTake+0x126>
					{
						taskENTER_CRITICAL();
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	0f 92       	push	r0
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
    24aa:	c8 01       	movw	r24, r16
    24ac:	69 dd       	rcall	.-1326   	; 0x1f80 <prvGetDisinheritPriorityAfterTimeout>
    24ae:	68 2f       	mov	r22, r24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
    24b0:	f8 01       	movw	r30, r16
    24b2:	84 81       	ldd	r24, Z+4	; 0x04
    24b4:	95 81       	ldd	r25, Z+5	; 0x05
    24b6:	0e 94 bd 1a 	call	0x357a	; 0x357a <vTaskPriorityDisinheritAfterTimeout>
    24ba:	0f 90       	pop	r0
						}
						taskEXIT_CRITICAL();
    24bc:	0f be       	out	0x3f, r0	; 63
    24be:	80 e0       	ldi	r24, 0x00	; 0
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    24c0:	01 c0       	rjmp	.+2      	; 0x24c4 <xQueueSemaphoreTake+0x128>
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	0f 90       	pop	r0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
    24c6:	0f 90       	pop	r0
    24c8:	0f 90       	pop	r0
    24ca:	0f 90       	pop	r0
    24cc:	0f 90       	pop	r0
    24ce:	df 91       	pop	r29
    24d0:	cf 91       	pop	r28
    24d2:	1f 91       	pop	r17
    24d4:	0f 91       	pop	r16
    24d6:	ff 90       	pop	r15
    24d8:	ef 90       	pop	r14
    24da:	08 95       	ret

000024dc <ESP01_CheckConnectionTask>:
void ESP01_CheckConnectionTask(void *pvParam)
{
	u_int8 ret = 0;
	while(1)
	{
		ret = xSemaphoreTake(ESP_SEM, 100);
    24dc:	64 e6       	ldi	r22, 0x64	; 100
    24de:	70 e0       	ldi	r23, 0x00	; 0
    24e0:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <ESP_SEM>
    24e4:	90 91 98 07 	lds	r25, 0x0798	; 0x800798 <ESP_SEM+0x1>
    24e8:	59 df       	rcall	.-334    	; 0x239c <xQueueSemaphoreTake>
		if(ret == 1)
    24ea:	81 30       	cpi	r24, 0x01	; 1
    24ec:	f9 f4       	brne	.+62     	; 0x252c <ESP01_CheckConnectionTask+0x50>
		{
			if(ESP01_CheckConnection() == 3)
    24ee:	0e 94 a2 02 	call	0x544	; 0x544 <ESP01_CheckConnection>
    24f2:	83 30       	cpi	r24, 0x03	; 3
    24f4:	61 f4       	brne	.+24     	; 0x250e <ESP01_CheckConnectionTask+0x32>
			{
				DIO_WriteChannel(DIO_ChannelG0, STD_HIGH);
    24f6:	61 e0       	ldi	r22, 0x01	; 1
    24f8:	80 e3       	ldi	r24, 0x30	; 48
    24fa:	0e 94 e6 06 	call	0xdcc	; 0xdcc <DIO_WriteChannel>
				xEventGroupSetBits(CHECK_CONNECTION, (GPS_BIT | ADXL_BIT | RFID_BIT));
    24fe:	67 e0       	ldi	r22, 0x07	; 7
    2500:	70 e0       	ldi	r23, 0x00	; 0
    2502:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <CHECK_CONNECTION>
    2506:	90 91 96 07 	lds	r25, 0x0796	; 0x800796 <CHECK_CONNECTION+0x1>
    250a:	d5 da       	rcall	.-2646   	; 0x1ab6 <xEventGroupSetBits>
    250c:	0f c0       	rjmp	.+30     	; 0x252c <ESP01_CheckConnectionTask+0x50>
			}
			else if(ESP01_CheckConnection() == 2)
    250e:	0e 94 a2 02 	call	0x544	; 0x544 <ESP01_CheckConnection>
    2512:	82 30       	cpi	r24, 0x02	; 2
    2514:	59 f4       	brne	.+22     	; 0x252c <ESP01_CheckConnectionTask+0x50>
			{
				DIO_WriteChannel(DIO_ChannelG0, STD_LOW);
    2516:	60 e0       	ldi	r22, 0x00	; 0
    2518:	80 e3       	ldi	r24, 0x30	; 48
    251a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <DIO_WriteChannel>
				xEventGroupClearBits(CHECK_CONNECTION, (GPS_BIT | ADXL_BIT | RFID_BIT));
    251e:	67 e0       	ldi	r22, 0x07	; 7
    2520:	70 e0       	ldi	r23, 0x00	; 0
    2522:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <CHECK_CONNECTION>
    2526:	90 91 96 07 	lds	r25, 0x0796	; 0x800796 <CHECK_CONNECTION+0x1>
    252a:	b6 da       	rcall	.-2708   	; 0x1a98 <xEventGroupClearBits>
			}
		}
		vTaskDelay(80);
    252c:	80 e5       	ldi	r24, 0x50	; 80
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	3d d6       	rcall	.+3194   	; 0x31ac <vTaskDelay>
    2532:	d4 cf       	rjmp	.-88     	; 0x24dc <ESP01_CheckConnectionTask>

00002534 <GPS_GetLocationTask>:
	}
    2534:	60 e0       	ldi	r22, 0x00	; 0
	EventBits_t uxBits;
	u_int8 ret = 0;
	u_int8 ret1 = 0;
	while(1)
	{
		uxBits = xEventGroupGetBits(CHECK_CONNECTION);
    2536:	70 e0       	ldi	r23, 0x00	; 0
    2538:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <CHECK_CONNECTION>
    253c:	90 91 96 07 	lds	r25, 0x0796	; 0x800796 <CHECK_CONNECTION+0x1>
    2540:	ab da       	rcall	.-2730   	; 0x1a98 <xEventGroupClearBits>
		if(uxBits & (GPS_BIT | ADXL_BIT | RFID_BIT) == (GPS_BIT | ADXL_BIT | RFID_BIT))
    2542:	80 ff       	sbrs	r24, 0
    2544:	57 c0       	rjmp	.+174    	; 0x25f4 <GPS_GetLocationTask+0xc0>
		{
			ret = xSemaphoreTake(GPS_SEM, 10);
    2546:	6a e0       	ldi	r22, 0x0A	; 10
    2548:	70 e0       	ldi	r23, 0x00	; 0
    254a:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <GPS_SEM>
    254e:	90 91 9a 07 	lds	r25, 0x079A	; 0x80079a <GPS_SEM+0x1>
    2552:	24 df       	rcall	.-440    	; 0x239c <xQueueSemaphoreTake>
			if(ret == 1)
    2554:	81 30       	cpi	r24, 0x01	; 1
    2556:	09 f0       	breq	.+2      	; 0x255a <GPS_GetLocationTask+0x26>
    2558:	4d c0       	rjmp	.+154    	; 0x25f4 <GPS_GetLocationTask+0xc0>
			{
				ret1 = xSemaphoreTake(UART1_SEND, portMAX_DELAY);
    255a:	6f ef       	ldi	r22, 0xFF	; 255
    255c:	7f ef       	ldi	r23, 0xFF	; 255
    255e:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <UART1_SEND>
    2562:	90 91 93 07 	lds	r25, 0x0793	; 0x800793 <UART1_SEND+0x1>
    2566:	1a df       	rcall	.-460    	; 0x239c <xQueueSemaphoreTake>
				if(ret1 == 1)
    2568:	81 30       	cpi	r24, 0x01	; 1
    256a:	09 f0       	breq	.+2      	; 0x256e <GPS_GetLocationTask+0x3a>
				{
					UART1_TransmitString("GPS-");
    256c:	43 c0       	rjmp	.+134    	; 0x25f4 <GPS_GetLocationTask+0xc0>
    256e:	83 e5       	ldi	r24, 0x53	; 83
    2570:	91 e0       	ldi	r25, 0x01	; 1
    2572:	6f da       	rcall	.-2850   	; 0x1a52 <UART1_TransmitString>
					get_gpstime();
    2574:	0e 94 1c 03 	call	0x638	; 0x638 <get_gpstime>
					UART1_TransmitString(Time_Buffer);
    2578:	8c e4       	ldi	r24, 0x4C	; 76
    257a:	97 e0       	ldi	r25, 0x07	; 7
					UART1_TransmitString(",");
    257c:	6a da       	rcall	.-2860   	; 0x1a52 <UART1_TransmitString>
    257e:	88 e5       	ldi	r24, 0x58	; 88
    2580:	91 e0       	ldi	r25, 0x01	; 1
    2582:	67 da       	rcall	.-2866   	; 0x1a52 <UART1_TransmitString>
					get_latitude(GGA_Pointers[0]);
    2584:	c1 e7       	ldi	r28, 0x71	; 113
    2586:	d7 e0       	ldi	r29, 0x07	; 7
    2588:	88 81       	ld	r24, Y
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <get_latitude>
					UART1_TransmitString(degrees_buffer);
    2590:	89 e2       	ldi	r24, 0x29	; 41
    2592:	97 e0       	ldi	r25, 0x07	; 7
    2594:	5e da       	rcall	.-2884   	; 0x1a52 <UART1_TransmitString>
					memset(degrees_buffer, 0, degrees_buffer_size);
    2596:	09 e2       	ldi	r16, 0x29	; 41
    2598:	17 e0       	ldi	r17, 0x07	; 7
    259a:	0f 2e       	mov	r0, r31
    259c:	f4 e1       	ldi	r31, 0x14	; 20
    259e:	ff 2e       	mov	r15, r31
    25a0:	f0 2d       	mov	r31, r0
    25a2:	f8 01       	movw	r30, r16
    25a4:	8f 2d       	mov	r24, r15
    25a6:	11 92       	st	Z+, r1
    25a8:	8a 95       	dec	r24
					UART1_TransmitString(",");
    25aa:	e9 f7       	brne	.-6      	; 0x25a6 <GPS_GetLocationTask+0x72>
    25ac:	88 e5       	ldi	r24, 0x58	; 88
    25ae:	91 e0       	ldi	r25, 0x01	; 1
					get_longitude(GGA_Pointers[2]);
    25b0:	50 da       	rcall	.-2912   	; 0x1a52 <UART1_TransmitString>
    25b2:	8a 81       	ldd	r24, Y+2	; 0x02
    25b4:	90 e0       	ldi	r25, 0x00	; 0
					UART1_TransmitString(degrees_buffer);
    25b6:	0e 94 a8 03 	call	0x750	; 0x750 <get_longitude>
    25ba:	c8 01       	movw	r24, r16
					UART1_TransmitString(",");
    25bc:	4a da       	rcall	.-2924   	; 0x1a52 <UART1_TransmitString>
    25be:	88 e5       	ldi	r24, 0x58	; 88
    25c0:	91 e0       	ldi	r25, 0x01	; 1
    25c2:	47 da       	rcall	.-2930   	; 0x1a52 <UART1_TransmitString>
					memset(degrees_buffer, 0, degrees_buffer_size);
    25c4:	f8 01       	movw	r30, r16
    25c6:	11 92       	st	Z+, r1
    25c8:	fa 94       	dec	r15
					get_altitude(GGA_Pointers[7]);
    25ca:	e9 f7       	brne	.-6      	; 0x25c6 <GPS_GetLocationTask+0x92>
    25cc:	8f 81       	ldd	r24, Y+7	; 0x07
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <get_altitude>
					UART1_TransmitString(Altitude_Buffer);
    25d4:	85 e8       	ldi	r24, 0x85	; 133
    25d6:	97 e0       	ldi	r25, 0x07	; 7
    25d8:	3c da       	rcall	.-2952   	; 0x1a52 <UART1_TransmitString>
					UART1_TransmitString("GPS");
    25da:	8a e5       	ldi	r24, 0x5A	; 90
    25dc:	91 e0       	ldi	r25, 0x01	; 1
    25de:	39 da       	rcall	.-2958   	; 0x1a52 <UART1_TransmitString>
					xSemaphoreGive(UART1_SEND);
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	40 e0       	ldi	r20, 0x00	; 0
    25e4:	50 e0       	ldi	r21, 0x00	; 0
    25e6:	60 e0       	ldi	r22, 0x00	; 0
    25e8:	70 e0       	ldi	r23, 0x00	; 0
    25ea:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <UART1_SEND>
    25ee:	90 91 93 07 	lds	r25, 0x0793	; 0x800793 <UART1_SEND+0x1>
    25f2:	0c de       	rcall	.-1000   	; 0x220c <xQueueGenericSend>
				}
			}
		}
		vTaskDelay(3000);
    25f4:	88 eb       	ldi	r24, 0xB8	; 184
    25f6:	9b e0       	ldi	r25, 0x0B	; 11
    25f8:	d9 d5       	rcall	.+2994   	; 0x31ac <vTaskDelay>
    25fa:	9c cf       	rjmp	.-200    	; 0x2534 <GPS_GetLocationTask>

000025fc <ADXL_SendAccidentAlertTask>:
	}
    25fc:	60 e0       	ldi	r22, 0x00	; 0
	u_int8 ret = 0;
	u_int8 ret1 = 0;
	EventBits_t uxBits;
	while (1)
	{
		uxBits = xEventGroupGetBits(CHECK_CONNECTION);
    25fe:	70 e0       	ldi	r23, 0x00	; 0
    2600:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <CHECK_CONNECTION>
    2604:	90 91 96 07 	lds	r25, 0x0796	; 0x800796 <CHECK_CONNECTION+0x1>
    2608:	47 da       	rcall	.-2930   	; 0x1a98 <xEventGroupClearBits>
		if(uxBits & (GPS_BIT | ADXL_BIT | RFID_BIT) == (GPS_BIT | ADXL_BIT | RFID_BIT))
    260a:	80 ff       	sbrs	r24, 0
    260c:	1f c0       	rjmp	.+62     	; 0x264c <ADXL_SendAccidentAlertTask+0x50>
		{
			ret = xSemaphoreTake(ACCIDENT_SEM, 10);
    260e:	6a e0       	ldi	r22, 0x0A	; 10
    2610:	70 e0       	ldi	r23, 0x00	; 0
    2612:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <ACCIDENT_SEM>
    2616:	90 91 91 07 	lds	r25, 0x0791	; 0x800791 <ACCIDENT_SEM+0x1>
    261a:	c0 de       	rcall	.-640    	; 0x239c <xQueueSemaphoreTake>
			if(ret == 1)
    261c:	81 30       	cpi	r24, 0x01	; 1
    261e:	b1 f4       	brne	.+44     	; 0x264c <ADXL_SendAccidentAlertTask+0x50>
			{
				ret1 = xSemaphoreTake(UART1_SEND, portMAX_DELAY);
    2620:	6f ef       	ldi	r22, 0xFF	; 255
    2622:	7f ef       	ldi	r23, 0xFF	; 255
    2624:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <UART1_SEND>
    2628:	90 91 93 07 	lds	r25, 0x0793	; 0x800793 <UART1_SEND+0x1>
    262c:	b7 de       	rcall	.-658    	; 0x239c <xQueueSemaphoreTake>
				if(ret1 == 1)
    262e:	81 30       	cpi	r24, 0x01	; 1
				{
					UART1_TransmitString("ADXL-AccidentADXL");
    2630:	69 f4       	brne	.+26     	; 0x264c <ADXL_SendAccidentAlertTask+0x50>
    2632:	8e e5       	ldi	r24, 0x5E	; 94
    2634:	91 e0       	ldi	r25, 0x01	; 1
    2636:	0d da       	rcall	.-3046   	; 0x1a52 <UART1_TransmitString>
					xSemaphoreGive(UART1_SEND);
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	40 e0       	ldi	r20, 0x00	; 0
    263c:	50 e0       	ldi	r21, 0x00	; 0
    263e:	60 e0       	ldi	r22, 0x00	; 0
    2640:	70 e0       	ldi	r23, 0x00	; 0
    2642:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <UART1_SEND>
    2646:	90 91 93 07 	lds	r25, 0x0793	; 0x800793 <UART1_SEND+0x1>
				}
			}
		}
		vTaskDelay(500);
    264a:	e0 dd       	rcall	.-1088   	; 0x220c <xQueueGenericSend>
    264c:	84 ef       	ldi	r24, 0xF4	; 244
    264e:	91 e0       	ldi	r25, 0x01	; 1
    2650:	ad d5       	rcall	.+2906   	; 0x31ac <vTaskDelay>
	}
    2652:	d4 cf       	rjmp	.-88     	; 0x25fc <ADXL_SendAccidentAlertTask>

00002654 <ADXL_SendAccelerationAlertTask>:
	u_int8 ret = 0;
	u_int8 ret1 = 0;
	EventBits_t uxBits;
	while(1)
	{
		uxBits = xEventGroupGetBits(CHECK_CONNECTION);
    2654:	60 e0       	ldi	r22, 0x00	; 0
    2656:	70 e0       	ldi	r23, 0x00	; 0
    2658:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <CHECK_CONNECTION>
    265c:	90 91 96 07 	lds	r25, 0x0796	; 0x800796 <CHECK_CONNECTION+0x1>
    2660:	1b da       	rcall	.-3018   	; 0x1a98 <xEventGroupClearBits>
		if(uxBits & (GPS_BIT | ADXL_BIT | RFID_BIT) == (GPS_BIT | ADXL_BIT | RFID_BIT))
    2662:	80 ff       	sbrs	r24, 0
    2664:	1f c0       	rjmp	.+62     	; 0x26a4 <ADXL_SendAccelerationAlertTask+0x50>
		{
			ret = xSemaphoreTake(ACCELERATION_SEM, 10);
    2666:	6a e0       	ldi	r22, 0x0A	; 10
    2668:	70 e0       	ldi	r23, 0x00	; 0
    266a:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <ACCELERATION_SEM>
    266e:	90 91 8f 07 	lds	r25, 0x078F	; 0x80078f <ACCELERATION_SEM+0x1>
    2672:	94 de       	rcall	.-728    	; 0x239c <xQueueSemaphoreTake>
			if(ret == 1)
    2674:	81 30       	cpi	r24, 0x01	; 1
    2676:	b1 f4       	brne	.+44     	; 0x26a4 <ADXL_SendAccelerationAlertTask+0x50>
			{
				ret1 = xSemaphoreTake(UART1_SEND, portMAX_DELAY);
    2678:	6f ef       	ldi	r22, 0xFF	; 255
    267a:	7f ef       	ldi	r23, 0xFF	; 255
    267c:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <UART1_SEND>
    2680:	90 91 93 07 	lds	r25, 0x0793	; 0x800793 <UART1_SEND+0x1>
    2684:	8b de       	rcall	.-746    	; 0x239c <xQueueSemaphoreTake>
				if(ret1 == 1)
    2686:	81 30       	cpi	r24, 0x01	; 1
				{
					UART1_TransmitString("ADXL-AccelerationADXL");
    2688:	69 f4       	brne	.+26     	; 0x26a4 <ADXL_SendAccelerationAlertTask+0x50>
    268a:	80 e7       	ldi	r24, 0x70	; 112
    268c:	91 e0       	ldi	r25, 0x01	; 1
    268e:	e1 d9       	rcall	.-3134   	; 0x1a52 <UART1_TransmitString>
					xSemaphoreGive(UART1_SEND);
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	40 e0       	ldi	r20, 0x00	; 0
    2694:	50 e0       	ldi	r21, 0x00	; 0
    2696:	60 e0       	ldi	r22, 0x00	; 0
    2698:	70 e0       	ldi	r23, 0x00	; 0
    269a:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <UART1_SEND>
    269e:	90 91 93 07 	lds	r25, 0x0793	; 0x800793 <UART1_SEND+0x1>
				}
			}
		}
		vTaskDelay(600);
    26a2:	b4 dd       	rcall	.-1176   	; 0x220c <xQueueGenericSend>
    26a4:	88 e5       	ldi	r24, 0x58	; 88
    26a6:	92 e0       	ldi	r25, 0x02	; 2
    26a8:	81 d5       	rcall	.+2818   	; 0x31ac <vTaskDelay>
	}
    26aa:	d4 cf       	rjmp	.-88     	; 0x2654 <ADXL_SendAccelerationAlertTask>

000026ac <RFID_TakeAttendance>:
	}
}
/*--------------------------------------------------------RFID Task-------------------------------------------------------*/

void RFID_TakeAttendance(void *pvParam)
{
    26ac:	cf 93       	push	r28
    26ae:	df 93       	push	r29
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
    26b4:	60 97       	sbiw	r28, 0x10	; 16
    26b6:	0f b6       	in	r0, 0x3f	; 63
    26b8:	f8 94       	cli
    26ba:	de bf       	out	0x3e, r29	; 62
    26bc:	0f be       	out	0x3f, r0	; 63
    26be:	cd bf       	out	0x3d, r28	; 61
	u_int8 byte;
	u_int8 str[MAX_LEN];

	byte = mfrc522_read(ComIEnReg);
    26c0:	82 e0       	ldi	r24, 0x02	; 2
    26c2:	0e 94 0a 05 	call	0xa14	; 0xa14 <mfrc522_read>
	mfrc522_write(ComIEnReg,byte|0x20);
    26c6:	68 2f       	mov	r22, r24
    26c8:	60 62       	ori	r22, 0x20	; 32
    26ca:	82 e0       	ldi	r24, 0x02	; 2
    26cc:	0e 94 f5 04 	call	0x9ea	; 0x9ea <mfrc522_write>
	byte = mfrc522_read(DivIEnReg);
    26d0:	83 e0       	ldi	r24, 0x03	; 3
    26d2:	0e 94 0a 05 	call	0xa14	; 0xa14 <mfrc522_read>
	mfrc522_write(DivIEnReg,byte|0x80);
    26d6:	68 2f       	mov	r22, r24
    26d8:	60 68       	ori	r22, 0x80	; 128
    26da:	83 e0       	ldi	r24, 0x03	; 3
    26dc:	0e 94 f5 04 	call	0x9ea	; 0x9ea <mfrc522_write>
	EventBits_t uxBits;
	u_int8 ret = 0;
	while(1)
	{
		uxBits = xEventGroupGetBits(CHECK_CONNECTION);
    26e0:	60 e0       	ldi	r22, 0x00	; 0
    26e2:	70 e0       	ldi	r23, 0x00	; 0
    26e4:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <CHECK_CONNECTION>
    26e8:	90 91 96 07 	lds	r25, 0x0796	; 0x800796 <CHECK_CONNECTION+0x1>
    26ec:	d5 d9       	rcall	.-3158   	; 0x1a98 <xEventGroupClearBits>
		if(uxBits & (GPS_BIT | ADXL_BIT | RFID_BIT) == (GPS_BIT | ADXL_BIT | RFID_BIT))
    26ee:	80 ff       	sbrs	r24, 0
    26f0:	44 c0       	rjmp	.+136    	; 0x277a <RFID_TakeAttendance+0xce>
		{
			DIO_WriteChannel(DIO_ChannelG1, STD_LOW);
    26f2:	60 e0       	ldi	r22, 0x00	; 0
    26f4:	81 e3       	ldi	r24, 0x31	; 49
    26f6:	0e 94 e6 06 	call	0xdcc	; 0xdcc <DIO_WriteChannel>
			byte = mfrc522_request(PICC_REQALL,str);
    26fa:	be 01       	movw	r22, r28
    26fc:	6f 5f       	subi	r22, 0xFF	; 255
    26fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2700:	82 e5       	ldi	r24, 0x52	; 82
    2702:	0e 94 32 06 	call	0xc64	; 0xc64 <mfrc522_request>
			if(byte == CARD_FOUND)
    2706:	81 30       	cpi	r24, 0x01	; 1
    2708:	c1 f5       	brne	.+112    	; 0x277a <RFID_TakeAttendance+0xce>
			{
				byte = mfrc522_get_card_serial(str);
    270a:	ce 01       	movw	r24, r28
    270c:	01 96       	adiw	r24, 0x01	; 1
    270e:	0e 94 65 06 	call	0xcca	; 0xcca <mfrc522_get_card_serial>
				if(byte == CARD_FOUND)
    2712:	81 30       	cpi	r24, 0x01	; 1
    2714:	91 f5       	brne	.+100    	; 0x277a <RFID_TakeAttendance+0xce>
				{
					ret = xSemaphoreTake(UART1_SEND, portMAX_DELAY);
    2716:	6f ef       	ldi	r22, 0xFF	; 255
    2718:	7f ef       	ldi	r23, 0xFF	; 255
    271a:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <UART1_SEND>
    271e:	90 91 93 07 	lds	r25, 0x0793	; 0x800793 <UART1_SEND+0x1>
    2722:	3c de       	rcall	.-904    	; 0x239c <xQueueSemaphoreTake>
					if(ret == 1)
    2724:	81 30       	cpi	r24, 0x01	; 1
    2726:	49 f5       	brne	.+82     	; 0x277a <RFID_TakeAttendance+0xce>
					{
						DIO_WriteChannel(DIO_ChannelG1 ,STD_HIGH);
    2728:	61 e0       	ldi	r22, 0x01	; 1
    272a:	81 e3       	ldi	r24, 0x31	; 49
    272c:	0e 94 e6 06 	call	0xdcc	; 0xdcc <DIO_WriteChannel>
						UART1_TransmitString("RFID-");
    2730:	86 e8       	ldi	r24, 0x86	; 134
    2732:	91 e0       	ldi	r25, 0x01	; 1
    2734:	8e d9       	rcall	.-3300   	; 0x1a52 <UART1_TransmitString>
						UART1_TransmitString(str);
    2736:	ce 01       	movw	r24, r28
    2738:	01 96       	adiw	r24, 0x01	; 1
    273a:	8b d9       	rcall	.-3306   	; 0x1a52 <UART1_TransmitString>
						UART1_TransmitString("RFID");
    273c:	8c e8       	ldi	r24, 0x8C	; 140
    273e:	91 e0       	ldi	r25, 0x01	; 1
    2740:	88 d9       	rcall	.-3312   	; 0x1a52 <UART1_TransmitString>
    2742:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_ClearScreen>
						LCD_ClearScreen();
    2746:	61 e0       	ldi	r22, 0x01	; 1
						LCD_SetCursor(1, 1);
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	0e 94 93 04 	call	0x926	; 0x926 <LCD_SetCursor>
    274e:	81 e9       	ldi	r24, 0x91	; 145
						LCD_SendString("Registered");
    2750:	91 e0       	ldi	r25, 0x01	; 1
    2752:	0e 94 e6 04 	call	0x9cc	; 0x9cc <LCD_SendString>
    2756:	61 e0       	ldi	r22, 0x01	; 1
						LCD_SetCursor(2, 1);
    2758:	82 e0       	ldi	r24, 0x02	; 2
    275a:	0e 94 93 04 	call	0x926	; 0x926 <LCD_SetCursor>
    275e:	8c e9       	ldi	r24, 0x9C	; 156
						LCD_SendString("Successfully!");
    2760:	91 e0       	ldi	r25, 0x01	; 1
    2762:	0e 94 e6 04 	call	0x9cc	; 0x9cc <LCD_SendString>
    2766:	20 e0       	ldi	r18, 0x00	; 0
						xSemaphoreGive(UART1_SEND);
    2768:	40 e0       	ldi	r20, 0x00	; 0
    276a:	50 e0       	ldi	r21, 0x00	; 0
    276c:	60 e0       	ldi	r22, 0x00	; 0
    276e:	70 e0       	ldi	r23, 0x00	; 0
    2770:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <UART1_SEND>
    2774:	90 91 93 07 	lds	r25, 0x0793	; 0x800793 <UART1_SEND+0x1>
    2778:	49 dd       	rcall	.-1390   	; 0x220c <xQueueGenericSend>
					}
				}
			}
		}
		vTaskDelay(120);
    277a:	88 e7       	ldi	r24, 0x78	; 120
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	16 d5       	rcall	.+2604   	; 0x31ac <vTaskDelay>
    2780:	af cf       	rjmp	.-162    	; 0x26e0 <RFID_TakeAttendance+0x34>

00002782 <System_Init>:
	}
    2782:	0e 94 bc 02 	call	0x578	; 0x578 <GPS_Init>
}

void System_Init()
{
	GPS_Init();
	ESP01_Init();
    2786:	0e 94 85 02 	call	0x50a	; 0x50a <ESP01_Init>
	EXT_INTERRUPTS_STATE(EXT_INTERRUPT4, EXT_INTERRUPT_ENABLE);
    278a:	60 e0       	ldi	r22, 0x00	; 0
    278c:	84 e0       	ldi	r24, 0x04	; 4
    278e:	0e 94 23 09 	call	0x1246	; 0x1246 <EXT_INTERRUPTS_STATE>
	EXT_INTERRUPTS_STATE(EXT_INTERRUPT5, EXT_INTERRUPT_ENABLE);
    2792:	60 e0       	ldi	r22, 0x00	; 0
    2794:	85 e0       	ldi	r24, 0x05	; 5
    2796:	0e 94 23 09 	call	0x1246	; 0x1246 <EXT_INTERRUPTS_STATE>
	EXT_INTERRUPTS_SNCONTROL_MODE(EXT_INTERRUPT4, RISING_EDGE);
    279a:	63 e0       	ldi	r22, 0x03	; 3
    279c:	84 e0       	ldi	r24, 0x04	; 4
    279e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <EXT_INTERRUPTS_SNCONTROL_MODE>
	EXT_INTERRUPTS_SNCONTROL_MODE(EXT_INTERRUPT5, RISING_EDGE);
    27a2:	63 e0       	ldi	r22, 0x03	; 3
    27a4:	85 e0       	ldi	r24, 0x05	; 5
    27a6:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <EXT_INTERRUPTS_SNCONTROL_MODE>
	DIO_ConfigChannel(DIO_ChannelG0, OUTPUT);
    27aa:	61 e0       	ldi	r22, 0x01	; 1
    27ac:	80 e3       	ldi	r24, 0x30	; 48
    27ae:	0e 94 cc 07 	call	0xf98	; 0xf98 <DIO_ConfigChannel>
	DIO_ConfigChannel(DIO_ChannelG1, OUTPUT);
    27b2:	61 e0       	ldi	r22, 0x01	; 1
    27b4:	81 e3       	ldi	r24, 0x31	; 49
    27b6:	0e 94 cc 07 	call	0xf98	; 0xf98 <DIO_ConfigChannel>
	GIE_Enable();
    27ba:	0e 94 cb 09 	call	0x1396	; 0x1396 <GIE_Enable>
	mfrc522_init();
    27be:	0e 94 23 05 	call	0xa46	; 0xa46 <mfrc522_init>
	Accelerometor_init();
    27c2:	0e 94 ac 01 	call	0x358	; 0x358 <Accelerometor_init>
	setActivityParameters();
    27c6:	0e 94 41 02 	call	0x482	; 0x482 <setActivityParameters>
	setFreeFallParameters();
    27ca:	0e 94 fd 01 	call	0x3fa	; 0x3fa <setFreeFallParameters>
	LCD_Init();
    27ce:	0c 94 14 04 	jmp	0x828	; 0x828 <LCD_Init>
    27d2:	08 95       	ret

000027d4 <startScheduler>:
#include "service.h"

char IsItGGAString = 0;

void startScheduler()
{
    27d4:	ef 92       	push	r14
    27d6:	ff 92       	push	r15
    27d8:	0f 93       	push	r16
    27da:	2f ef       	ldi	r18, 0xFF	; 255
    27dc:	8b e7       	ldi	r24, 0x7B	; 123
    27de:	92 e9       	ldi	r25, 0x92	; 146
    27e0:	21 50       	subi	r18, 0x01	; 1
    27e2:	80 40       	sbci	r24, 0x00	; 0
    27e4:	90 40       	sbci	r25, 0x00	; 0
    27e6:	e1 f7       	brne	.-8      	; 0x27e0 <startScheduler+0xc>
    27e8:	00 c0       	rjmp	.+0      	; 0x27ea <startScheduler+0x16>
    27ea:	00 00       	nop
	_delay_ms(3000);
	System_Init();
    27ec:	ca df       	rcall	.-108    	; 0x2782 <System_Init>
	
	ESP_SEM = xSemaphoreCreateCounting(1, 0);
    27ee:	60 e0       	ldi	r22, 0x00	; 0
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	01 dd       	rcall	.-1534   	; 0x21f6 <xQueueCreateCountingSemaphore>
    27f4:	90 93 98 07 	sts	0x0798, r25	; 0x800798 <ESP_SEM+0x1>
    27f8:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <ESP_SEM>
	ACCIDENT_SEM = xSemaphoreCreateCounting(1, 0);
    27fc:	60 e0       	ldi	r22, 0x00	; 0
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	fa dc       	rcall	.-1548   	; 0x21f6 <xQueueCreateCountingSemaphore>
    2802:	90 93 91 07 	sts	0x0791, r25	; 0x800791 <ACCIDENT_SEM+0x1>
    2806:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <ACCIDENT_SEM>
	ACCELERATION_SEM = xSemaphoreCreateCounting(1, 0);
    280a:	60 e0       	ldi	r22, 0x00	; 0
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	f3 dc       	rcall	.-1562   	; 0x21f6 <xQueueCreateCountingSemaphore>
    2810:	90 93 8f 07 	sts	0x078F, r25	; 0x80078f <ACCELERATION_SEM+0x1>
    2814:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <ACCELERATION_SEM>
	GPS_SEM = xSemaphoreCreateCounting(1, 0);
    2818:	60 e0       	ldi	r22, 0x00	; 0
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	ec dc       	rcall	.-1576   	; 0x21f6 <xQueueCreateCountingSemaphore>
    281e:	90 93 9a 07 	sts	0x079A, r25	; 0x80079a <GPS_SEM+0x1>
    2822:	80 93 99 07 	sts	0x0799, r24	; 0x800799 <GPS_SEM>
	UART1_SEND = xSemaphoreCreateMutex();
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	85 dd       	rcall	.-1270   	; 0x2334 <xQueueCreateMutex>
    282a:	90 93 93 07 	sts	0x0793, r25	; 0x800793 <UART1_SEND+0x1>
    282e:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <UART1_SEND>
	CHECK_CONNECTION = xEventGroupCreate();
    2832:	21 d9       	rcall	.-3518   	; 0x1a76 <xEventGroupCreate>
    2834:	90 93 96 07 	sts	0x0796, r25	; 0x800796 <CHECK_CONNECTION+0x1>
    2838:	80 93 95 07 	sts	0x0795, r24	; 0x800795 <CHECK_CONNECTION>
    283c:	e1 2c       	mov	r14, r1
	xTaskCreate(ESP01_CheckConnectionTask, "CheckConnection", configMINIMAL_STACK_SIZE, NULL, ESP_PRIORITY, NULL);
    283e:	f1 2c       	mov	r15, r1
    2840:	09 e0       	ldi	r16, 0x09	; 9
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	45 e5       	ldi	r20, 0x55	; 85
    2848:	50 e0       	ldi	r21, 0x00	; 0
    284a:	6a ea       	ldi	r22, 0xAA	; 170
    284c:	71 e0       	ldi	r23, 0x01	; 1
    284e:	8e e6       	ldi	r24, 0x6E	; 110
    2850:	92 e1       	ldi	r25, 0x12	; 18
    2852:	05 d3       	rcall	.+1546   	; 0x2e5e <xTaskCreate>
    2854:	07 e0       	ldi	r16, 0x07	; 7
	xTaskCreate(GPS_GetLocationTask, "GPSLocation", 500, NULL, GPS_PRIORITY, NULL);
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	44 ef       	ldi	r20, 0xF4	; 244
    285c:	51 e0       	ldi	r21, 0x01	; 1
    285e:	6a eb       	ldi	r22, 0xBA	; 186
    2860:	71 e0       	ldi	r23, 0x01	; 1
    2862:	8a e9       	ldi	r24, 0x9A	; 154
    2864:	92 e1       	ldi	r25, 0x12	; 18
    2866:	fb d2       	rcall	.+1526   	; 0x2e5e <xTaskCreate>
    2868:	20 e0       	ldi	r18, 0x00	; 0
	xTaskCreate(RFID_TakeAttendance, "RFIDAttendance", 200, NULL, RFID_PRIORITY, NULL);
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	48 ec       	ldi	r20, 0xC8	; 200
    286e:	50 e0       	ldi	r21, 0x00	; 0
    2870:	66 ec       	ldi	r22, 0xC6	; 198
    2872:	71 e0       	ldi	r23, 0x01	; 1
    2874:	86 e5       	ldi	r24, 0x56	; 86
    2876:	93 e1       	ldi	r25, 0x13	; 19
    2878:	f2 d2       	rcall	.+1508   	; 0x2e5e <xTaskCreate>
    287a:	08 e0       	ldi	r16, 0x08	; 8
	xTaskCreate(ADXL_SendAccidentAlertTask, "Alert Accident", configMINIMAL_STACK_SIZE, NULL, ADXL_PRIORITY, NULL);
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	45 e5       	ldi	r20, 0x55	; 85
    2882:	50 e0       	ldi	r21, 0x00	; 0
    2884:	65 ed       	ldi	r22, 0xD5	; 213
    2886:	71 e0       	ldi	r23, 0x01	; 1
    2888:	8e ef       	ldi	r24, 0xFE	; 254
    288a:	92 e1       	ldi	r25, 0x12	; 18
    288c:	e8 d2       	rcall	.+1488   	; 0x2e5e <xTaskCreate>
    288e:	20 e0       	ldi	r18, 0x00	; 0
	xTaskCreate(ADXL_SendAccelerationAlertTask, "Acceleration Alert", configMINIMAL_STACK_SIZE, NULL, ADXL_PRIORITY, NULL);
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	45 e5       	ldi	r20, 0x55	; 85
    2894:	50 e0       	ldi	r21, 0x00	; 0
    2896:	64 ee       	ldi	r22, 0xE4	; 228
    2898:	71 e0       	ldi	r23, 0x01	; 1
    289a:	8a e2       	ldi	r24, 0x2A	; 42
    289c:	93 e1       	ldi	r25, 0x13	; 19
    289e:	df d2       	rcall	.+1470   	; 0x2e5e <xTaskCreate>
    28a0:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_ClearScreen>
	
	LCD_ClearScreen();
    28a4:	61 e0       	ldi	r22, 0x01	; 1
    28a6:	81 e0       	ldi	r24, 0x01	; 1
	LCD_SetCursor(1, 1);
    28a8:	0e 94 93 04 	call	0x926	; 0x926 <LCD_SetCursor>
    28ac:	87 ef       	ldi	r24, 0xF7	; 247
    28ae:	91 e0       	ldi	r25, 0x01	; 1
	LCD_SendString("Welcome to");
    28b0:	0e 94 e6 04 	call	0x9cc	; 0x9cc <LCD_SendString>
    28b4:	61 e0       	ldi	r22, 0x01	; 1
	LCD_SetCursor(2, 1);
    28b6:	82 e0       	ldi	r24, 0x02	; 2
    28b8:	0e 94 93 04 	call	0x926	; 0x926 <LCD_SetCursor>
    28bc:	82 e0       	ldi	r24, 0x02	; 2
	LCD_SendString("Our System!");
    28be:	92 e0       	ldi	r25, 0x02	; 2
    28c0:	0e 94 e6 04 	call	0x9cc	; 0x9cc <LCD_SendString>
    28c4:	1b d3       	rcall	.+1590   	; 0x2efc <vTaskStartScheduler>
	vTaskStartScheduler();
    28c6:	0f 91       	pop	r16
    28c8:	ff 90       	pop	r15
}
    28ca:	ef 90       	pop	r14
    28cc:	08 95       	ret

000028ce <__vector_5>:
    28ce:	1f 92       	push	r1
    28d0:	0f 92       	push	r0

/*-------------------------------------------ISR Functions----------------------------------*/


ISR(INT4_vect)
{
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	0f 92       	push	r0
    28d6:	11 24       	eor	r1, r1
    28d8:	0b b6       	in	r0, 0x3b	; 59
    28da:	0f 92       	push	r0
    28dc:	2f 93       	push	r18
    28de:	3f 93       	push	r19
    28e0:	4f 93       	push	r20
    28e2:	5f 93       	push	r21
    28e4:	6f 93       	push	r22
    28e6:	7f 93       	push	r23
    28e8:	8f 93       	push	r24
    28ea:	9f 93       	push	r25
    28ec:	af 93       	push	r26
    28ee:	bf 93       	push	r27
    28f0:	ef 93       	push	r30
    28f2:	ff 93       	push	r31
	xSemaphoreGiveFromISR(ACCIDENT_SEM, NULL);
    28f4:	60 e0       	ldi	r22, 0x00	; 0
    28f6:	70 e0       	ldi	r23, 0x00	; 0
    28f8:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <ACCIDENT_SEM>
    28fc:	90 91 91 07 	lds	r25, 0x0791	; 0x800791 <ACCIDENT_SEM+0x1>
    2900:	25 dd       	rcall	.-1462   	; 0x234c <xQueueGiveFromISR>
	TWI_ByteRead(ADXL345_ALTERNATIVE_ADDRESS,ADXL345_REG_INT_SOURCE,&Reg);
    2902:	44 e9       	ldi	r20, 0x94	; 148
    2904:	57 e0       	ldi	r21, 0x07	; 7
    2906:	60 e3       	ldi	r22, 0x30	; 48
    2908:	83 e5       	ldi	r24, 0x53	; 83
    290a:	0e 94 8a 0b 	call	0x1714	; 0x1714 <TWI_ByteRead>
}
    290e:	ff 91       	pop	r31
    2910:	ef 91       	pop	r30
    2912:	bf 91       	pop	r27
    2914:	af 91       	pop	r26
    2916:	9f 91       	pop	r25
    2918:	8f 91       	pop	r24
    291a:	7f 91       	pop	r23
    291c:	6f 91       	pop	r22
    291e:	5f 91       	pop	r21
    2920:	4f 91       	pop	r20
    2922:	3f 91       	pop	r19
    2924:	2f 91       	pop	r18
    2926:	0f 90       	pop	r0
    2928:	0b be       	out	0x3b, r0	; 59
    292a:	0f 90       	pop	r0
    292c:	0f be       	out	0x3f, r0	; 63
    292e:	0f 90       	pop	r0
    2930:	1f 90       	pop	r1
    2932:	18 95       	reti

00002934 <__vector_6>:


ISR(INT5_vect)
{
    2934:	1f 92       	push	r1
    2936:	0f 92       	push	r0
    2938:	0f b6       	in	r0, 0x3f	; 63
    293a:	0f 92       	push	r0
    293c:	11 24       	eor	r1, r1
    293e:	0b b6       	in	r0, 0x3b	; 59
    2940:	0f 92       	push	r0
    2942:	2f 93       	push	r18
    2944:	3f 93       	push	r19
    2946:	4f 93       	push	r20
    2948:	5f 93       	push	r21
    294a:	6f 93       	push	r22
    294c:	7f 93       	push	r23
    294e:	8f 93       	push	r24
    2950:	9f 93       	push	r25
    2952:	af 93       	push	r26
    2954:	bf 93       	push	r27
    2956:	ef 93       	push	r30
    2958:	ff 93       	push	r31
	xSemaphoreGiveFromISR(ACCELERATION_SEM, NULL);
    295a:	60 e0       	ldi	r22, 0x00	; 0
    295c:	70 e0       	ldi	r23, 0x00	; 0
    295e:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <ACCELERATION_SEM>
    2962:	90 91 8f 07 	lds	r25, 0x078F	; 0x80078f <ACCELERATION_SEM+0x1>
    2966:	f2 dc       	rcall	.-1564   	; 0x234c <xQueueGiveFromISR>
	TWI_ByteRead(ADXL345_ALTERNATIVE_ADDRESS,ADXL345_REG_INT_SOURCE,&Reg);
    2968:	44 e9       	ldi	r20, 0x94	; 148
    296a:	57 e0       	ldi	r21, 0x07	; 7
    296c:	60 e3       	ldi	r22, 0x30	; 48
    296e:	83 e5       	ldi	r24, 0x53	; 83
    2970:	0e 94 8a 0b 	call	0x1714	; 0x1714 <TWI_ByteRead>
}
    2974:	ff 91       	pop	r31
    2976:	ef 91       	pop	r30
    2978:	bf 91       	pop	r27
    297a:	af 91       	pop	r26
    297c:	9f 91       	pop	r25
    297e:	8f 91       	pop	r24
    2980:	7f 91       	pop	r23
    2982:	6f 91       	pop	r22
    2984:	5f 91       	pop	r21
    2986:	4f 91       	pop	r20
    2988:	3f 91       	pop	r19
    298a:	2f 91       	pop	r18
    298c:	0f 90       	pop	r0
    298e:	0b be       	out	0x3b, r0	; 59
    2990:	0f 90       	pop	r0
    2992:	0f be       	out	0x3f, r0	; 63
    2994:	0f 90       	pop	r0
    2996:	1f 90       	pop	r1
    2998:	18 95       	reti

0000299a <__vector_30>:



ISR(USART1_RX_vect)
{
    299a:	1f 92       	push	r1
    299c:	0f 92       	push	r0
    299e:	0f b6       	in	r0, 0x3f	; 63
    29a0:	0f 92       	push	r0
    29a2:	11 24       	eor	r1, r1
    29a4:	0b b6       	in	r0, 0x3b	; 59
    29a6:	0f 92       	push	r0
    29a8:	2f 93       	push	r18
    29aa:	3f 93       	push	r19
    29ac:	4f 93       	push	r20
    29ae:	5f 93       	push	r21
    29b0:	6f 93       	push	r22
    29b2:	7f 93       	push	r23
    29b4:	8f 93       	push	r24
    29b6:	9f 93       	push	r25
    29b8:	af 93       	push	r26
    29ba:	bf 93       	push	r27
    29bc:	ef 93       	push	r30
    29be:	ff 93       	push	r31
	GIE_Disable();
    29c0:	0e 94 c7 09 	call	0x138e	; 0x138e <GIE_Disable>
	temp = UDR1_Register;
    29c4:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    29c8:	90 93 90 06 	sts	0x0690, r25	; 0x800690 <temp>
	esp_buff[esp_buff_len] = temp;
    29cc:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <esp_buff_len>
    29d0:	e8 2f       	mov	r30, r24
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	e8 55       	subi	r30, 0x58	; 88
    29d6:	fd 4f       	sbci	r31, 0xFD	; 253
    29d8:	90 83       	st	Z, r25
	esp_buff_len++;
    29da:	8f 5f       	subi	r24, 0xFF	; 255
    29dc:	80 93 91 06 	sts	0x0691, r24	; 0x800691 <esp_buff_len>
	if(esp_buff_len == 100)
    29e0:	84 36       	cpi	r24, 0x64	; 100
    29e2:	11 f4       	brne	.+4      	; 0x29e8 <__vector_30+0x4e>
		ESP01_ResetBuffer();
    29e4:	0e 94 96 02 	call	0x52c	; 0x52c <ESP01_ResetBuffer>
	xSemaphoreGiveFromISR(ESP_SEM, NULL);
    29e8:	60 e0       	ldi	r22, 0x00	; 0
    29ea:	70 e0       	ldi	r23, 0x00	; 0
    29ec:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <ESP_SEM>
    29f0:	90 91 98 07 	lds	r25, 0x0798	; 0x800798 <ESP_SEM+0x1>
    29f4:	ab dc       	rcall	.-1706   	; 0x234c <xQueueGiveFromISR>
	GIE_Enable();
    29f6:	0e 94 cb 09 	call	0x1396	; 0x1396 <GIE_Enable>
}
    29fa:	ff 91       	pop	r31
    29fc:	ef 91       	pop	r30
    29fe:	bf 91       	pop	r27
    2a00:	af 91       	pop	r26
    2a02:	9f 91       	pop	r25
    2a04:	8f 91       	pop	r24
    2a06:	7f 91       	pop	r23
    2a08:	6f 91       	pop	r22
    2a0a:	5f 91       	pop	r21
    2a0c:	4f 91       	pop	r20
    2a0e:	3f 91       	pop	r19
    2a10:	2f 91       	pop	r18
    2a12:	0f 90       	pop	r0
    2a14:	0b be       	out	0x3b, r0	; 59
    2a16:	0f 90       	pop	r0
    2a18:	0f be       	out	0x3f, r0	; 63
    2a1a:	0f 90       	pop	r0
    2a1c:	1f 90       	pop	r1
    2a1e:	18 95       	reti

00002a20 <__vector_18>:



ISR(USART0_RX_vect)
{
    2a20:	1f 92       	push	r1
    2a22:	0f 92       	push	r0
    2a24:	0f b6       	in	r0, 0x3f	; 63
    2a26:	0f 92       	push	r0
    2a28:	11 24       	eor	r1, r1
    2a2a:	0b b6       	in	r0, 0x3b	; 59
    2a2c:	0f 92       	push	r0
    2a2e:	2f 93       	push	r18
    2a30:	3f 93       	push	r19
    2a32:	4f 93       	push	r20
    2a34:	5f 93       	push	r21
    2a36:	6f 93       	push	r22
    2a38:	7f 93       	push	r23
    2a3a:	8f 93       	push	r24
    2a3c:	9f 93       	push	r25
    2a3e:	af 93       	push	r26
    2a40:	bf 93       	push	r27
    2a42:	ef 93       	push	r30
    2a44:	ff 93       	push	r31
	GIE_Disable();
    2a46:	0e 94 c7 09 	call	0x138e	; 0x138e <GIE_Disable>
	received_char = UDR0_Register;
    2a4a:	8c b1       	in	r24, 0x0c	; 12
    2a4c:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <received_char>
	
	if(received_char == '$')
    2a50:	84 32       	cpi	r24, 0x24	; 36
    2a52:	59 f4       	brne	.+22     	; 0x2a6a <__vector_18+0x4a>
	{
		GGA_Index = 0;
    2a54:	10 92 5e 07 	sts	0x075E, r1	; 0x80075e <GGA_Index+0x1>
    2a58:	10 92 5d 07 	sts	0x075D, r1	; 0x80075d <GGA_Index>
		CommaCounter = 0;
    2a5c:	10 92 5c 07 	sts	0x075C, r1	; 0x80075c <CommaCounter+0x1>
    2a60:	10 92 5b 07 	sts	0x075B, r1	; 0x80075b <CommaCounter>
		IsItGGAString = 0;
    2a64:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <__data_end>
    2a68:	45 c0       	rjmp	.+138    	; 0x2af4 <__vector_18+0xd4>
	}
	else if (IsItGGAString == 1)
    2a6a:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <__data_end>
    2a6e:	91 30       	cpi	r25, 0x01	; 1
    2a70:	29 f5       	brne	.+74     	; 0x2abc <__vector_18+0x9c>
	{
		if(received_char == ',')
    2a72:	8c 32       	cpi	r24, 0x2C	; 44
    2a74:	99 f4       	brne	.+38     	; 0x2a9c <__vector_18+0x7c>
		{
			GGA_Pointers[CommaCounter++] = GGA_Index;
    2a76:	20 91 5b 07 	lds	r18, 0x075B	; 0x80075b <CommaCounter>
    2a7a:	30 91 5c 07 	lds	r19, 0x075C	; 0x80075c <CommaCounter+0x1>
    2a7e:	a9 01       	movw	r20, r18
    2a80:	4f 5f       	subi	r20, 0xFF	; 255
    2a82:	5f 4f       	sbci	r21, 0xFF	; 255
    2a84:	50 93 5c 07 	sts	0x075C, r21	; 0x80075c <CommaCounter+0x1>
    2a88:	40 93 5b 07 	sts	0x075B, r20	; 0x80075b <CommaCounter>
    2a8c:	40 91 5d 07 	lds	r20, 0x075D	; 0x80075d <GGA_Index>
    2a90:	50 91 5e 07 	lds	r21, 0x075E	; 0x80075e <GGA_Index+0x1>
    2a94:	f9 01       	movw	r30, r18
    2a96:	ef 58       	subi	r30, 0x8F	; 143
    2a98:	f8 4f       	sbci	r31, 0xF8	; 248
    2a9a:	40 83       	st	Z, r20
		}
		GGA_Buffer[GGA_Index++] = received_char;
    2a9c:	20 91 5d 07 	lds	r18, 0x075D	; 0x80075d <GGA_Index>
    2aa0:	30 91 5e 07 	lds	r19, 0x075E	; 0x80075e <GGA_Index+0x1>
    2aa4:	a9 01       	movw	r20, r18
    2aa6:	4f 5f       	subi	r20, 0xFF	; 255
    2aa8:	5f 4f       	sbci	r21, 0xFF	; 255
    2aaa:	50 93 5e 07 	sts	0x075E, r21	; 0x80075e <GGA_Index+0x1>
    2aae:	40 93 5d 07 	sts	0x075D, r20	; 0x80075d <GGA_Index>
    2ab2:	f9 01       	movw	r30, r18
    2ab4:	ed 56       	subi	r30, 0x6D	; 109
    2ab6:	f9 4f       	sbci	r31, 0xF9	; 249
    2ab8:	80 83       	st	Z, r24
    2aba:	1c c0       	rjmp	.+56     	; 0x2af4 <__vector_18+0xd4>
	}
	else if (GGA_CODE[0] == 'G' && GGA_CODE[1] == 'G' && GGA_CODE[2] == 'A')
    2abc:	90 91 5f 07 	lds	r25, 0x075F	; 0x80075f <GGA_CODE>
    2ac0:	97 34       	cpi	r25, 0x47	; 71
    2ac2:	89 f4       	brne	.+34     	; 0x2ae6 <__vector_18+0xc6>
    2ac4:	90 91 60 07 	lds	r25, 0x0760	; 0x800760 <GGA_CODE+0x1>
    2ac8:	97 34       	cpi	r25, 0x47	; 71
    2aca:	69 f4       	brne	.+26     	; 0x2ae6 <__vector_18+0xc6>
    2acc:	90 91 61 07 	lds	r25, 0x0761	; 0x800761 <GGA_CODE+0x2>
    2ad0:	91 34       	cpi	r25, 0x41	; 65
    2ad2:	49 f4       	brne	.+18     	; 0x2ae6 <__vector_18+0xc6>
	{
		IsItGGAString = 1;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
		GGA_CODE[0] = 0;
    2ada:	ef e5       	ldi	r30, 0x5F	; 95
    2adc:	f7 e0       	ldi	r31, 0x07	; 7
    2ade:	10 82       	st	Z, r1
		GGA_CODE[1] = 0;
    2ae0:	11 82       	std	Z+1, r1	; 0x01
		GGA_CODE[2] = 0;
    2ae2:	12 82       	std	Z+2, r1	; 0x02
    2ae4:	07 c0       	rjmp	.+14     	; 0x2af4 <__vector_18+0xd4>
	}
	else
	{
		GGA_CODE[0] = GGA_CODE[1];
    2ae6:	ef e5       	ldi	r30, 0x5F	; 95
    2ae8:	f7 e0       	ldi	r31, 0x07	; 7
    2aea:	91 81       	ldd	r25, Z+1	; 0x01
    2aec:	90 83       	st	Z, r25
		GGA_CODE[1] = GGA_CODE[2];
    2aee:	92 81       	ldd	r25, Z+2	; 0x02
    2af0:	91 83       	std	Z+1, r25	; 0x01
		GGA_CODE[2] = received_char;
    2af2:	82 83       	std	Z+2, r24	; 0x02
	}
	xSemaphoreGiveFromISR(GPS_SEM, NULL);
    2af4:	60 e0       	ldi	r22, 0x00	; 0
    2af6:	70 e0       	ldi	r23, 0x00	; 0
    2af8:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <GPS_SEM>
    2afc:	90 91 9a 07 	lds	r25, 0x079A	; 0x80079a <GPS_SEM+0x1>
    2b00:	25 dc       	rcall	.-1974   	; 0x234c <xQueueGiveFromISR>
	GIE_Enable();
    2b02:	0e 94 cb 09 	call	0x1396	; 0x1396 <GIE_Enable>
}
    2b06:	ff 91       	pop	r31
    2b08:	ef 91       	pop	r30
    2b0a:	bf 91       	pop	r27
    2b0c:	af 91       	pop	r26
    2b0e:	9f 91       	pop	r25
    2b10:	8f 91       	pop	r24
    2b12:	7f 91       	pop	r23
    2b14:	6f 91       	pop	r22
    2b16:	5f 91       	pop	r21
    2b18:	4f 91       	pop	r20
    2b1a:	3f 91       	pop	r19
    2b1c:	2f 91       	pop	r18
    2b1e:	0f 90       	pop	r0
    2b20:	0b be       	out	0x3b, r0	; 59
    2b22:	0f 90       	pop	r0
    2b24:	0f be       	out	0x3f, r0	; 63
    2b26:	0f 90       	pop	r0
    2b28:	1f 90       	pop	r1
    2b2a:	18 95       	reti

00002b2c <prvResetNextTaskUnblockTime>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
    2b2c:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <pxDelayedTaskList>
    2b30:	f0 91 39 02 	lds	r31, 0x0239	; 0x800239 <pxDelayedTaskList+0x1>
    2b34:	80 81       	ld	r24, Z
    2b36:	81 11       	cpse	r24, r1
    2b38:	07 c0       	rjmp	.+14     	; 0x2b48 <prvResetNextTaskUnblockTime+0x1c>
    2b3a:	8f ef       	ldi	r24, 0xFF	; 255
    2b3c:	9f ef       	ldi	r25, 0xFF	; 255
    2b3e:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <xNextTaskUnblockTime+0x1>
    2b42:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <xNextTaskUnblockTime>
    2b46:	08 95       	ret
    2b48:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <pxDelayedTaskList>
    2b4c:	f0 91 39 02 	lds	r31, 0x0239	; 0x800239 <pxDelayedTaskList+0x1>
    2b50:	05 80       	ldd	r0, Z+5	; 0x05
    2b52:	f6 81       	ldd	r31, Z+6	; 0x06
    2b54:	e0 2d       	mov	r30, r0
    2b56:	06 80       	ldd	r0, Z+6	; 0x06
    2b58:	f7 81       	ldd	r31, Z+7	; 0x07
    2b5a:	e0 2d       	mov	r30, r0
    2b5c:	82 81       	ldd	r24, Z+2	; 0x02
    2b5e:	93 81       	ldd	r25, Z+3	; 0x03
    2b60:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <xNextTaskUnblockTime+0x1>
    2b64:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <xNextTaskUnblockTime>
    2b68:	08 95       	ret

00002b6a <prvDeleteTCB>:
    2b6a:	cf 93       	push	r28
    2b6c:	df 93       	push	r29
    2b6e:	ec 01       	movw	r28, r24
    2b70:	8f 89       	ldd	r24, Y+23	; 0x17
    2b72:	98 8d       	ldd	r25, Y+24	; 0x18
    2b74:	f7 d9       	rcall	.-3090   	; 0x1f64 <vPortFree>
    2b76:	ce 01       	movw	r24, r28
    2b78:	f5 d9       	rcall	.-3094   	; 0x1f64 <vPortFree>
    2b7a:	df 91       	pop	r29
    2b7c:	cf 91       	pop	r28
    2b7e:	08 95       	ret

00002b80 <prvInitialiseNewTask>:
    2b80:	6f 92       	push	r6
    2b82:	7f 92       	push	r7
    2b84:	8f 92       	push	r8
    2b86:	9f 92       	push	r9
    2b88:	af 92       	push	r10
    2b8a:	bf 92       	push	r11
    2b8c:	cf 92       	push	r12
    2b8e:	df 92       	push	r13
    2b90:	ef 92       	push	r14
    2b92:	0f 93       	push	r16
    2b94:	1f 93       	push	r17
    2b96:	cf 93       	push	r28
    2b98:	df 93       	push	r29
    2b9a:	cd b7       	in	r28, 0x3d	; 61
    2b9c:	de b7       	in	r29, 0x3e	; 62
    2b9e:	4c 01       	movw	r8, r24
    2ba0:	f5 01       	movw	r30, r10
    2ba2:	87 89       	ldd	r24, Z+23	; 0x17
    2ba4:	90 8d       	ldd	r25, Z+24	; 0x18
    2ba6:	21 50       	subi	r18, 0x01	; 1
    2ba8:	31 09       	sbc	r19, r1
    2baa:	3c 01       	movw	r6, r24
    2bac:	62 0e       	add	r6, r18
    2bae:	73 1e       	adc	r7, r19
    2bb0:	61 15       	cp	r22, r1
    2bb2:	71 05       	cpc	r23, r1
    2bb4:	89 f4       	brne	.+34     	; 0x2bd8 <prvInitialiseNewTask+0x58>
    2bb6:	16 c0       	rjmp	.+44     	; 0x2be4 <prvInitialiseNewTask+0x64>
    2bb8:	82 2f       	mov	r24, r18
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	fb 01       	movw	r30, r22
    2bbe:	e8 0f       	add	r30, r24
    2bc0:	f9 1f       	adc	r31, r25
    2bc2:	30 81       	ld	r19, Z
    2bc4:	d5 01       	movw	r26, r10
    2bc6:	a8 0f       	add	r26, r24
    2bc8:	b9 1f       	adc	r27, r25
    2bca:	59 96       	adiw	r26, 0x19	; 25
    2bcc:	3c 93       	st	X, r19
    2bce:	80 81       	ld	r24, Z
    2bd0:	88 23       	and	r24, r24
    2bd2:	29 f0       	breq	.+10     	; 0x2bde <prvInitialiseNewTask+0x5e>
    2bd4:	2f 5f       	subi	r18, 0xFF	; 255
    2bd6:	01 c0       	rjmp	.+2      	; 0x2bda <prvInitialiseNewTask+0x5a>
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	28 30       	cpi	r18, 0x08	; 8
    2bdc:	68 f3       	brcs	.-38     	; 0x2bb8 <prvInitialiseNewTask+0x38>
    2bde:	f5 01       	movw	r30, r10
    2be0:	10 a2       	std	Z+32, r1	; 0x20
    2be2:	02 c0       	rjmp	.+4      	; 0x2be8 <prvInitialiseNewTask+0x68>
    2be4:	f5 01       	movw	r30, r10
    2be6:	11 8e       	std	Z+25, r1	; 0x19
    2be8:	f9 e0       	ldi	r31, 0x09	; 9
    2bea:	fe 15       	cp	r31, r14
    2bec:	20 f4       	brcc	.+8      	; 0x2bf6 <prvInitialiseNewTask+0x76>
    2bee:	0f 2e       	mov	r0, r31
    2bf0:	f9 e0       	ldi	r31, 0x09	; 9
    2bf2:	ef 2e       	mov	r14, r31
    2bf4:	f0 2d       	mov	r31, r0
    2bf6:	f5 01       	movw	r30, r10
    2bf8:	e6 8a       	std	Z+22, r14	; 0x16
    2bfa:	e1 a2       	std	Z+33, r14	; 0x21
    2bfc:	12 a2       	std	Z+34, r1	; 0x22
    2bfe:	c5 01       	movw	r24, r10
    2c00:	02 96       	adiw	r24, 0x02	; 2
    2c02:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <vListInitialiseItem>
    2c06:	c5 01       	movw	r24, r10
    2c08:	0c 96       	adiw	r24, 0x0c	; 12
    2c0a:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <vListInitialiseItem>
    2c0e:	f5 01       	movw	r30, r10
    2c10:	b1 86       	std	Z+9, r11	; 0x09
    2c12:	a0 86       	std	Z+8, r10	; 0x08
    2c14:	8a e0       	ldi	r24, 0x0A	; 10
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	8e 19       	sub	r24, r14
    2c1a:	91 09       	sbc	r25, r1
    2c1c:	95 87       	std	Z+13, r25	; 0x0d
    2c1e:	84 87       	std	Z+12, r24	; 0x0c
    2c20:	b3 8a       	std	Z+19, r11	; 0x13
    2c22:	a2 8a       	std	Z+18, r10	; 0x12
    2c24:	13 a2       	std	Z+35, r1	; 0x23
    2c26:	14 a2       	std	Z+36, r1	; 0x24
    2c28:	15 a2       	std	Z+37, r1	; 0x25
    2c2a:	16 a2       	std	Z+38, r1	; 0x26
    2c2c:	17 a2       	std	Z+39, r1	; 0x27
    2c2e:	a8 01       	movw	r20, r16
    2c30:	b4 01       	movw	r22, r8
    2c32:	c3 01       	movw	r24, r6
    2c34:	38 d8       	rcall	.-3984   	; 0x1ca6 <pxPortInitialiseStack>
    2c36:	f5 01       	movw	r30, r10
    2c38:	91 83       	std	Z+1, r25	; 0x01
    2c3a:	80 83       	st	Z, r24
    2c3c:	c1 14       	cp	r12, r1
    2c3e:	d1 04       	cpc	r13, r1
    2c40:	19 f0       	breq	.+6      	; 0x2c48 <prvInitialiseNewTask+0xc8>
    2c42:	f6 01       	movw	r30, r12
    2c44:	b1 82       	std	Z+1, r11	; 0x01
    2c46:	a0 82       	st	Z, r10
    2c48:	df 91       	pop	r29
    2c4a:	cf 91       	pop	r28
    2c4c:	1f 91       	pop	r17
    2c4e:	0f 91       	pop	r16
    2c50:	ef 90       	pop	r14
    2c52:	df 90       	pop	r13
    2c54:	cf 90       	pop	r12
    2c56:	bf 90       	pop	r11
    2c58:	af 90       	pop	r10
    2c5a:	9f 90       	pop	r9
    2c5c:	8f 90       	pop	r8
    2c5e:	7f 90       	pop	r7
    2c60:	6f 90       	pop	r6
    2c62:	08 95       	ret

00002c64 <prvInitialiseTaskLists>:
    2c64:	cf 93       	push	r28
    2c66:	c0 e0       	ldi	r28, 0x00	; 0
    2c68:	10 c0       	rjmp	.+32     	; 0x2c8a <prvInitialiseTaskLists+0x26>
    2c6a:	8c 2f       	mov	r24, r28
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	9c 01       	movw	r18, r24
    2c70:	22 0f       	add	r18, r18
    2c72:	33 1f       	adc	r19, r19
    2c74:	22 0f       	add	r18, r18
    2c76:	33 1f       	adc	r19, r19
    2c78:	22 0f       	add	r18, r18
    2c7a:	33 1f       	adc	r19, r19
    2c7c:	82 0f       	add	r24, r18
    2c7e:	93 1f       	adc	r25, r19
    2c80:	84 5b       	subi	r24, 0xB4	; 180
    2c82:	9d 4f       	sbci	r25, 0xFD	; 253
    2c84:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <vListInitialise>
    2c88:	cf 5f       	subi	r28, 0xFF	; 255
    2c8a:	ca 30       	cpi	r28, 0x0A	; 10
    2c8c:	70 f3       	brcs	.-36     	; 0x2c6a <prvInitialiseTaskLists+0x6>
    2c8e:	83 e4       	ldi	r24, 0x43	; 67
    2c90:	92 e0       	ldi	r25, 0x02	; 2
    2c92:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <vListInitialise>
    2c96:	8a e3       	ldi	r24, 0x3A	; 58
    2c98:	92 e0       	ldi	r25, 0x02	; 2
    2c9a:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <vListInitialise>
    2c9e:	8d e2       	ldi	r24, 0x2D	; 45
    2ca0:	92 e0       	ldi	r25, 0x02	; 2
    2ca2:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <vListInitialise>
    2ca6:	84 e2       	ldi	r24, 0x24	; 36
    2ca8:	92 e0       	ldi	r25, 0x02	; 2
    2caa:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <vListInitialise>
    2cae:	83 e4       	ldi	r24, 0x43	; 67
    2cb0:	92 e0       	ldi	r25, 0x02	; 2
    2cb2:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <pxDelayedTaskList+0x1>
    2cb6:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <pxDelayedTaskList>
    2cba:	8a e3       	ldi	r24, 0x3A	; 58
    2cbc:	92 e0       	ldi	r25, 0x02	; 2
    2cbe:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <pxOverflowDelayedTaskList+0x1>
    2cc2:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <pxOverflowDelayedTaskList>
    2cc6:	cf 91       	pop	r28
    2cc8:	08 95       	ret

00002cca <prvAddNewTaskToReadyList>:
    2cca:	cf 93       	push	r28
    2ccc:	df 93       	push	r29
    2cce:	ec 01       	movw	r28, r24
    2cd0:	0f b6       	in	r0, 0x3f	; 63
    2cd2:	f8 94       	cli
    2cd4:	0f 92       	push	r0
    2cd6:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <uxCurrentNumberOfTasks>
    2cda:	8f 5f       	subi	r24, 0xFF	; 255
    2cdc:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <uxCurrentNumberOfTasks>
    2ce0:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <pxCurrentTCB>
    2ce4:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <pxCurrentTCB+0x1>
    2ce8:	89 2b       	or	r24, r25
    2cea:	51 f4       	brne	.+20     	; 0x2d00 <prvAddNewTaskToReadyList+0x36>
    2cec:	d0 93 a7 02 	sts	0x02A7, r29	; 0x8002a7 <pxCurrentTCB+0x1>
    2cf0:	c0 93 a6 02 	sts	0x02A6, r28	; 0x8002a6 <pxCurrentTCB>
    2cf4:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <uxCurrentNumberOfTasks>
    2cf8:	81 30       	cpi	r24, 0x01	; 1
    2cfa:	91 f4       	brne	.+36     	; 0x2d20 <prvAddNewTaskToReadyList+0x56>
    2cfc:	b3 df       	rcall	.-154    	; 0x2c64 <prvInitialiseTaskLists>
    2cfe:	10 c0       	rjmp	.+32     	; 0x2d20 <prvAddNewTaskToReadyList+0x56>
    2d00:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <xSchedulerRunning>
    2d04:	81 11       	cpse	r24, r1
    2d06:	0c c0       	rjmp	.+24     	; 0x2d20 <prvAddNewTaskToReadyList+0x56>
    2d08:	e0 91 a6 02 	lds	r30, 0x02A6	; 0x8002a6 <pxCurrentTCB>
    2d0c:	f0 91 a7 02 	lds	r31, 0x02A7	; 0x8002a7 <pxCurrentTCB+0x1>
    2d10:	96 89       	ldd	r25, Z+22	; 0x16
    2d12:	8e 89       	ldd	r24, Y+22	; 0x16
    2d14:	89 17       	cp	r24, r25
    2d16:	20 f0       	brcs	.+8      	; 0x2d20 <prvAddNewTaskToReadyList+0x56>
    2d18:	d0 93 a7 02 	sts	0x02A7, r29	; 0x8002a7 <pxCurrentTCB+0x1>
    2d1c:	c0 93 a6 02 	sts	0x02A6, r28	; 0x8002a6 <pxCurrentTCB>
    2d20:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <uxTaskNumber>
    2d24:	8f 5f       	subi	r24, 0xFF	; 255
    2d26:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <uxTaskNumber>
    2d2a:	8e 89       	ldd	r24, Y+22	; 0x16
    2d2c:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <uxTopReadyPriority>
    2d30:	98 17       	cp	r25, r24
    2d32:	10 f4       	brcc	.+4      	; 0x2d38 <prvAddNewTaskToReadyList+0x6e>
    2d34:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <uxTopReadyPriority>
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	9c 01       	movw	r18, r24
    2d3c:	22 0f       	add	r18, r18
    2d3e:	33 1f       	adc	r19, r19
    2d40:	22 0f       	add	r18, r18
    2d42:	33 1f       	adc	r19, r19
    2d44:	22 0f       	add	r18, r18
    2d46:	33 1f       	adc	r19, r19
    2d48:	82 0f       	add	r24, r18
    2d4a:	93 1f       	adc	r25, r19
    2d4c:	be 01       	movw	r22, r28
    2d4e:	6e 5f       	subi	r22, 0xFE	; 254
    2d50:	7f 4f       	sbci	r23, 0xFF	; 255
    2d52:	84 5b       	subi	r24, 0xB4	; 180
    2d54:	9d 4f       	sbci	r25, 0xFD	; 253
    2d56:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <vListInsertEnd>
    2d5a:	0f 90       	pop	r0
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <xSchedulerRunning>
    2d62:	88 23       	and	r24, r24
    2d64:	49 f0       	breq	.+18     	; 0x2d78 <prvAddNewTaskToReadyList+0xae>
    2d66:	e0 91 a6 02 	lds	r30, 0x02A6	; 0x8002a6 <pxCurrentTCB>
    2d6a:	f0 91 a7 02 	lds	r31, 0x02A7	; 0x8002a7 <pxCurrentTCB+0x1>
    2d6e:	96 89       	ldd	r25, Z+22	; 0x16
    2d70:	8e 89       	ldd	r24, Y+22	; 0x16
    2d72:	98 17       	cp	r25, r24
    2d74:	08 f4       	brcc	.+2      	; 0x2d78 <prvAddNewTaskToReadyList+0xae>
    2d76:	31 d8       	rcall	.-3998   	; 0x1dda <vPortYield>
    2d78:	df 91       	pop	r29
    2d7a:	cf 91       	pop	r28
    2d7c:	08 95       	ret

00002d7e <prvCheckTasksWaitingTermination>:
    2d7e:	cf 93       	push	r28
    2d80:	df 93       	push	r29
    2d82:	1b c0       	rjmp	.+54     	; 0x2dba <prvCheckTasksWaitingTermination+0x3c>
    2d84:	0f b6       	in	r0, 0x3f	; 63
    2d86:	f8 94       	cli
    2d88:	0f 92       	push	r0
    2d8a:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <xTasksWaitingTermination+0x5>
    2d8e:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <xTasksWaitingTermination+0x6>
    2d92:	c6 81       	ldd	r28, Z+6	; 0x06
    2d94:	d7 81       	ldd	r29, Z+7	; 0x07
    2d96:	ce 01       	movw	r24, r28
    2d98:	02 96       	adiw	r24, 0x02	; 2
    2d9a:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <uxListRemove>
    2d9e:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <uxCurrentNumberOfTasks>
    2da2:	81 50       	subi	r24, 0x01	; 1
    2da4:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <uxCurrentNumberOfTasks>
    2da8:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <uxDeletedTasksWaitingCleanUp>
    2dac:	81 50       	subi	r24, 0x01	; 1
    2dae:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <uxDeletedTasksWaitingCleanUp>
    2db2:	0f 90       	pop	r0
    2db4:	0f be       	out	0x3f, r0	; 63
    2db6:	ce 01       	movw	r24, r28
    2db8:	d8 de       	rcall	.-592    	; 0x2b6a <prvDeleteTCB>
    2dba:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <uxDeletedTasksWaitingCleanUp>
    2dbe:	81 11       	cpse	r24, r1
    2dc0:	e1 cf       	rjmp	.-62     	; 0x2d84 <prvCheckTasksWaitingTermination+0x6>
    2dc2:	df 91       	pop	r29
    2dc4:	cf 91       	pop	r28
    2dc6:	08 95       	ret

00002dc8 <prvIdleTask>:
    2dc8:	da df       	rcall	.-76     	; 0x2d7e <prvCheckTasksWaitingTermination>
    2dca:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <pxReadyTasksLists>
    2dce:	82 30       	cpi	r24, 0x02	; 2
    2dd0:	d8 f3       	brcs	.-10     	; 0x2dc8 <prvIdleTask>
    2dd2:	03 d8       	rcall	.-4090   	; 0x1dda <vPortYield>
    2dd4:	f9 cf       	rjmp	.-14     	; 0x2dc8 <prvIdleTask>

00002dd6 <prvAddCurrentTaskToDelayedList>:
    2dd6:	0f 93       	push	r16
    2dd8:	1f 93       	push	r17
    2dda:	cf 93       	push	r28
    2ddc:	df 93       	push	r29
    2dde:	ec 01       	movw	r28, r24
    2de0:	00 91 20 02 	lds	r16, 0x0220	; 0x800220 <xTickCount>
    2de4:	10 91 21 02 	lds	r17, 0x0221	; 0x800221 <xTickCount+0x1>
    2de8:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <pxCurrentTCB>
    2dec:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <pxCurrentTCB+0x1>
    2df0:	02 96       	adiw	r24, 0x02	; 2
    2df2:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <uxListRemove>
    2df6:	c0 0f       	add	r28, r16
    2df8:	d1 1f       	adc	r29, r17
    2dfa:	e0 91 a6 02 	lds	r30, 0x02A6	; 0x8002a6 <pxCurrentTCB>
    2dfe:	f0 91 a7 02 	lds	r31, 0x02A7	; 0x8002a7 <pxCurrentTCB+0x1>
    2e02:	d3 83       	std	Z+3, r29	; 0x03
    2e04:	c2 83       	std	Z+2, r28	; 0x02
    2e06:	c0 17       	cp	r28, r16
    2e08:	d1 07       	cpc	r29, r17
    2e0a:	68 f4       	brcc	.+26     	; 0x2e26 <prvAddCurrentTaskToDelayedList+0x50>
    2e0c:	60 91 a6 02 	lds	r22, 0x02A6	; 0x8002a6 <pxCurrentTCB>
    2e10:	70 91 a7 02 	lds	r23, 0x02A7	; 0x8002a7 <pxCurrentTCB+0x1>
    2e14:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <pxOverflowDelayedTaskList>
    2e18:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <pxOverflowDelayedTaskList+0x1>
    2e1c:	6e 5f       	subi	r22, 0xFE	; 254
    2e1e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e20:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <vListInsert>
    2e24:	17 c0       	rjmp	.+46     	; 0x2e54 <prvAddCurrentTaskToDelayedList+0x7e>
    2e26:	60 91 a6 02 	lds	r22, 0x02A6	; 0x8002a6 <pxCurrentTCB>
    2e2a:	70 91 a7 02 	lds	r23, 0x02A7	; 0x8002a7 <pxCurrentTCB+0x1>
    2e2e:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <pxDelayedTaskList>
    2e32:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <pxDelayedTaskList+0x1>
    2e36:	6e 5f       	subi	r22, 0xFE	; 254
    2e38:	7f 4f       	sbci	r23, 0xFF	; 255
    2e3a:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <vListInsert>
    2e3e:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <xNextTaskUnblockTime>
    2e42:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <xNextTaskUnblockTime+0x1>
    2e46:	c8 17       	cp	r28, r24
    2e48:	d9 07       	cpc	r29, r25
    2e4a:	20 f4       	brcc	.+8      	; 0x2e54 <prvAddCurrentTaskToDelayedList+0x7e>
    2e4c:	d0 93 19 02 	sts	0x0219, r29	; 0x800219 <xNextTaskUnblockTime+0x1>
    2e50:	c0 93 18 02 	sts	0x0218, r28	; 0x800218 <xNextTaskUnblockTime>
    2e54:	df 91       	pop	r29
    2e56:	cf 91       	pop	r28
    2e58:	1f 91       	pop	r17
    2e5a:	0f 91       	pop	r16
    2e5c:	08 95       	ret

00002e5e <xTaskCreate>:
    2e5e:	2f 92       	push	r2
    2e60:	3f 92       	push	r3
    2e62:	4f 92       	push	r4
    2e64:	5f 92       	push	r5
    2e66:	6f 92       	push	r6
    2e68:	7f 92       	push	r7
    2e6a:	8f 92       	push	r8
    2e6c:	9f 92       	push	r9
    2e6e:	af 92       	push	r10
    2e70:	bf 92       	push	r11
    2e72:	cf 92       	push	r12
    2e74:	df 92       	push	r13
    2e76:	ef 92       	push	r14
    2e78:	ff 92       	push	r15
    2e7a:	0f 93       	push	r16
    2e7c:	1f 93       	push	r17
    2e7e:	cf 93       	push	r28
    2e80:	df 93       	push	r29
    2e82:	3c 01       	movw	r6, r24
    2e84:	1b 01       	movw	r2, r22
    2e86:	5a 01       	movw	r10, r20
    2e88:	29 01       	movw	r4, r18
    2e8a:	ca 01       	movw	r24, r20
    2e8c:	5d d8       	rcall	.-3910   	; 0x1f48 <pvPortMalloc>
    2e8e:	6c 01       	movw	r12, r24
    2e90:	89 2b       	or	r24, r25
    2e92:	61 f0       	breq	.+24     	; 0x2eac <xTaskCreate+0x4e>
    2e94:	88 e2       	ldi	r24, 0x28	; 40
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	57 d8       	rcall	.-3922   	; 0x1f48 <pvPortMalloc>
    2e9a:	ec 01       	movw	r28, r24
    2e9c:	89 2b       	or	r24, r25
    2e9e:	19 f0       	breq	.+6      	; 0x2ea6 <xTaskCreate+0x48>
    2ea0:	d8 8e       	std	Y+24, r13	; 0x18
    2ea2:	cf 8a       	std	Y+23, r12	; 0x17
    2ea4:	05 c0       	rjmp	.+10     	; 0x2eb0 <xTaskCreate+0x52>
    2ea6:	c6 01       	movw	r24, r12
    2ea8:	5d d8       	rcall	.-3910   	; 0x1f64 <vPortFree>
    2eaa:	02 c0       	rjmp	.+4      	; 0x2eb0 <xTaskCreate+0x52>
    2eac:	c0 e0       	ldi	r28, 0x00	; 0
    2eae:	d0 e0       	ldi	r29, 0x00	; 0
    2eb0:	20 97       	sbiw	r28, 0x00	; 0
    2eb2:	81 f0       	breq	.+32     	; 0x2ed4 <xTaskCreate+0x76>
    2eb4:	95 01       	movw	r18, r10
    2eb6:	40 e0       	ldi	r20, 0x00	; 0
    2eb8:	50 e0       	ldi	r21, 0x00	; 0
    2eba:	81 2c       	mov	r8, r1
    2ebc:	91 2c       	mov	r9, r1
    2ebe:	5e 01       	movw	r10, r28
    2ec0:	67 01       	movw	r12, r14
    2ec2:	e0 2e       	mov	r14, r16
    2ec4:	82 01       	movw	r16, r4
    2ec6:	b1 01       	movw	r22, r2
    2ec8:	c3 01       	movw	r24, r6
    2eca:	5a de       	rcall	.-844    	; 0x2b80 <prvInitialiseNewTask>
    2ecc:	ce 01       	movw	r24, r28
    2ece:	fd de       	rcall	.-518    	; 0x2cca <prvAddNewTaskToReadyList>
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	01 c0       	rjmp	.+2      	; 0x2ed6 <xTaskCreate+0x78>
    2ed4:	8f ef       	ldi	r24, 0xFF	; 255
    2ed6:	df 91       	pop	r29
    2ed8:	cf 91       	pop	r28
    2eda:	1f 91       	pop	r17
    2edc:	0f 91       	pop	r16
    2ede:	ff 90       	pop	r15
    2ee0:	ef 90       	pop	r14
    2ee2:	df 90       	pop	r13
    2ee4:	cf 90       	pop	r12
    2ee6:	bf 90       	pop	r11
    2ee8:	af 90       	pop	r10
    2eea:	9f 90       	pop	r9
    2eec:	8f 90       	pop	r8
    2eee:	7f 90       	pop	r7
    2ef0:	6f 90       	pop	r6
    2ef2:	5f 90       	pop	r5
    2ef4:	4f 90       	pop	r4
    2ef6:	3f 90       	pop	r3
    2ef8:	2f 90       	pop	r2
    2efa:	08 95       	ret

00002efc <vTaskStartScheduler>:
    2efc:	ef 92       	push	r14
    2efe:	ff 92       	push	r15
    2f00:	0f 93       	push	r16
    2f02:	0f 2e       	mov	r0, r31
    2f04:	f6 e1       	ldi	r31, 0x16	; 22
    2f06:	ef 2e       	mov	r14, r31
    2f08:	f2 e0       	ldi	r31, 0x02	; 2
    2f0a:	ff 2e       	mov	r15, r31
    2f0c:	f0 2d       	mov	r31, r0
    2f0e:	00 e0       	ldi	r16, 0x00	; 0
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	45 e5       	ldi	r20, 0x55	; 85
    2f16:	50 e0       	ldi	r21, 0x00	; 0
    2f18:	6e e0       	ldi	r22, 0x0E	; 14
    2f1a:	72 e0       	ldi	r23, 0x02	; 2
    2f1c:	84 ee       	ldi	r24, 0xE4	; 228
    2f1e:	96 e1       	ldi	r25, 0x16	; 22
    2f20:	9e df       	rcall	.-196    	; 0x2e5e <xTaskCreate>
    2f22:	81 30       	cpi	r24, 0x01	; 1
    2f24:	81 f4       	brne	.+32     	; 0x2f46 <vTaskStartScheduler+0x4a>
    2f26:	f8 94       	cli
    2f28:	8f ef       	ldi	r24, 0xFF	; 255
    2f2a:	9f ef       	ldi	r25, 0xFF	; 255
    2f2c:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <xNextTaskUnblockTime+0x1>
    2f30:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <xNextTaskUnblockTime>
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <xSchedulerRunning>
    2f3a:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <xTickCount+0x1>
    2f3e:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <xTickCount>
    2f42:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <xPortStartScheduler>
    2f46:	0f 91       	pop	r16
    2f48:	ff 90       	pop	r15
    2f4a:	ef 90       	pop	r14
    2f4c:	08 95       	ret

00002f4e <vTaskSuspendAll>:
    2f4e:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <uxSchedulerSuspended>
    2f52:	8f 5f       	subi	r24, 0xFF	; 255
    2f54:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <uxSchedulerSuspended>
    2f58:	08 95       	ret

00002f5a <xTaskIncrementTick>:
    2f5a:	df 92       	push	r13
    2f5c:	ef 92       	push	r14
    2f5e:	ff 92       	push	r15
    2f60:	0f 93       	push	r16
    2f62:	1f 93       	push	r17
    2f64:	cf 93       	push	r28
    2f66:	df 93       	push	r29
    2f68:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <uxSchedulerSuspended>
    2f6c:	81 11       	cpse	r24, r1
    2f6e:	96 c0       	rjmp	.+300    	; 0x309c <xTaskIncrementTick+0x142>
    2f70:	e0 90 20 02 	lds	r14, 0x0220	; 0x800220 <xTickCount>
    2f74:	f0 90 21 02 	lds	r15, 0x0221	; 0x800221 <xTickCount+0x1>
    2f78:	8f ef       	ldi	r24, 0xFF	; 255
    2f7a:	e8 1a       	sub	r14, r24
    2f7c:	f8 0a       	sbc	r15, r24
    2f7e:	f0 92 21 02 	sts	0x0221, r15	; 0x800221 <xTickCount+0x1>
    2f82:	e0 92 20 02 	sts	0x0220, r14	; 0x800220 <xTickCount>
    2f86:	e1 14       	cp	r14, r1
    2f88:	f1 04       	cpc	r15, r1
    2f8a:	b1 f4       	brne	.+44     	; 0x2fb8 <xTaskIncrementTick+0x5e>
    2f8c:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <pxDelayedTaskList>
    2f90:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <pxDelayedTaskList+0x1>
    2f94:	20 91 36 02 	lds	r18, 0x0236	; 0x800236 <pxOverflowDelayedTaskList>
    2f98:	30 91 37 02 	lds	r19, 0x0237	; 0x800237 <pxOverflowDelayedTaskList+0x1>
    2f9c:	30 93 39 02 	sts	0x0239, r19	; 0x800239 <pxDelayedTaskList+0x1>
    2fa0:	20 93 38 02 	sts	0x0238, r18	; 0x800238 <pxDelayedTaskList>
    2fa4:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <pxOverflowDelayedTaskList+0x1>
    2fa8:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <pxOverflowDelayedTaskList>
    2fac:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <xNumOfOverflows>
    2fb0:	8f 5f       	subi	r24, 0xFF	; 255
    2fb2:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <xNumOfOverflows>
    2fb6:	ba dd       	rcall	.-1164   	; 0x2b2c <prvResetNextTaskUnblockTime>
    2fb8:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <xNextTaskUnblockTime>
    2fbc:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <xNextTaskUnblockTime+0x1>
    2fc0:	e8 16       	cp	r14, r24
    2fc2:	f9 06       	cpc	r15, r25
    2fc4:	28 f4       	brcc	.+10     	; 0x2fd0 <xTaskIncrementTick+0x76>
    2fc6:	d1 2c       	mov	r13, r1
    2fc8:	53 c0       	rjmp	.+166    	; 0x3070 <xTaskIncrementTick+0x116>
    2fca:	dd 24       	eor	r13, r13
    2fcc:	d3 94       	inc	r13
    2fce:	01 c0       	rjmp	.+2      	; 0x2fd2 <xTaskIncrementTick+0x78>
    2fd0:	d1 2c       	mov	r13, r1
    2fd2:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <pxDelayedTaskList>
    2fd6:	f0 91 39 02 	lds	r31, 0x0239	; 0x800239 <pxDelayedTaskList+0x1>
    2fda:	80 81       	ld	r24, Z
    2fdc:	81 11       	cpse	r24, r1
    2fde:	07 c0       	rjmp	.+14     	; 0x2fee <xTaskIncrementTick+0x94>
    2fe0:	8f ef       	ldi	r24, 0xFF	; 255
    2fe2:	9f ef       	ldi	r25, 0xFF	; 255
    2fe4:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <xNextTaskUnblockTime+0x1>
    2fe8:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <xNextTaskUnblockTime>
    2fec:	41 c0       	rjmp	.+130    	; 0x3070 <xTaskIncrementTick+0x116>
    2fee:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <pxDelayedTaskList>
    2ff2:	f0 91 39 02 	lds	r31, 0x0239	; 0x800239 <pxDelayedTaskList+0x1>
    2ff6:	05 80       	ldd	r0, Z+5	; 0x05
    2ff8:	f6 81       	ldd	r31, Z+6	; 0x06
    2ffa:	e0 2d       	mov	r30, r0
    2ffc:	c6 81       	ldd	r28, Z+6	; 0x06
    2ffe:	d7 81       	ldd	r29, Z+7	; 0x07
    3000:	8a 81       	ldd	r24, Y+2	; 0x02
    3002:	9b 81       	ldd	r25, Y+3	; 0x03
    3004:	e8 16       	cp	r14, r24
    3006:	f9 06       	cpc	r15, r25
    3008:	28 f4       	brcc	.+10     	; 0x3014 <xTaskIncrementTick+0xba>
    300a:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <xNextTaskUnblockTime+0x1>
    300e:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <xNextTaskUnblockTime>
    3012:	2e c0       	rjmp	.+92     	; 0x3070 <xTaskIncrementTick+0x116>
    3014:	8e 01       	movw	r16, r28
    3016:	0e 5f       	subi	r16, 0xFE	; 254
    3018:	1f 4f       	sbci	r17, 0xFF	; 255
    301a:	c8 01       	movw	r24, r16
    301c:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <uxListRemove>
    3020:	8c 89       	ldd	r24, Y+20	; 0x14
    3022:	9d 89       	ldd	r25, Y+21	; 0x15
    3024:	89 2b       	or	r24, r25
    3026:	21 f0       	breq	.+8      	; 0x3030 <xTaskIncrementTick+0xd6>
    3028:	ce 01       	movw	r24, r28
    302a:	0c 96       	adiw	r24, 0x0c	; 12
    302c:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <uxListRemove>
    3030:	8e 89       	ldd	r24, Y+22	; 0x16
    3032:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <uxTopReadyPriority>
    3036:	98 17       	cp	r25, r24
    3038:	10 f4       	brcc	.+4      	; 0x303e <xTaskIncrementTick+0xe4>
    303a:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <uxTopReadyPriority>
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	9c 01       	movw	r18, r24
    3042:	22 0f       	add	r18, r18
    3044:	33 1f       	adc	r19, r19
    3046:	22 0f       	add	r18, r18
    3048:	33 1f       	adc	r19, r19
    304a:	22 0f       	add	r18, r18
    304c:	33 1f       	adc	r19, r19
    304e:	82 0f       	add	r24, r18
    3050:	93 1f       	adc	r25, r19
    3052:	b8 01       	movw	r22, r16
    3054:	84 5b       	subi	r24, 0xB4	; 180
    3056:	9d 4f       	sbci	r25, 0xFD	; 253
    3058:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <vListInsertEnd>
    305c:	9e 89       	ldd	r25, Y+22	; 0x16
    305e:	e0 91 a6 02 	lds	r30, 0x02A6	; 0x8002a6 <pxCurrentTCB>
    3062:	f0 91 a7 02 	lds	r31, 0x02A7	; 0x8002a7 <pxCurrentTCB+0x1>
    3066:	86 89       	ldd	r24, Z+22	; 0x16
    3068:	98 17       	cp	r25, r24
    306a:	08 f0       	brcs	.+2      	; 0x306e <xTaskIncrementTick+0x114>
    306c:	ae cf       	rjmp	.-164    	; 0x2fca <xTaskIncrementTick+0x70>
    306e:	b1 cf       	rjmp	.-158    	; 0x2fd2 <xTaskIncrementTick+0x78>
    3070:	e0 91 a6 02 	lds	r30, 0x02A6	; 0x8002a6 <pxCurrentTCB>
    3074:	f0 91 a7 02 	lds	r31, 0x02A7	; 0x8002a7 <pxCurrentTCB+0x1>
    3078:	86 89       	ldd	r24, Z+22	; 0x16
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	fc 01       	movw	r30, r24
    307e:	ee 0f       	add	r30, r30
    3080:	ff 1f       	adc	r31, r31
    3082:	ee 0f       	add	r30, r30
    3084:	ff 1f       	adc	r31, r31
    3086:	ee 0f       	add	r30, r30
    3088:	ff 1f       	adc	r31, r31
    308a:	8e 0f       	add	r24, r30
    308c:	9f 1f       	adc	r25, r31
    308e:	fc 01       	movw	r30, r24
    3090:	e4 5b       	subi	r30, 0xB4	; 180
    3092:	fd 4f       	sbci	r31, 0xFD	; 253
    3094:	80 81       	ld	r24, Z
    3096:	82 30       	cpi	r24, 0x02	; 2
    3098:	40 f4       	brcc	.+16     	; 0x30aa <xTaskIncrementTick+0x150>
    309a:	09 c0       	rjmp	.+18     	; 0x30ae <xTaskIncrementTick+0x154>
    309c:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <uxPendedTicks>
    30a0:	8f 5f       	subi	r24, 0xFF	; 255
    30a2:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <uxPendedTicks>
    30a6:	d1 2c       	mov	r13, r1
    30a8:	02 c0       	rjmp	.+4      	; 0x30ae <xTaskIncrementTick+0x154>
    30aa:	dd 24       	eor	r13, r13
    30ac:	d3 94       	inc	r13
    30ae:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <xYieldPending>
    30b2:	88 23       	and	r24, r24
    30b4:	11 f0       	breq	.+4      	; 0x30ba <xTaskIncrementTick+0x160>
    30b6:	dd 24       	eor	r13, r13
    30b8:	d3 94       	inc	r13
    30ba:	8d 2d       	mov	r24, r13
    30bc:	df 91       	pop	r29
    30be:	cf 91       	pop	r28
    30c0:	1f 91       	pop	r17
    30c2:	0f 91       	pop	r16
    30c4:	ff 90       	pop	r15
    30c6:	ef 90       	pop	r14
    30c8:	df 90       	pop	r13
    30ca:	08 95       	ret

000030cc <xTaskResumeAll>:
    30cc:	0f 93       	push	r16
    30ce:	1f 93       	push	r17
    30d0:	cf 93       	push	r28
    30d2:	df 93       	push	r29
    30d4:	0f b6       	in	r0, 0x3f	; 63
    30d6:	f8 94       	cli
    30d8:	0f 92       	push	r0
    30da:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <uxSchedulerSuspended>
    30de:	81 50       	subi	r24, 0x01	; 1
    30e0:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <uxSchedulerSuspended>
    30e4:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <uxSchedulerSuspended>
    30e8:	81 11       	cpse	r24, r1
    30ea:	56 c0       	rjmp	.+172    	; 0x3198 <xTaskResumeAll+0xcc>
    30ec:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <uxCurrentNumberOfTasks>
    30f0:	81 11       	cpse	r24, r1
    30f2:	33 c0       	rjmp	.+102    	; 0x315a <xTaskResumeAll+0x8e>
    30f4:	54 c0       	rjmp	.+168    	; 0x319e <xTaskResumeAll+0xd2>
    30f6:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <xPendingReadyList+0x5>
    30fa:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <xPendingReadyList+0x6>
    30fe:	c6 81       	ldd	r28, Z+6	; 0x06
    3100:	d7 81       	ldd	r29, Z+7	; 0x07
    3102:	ce 01       	movw	r24, r28
    3104:	0c 96       	adiw	r24, 0x0c	; 12
    3106:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <uxListRemove>
    310a:	8e 01       	movw	r16, r28
    310c:	0e 5f       	subi	r16, 0xFE	; 254
    310e:	1f 4f       	sbci	r17, 0xFF	; 255
    3110:	c8 01       	movw	r24, r16
    3112:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <uxListRemove>
    3116:	8e 89       	ldd	r24, Y+22	; 0x16
    3118:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <uxTopReadyPriority>
    311c:	98 17       	cp	r25, r24
    311e:	10 f4       	brcc	.+4      	; 0x3124 <xTaskResumeAll+0x58>
    3120:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <uxTopReadyPriority>
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	9c 01       	movw	r18, r24
    3128:	22 0f       	add	r18, r18
    312a:	33 1f       	adc	r19, r19
    312c:	22 0f       	add	r18, r18
    312e:	33 1f       	adc	r19, r19
    3130:	22 0f       	add	r18, r18
    3132:	33 1f       	adc	r19, r19
    3134:	82 0f       	add	r24, r18
    3136:	93 1f       	adc	r25, r19
    3138:	b8 01       	movw	r22, r16
    313a:	84 5b       	subi	r24, 0xB4	; 180
    313c:	9d 4f       	sbci	r25, 0xFD	; 253
    313e:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <vListInsertEnd>
    3142:	9e 89       	ldd	r25, Y+22	; 0x16
    3144:	e0 91 a6 02 	lds	r30, 0x02A6	; 0x8002a6 <pxCurrentTCB>
    3148:	f0 91 a7 02 	lds	r31, 0x02A7	; 0x8002a7 <pxCurrentTCB+0x1>
    314c:	86 89       	ldd	r24, Z+22	; 0x16
    314e:	98 17       	cp	r25, r24
    3150:	30 f0       	brcs	.+12     	; 0x315e <xTaskResumeAll+0x92>
    3152:	81 e0       	ldi	r24, 0x01	; 1
    3154:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <xYieldPending>
    3158:	02 c0       	rjmp	.+4      	; 0x315e <xTaskResumeAll+0x92>
    315a:	c0 e0       	ldi	r28, 0x00	; 0
    315c:	d0 e0       	ldi	r29, 0x00	; 0
    315e:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <xPendingReadyList>
    3162:	81 11       	cpse	r24, r1
    3164:	c8 cf       	rjmp	.-112    	; 0x30f6 <xTaskResumeAll+0x2a>
    3166:	cd 2b       	or	r28, r29
    3168:	09 f0       	breq	.+2      	; 0x316c <xTaskResumeAll+0xa0>
    316a:	e0 dc       	rcall	.-1600   	; 0x2b2c <prvResetNextTaskUnblockTime>
    316c:	c0 91 1d 02 	lds	r28, 0x021D	; 0x80021d <uxPendedTicks>
    3170:	cc 23       	and	r28, r28
    3172:	51 f0       	breq	.+20     	; 0x3188 <xTaskResumeAll+0xbc>
    3174:	f2 de       	rcall	.-540    	; 0x2f5a <xTaskIncrementTick>
    3176:	88 23       	and	r24, r24
    3178:	19 f0       	breq	.+6      	; 0x3180 <xTaskResumeAll+0xb4>
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <xYieldPending>
    3180:	c1 50       	subi	r28, 0x01	; 1
    3182:	c1 f7       	brne	.-16     	; 0x3174 <xTaskResumeAll+0xa8>
    3184:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <uxPendedTicks>
    3188:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <xYieldPending>
    318c:	88 23       	and	r24, r24
    318e:	31 f0       	breq	.+12     	; 0x319c <xTaskResumeAll+0xd0>
    3190:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <vPortYield>
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	03 c0       	rjmp	.+6      	; 0x319e <xTaskResumeAll+0xd2>
    3198:	80 e0       	ldi	r24, 0x00	; 0
    319a:	01 c0       	rjmp	.+2      	; 0x319e <xTaskResumeAll+0xd2>
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	0f 90       	pop	r0
    31a0:	0f be       	out	0x3f, r0	; 63
    31a2:	df 91       	pop	r29
    31a4:	cf 91       	pop	r28
    31a6:	1f 91       	pop	r17
    31a8:	0f 91       	pop	r16
    31aa:	08 95       	ret

000031ac <vTaskDelay>:
    31ac:	cf 93       	push	r28
    31ae:	df 93       	push	r29
    31b0:	ec 01       	movw	r28, r24
    31b2:	89 2b       	or	r24, r25
    31b4:	31 f0       	breq	.+12     	; 0x31c2 <vTaskDelay+0x16>
    31b6:	cb de       	rcall	.-618    	; 0x2f4e <vTaskSuspendAll>
    31b8:	60 e0       	ldi	r22, 0x00	; 0
    31ba:	ce 01       	movw	r24, r28
    31bc:	0c de       	rcall	.-1000   	; 0x2dd6 <prvAddCurrentTaskToDelayedList>
    31be:	86 df       	rcall	.-244    	; 0x30cc <xTaskResumeAll>
    31c0:	01 c0       	rjmp	.+2      	; 0x31c4 <vTaskDelay+0x18>
    31c2:	80 e0       	ldi	r24, 0x00	; 0
    31c4:	81 11       	cpse	r24, r1
    31c6:	02 c0       	rjmp	.+4      	; 0x31cc <vTaskDelay+0x20>
    31c8:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <vPortYield>
    31cc:	df 91       	pop	r29
    31ce:	cf 91       	pop	r28
    31d0:	08 95       	ret

000031d2 <vTaskSwitchContext>:
    31d2:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <uxSchedulerSuspended>
    31d6:	88 23       	and	r24, r24
    31d8:	21 f0       	breq	.+8      	; 0x31e2 <vTaskSwitchContext+0x10>
    31da:	81 e0       	ldi	r24, 0x01	; 1
    31dc:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <xYieldPending>
    31e0:	08 95       	ret
    31e2:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <xYieldPending>
    31e6:	20 91 1f 02 	lds	r18, 0x021F	; 0x80021f <uxTopReadyPriority>
    31ea:	01 c0       	rjmp	.+2      	; 0x31ee <vTaskSwitchContext+0x1c>
    31ec:	21 50       	subi	r18, 0x01	; 1
    31ee:	82 2f       	mov	r24, r18
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	fc 01       	movw	r30, r24
    31f4:	ee 0f       	add	r30, r30
    31f6:	ff 1f       	adc	r31, r31
    31f8:	ee 0f       	add	r30, r30
    31fa:	ff 1f       	adc	r31, r31
    31fc:	ee 0f       	add	r30, r30
    31fe:	ff 1f       	adc	r31, r31
    3200:	e8 0f       	add	r30, r24
    3202:	f9 1f       	adc	r31, r25
    3204:	e4 5b       	subi	r30, 0xB4	; 180
    3206:	fd 4f       	sbci	r31, 0xFD	; 253
    3208:	30 81       	ld	r19, Z
    320a:	33 23       	and	r19, r19
    320c:	79 f3       	breq	.-34     	; 0x31ec <vTaskSwitchContext+0x1a>
    320e:	ac 01       	movw	r20, r24
    3210:	44 0f       	add	r20, r20
    3212:	55 1f       	adc	r21, r21
    3214:	44 0f       	add	r20, r20
    3216:	55 1f       	adc	r21, r21
    3218:	44 0f       	add	r20, r20
    321a:	55 1f       	adc	r21, r21
    321c:	48 0f       	add	r20, r24
    321e:	59 1f       	adc	r21, r25
    3220:	df 01       	movw	r26, r30
    3222:	01 80       	ldd	r0, Z+1	; 0x01
    3224:	f2 81       	ldd	r31, Z+2	; 0x02
    3226:	e0 2d       	mov	r30, r0
    3228:	02 80       	ldd	r0, Z+2	; 0x02
    322a:	f3 81       	ldd	r31, Z+3	; 0x03
    322c:	e0 2d       	mov	r30, r0
    322e:	12 96       	adiw	r26, 0x02	; 2
    3230:	fc 93       	st	X, r31
    3232:	ee 93       	st	-X, r30
    3234:	11 97       	sbiw	r26, 0x01	; 1
    3236:	41 5b       	subi	r20, 0xB1	; 177
    3238:	5d 4f       	sbci	r21, 0xFD	; 253
    323a:	e4 17       	cp	r30, r20
    323c:	f5 07       	cpc	r31, r21
    323e:	29 f4       	brne	.+10     	; 0x324a <vTaskSwitchContext+0x78>
    3240:	42 81       	ldd	r20, Z+2	; 0x02
    3242:	53 81       	ldd	r21, Z+3	; 0x03
    3244:	fd 01       	movw	r30, r26
    3246:	52 83       	std	Z+2, r21	; 0x02
    3248:	41 83       	std	Z+1, r20	; 0x01
    324a:	fc 01       	movw	r30, r24
    324c:	ee 0f       	add	r30, r30
    324e:	ff 1f       	adc	r31, r31
    3250:	ee 0f       	add	r30, r30
    3252:	ff 1f       	adc	r31, r31
    3254:	ee 0f       	add	r30, r30
    3256:	ff 1f       	adc	r31, r31
    3258:	8e 0f       	add	r24, r30
    325a:	9f 1f       	adc	r25, r31
    325c:	fc 01       	movw	r30, r24
    325e:	e4 5b       	subi	r30, 0xB4	; 180
    3260:	fd 4f       	sbci	r31, 0xFD	; 253
    3262:	01 80       	ldd	r0, Z+1	; 0x01
    3264:	f2 81       	ldd	r31, Z+2	; 0x02
    3266:	e0 2d       	mov	r30, r0
    3268:	86 81       	ldd	r24, Z+6	; 0x06
    326a:	97 81       	ldd	r25, Z+7	; 0x07
    326c:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <pxCurrentTCB+0x1>
    3270:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <pxCurrentTCB>
    3274:	20 93 1f 02 	sts	0x021F, r18	; 0x80021f <uxTopReadyPriority>
    3278:	08 95       	ret

0000327a <vTaskPlaceOnEventList>:
    327a:	cf 93       	push	r28
    327c:	df 93       	push	r29
    327e:	eb 01       	movw	r28, r22
    3280:	60 91 a6 02 	lds	r22, 0x02A6	; 0x8002a6 <pxCurrentTCB>
    3284:	70 91 a7 02 	lds	r23, 0x02A7	; 0x8002a7 <pxCurrentTCB+0x1>
    3288:	64 5f       	subi	r22, 0xF4	; 244
    328a:	7f 4f       	sbci	r23, 0xFF	; 255
    328c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <vListInsert>
    3290:	61 e0       	ldi	r22, 0x01	; 1
    3292:	ce 01       	movw	r24, r28
    3294:	a0 dd       	rcall	.-1216   	; 0x2dd6 <prvAddCurrentTaskToDelayedList>
    3296:	df 91       	pop	r29
    3298:	cf 91       	pop	r28
    329a:	08 95       	ret

0000329c <xTaskRemoveFromEventList>:
    329c:	0f 93       	push	r16
    329e:	1f 93       	push	r17
    32a0:	cf 93       	push	r28
    32a2:	df 93       	push	r29
    32a4:	dc 01       	movw	r26, r24
    32a6:	15 96       	adiw	r26, 0x05	; 5
    32a8:	ed 91       	ld	r30, X+
    32aa:	fc 91       	ld	r31, X
    32ac:	16 97       	sbiw	r26, 0x06	; 6
    32ae:	c6 81       	ldd	r28, Z+6	; 0x06
    32b0:	d7 81       	ldd	r29, Z+7	; 0x07
    32b2:	8e 01       	movw	r16, r28
    32b4:	04 5f       	subi	r16, 0xF4	; 244
    32b6:	1f 4f       	sbci	r17, 0xFF	; 255
    32b8:	c8 01       	movw	r24, r16
    32ba:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <uxListRemove>
    32be:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <uxSchedulerSuspended>
    32c2:	81 11       	cpse	r24, r1
    32c4:	1c c0       	rjmp	.+56     	; 0x32fe <xTaskRemoveFromEventList+0x62>
    32c6:	0a 50       	subi	r16, 0x0A	; 10
    32c8:	11 09       	sbc	r17, r1
    32ca:	c8 01       	movw	r24, r16
    32cc:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <uxListRemove>
    32d0:	8e 89       	ldd	r24, Y+22	; 0x16
    32d2:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <uxTopReadyPriority>
    32d6:	98 17       	cp	r25, r24
    32d8:	10 f4       	brcc	.+4      	; 0x32de <xTaskRemoveFromEventList+0x42>
    32da:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <uxTopReadyPriority>
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	9c 01       	movw	r18, r24
    32e2:	22 0f       	add	r18, r18
    32e4:	33 1f       	adc	r19, r19
    32e6:	22 0f       	add	r18, r18
    32e8:	33 1f       	adc	r19, r19
    32ea:	22 0f       	add	r18, r18
    32ec:	33 1f       	adc	r19, r19
    32ee:	82 0f       	add	r24, r18
    32f0:	93 1f       	adc	r25, r19
    32f2:	b8 01       	movw	r22, r16
    32f4:	84 5b       	subi	r24, 0xB4	; 180
    32f6:	9d 4f       	sbci	r25, 0xFD	; 253
    32f8:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <vListInsertEnd>
    32fc:	05 c0       	rjmp	.+10     	; 0x3308 <xTaskRemoveFromEventList+0x6c>
    32fe:	b8 01       	movw	r22, r16
    3300:	8d e2       	ldi	r24, 0x2D	; 45
    3302:	92 e0       	ldi	r25, 0x02	; 2
    3304:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <vListInsertEnd>
    3308:	9e 89       	ldd	r25, Y+22	; 0x16
    330a:	e0 91 a6 02 	lds	r30, 0x02A6	; 0x8002a6 <pxCurrentTCB>
    330e:	f0 91 a7 02 	lds	r31, 0x02A7	; 0x8002a7 <pxCurrentTCB+0x1>
    3312:	86 89       	ldd	r24, Z+22	; 0x16
    3314:	89 17       	cp	r24, r25
    3316:	20 f4       	brcc	.+8      	; 0x3320 <xTaskRemoveFromEventList+0x84>
    3318:	81 e0       	ldi	r24, 0x01	; 1
    331a:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <xYieldPending>
    331e:	01 c0       	rjmp	.+2      	; 0x3322 <xTaskRemoveFromEventList+0x86>
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	df 91       	pop	r29
    3324:	cf 91       	pop	r28
    3326:	1f 91       	pop	r17
    3328:	0f 91       	pop	r16
    332a:	08 95       	ret

0000332c <vTaskRemoveFromUnorderedEventList>:
    332c:	0f 93       	push	r16
    332e:	1f 93       	push	r17
    3330:	cf 93       	push	r28
    3332:	df 93       	push	r29
    3334:	70 68       	ori	r23, 0x80	; 128
    3336:	fc 01       	movw	r30, r24
    3338:	71 83       	std	Z+1, r23	; 0x01
    333a:	60 83       	st	Z, r22
    333c:	c6 81       	ldd	r28, Z+6	; 0x06
    333e:	d7 81       	ldd	r29, Z+7	; 0x07
    3340:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <uxListRemove>
    3344:	8e 01       	movw	r16, r28
    3346:	0e 5f       	subi	r16, 0xFE	; 254
    3348:	1f 4f       	sbci	r17, 0xFF	; 255
    334a:	c8 01       	movw	r24, r16
    334c:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <uxListRemove>
    3350:	8e 89       	ldd	r24, Y+22	; 0x16
    3352:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <uxTopReadyPriority>
    3356:	98 17       	cp	r25, r24
    3358:	10 f4       	brcc	.+4      	; 0x335e <vTaskRemoveFromUnorderedEventList+0x32>
    335a:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <uxTopReadyPriority>
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	9c 01       	movw	r18, r24
    3362:	22 0f       	add	r18, r18
    3364:	33 1f       	adc	r19, r19
    3366:	22 0f       	add	r18, r18
    3368:	33 1f       	adc	r19, r19
    336a:	22 0f       	add	r18, r18
    336c:	33 1f       	adc	r19, r19
    336e:	82 0f       	add	r24, r18
    3370:	93 1f       	adc	r25, r19
    3372:	b8 01       	movw	r22, r16
    3374:	84 5b       	subi	r24, 0xB4	; 180
    3376:	9d 4f       	sbci	r25, 0xFD	; 253
    3378:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <vListInsertEnd>
    337c:	9e 89       	ldd	r25, Y+22	; 0x16
    337e:	e0 91 a6 02 	lds	r30, 0x02A6	; 0x8002a6 <pxCurrentTCB>
    3382:	f0 91 a7 02 	lds	r31, 0x02A7	; 0x8002a7 <pxCurrentTCB+0x1>
    3386:	86 89       	ldd	r24, Z+22	; 0x16
    3388:	89 17       	cp	r24, r25
    338a:	18 f4       	brcc	.+6      	; 0x3392 <vTaskRemoveFromUnorderedEventList+0x66>
    338c:	81 e0       	ldi	r24, 0x01	; 1
    338e:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <xYieldPending>
    3392:	df 91       	pop	r29
    3394:	cf 91       	pop	r28
    3396:	1f 91       	pop	r17
    3398:	0f 91       	pop	r16
    339a:	08 95       	ret

0000339c <vTaskInternalSetTimeOutState>:
    339c:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <xNumOfOverflows>
    33a0:	fc 01       	movw	r30, r24
    33a2:	20 83       	st	Z, r18
    33a4:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <xTickCount>
    33a8:	30 91 21 02 	lds	r19, 0x0221	; 0x800221 <xTickCount+0x1>
    33ac:	32 83       	std	Z+2, r19	; 0x02
    33ae:	21 83       	std	Z+1, r18	; 0x01
    33b0:	08 95       	ret

000033b2 <xTaskCheckForTimeOut>:
    33b2:	cf 93       	push	r28
    33b4:	df 93       	push	r29
    33b6:	0f b6       	in	r0, 0x3f	; 63
    33b8:	f8 94       	cli
    33ba:	0f 92       	push	r0
    33bc:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <xTickCount>
    33c0:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <xTickCount+0x1>
    33c4:	ec 01       	movw	r28, r24
    33c6:	29 81       	ldd	r18, Y+1	; 0x01
    33c8:	3a 81       	ldd	r19, Y+2	; 0x02
    33ca:	da 01       	movw	r26, r20
    33cc:	a2 1b       	sub	r26, r18
    33ce:	b3 0b       	sbc	r27, r19
    33d0:	f8 81       	ld	r31, Y
    33d2:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <xNumOfOverflows>
    33d6:	fe 17       	cp	r31, r30
    33d8:	19 f0       	breq	.+6      	; 0x33e0 <xTaskCheckForTimeOut+0x2e>
    33da:	42 17       	cp	r20, r18
    33dc:	53 07       	cpc	r21, r19
    33de:	88 f4       	brcc	.+34     	; 0x3402 <xTaskCheckForTimeOut+0x50>
    33e0:	fb 01       	movw	r30, r22
    33e2:	20 81       	ld	r18, Z
    33e4:	31 81       	ldd	r19, Z+1	; 0x01
    33e6:	a2 17       	cp	r26, r18
    33e8:	b3 07       	cpc	r27, r19
    33ea:	38 f4       	brcc	.+14     	; 0x33fa <xTaskCheckForTimeOut+0x48>
    33ec:	2a 1b       	sub	r18, r26
    33ee:	3b 0b       	sbc	r19, r27
    33f0:	31 83       	std	Z+1, r19	; 0x01
    33f2:	20 83       	st	Z, r18
    33f4:	d3 df       	rcall	.-90     	; 0x339c <vTaskInternalSetTimeOutState>
    33f6:	80 e0       	ldi	r24, 0x00	; 0
    33f8:	05 c0       	rjmp	.+10     	; 0x3404 <xTaskCheckForTimeOut+0x52>
    33fa:	11 82       	std	Z+1, r1	; 0x01
    33fc:	10 82       	st	Z, r1
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	01 c0       	rjmp	.+2      	; 0x3404 <xTaskCheckForTimeOut+0x52>
    3402:	81 e0       	ldi	r24, 0x01	; 1
    3404:	0f 90       	pop	r0
    3406:	0f be       	out	0x3f, r0	; 63
    3408:	df 91       	pop	r29
    340a:	cf 91       	pop	r28
    340c:	08 95       	ret

0000340e <vTaskMissedYield>:
    340e:	81 e0       	ldi	r24, 0x01	; 1
    3410:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <xYieldPending>
    3414:	08 95       	ret

00003416 <xTaskPriorityInherit>:
    3416:	0f 93       	push	r16
    3418:	1f 93       	push	r17
    341a:	cf 93       	push	r28
    341c:	df 93       	push	r29
    341e:	fc 01       	movw	r30, r24
    3420:	89 2b       	or	r24, r25
    3422:	09 f4       	brne	.+2      	; 0x3426 <xTaskPriorityInherit+0x10>
    3424:	62 c0       	rjmp	.+196    	; 0x34ea <xTaskPriorityInherit+0xd4>
    3426:	26 89       	ldd	r18, Z+22	; 0x16
    3428:	a0 91 a6 02 	lds	r26, 0x02A6	; 0x8002a6 <pxCurrentTCB>
    342c:	b0 91 a7 02 	lds	r27, 0x02A7	; 0x8002a7 <pxCurrentTCB+0x1>
    3430:	56 96       	adiw	r26, 0x16	; 22
    3432:	8c 91       	ld	r24, X
    3434:	28 17       	cp	r18, r24
    3436:	08 f0       	brcs	.+2      	; 0x343a <xTaskPriorityInherit+0x24>
    3438:	4e c0       	rjmp	.+156    	; 0x34d6 <xTaskPriorityInherit+0xc0>
    343a:	84 85       	ldd	r24, Z+12	; 0x0c
    343c:	95 85       	ldd	r25, Z+13	; 0x0d
    343e:	99 23       	and	r25, r25
    3440:	64 f0       	brlt	.+24     	; 0x345a <xTaskPriorityInherit+0x44>
    3442:	a0 91 a6 02 	lds	r26, 0x02A6	; 0x8002a6 <pxCurrentTCB>
    3446:	b0 91 a7 02 	lds	r27, 0x02A7	; 0x8002a7 <pxCurrentTCB+0x1>
    344a:	56 96       	adiw	r26, 0x16	; 22
    344c:	3c 91       	ld	r19, X
    344e:	8a e0       	ldi	r24, 0x0A	; 10
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	83 1b       	sub	r24, r19
    3454:	91 09       	sbc	r25, r1
    3456:	95 87       	std	Z+13, r25	; 0x0d
    3458:	84 87       	std	Z+12, r24	; 0x0c
    345a:	82 85       	ldd	r24, Z+10	; 0x0a
    345c:	93 85       	ldd	r25, Z+11	; 0x0b
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	a9 01       	movw	r20, r18
    3462:	44 0f       	add	r20, r20
    3464:	55 1f       	adc	r21, r21
    3466:	44 0f       	add	r20, r20
    3468:	55 1f       	adc	r21, r21
    346a:	44 0f       	add	r20, r20
    346c:	55 1f       	adc	r21, r21
    346e:	24 0f       	add	r18, r20
    3470:	35 1f       	adc	r19, r21
    3472:	24 5b       	subi	r18, 0xB4	; 180
    3474:	3d 4f       	sbci	r19, 0xFD	; 253
    3476:	82 17       	cp	r24, r18
    3478:	93 07       	cpc	r25, r19
    347a:	21 f5       	brne	.+72     	; 0x34c4 <xTaskPriorityInherit+0xae>
    347c:	8f 01       	movw	r16, r30
    347e:	ef 01       	movw	r28, r30
    3480:	22 96       	adiw	r28, 0x02	; 2
    3482:	ce 01       	movw	r24, r28
    3484:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <uxListRemove>
    3488:	e0 91 a6 02 	lds	r30, 0x02A6	; 0x8002a6 <pxCurrentTCB>
    348c:	f0 91 a7 02 	lds	r31, 0x02A7	; 0x8002a7 <pxCurrentTCB+0x1>
    3490:	86 89       	ldd	r24, Z+22	; 0x16
    3492:	f8 01       	movw	r30, r16
    3494:	86 8b       	std	Z+22, r24	; 0x16
    3496:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <uxTopReadyPriority>
    349a:	98 17       	cp	r25, r24
    349c:	10 f4       	brcc	.+4      	; 0x34a2 <xTaskPriorityInherit+0x8c>
    349e:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <uxTopReadyPriority>
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	9c 01       	movw	r18, r24
    34a6:	22 0f       	add	r18, r18
    34a8:	33 1f       	adc	r19, r19
    34aa:	22 0f       	add	r18, r18
    34ac:	33 1f       	adc	r19, r19
    34ae:	22 0f       	add	r18, r18
    34b0:	33 1f       	adc	r19, r19
    34b2:	82 0f       	add	r24, r18
    34b4:	93 1f       	adc	r25, r19
    34b6:	be 01       	movw	r22, r28
    34b8:	84 5b       	subi	r24, 0xB4	; 180
    34ba:	9d 4f       	sbci	r25, 0xFD	; 253
    34bc:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <vListInsertEnd>
    34c0:	81 e0       	ldi	r24, 0x01	; 1
    34c2:	16 c0       	rjmp	.+44     	; 0x34f0 <xTaskPriorityInherit+0xda>
    34c4:	a0 91 a6 02 	lds	r26, 0x02A6	; 0x8002a6 <pxCurrentTCB>
    34c8:	b0 91 a7 02 	lds	r27, 0x02A7	; 0x8002a7 <pxCurrentTCB+0x1>
    34cc:	56 96       	adiw	r26, 0x16	; 22
    34ce:	8c 91       	ld	r24, X
    34d0:	86 8b       	std	Z+22, r24	; 0x16
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	0d c0       	rjmp	.+26     	; 0x34f0 <xTaskPriorityInherit+0xda>
    34d6:	91 a1       	ldd	r25, Z+33	; 0x21
    34d8:	e0 91 a6 02 	lds	r30, 0x02A6	; 0x8002a6 <pxCurrentTCB>
    34dc:	f0 91 a7 02 	lds	r31, 0x02A7	; 0x8002a7 <pxCurrentTCB+0x1>
    34e0:	86 89       	ldd	r24, Z+22	; 0x16
    34e2:	98 17       	cp	r25, r24
    34e4:	20 f0       	brcs	.+8      	; 0x34ee <xTaskPriorityInherit+0xd8>
    34e6:	80 e0       	ldi	r24, 0x00	; 0
    34e8:	03 c0       	rjmp	.+6      	; 0x34f0 <xTaskPriorityInherit+0xda>
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	01 c0       	rjmp	.+2      	; 0x34f0 <xTaskPriorityInherit+0xda>
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	df 91       	pop	r29
    34f2:	cf 91       	pop	r28
    34f4:	1f 91       	pop	r17
    34f6:	0f 91       	pop	r16
    34f8:	08 95       	ret

000034fa <xTaskPriorityDisinherit>:
    34fa:	0f 93       	push	r16
    34fc:	1f 93       	push	r17
    34fe:	cf 93       	push	r28
    3500:	df 93       	push	r29
    3502:	fc 01       	movw	r30, r24
    3504:	89 2b       	or	r24, r25
    3506:	79 f1       	breq	.+94     	; 0x3566 <xTaskPriorityDisinherit+0x6c>
    3508:	82 a1       	ldd	r24, Z+34	; 0x22
    350a:	81 50       	subi	r24, 0x01	; 1
    350c:	82 a3       	std	Z+34, r24	; 0x22
    350e:	26 89       	ldd	r18, Z+22	; 0x16
    3510:	91 a1       	ldd	r25, Z+33	; 0x21
    3512:	29 17       	cp	r18, r25
    3514:	51 f1       	breq	.+84     	; 0x356a <xTaskPriorityDisinherit+0x70>
    3516:	81 11       	cpse	r24, r1
    3518:	2a c0       	rjmp	.+84     	; 0x356e <xTaskPriorityDisinherit+0x74>
    351a:	ef 01       	movw	r28, r30
    351c:	8f 01       	movw	r16, r30
    351e:	0e 5f       	subi	r16, 0xFE	; 254
    3520:	1f 4f       	sbci	r17, 0xFF	; 255
    3522:	c8 01       	movw	r24, r16
    3524:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <uxListRemove>
    3528:	89 a1       	ldd	r24, Y+33	; 0x21
    352a:	8e 8b       	std	Y+22, r24	; 0x16
    352c:	2a e0       	ldi	r18, 0x0A	; 10
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	28 1b       	sub	r18, r24
    3532:	31 09       	sbc	r19, r1
    3534:	3d 87       	std	Y+13, r19	; 0x0d
    3536:	2c 87       	std	Y+12, r18	; 0x0c
    3538:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <uxTopReadyPriority>
    353c:	98 17       	cp	r25, r24
    353e:	10 f4       	brcc	.+4      	; 0x3544 <xTaskPriorityDisinherit+0x4a>
    3540:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <uxTopReadyPriority>
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	9c 01       	movw	r18, r24
    3548:	22 0f       	add	r18, r18
    354a:	33 1f       	adc	r19, r19
    354c:	22 0f       	add	r18, r18
    354e:	33 1f       	adc	r19, r19
    3550:	22 0f       	add	r18, r18
    3552:	33 1f       	adc	r19, r19
    3554:	82 0f       	add	r24, r18
    3556:	93 1f       	adc	r25, r19
    3558:	b8 01       	movw	r22, r16
    355a:	84 5b       	subi	r24, 0xB4	; 180
    355c:	9d 4f       	sbci	r25, 0xFD	; 253
    355e:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <vListInsertEnd>
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	05 c0       	rjmp	.+10     	; 0x3570 <xTaskPriorityDisinherit+0x76>
    3566:	80 e0       	ldi	r24, 0x00	; 0
    3568:	03 c0       	rjmp	.+6      	; 0x3570 <xTaskPriorityDisinherit+0x76>
    356a:	80 e0       	ldi	r24, 0x00	; 0
    356c:	01 c0       	rjmp	.+2      	; 0x3570 <xTaskPriorityDisinherit+0x76>
    356e:	80 e0       	ldi	r24, 0x00	; 0
    3570:	df 91       	pop	r29
    3572:	cf 91       	pop	r28
    3574:	1f 91       	pop	r17
    3576:	0f 91       	pop	r16
    3578:	08 95       	ret

0000357a <vTaskPriorityDisinheritAfterTimeout>:
    357a:	0f 93       	push	r16
    357c:	1f 93       	push	r17
    357e:	cf 93       	push	r28
    3580:	df 93       	push	r29
    3582:	fc 01       	movw	r30, r24
    3584:	89 2b       	or	r24, r25
    3586:	09 f4       	brne	.+2      	; 0x358a <vTaskPriorityDisinheritAfterTimeout+0x10>
    3588:	43 c0       	rjmp	.+134    	; 0x3610 <vTaskPriorityDisinheritAfterTimeout+0x96>
    358a:	91 a1       	ldd	r25, Z+33	; 0x21
    358c:	96 17       	cp	r25, r22
    358e:	08 f4       	brcc	.+2      	; 0x3592 <vTaskPriorityDisinheritAfterTimeout+0x18>
    3590:	96 2f       	mov	r25, r22
    3592:	86 89       	ldd	r24, Z+22	; 0x16
    3594:	98 17       	cp	r25, r24
    3596:	e1 f1       	breq	.+120    	; 0x3610 <vTaskPriorityDisinheritAfterTimeout+0x96>
    3598:	22 a1       	ldd	r18, Z+34	; 0x22
    359a:	21 30       	cpi	r18, 0x01	; 1
    359c:	c9 f5       	brne	.+114    	; 0x3610 <vTaskPriorityDisinheritAfterTimeout+0x96>
    359e:	96 8b       	std	Z+22, r25	; 0x16
    35a0:	24 85       	ldd	r18, Z+12	; 0x0c
    35a2:	35 85       	ldd	r19, Z+13	; 0x0d
    35a4:	33 23       	and	r19, r19
    35a6:	34 f0       	brlt	.+12     	; 0x35b4 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    35a8:	2a e0       	ldi	r18, 0x0A	; 10
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	29 1b       	sub	r18, r25
    35ae:	31 09       	sbc	r19, r1
    35b0:	35 87       	std	Z+13, r19	; 0x0d
    35b2:	24 87       	std	Z+12, r18	; 0x0c
    35b4:	22 85       	ldd	r18, Z+10	; 0x0a
    35b6:	33 85       	ldd	r19, Z+11	; 0x0b
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	ac 01       	movw	r20, r24
    35bc:	44 0f       	add	r20, r20
    35be:	55 1f       	adc	r21, r21
    35c0:	44 0f       	add	r20, r20
    35c2:	55 1f       	adc	r21, r21
    35c4:	44 0f       	add	r20, r20
    35c6:	55 1f       	adc	r21, r21
    35c8:	84 0f       	add	r24, r20
    35ca:	95 1f       	adc	r25, r21
    35cc:	84 5b       	subi	r24, 0xB4	; 180
    35ce:	9d 4f       	sbci	r25, 0xFD	; 253
    35d0:	28 17       	cp	r18, r24
    35d2:	39 07       	cpc	r19, r25
    35d4:	e9 f4       	brne	.+58     	; 0x3610 <vTaskPriorityDisinheritAfterTimeout+0x96>
    35d6:	ef 01       	movw	r28, r30
    35d8:	8f 01       	movw	r16, r30
    35da:	0e 5f       	subi	r16, 0xFE	; 254
    35dc:	1f 4f       	sbci	r17, 0xFF	; 255
    35de:	c8 01       	movw	r24, r16
    35e0:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <uxListRemove>
    35e4:	8e 89       	ldd	r24, Y+22	; 0x16
    35e6:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <uxTopReadyPriority>
    35ea:	98 17       	cp	r25, r24
    35ec:	10 f4       	brcc	.+4      	; 0x35f2 <vTaskPriorityDisinheritAfterTimeout+0x78>
    35ee:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <uxTopReadyPriority>
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	9c 01       	movw	r18, r24
    35f6:	22 0f       	add	r18, r18
    35f8:	33 1f       	adc	r19, r19
    35fa:	22 0f       	add	r18, r18
    35fc:	33 1f       	adc	r19, r19
    35fe:	22 0f       	add	r18, r18
    3600:	33 1f       	adc	r19, r19
    3602:	82 0f       	add	r24, r18
    3604:	93 1f       	adc	r25, r19
    3606:	b8 01       	movw	r22, r16
    3608:	84 5b       	subi	r24, 0xB4	; 180
    360a:	9d 4f       	sbci	r25, 0xFD	; 253
    360c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <vListInsertEnd>
    3610:	df 91       	pop	r29
    3612:	cf 91       	pop	r28
    3614:	1f 91       	pop	r17
    3616:	0f 91       	pop	r16
    3618:	08 95       	ret

0000361a <pvTaskIncrementMutexHeldCount>:

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    361a:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <pxCurrentTCB>
    361e:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <pxCurrentTCB+0x1>
    3622:	89 2b       	or	r24, r25
    3624:	39 f0       	breq	.+14     	; 0x3634 <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    3626:	e0 91 a6 02 	lds	r30, 0x02A6	; 0x8002a6 <pxCurrentTCB>
    362a:	f0 91 a7 02 	lds	r31, 0x02A7	; 0x8002a7 <pxCurrentTCB+0x1>
    362e:	82 a1       	ldd	r24, Z+34	; 0x22
    3630:	8f 5f       	subi	r24, 0xFF	; 255
    3632:	82 a3       	std	Z+34, r24	; 0x22
		}

		return pxCurrentTCB;
    3634:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <pxCurrentTCB>
    3638:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <pxCurrentTCB+0x1>
	}
    363c:	08 95       	ret

0000363e <__subsf3>:
    363e:	50 58       	subi	r21, 0x80	; 128

00003640 <__addsf3>:
    3640:	bb 27       	eor	r27, r27
    3642:	aa 27       	eor	r26, r26
    3644:	0e d0       	rcall	.+28     	; 0x3662 <__addsf3x>
    3646:	75 c1       	rjmp	.+746    	; 0x3932 <__fp_round>
    3648:	66 d1       	rcall	.+716    	; 0x3916 <__fp_pscA>
    364a:	30 f0       	brcs	.+12     	; 0x3658 <__addsf3+0x18>
    364c:	6b d1       	rcall	.+726    	; 0x3924 <__fp_pscB>
    364e:	20 f0       	brcs	.+8      	; 0x3658 <__addsf3+0x18>
    3650:	31 f4       	brne	.+12     	; 0x365e <__addsf3+0x1e>
    3652:	9f 3f       	cpi	r25, 0xFF	; 255
    3654:	11 f4       	brne	.+4      	; 0x365a <__addsf3+0x1a>
    3656:	1e f4       	brtc	.+6      	; 0x365e <__addsf3+0x1e>
    3658:	5b c1       	rjmp	.+694    	; 0x3910 <__fp_nan>
    365a:	0e f4       	brtc	.+2      	; 0x365e <__addsf3+0x1e>
    365c:	e0 95       	com	r30
    365e:	e7 fb       	bst	r30, 7
    3660:	51 c1       	rjmp	.+674    	; 0x3904 <__fp_inf>

00003662 <__addsf3x>:
    3662:	e9 2f       	mov	r30, r25
    3664:	77 d1       	rcall	.+750    	; 0x3954 <__fp_split3>
    3666:	80 f3       	brcs	.-32     	; 0x3648 <__addsf3+0x8>
    3668:	ba 17       	cp	r27, r26
    366a:	62 07       	cpc	r22, r18
    366c:	73 07       	cpc	r23, r19
    366e:	84 07       	cpc	r24, r20
    3670:	95 07       	cpc	r25, r21
    3672:	18 f0       	brcs	.+6      	; 0x367a <__addsf3x+0x18>
    3674:	71 f4       	brne	.+28     	; 0x3692 <__addsf3x+0x30>
    3676:	9e f5       	brtc	.+102    	; 0x36de <__addsf3x+0x7c>
    3678:	8f c1       	rjmp	.+798    	; 0x3998 <__fp_zero>
    367a:	0e f4       	brtc	.+2      	; 0x367e <__addsf3x+0x1c>
    367c:	e0 95       	com	r30
    367e:	0b 2e       	mov	r0, r27
    3680:	ba 2f       	mov	r27, r26
    3682:	a0 2d       	mov	r26, r0
    3684:	0b 01       	movw	r0, r22
    3686:	b9 01       	movw	r22, r18
    3688:	90 01       	movw	r18, r0
    368a:	0c 01       	movw	r0, r24
    368c:	ca 01       	movw	r24, r20
    368e:	a0 01       	movw	r20, r0
    3690:	11 24       	eor	r1, r1
    3692:	ff 27       	eor	r31, r31
    3694:	59 1b       	sub	r21, r25
    3696:	99 f0       	breq	.+38     	; 0x36be <__addsf3x+0x5c>
    3698:	59 3f       	cpi	r21, 0xF9	; 249
    369a:	50 f4       	brcc	.+20     	; 0x36b0 <__addsf3x+0x4e>
    369c:	50 3e       	cpi	r21, 0xE0	; 224
    369e:	68 f1       	brcs	.+90     	; 0x36fa <__addsf3x+0x98>
    36a0:	1a 16       	cp	r1, r26
    36a2:	f0 40       	sbci	r31, 0x00	; 0
    36a4:	a2 2f       	mov	r26, r18
    36a6:	23 2f       	mov	r18, r19
    36a8:	34 2f       	mov	r19, r20
    36aa:	44 27       	eor	r20, r20
    36ac:	58 5f       	subi	r21, 0xF8	; 248
    36ae:	f3 cf       	rjmp	.-26     	; 0x3696 <__addsf3x+0x34>
    36b0:	46 95       	lsr	r20
    36b2:	37 95       	ror	r19
    36b4:	27 95       	ror	r18
    36b6:	a7 95       	ror	r26
    36b8:	f0 40       	sbci	r31, 0x00	; 0
    36ba:	53 95       	inc	r21
    36bc:	c9 f7       	brne	.-14     	; 0x36b0 <__addsf3x+0x4e>
    36be:	7e f4       	brtc	.+30     	; 0x36de <__addsf3x+0x7c>
    36c0:	1f 16       	cp	r1, r31
    36c2:	ba 0b       	sbc	r27, r26
    36c4:	62 0b       	sbc	r22, r18
    36c6:	73 0b       	sbc	r23, r19
    36c8:	84 0b       	sbc	r24, r20
    36ca:	ba f0       	brmi	.+46     	; 0x36fa <__addsf3x+0x98>
    36cc:	91 50       	subi	r25, 0x01	; 1
    36ce:	a1 f0       	breq	.+40     	; 0x36f8 <__addsf3x+0x96>
    36d0:	ff 0f       	add	r31, r31
    36d2:	bb 1f       	adc	r27, r27
    36d4:	66 1f       	adc	r22, r22
    36d6:	77 1f       	adc	r23, r23
    36d8:	88 1f       	adc	r24, r24
    36da:	c2 f7       	brpl	.-16     	; 0x36cc <__addsf3x+0x6a>
    36dc:	0e c0       	rjmp	.+28     	; 0x36fa <__addsf3x+0x98>
    36de:	ba 0f       	add	r27, r26
    36e0:	62 1f       	adc	r22, r18
    36e2:	73 1f       	adc	r23, r19
    36e4:	84 1f       	adc	r24, r20
    36e6:	48 f4       	brcc	.+18     	; 0x36fa <__addsf3x+0x98>
    36e8:	87 95       	ror	r24
    36ea:	77 95       	ror	r23
    36ec:	67 95       	ror	r22
    36ee:	b7 95       	ror	r27
    36f0:	f7 95       	ror	r31
    36f2:	9e 3f       	cpi	r25, 0xFE	; 254
    36f4:	08 f0       	brcs	.+2      	; 0x36f8 <__addsf3x+0x96>
    36f6:	b3 cf       	rjmp	.-154    	; 0x365e <__addsf3+0x1e>
    36f8:	93 95       	inc	r25
    36fa:	88 0f       	add	r24, r24
    36fc:	08 f0       	brcs	.+2      	; 0x3700 <__addsf3x+0x9e>
    36fe:	99 27       	eor	r25, r25
    3700:	ee 0f       	add	r30, r30
    3702:	97 95       	ror	r25
    3704:	87 95       	ror	r24
    3706:	08 95       	ret

00003708 <__cmpsf2>:
    3708:	d9 d0       	rcall	.+434    	; 0x38bc <__fp_cmp>
    370a:	08 f4       	brcc	.+2      	; 0x370e <__cmpsf2+0x6>
    370c:	81 e0       	ldi	r24, 0x01	; 1
    370e:	08 95       	ret

00003710 <__divsf3>:
    3710:	0c d0       	rcall	.+24     	; 0x372a <__divsf3x>
    3712:	0f c1       	rjmp	.+542    	; 0x3932 <__fp_round>
    3714:	07 d1       	rcall	.+526    	; 0x3924 <__fp_pscB>
    3716:	40 f0       	brcs	.+16     	; 0x3728 <__divsf3+0x18>
    3718:	fe d0       	rcall	.+508    	; 0x3916 <__fp_pscA>
    371a:	30 f0       	brcs	.+12     	; 0x3728 <__divsf3+0x18>
    371c:	21 f4       	brne	.+8      	; 0x3726 <__divsf3+0x16>
    371e:	5f 3f       	cpi	r21, 0xFF	; 255
    3720:	19 f0       	breq	.+6      	; 0x3728 <__divsf3+0x18>
    3722:	f0 c0       	rjmp	.+480    	; 0x3904 <__fp_inf>
    3724:	51 11       	cpse	r21, r1
    3726:	39 c1       	rjmp	.+626    	; 0x399a <__fp_szero>
    3728:	f3 c0       	rjmp	.+486    	; 0x3910 <__fp_nan>

0000372a <__divsf3x>:
    372a:	14 d1       	rcall	.+552    	; 0x3954 <__fp_split3>
    372c:	98 f3       	brcs	.-26     	; 0x3714 <__divsf3+0x4>

0000372e <__divsf3_pse>:
    372e:	99 23       	and	r25, r25
    3730:	c9 f3       	breq	.-14     	; 0x3724 <__divsf3+0x14>
    3732:	55 23       	and	r21, r21
    3734:	b1 f3       	breq	.-20     	; 0x3722 <__divsf3+0x12>
    3736:	95 1b       	sub	r25, r21
    3738:	55 0b       	sbc	r21, r21
    373a:	bb 27       	eor	r27, r27
    373c:	aa 27       	eor	r26, r26
    373e:	62 17       	cp	r22, r18
    3740:	73 07       	cpc	r23, r19
    3742:	84 07       	cpc	r24, r20
    3744:	38 f0       	brcs	.+14     	; 0x3754 <__divsf3_pse+0x26>
    3746:	9f 5f       	subi	r25, 0xFF	; 255
    3748:	5f 4f       	sbci	r21, 0xFF	; 255
    374a:	22 0f       	add	r18, r18
    374c:	33 1f       	adc	r19, r19
    374e:	44 1f       	adc	r20, r20
    3750:	aa 1f       	adc	r26, r26
    3752:	a9 f3       	breq	.-22     	; 0x373e <__divsf3_pse+0x10>
    3754:	33 d0       	rcall	.+102    	; 0x37bc <__divsf3_pse+0x8e>
    3756:	0e 2e       	mov	r0, r30
    3758:	3a f0       	brmi	.+14     	; 0x3768 <__divsf3_pse+0x3a>
    375a:	e0 e8       	ldi	r30, 0x80	; 128
    375c:	30 d0       	rcall	.+96     	; 0x37be <__divsf3_pse+0x90>
    375e:	91 50       	subi	r25, 0x01	; 1
    3760:	50 40       	sbci	r21, 0x00	; 0
    3762:	e6 95       	lsr	r30
    3764:	00 1c       	adc	r0, r0
    3766:	ca f7       	brpl	.-14     	; 0x375a <__divsf3_pse+0x2c>
    3768:	29 d0       	rcall	.+82     	; 0x37bc <__divsf3_pse+0x8e>
    376a:	fe 2f       	mov	r31, r30
    376c:	27 d0       	rcall	.+78     	; 0x37bc <__divsf3_pse+0x8e>
    376e:	66 0f       	add	r22, r22
    3770:	77 1f       	adc	r23, r23
    3772:	88 1f       	adc	r24, r24
    3774:	bb 1f       	adc	r27, r27
    3776:	26 17       	cp	r18, r22
    3778:	37 07       	cpc	r19, r23
    377a:	48 07       	cpc	r20, r24
    377c:	ab 07       	cpc	r26, r27
    377e:	b0 e8       	ldi	r27, 0x80	; 128
    3780:	09 f0       	breq	.+2      	; 0x3784 <__divsf3_pse+0x56>
    3782:	bb 0b       	sbc	r27, r27
    3784:	80 2d       	mov	r24, r0
    3786:	bf 01       	movw	r22, r30
    3788:	ff 27       	eor	r31, r31
    378a:	93 58       	subi	r25, 0x83	; 131
    378c:	5f 4f       	sbci	r21, 0xFF	; 255
    378e:	2a f0       	brmi	.+10     	; 0x379a <__divsf3_pse+0x6c>
    3790:	9e 3f       	cpi	r25, 0xFE	; 254
    3792:	51 05       	cpc	r21, r1
    3794:	68 f0       	brcs	.+26     	; 0x37b0 <__divsf3_pse+0x82>
    3796:	b6 c0       	rjmp	.+364    	; 0x3904 <__fp_inf>
    3798:	00 c1       	rjmp	.+512    	; 0x399a <__fp_szero>
    379a:	5f 3f       	cpi	r21, 0xFF	; 255
    379c:	ec f3       	brlt	.-6      	; 0x3798 <__divsf3_pse+0x6a>
    379e:	98 3e       	cpi	r25, 0xE8	; 232
    37a0:	dc f3       	brlt	.-10     	; 0x3798 <__divsf3_pse+0x6a>
    37a2:	86 95       	lsr	r24
    37a4:	77 95       	ror	r23
    37a6:	67 95       	ror	r22
    37a8:	b7 95       	ror	r27
    37aa:	f7 95       	ror	r31
    37ac:	9f 5f       	subi	r25, 0xFF	; 255
    37ae:	c9 f7       	brne	.-14     	; 0x37a2 <__divsf3_pse+0x74>
    37b0:	88 0f       	add	r24, r24
    37b2:	91 1d       	adc	r25, r1
    37b4:	96 95       	lsr	r25
    37b6:	87 95       	ror	r24
    37b8:	97 f9       	bld	r25, 7
    37ba:	08 95       	ret
    37bc:	e1 e0       	ldi	r30, 0x01	; 1
    37be:	66 0f       	add	r22, r22
    37c0:	77 1f       	adc	r23, r23
    37c2:	88 1f       	adc	r24, r24
    37c4:	bb 1f       	adc	r27, r27
    37c6:	62 17       	cp	r22, r18
    37c8:	73 07       	cpc	r23, r19
    37ca:	84 07       	cpc	r24, r20
    37cc:	ba 07       	cpc	r27, r26
    37ce:	20 f0       	brcs	.+8      	; 0x37d8 <__divsf3_pse+0xaa>
    37d0:	62 1b       	sub	r22, r18
    37d2:	73 0b       	sbc	r23, r19
    37d4:	84 0b       	sbc	r24, r20
    37d6:	ba 0b       	sbc	r27, r26
    37d8:	ee 1f       	adc	r30, r30
    37da:	88 f7       	brcc	.-30     	; 0x37be <__divsf3_pse+0x90>
    37dc:	e0 95       	com	r30
    37de:	08 95       	ret

000037e0 <__fixsfsi>:
    37e0:	04 d0       	rcall	.+8      	; 0x37ea <__fixunssfsi>
    37e2:	68 94       	set
    37e4:	b1 11       	cpse	r27, r1
    37e6:	d9 c0       	rjmp	.+434    	; 0x399a <__fp_szero>
    37e8:	08 95       	ret

000037ea <__fixunssfsi>:
    37ea:	bc d0       	rcall	.+376    	; 0x3964 <__fp_splitA>
    37ec:	88 f0       	brcs	.+34     	; 0x3810 <__fixunssfsi+0x26>
    37ee:	9f 57       	subi	r25, 0x7F	; 127
    37f0:	90 f0       	brcs	.+36     	; 0x3816 <__fixunssfsi+0x2c>
    37f2:	b9 2f       	mov	r27, r25
    37f4:	99 27       	eor	r25, r25
    37f6:	b7 51       	subi	r27, 0x17	; 23
    37f8:	a0 f0       	brcs	.+40     	; 0x3822 <__fixunssfsi+0x38>
    37fa:	d1 f0       	breq	.+52     	; 0x3830 <__fixunssfsi+0x46>
    37fc:	66 0f       	add	r22, r22
    37fe:	77 1f       	adc	r23, r23
    3800:	88 1f       	adc	r24, r24
    3802:	99 1f       	adc	r25, r25
    3804:	1a f0       	brmi	.+6      	; 0x380c <__fixunssfsi+0x22>
    3806:	ba 95       	dec	r27
    3808:	c9 f7       	brne	.-14     	; 0x37fc <__fixunssfsi+0x12>
    380a:	12 c0       	rjmp	.+36     	; 0x3830 <__fixunssfsi+0x46>
    380c:	b1 30       	cpi	r27, 0x01	; 1
    380e:	81 f0       	breq	.+32     	; 0x3830 <__fixunssfsi+0x46>
    3810:	c3 d0       	rcall	.+390    	; 0x3998 <__fp_zero>
    3812:	b1 e0       	ldi	r27, 0x01	; 1
    3814:	08 95       	ret
    3816:	c0 c0       	rjmp	.+384    	; 0x3998 <__fp_zero>
    3818:	67 2f       	mov	r22, r23
    381a:	78 2f       	mov	r23, r24
    381c:	88 27       	eor	r24, r24
    381e:	b8 5f       	subi	r27, 0xF8	; 248
    3820:	39 f0       	breq	.+14     	; 0x3830 <__fixunssfsi+0x46>
    3822:	b9 3f       	cpi	r27, 0xF9	; 249
    3824:	cc f3       	brlt	.-14     	; 0x3818 <__fixunssfsi+0x2e>
    3826:	86 95       	lsr	r24
    3828:	77 95       	ror	r23
    382a:	67 95       	ror	r22
    382c:	b3 95       	inc	r27
    382e:	d9 f7       	brne	.-10     	; 0x3826 <__fixunssfsi+0x3c>
    3830:	3e f4       	brtc	.+14     	; 0x3840 <__fixunssfsi+0x56>
    3832:	90 95       	com	r25
    3834:	80 95       	com	r24
    3836:	70 95       	com	r23
    3838:	61 95       	neg	r22
    383a:	7f 4f       	sbci	r23, 0xFF	; 255
    383c:	8f 4f       	sbci	r24, 0xFF	; 255
    383e:	9f 4f       	sbci	r25, 0xFF	; 255
    3840:	08 95       	ret

00003842 <__floatunsisf>:
    3842:	e8 94       	clt
    3844:	09 c0       	rjmp	.+18     	; 0x3858 <__floatsisf+0x12>

00003846 <__floatsisf>:
    3846:	97 fb       	bst	r25, 7
    3848:	3e f4       	brtc	.+14     	; 0x3858 <__floatsisf+0x12>
    384a:	90 95       	com	r25
    384c:	80 95       	com	r24
    384e:	70 95       	com	r23
    3850:	61 95       	neg	r22
    3852:	7f 4f       	sbci	r23, 0xFF	; 255
    3854:	8f 4f       	sbci	r24, 0xFF	; 255
    3856:	9f 4f       	sbci	r25, 0xFF	; 255
    3858:	99 23       	and	r25, r25
    385a:	a9 f0       	breq	.+42     	; 0x3886 <__floatsisf+0x40>
    385c:	f9 2f       	mov	r31, r25
    385e:	96 e9       	ldi	r25, 0x96	; 150
    3860:	bb 27       	eor	r27, r27
    3862:	93 95       	inc	r25
    3864:	f6 95       	lsr	r31
    3866:	87 95       	ror	r24
    3868:	77 95       	ror	r23
    386a:	67 95       	ror	r22
    386c:	b7 95       	ror	r27
    386e:	f1 11       	cpse	r31, r1
    3870:	f8 cf       	rjmp	.-16     	; 0x3862 <__floatsisf+0x1c>
    3872:	fa f4       	brpl	.+62     	; 0x38b2 <__floatsisf+0x6c>
    3874:	bb 0f       	add	r27, r27
    3876:	11 f4       	brne	.+4      	; 0x387c <__floatsisf+0x36>
    3878:	60 ff       	sbrs	r22, 0
    387a:	1b c0       	rjmp	.+54     	; 0x38b2 <__floatsisf+0x6c>
    387c:	6f 5f       	subi	r22, 0xFF	; 255
    387e:	7f 4f       	sbci	r23, 0xFF	; 255
    3880:	8f 4f       	sbci	r24, 0xFF	; 255
    3882:	9f 4f       	sbci	r25, 0xFF	; 255
    3884:	16 c0       	rjmp	.+44     	; 0x38b2 <__floatsisf+0x6c>
    3886:	88 23       	and	r24, r24
    3888:	11 f0       	breq	.+4      	; 0x388e <__floatsisf+0x48>
    388a:	96 e9       	ldi	r25, 0x96	; 150
    388c:	11 c0       	rjmp	.+34     	; 0x38b0 <__floatsisf+0x6a>
    388e:	77 23       	and	r23, r23
    3890:	21 f0       	breq	.+8      	; 0x389a <__floatsisf+0x54>
    3892:	9e e8       	ldi	r25, 0x8E	; 142
    3894:	87 2f       	mov	r24, r23
    3896:	76 2f       	mov	r23, r22
    3898:	05 c0       	rjmp	.+10     	; 0x38a4 <__floatsisf+0x5e>
    389a:	66 23       	and	r22, r22
    389c:	71 f0       	breq	.+28     	; 0x38ba <__floatsisf+0x74>
    389e:	96 e8       	ldi	r25, 0x86	; 134
    38a0:	86 2f       	mov	r24, r22
    38a2:	70 e0       	ldi	r23, 0x00	; 0
    38a4:	60 e0       	ldi	r22, 0x00	; 0
    38a6:	2a f0       	brmi	.+10     	; 0x38b2 <__floatsisf+0x6c>
    38a8:	9a 95       	dec	r25
    38aa:	66 0f       	add	r22, r22
    38ac:	77 1f       	adc	r23, r23
    38ae:	88 1f       	adc	r24, r24
    38b0:	da f7       	brpl	.-10     	; 0x38a8 <__floatsisf+0x62>
    38b2:	88 0f       	add	r24, r24
    38b4:	96 95       	lsr	r25
    38b6:	87 95       	ror	r24
    38b8:	97 f9       	bld	r25, 7
    38ba:	08 95       	ret

000038bc <__fp_cmp>:
    38bc:	99 0f       	add	r25, r25
    38be:	00 08       	sbc	r0, r0
    38c0:	55 0f       	add	r21, r21
    38c2:	aa 0b       	sbc	r26, r26
    38c4:	e0 e8       	ldi	r30, 0x80	; 128
    38c6:	fe ef       	ldi	r31, 0xFE	; 254
    38c8:	16 16       	cp	r1, r22
    38ca:	17 06       	cpc	r1, r23
    38cc:	e8 07       	cpc	r30, r24
    38ce:	f9 07       	cpc	r31, r25
    38d0:	c0 f0       	brcs	.+48     	; 0x3902 <__fp_cmp+0x46>
    38d2:	12 16       	cp	r1, r18
    38d4:	13 06       	cpc	r1, r19
    38d6:	e4 07       	cpc	r30, r20
    38d8:	f5 07       	cpc	r31, r21
    38da:	98 f0       	brcs	.+38     	; 0x3902 <__fp_cmp+0x46>
    38dc:	62 1b       	sub	r22, r18
    38de:	73 0b       	sbc	r23, r19
    38e0:	84 0b       	sbc	r24, r20
    38e2:	95 0b       	sbc	r25, r21
    38e4:	39 f4       	brne	.+14     	; 0x38f4 <__fp_cmp+0x38>
    38e6:	0a 26       	eor	r0, r26
    38e8:	61 f0       	breq	.+24     	; 0x3902 <__fp_cmp+0x46>
    38ea:	23 2b       	or	r18, r19
    38ec:	24 2b       	or	r18, r20
    38ee:	25 2b       	or	r18, r21
    38f0:	21 f4       	brne	.+8      	; 0x38fa <__fp_cmp+0x3e>
    38f2:	08 95       	ret
    38f4:	0a 26       	eor	r0, r26
    38f6:	09 f4       	brne	.+2      	; 0x38fa <__fp_cmp+0x3e>
    38f8:	a1 40       	sbci	r26, 0x01	; 1
    38fa:	a6 95       	lsr	r26
    38fc:	8f ef       	ldi	r24, 0xFF	; 255
    38fe:	81 1d       	adc	r24, r1
    3900:	81 1d       	adc	r24, r1
    3902:	08 95       	ret

00003904 <__fp_inf>:
    3904:	97 f9       	bld	r25, 7
    3906:	9f 67       	ori	r25, 0x7F	; 127
    3908:	80 e8       	ldi	r24, 0x80	; 128
    390a:	70 e0       	ldi	r23, 0x00	; 0
    390c:	60 e0       	ldi	r22, 0x00	; 0
    390e:	08 95       	ret

00003910 <__fp_nan>:
    3910:	9f ef       	ldi	r25, 0xFF	; 255
    3912:	80 ec       	ldi	r24, 0xC0	; 192
    3914:	08 95       	ret

00003916 <__fp_pscA>:
    3916:	00 24       	eor	r0, r0
    3918:	0a 94       	dec	r0
    391a:	16 16       	cp	r1, r22
    391c:	17 06       	cpc	r1, r23
    391e:	18 06       	cpc	r1, r24
    3920:	09 06       	cpc	r0, r25
    3922:	08 95       	ret

00003924 <__fp_pscB>:
    3924:	00 24       	eor	r0, r0
    3926:	0a 94       	dec	r0
    3928:	12 16       	cp	r1, r18
    392a:	13 06       	cpc	r1, r19
    392c:	14 06       	cpc	r1, r20
    392e:	05 06       	cpc	r0, r21
    3930:	08 95       	ret

00003932 <__fp_round>:
    3932:	09 2e       	mov	r0, r25
    3934:	03 94       	inc	r0
    3936:	00 0c       	add	r0, r0
    3938:	11 f4       	brne	.+4      	; 0x393e <__fp_round+0xc>
    393a:	88 23       	and	r24, r24
    393c:	52 f0       	brmi	.+20     	; 0x3952 <__fp_round+0x20>
    393e:	bb 0f       	add	r27, r27
    3940:	40 f4       	brcc	.+16     	; 0x3952 <__fp_round+0x20>
    3942:	bf 2b       	or	r27, r31
    3944:	11 f4       	brne	.+4      	; 0x394a <__fp_round+0x18>
    3946:	60 ff       	sbrs	r22, 0
    3948:	04 c0       	rjmp	.+8      	; 0x3952 <__fp_round+0x20>
    394a:	6f 5f       	subi	r22, 0xFF	; 255
    394c:	7f 4f       	sbci	r23, 0xFF	; 255
    394e:	8f 4f       	sbci	r24, 0xFF	; 255
    3950:	9f 4f       	sbci	r25, 0xFF	; 255
    3952:	08 95       	ret

00003954 <__fp_split3>:
    3954:	57 fd       	sbrc	r21, 7
    3956:	90 58       	subi	r25, 0x80	; 128
    3958:	44 0f       	add	r20, r20
    395a:	55 1f       	adc	r21, r21
    395c:	59 f0       	breq	.+22     	; 0x3974 <__fp_splitA+0x10>
    395e:	5f 3f       	cpi	r21, 0xFF	; 255
    3960:	71 f0       	breq	.+28     	; 0x397e <__fp_splitA+0x1a>
    3962:	47 95       	ror	r20

00003964 <__fp_splitA>:
    3964:	88 0f       	add	r24, r24
    3966:	97 fb       	bst	r25, 7
    3968:	99 1f       	adc	r25, r25
    396a:	61 f0       	breq	.+24     	; 0x3984 <__fp_splitA+0x20>
    396c:	9f 3f       	cpi	r25, 0xFF	; 255
    396e:	79 f0       	breq	.+30     	; 0x398e <__fp_splitA+0x2a>
    3970:	87 95       	ror	r24
    3972:	08 95       	ret
    3974:	12 16       	cp	r1, r18
    3976:	13 06       	cpc	r1, r19
    3978:	14 06       	cpc	r1, r20
    397a:	55 1f       	adc	r21, r21
    397c:	f2 cf       	rjmp	.-28     	; 0x3962 <__fp_split3+0xe>
    397e:	46 95       	lsr	r20
    3980:	f1 df       	rcall	.-30     	; 0x3964 <__fp_splitA>
    3982:	08 c0       	rjmp	.+16     	; 0x3994 <__fp_splitA+0x30>
    3984:	16 16       	cp	r1, r22
    3986:	17 06       	cpc	r1, r23
    3988:	18 06       	cpc	r1, r24
    398a:	99 1f       	adc	r25, r25
    398c:	f1 cf       	rjmp	.-30     	; 0x3970 <__fp_splitA+0xc>
    398e:	86 95       	lsr	r24
    3990:	71 05       	cpc	r23, r1
    3992:	61 05       	cpc	r22, r1
    3994:	08 94       	sec
    3996:	08 95       	ret

00003998 <__fp_zero>:
    3998:	e8 94       	clt

0000399a <__fp_szero>:
    399a:	bb 27       	eor	r27, r27
    399c:	66 27       	eor	r22, r22
    399e:	77 27       	eor	r23, r23
    39a0:	cb 01       	movw	r24, r22
    39a2:	97 f9       	bld	r25, 7
    39a4:	08 95       	ret

000039a6 <__gesf2>:
    39a6:	8a df       	rcall	.-236    	; 0x38bc <__fp_cmp>
    39a8:	08 f4       	brcc	.+2      	; 0x39ac <__gesf2+0x6>
    39aa:	8f ef       	ldi	r24, 0xFF	; 255
    39ac:	08 95       	ret

000039ae <__mulsf3>:
    39ae:	0b d0       	rcall	.+22     	; 0x39c6 <__mulsf3x>
    39b0:	c0 cf       	rjmp	.-128    	; 0x3932 <__fp_round>
    39b2:	b1 df       	rcall	.-158    	; 0x3916 <__fp_pscA>
    39b4:	28 f0       	brcs	.+10     	; 0x39c0 <__mulsf3+0x12>
    39b6:	b6 df       	rcall	.-148    	; 0x3924 <__fp_pscB>
    39b8:	18 f0       	brcs	.+6      	; 0x39c0 <__mulsf3+0x12>
    39ba:	95 23       	and	r25, r21
    39bc:	09 f0       	breq	.+2      	; 0x39c0 <__mulsf3+0x12>
    39be:	a2 cf       	rjmp	.-188    	; 0x3904 <__fp_inf>
    39c0:	a7 cf       	rjmp	.-178    	; 0x3910 <__fp_nan>
    39c2:	11 24       	eor	r1, r1
    39c4:	ea cf       	rjmp	.-44     	; 0x399a <__fp_szero>

000039c6 <__mulsf3x>:
    39c6:	c6 df       	rcall	.-116    	; 0x3954 <__fp_split3>
    39c8:	a0 f3       	brcs	.-24     	; 0x39b2 <__mulsf3+0x4>

000039ca <__mulsf3_pse>:
    39ca:	95 9f       	mul	r25, r21
    39cc:	d1 f3       	breq	.-12     	; 0x39c2 <__mulsf3+0x14>
    39ce:	95 0f       	add	r25, r21
    39d0:	50 e0       	ldi	r21, 0x00	; 0
    39d2:	55 1f       	adc	r21, r21
    39d4:	62 9f       	mul	r22, r18
    39d6:	f0 01       	movw	r30, r0
    39d8:	72 9f       	mul	r23, r18
    39da:	bb 27       	eor	r27, r27
    39dc:	f0 0d       	add	r31, r0
    39de:	b1 1d       	adc	r27, r1
    39e0:	63 9f       	mul	r22, r19
    39e2:	aa 27       	eor	r26, r26
    39e4:	f0 0d       	add	r31, r0
    39e6:	b1 1d       	adc	r27, r1
    39e8:	aa 1f       	adc	r26, r26
    39ea:	64 9f       	mul	r22, r20
    39ec:	66 27       	eor	r22, r22
    39ee:	b0 0d       	add	r27, r0
    39f0:	a1 1d       	adc	r26, r1
    39f2:	66 1f       	adc	r22, r22
    39f4:	82 9f       	mul	r24, r18
    39f6:	22 27       	eor	r18, r18
    39f8:	b0 0d       	add	r27, r0
    39fa:	a1 1d       	adc	r26, r1
    39fc:	62 1f       	adc	r22, r18
    39fe:	73 9f       	mul	r23, r19
    3a00:	b0 0d       	add	r27, r0
    3a02:	a1 1d       	adc	r26, r1
    3a04:	62 1f       	adc	r22, r18
    3a06:	83 9f       	mul	r24, r19
    3a08:	a0 0d       	add	r26, r0
    3a0a:	61 1d       	adc	r22, r1
    3a0c:	22 1f       	adc	r18, r18
    3a0e:	74 9f       	mul	r23, r20
    3a10:	33 27       	eor	r19, r19
    3a12:	a0 0d       	add	r26, r0
    3a14:	61 1d       	adc	r22, r1
    3a16:	23 1f       	adc	r18, r19
    3a18:	84 9f       	mul	r24, r20
    3a1a:	60 0d       	add	r22, r0
    3a1c:	21 1d       	adc	r18, r1
    3a1e:	82 2f       	mov	r24, r18
    3a20:	76 2f       	mov	r23, r22
    3a22:	6a 2f       	mov	r22, r26
    3a24:	11 24       	eor	r1, r1
    3a26:	9f 57       	subi	r25, 0x7F	; 127
    3a28:	50 40       	sbci	r21, 0x00	; 0
    3a2a:	8a f0       	brmi	.+34     	; 0x3a4e <__mulsf3_pse+0x84>
    3a2c:	e1 f0       	breq	.+56     	; 0x3a66 <__mulsf3_pse+0x9c>
    3a2e:	88 23       	and	r24, r24
    3a30:	4a f0       	brmi	.+18     	; 0x3a44 <__mulsf3_pse+0x7a>
    3a32:	ee 0f       	add	r30, r30
    3a34:	ff 1f       	adc	r31, r31
    3a36:	bb 1f       	adc	r27, r27
    3a38:	66 1f       	adc	r22, r22
    3a3a:	77 1f       	adc	r23, r23
    3a3c:	88 1f       	adc	r24, r24
    3a3e:	91 50       	subi	r25, 0x01	; 1
    3a40:	50 40       	sbci	r21, 0x00	; 0
    3a42:	a9 f7       	brne	.-22     	; 0x3a2e <__mulsf3_pse+0x64>
    3a44:	9e 3f       	cpi	r25, 0xFE	; 254
    3a46:	51 05       	cpc	r21, r1
    3a48:	70 f0       	brcs	.+28     	; 0x3a66 <__mulsf3_pse+0x9c>
    3a4a:	5c cf       	rjmp	.-328    	; 0x3904 <__fp_inf>
    3a4c:	a6 cf       	rjmp	.-180    	; 0x399a <__fp_szero>
    3a4e:	5f 3f       	cpi	r21, 0xFF	; 255
    3a50:	ec f3       	brlt	.-6      	; 0x3a4c <__mulsf3_pse+0x82>
    3a52:	98 3e       	cpi	r25, 0xE8	; 232
    3a54:	dc f3       	brlt	.-10     	; 0x3a4c <__mulsf3_pse+0x82>
    3a56:	86 95       	lsr	r24
    3a58:	77 95       	ror	r23
    3a5a:	67 95       	ror	r22
    3a5c:	b7 95       	ror	r27
    3a5e:	f7 95       	ror	r31
    3a60:	e7 95       	ror	r30
    3a62:	9f 5f       	subi	r25, 0xFF	; 255
    3a64:	c1 f7       	brne	.-16     	; 0x3a56 <__mulsf3_pse+0x8c>
    3a66:	fe 2b       	or	r31, r30
    3a68:	88 0f       	add	r24, r24
    3a6a:	91 1d       	adc	r25, r1
    3a6c:	96 95       	lsr	r25
    3a6e:	87 95       	ror	r24
    3a70:	97 f9       	bld	r25, 7
    3a72:	08 95       	ret

00003a74 <__udivmodsi4>:
    3a74:	a1 e2       	ldi	r26, 0x21	; 33
    3a76:	1a 2e       	mov	r1, r26
    3a78:	aa 1b       	sub	r26, r26
    3a7a:	bb 1b       	sub	r27, r27
    3a7c:	fd 01       	movw	r30, r26
    3a7e:	0d c0       	rjmp	.+26     	; 0x3a9a <__udivmodsi4_ep>

00003a80 <__udivmodsi4_loop>:
    3a80:	aa 1f       	adc	r26, r26
    3a82:	bb 1f       	adc	r27, r27
    3a84:	ee 1f       	adc	r30, r30
    3a86:	ff 1f       	adc	r31, r31
    3a88:	a2 17       	cp	r26, r18
    3a8a:	b3 07       	cpc	r27, r19
    3a8c:	e4 07       	cpc	r30, r20
    3a8e:	f5 07       	cpc	r31, r21
    3a90:	20 f0       	brcs	.+8      	; 0x3a9a <__udivmodsi4_ep>
    3a92:	a2 1b       	sub	r26, r18
    3a94:	b3 0b       	sbc	r27, r19
    3a96:	e4 0b       	sbc	r30, r20
    3a98:	f5 0b       	sbc	r31, r21

00003a9a <__udivmodsi4_ep>:
    3a9a:	66 1f       	adc	r22, r22
    3a9c:	77 1f       	adc	r23, r23
    3a9e:	88 1f       	adc	r24, r24
    3aa0:	99 1f       	adc	r25, r25
    3aa2:	1a 94       	dec	r1
    3aa4:	69 f7       	brne	.-38     	; 0x3a80 <__udivmodsi4_loop>
    3aa6:	60 95       	com	r22
    3aa8:	70 95       	com	r23
    3aaa:	80 95       	com	r24
    3aac:	90 95       	com	r25
    3aae:	9b 01       	movw	r18, r22
    3ab0:	ac 01       	movw	r20, r24
    3ab2:	bd 01       	movw	r22, r26
    3ab4:	cf 01       	movw	r24, r30
    3ab6:	08 95       	ret

00003ab8 <__tablejump2__>:
    3ab8:	ee 0f       	add	r30, r30
    3aba:	ff 1f       	adc	r31, r31
    3abc:	00 24       	eor	r0, r0
    3abe:	00 1c       	adc	r0, r0
    3ac0:	0b be       	out	0x3b, r0	; 59
    3ac2:	07 90       	elpm	r0, Z+
    3ac4:	f6 91       	elpm	r31, Z
    3ac6:	e0 2d       	mov	r30, r0
    3ac8:	09 94       	ijmp

00003aca <dtostrf>:
    3aca:	ef 92       	push	r14
    3acc:	0f 93       	push	r16
    3ace:	1f 93       	push	r17
    3ad0:	cf 93       	push	r28
    3ad2:	df 93       	push	r29
    3ad4:	e8 01       	movw	r28, r16
    3ad6:	47 fd       	sbrc	r20, 7
    3ad8:	02 c0       	rjmp	.+4      	; 0x3ade <dtostrf+0x14>
    3ada:	34 e0       	ldi	r19, 0x04	; 4
    3adc:	01 c0       	rjmp	.+2      	; 0x3ae0 <dtostrf+0x16>
    3ade:	34 e1       	ldi	r19, 0x14	; 20
    3ae0:	04 2e       	mov	r0, r20
    3ae2:	00 0c       	add	r0, r0
    3ae4:	55 0b       	sbc	r21, r21
    3ae6:	57 ff       	sbrs	r21, 7
    3ae8:	03 c0       	rjmp	.+6      	; 0x3af0 <dtostrf+0x26>
    3aea:	51 95       	neg	r21
    3aec:	41 95       	neg	r20
    3aee:	51 09       	sbc	r21, r1
    3af0:	e3 2e       	mov	r14, r19
    3af2:	02 2f       	mov	r16, r18
    3af4:	24 2f       	mov	r18, r20
    3af6:	ae 01       	movw	r20, r28
    3af8:	a1 d3       	rcall	.+1858   	; 0x423c <dtoa_prf>
    3afa:	ce 01       	movw	r24, r28
    3afc:	df 91       	pop	r29
    3afe:	cf 91       	pop	r28
    3b00:	1f 91       	pop	r17
    3b02:	0f 91       	pop	r16
    3b04:	ef 90       	pop	r14
    3b06:	08 95       	ret

00003b08 <malloc>:
    3b08:	0f 93       	push	r16
    3b0a:	1f 93       	push	r17
    3b0c:	cf 93       	push	r28
    3b0e:	df 93       	push	r29
    3b10:	82 30       	cpi	r24, 0x02	; 2
    3b12:	91 05       	cpc	r25, r1
    3b14:	10 f4       	brcc	.+4      	; 0x3b1a <malloc+0x12>
    3b16:	82 e0       	ldi	r24, 0x02	; 2
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	e0 91 9d 07 	lds	r30, 0x079D	; 0x80079d <__flp>
    3b1e:	f0 91 9e 07 	lds	r31, 0x079E	; 0x80079e <__flp+0x1>
    3b22:	20 e0       	ldi	r18, 0x00	; 0
    3b24:	30 e0       	ldi	r19, 0x00	; 0
    3b26:	a0 e0       	ldi	r26, 0x00	; 0
    3b28:	b0 e0       	ldi	r27, 0x00	; 0
    3b2a:	30 97       	sbiw	r30, 0x00	; 0
    3b2c:	19 f1       	breq	.+70     	; 0x3b74 <malloc+0x6c>
    3b2e:	40 81       	ld	r20, Z
    3b30:	51 81       	ldd	r21, Z+1	; 0x01
    3b32:	02 81       	ldd	r16, Z+2	; 0x02
    3b34:	13 81       	ldd	r17, Z+3	; 0x03
    3b36:	48 17       	cp	r20, r24
    3b38:	59 07       	cpc	r21, r25
    3b3a:	c8 f0       	brcs	.+50     	; 0x3b6e <malloc+0x66>
    3b3c:	84 17       	cp	r24, r20
    3b3e:	95 07       	cpc	r25, r21
    3b40:	69 f4       	brne	.+26     	; 0x3b5c <malloc+0x54>
    3b42:	10 97       	sbiw	r26, 0x00	; 0
    3b44:	31 f0       	breq	.+12     	; 0x3b52 <malloc+0x4a>
    3b46:	12 96       	adiw	r26, 0x02	; 2
    3b48:	0c 93       	st	X, r16
    3b4a:	12 97       	sbiw	r26, 0x02	; 2
    3b4c:	13 96       	adiw	r26, 0x03	; 3
    3b4e:	1c 93       	st	X, r17
    3b50:	27 c0       	rjmp	.+78     	; 0x3ba0 <malloc+0x98>
    3b52:	00 93 9d 07 	sts	0x079D, r16	; 0x80079d <__flp>
    3b56:	10 93 9e 07 	sts	0x079E, r17	; 0x80079e <__flp+0x1>
    3b5a:	22 c0       	rjmp	.+68     	; 0x3ba0 <malloc+0x98>
    3b5c:	21 15       	cp	r18, r1
    3b5e:	31 05       	cpc	r19, r1
    3b60:	19 f0       	breq	.+6      	; 0x3b68 <malloc+0x60>
    3b62:	42 17       	cp	r20, r18
    3b64:	53 07       	cpc	r21, r19
    3b66:	18 f4       	brcc	.+6      	; 0x3b6e <malloc+0x66>
    3b68:	9a 01       	movw	r18, r20
    3b6a:	bd 01       	movw	r22, r26
    3b6c:	ef 01       	movw	r28, r30
    3b6e:	df 01       	movw	r26, r30
    3b70:	f8 01       	movw	r30, r16
    3b72:	db cf       	rjmp	.-74     	; 0x3b2a <malloc+0x22>
    3b74:	21 15       	cp	r18, r1
    3b76:	31 05       	cpc	r19, r1
    3b78:	f9 f0       	breq	.+62     	; 0x3bb8 <malloc+0xb0>
    3b7a:	28 1b       	sub	r18, r24
    3b7c:	39 0b       	sbc	r19, r25
    3b7e:	24 30       	cpi	r18, 0x04	; 4
    3b80:	31 05       	cpc	r19, r1
    3b82:	80 f4       	brcc	.+32     	; 0x3ba4 <malloc+0x9c>
    3b84:	8a 81       	ldd	r24, Y+2	; 0x02
    3b86:	9b 81       	ldd	r25, Y+3	; 0x03
    3b88:	61 15       	cp	r22, r1
    3b8a:	71 05       	cpc	r23, r1
    3b8c:	21 f0       	breq	.+8      	; 0x3b96 <malloc+0x8e>
    3b8e:	fb 01       	movw	r30, r22
    3b90:	93 83       	std	Z+3, r25	; 0x03
    3b92:	82 83       	std	Z+2, r24	; 0x02
    3b94:	04 c0       	rjmp	.+8      	; 0x3b9e <malloc+0x96>
    3b96:	90 93 9e 07 	sts	0x079E, r25	; 0x80079e <__flp+0x1>
    3b9a:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <__flp>
    3b9e:	fe 01       	movw	r30, r28
    3ba0:	32 96       	adiw	r30, 0x02	; 2
    3ba2:	44 c0       	rjmp	.+136    	; 0x3c2c <malloc+0x124>
    3ba4:	fe 01       	movw	r30, r28
    3ba6:	e2 0f       	add	r30, r18
    3ba8:	f3 1f       	adc	r31, r19
    3baa:	81 93       	st	Z+, r24
    3bac:	91 93       	st	Z+, r25
    3bae:	22 50       	subi	r18, 0x02	; 2
    3bb0:	31 09       	sbc	r19, r1
    3bb2:	39 83       	std	Y+1, r19	; 0x01
    3bb4:	28 83       	st	Y, r18
    3bb6:	3a c0       	rjmp	.+116    	; 0x3c2c <malloc+0x124>
    3bb8:	20 91 9b 07 	lds	r18, 0x079B	; 0x80079b <__brkval>
    3bbc:	30 91 9c 07 	lds	r19, 0x079C	; 0x80079c <__brkval+0x1>
    3bc0:	23 2b       	or	r18, r19
    3bc2:	41 f4       	brne	.+16     	; 0x3bd4 <malloc+0xcc>
    3bc4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3bc8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3bcc:	30 93 9c 07 	sts	0x079C, r19	; 0x80079c <__brkval+0x1>
    3bd0:	20 93 9b 07 	sts	0x079B, r18	; 0x80079b <__brkval>
    3bd4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3bd8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3bdc:	21 15       	cp	r18, r1
    3bde:	31 05       	cpc	r19, r1
    3be0:	41 f4       	brne	.+16     	; 0x3bf2 <malloc+0xea>
    3be2:	2d b7       	in	r18, 0x3d	; 61
    3be4:	3e b7       	in	r19, 0x3e	; 62
    3be6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3bea:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3bee:	24 1b       	sub	r18, r20
    3bf0:	35 0b       	sbc	r19, r21
    3bf2:	e0 91 9b 07 	lds	r30, 0x079B	; 0x80079b <__brkval>
    3bf6:	f0 91 9c 07 	lds	r31, 0x079C	; 0x80079c <__brkval+0x1>
    3bfa:	e2 17       	cp	r30, r18
    3bfc:	f3 07       	cpc	r31, r19
    3bfe:	a0 f4       	brcc	.+40     	; 0x3c28 <malloc+0x120>
    3c00:	2e 1b       	sub	r18, r30
    3c02:	3f 0b       	sbc	r19, r31
    3c04:	28 17       	cp	r18, r24
    3c06:	39 07       	cpc	r19, r25
    3c08:	78 f0       	brcs	.+30     	; 0x3c28 <malloc+0x120>
    3c0a:	ac 01       	movw	r20, r24
    3c0c:	4e 5f       	subi	r20, 0xFE	; 254
    3c0e:	5f 4f       	sbci	r21, 0xFF	; 255
    3c10:	24 17       	cp	r18, r20
    3c12:	35 07       	cpc	r19, r21
    3c14:	48 f0       	brcs	.+18     	; 0x3c28 <malloc+0x120>
    3c16:	4e 0f       	add	r20, r30
    3c18:	5f 1f       	adc	r21, r31
    3c1a:	50 93 9c 07 	sts	0x079C, r21	; 0x80079c <__brkval+0x1>
    3c1e:	40 93 9b 07 	sts	0x079B, r20	; 0x80079b <__brkval>
    3c22:	81 93       	st	Z+, r24
    3c24:	91 93       	st	Z+, r25
    3c26:	02 c0       	rjmp	.+4      	; 0x3c2c <malloc+0x124>
    3c28:	e0 e0       	ldi	r30, 0x00	; 0
    3c2a:	f0 e0       	ldi	r31, 0x00	; 0
    3c2c:	cf 01       	movw	r24, r30
    3c2e:	df 91       	pop	r29
    3c30:	cf 91       	pop	r28
    3c32:	1f 91       	pop	r17
    3c34:	0f 91       	pop	r16
    3c36:	08 95       	ret

00003c38 <free>:
    3c38:	cf 93       	push	r28
    3c3a:	df 93       	push	r29
    3c3c:	00 97       	sbiw	r24, 0x00	; 0
    3c3e:	09 f4       	brne	.+2      	; 0x3c42 <free+0xa>
    3c40:	81 c0       	rjmp	.+258    	; 0x3d44 <free+0x10c>
    3c42:	fc 01       	movw	r30, r24
    3c44:	32 97       	sbiw	r30, 0x02	; 2
    3c46:	13 82       	std	Z+3, r1	; 0x03
    3c48:	12 82       	std	Z+2, r1	; 0x02
    3c4a:	a0 91 9d 07 	lds	r26, 0x079D	; 0x80079d <__flp>
    3c4e:	b0 91 9e 07 	lds	r27, 0x079E	; 0x80079e <__flp+0x1>
    3c52:	10 97       	sbiw	r26, 0x00	; 0
    3c54:	81 f4       	brne	.+32     	; 0x3c76 <free+0x3e>
    3c56:	20 81       	ld	r18, Z
    3c58:	31 81       	ldd	r19, Z+1	; 0x01
    3c5a:	82 0f       	add	r24, r18
    3c5c:	93 1f       	adc	r25, r19
    3c5e:	20 91 9b 07 	lds	r18, 0x079B	; 0x80079b <__brkval>
    3c62:	30 91 9c 07 	lds	r19, 0x079C	; 0x80079c <__brkval+0x1>
    3c66:	28 17       	cp	r18, r24
    3c68:	39 07       	cpc	r19, r25
    3c6a:	51 f5       	brne	.+84     	; 0x3cc0 <free+0x88>
    3c6c:	f0 93 9c 07 	sts	0x079C, r31	; 0x80079c <__brkval+0x1>
    3c70:	e0 93 9b 07 	sts	0x079B, r30	; 0x80079b <__brkval>
    3c74:	67 c0       	rjmp	.+206    	; 0x3d44 <free+0x10c>
    3c76:	ed 01       	movw	r28, r26
    3c78:	20 e0       	ldi	r18, 0x00	; 0
    3c7a:	30 e0       	ldi	r19, 0x00	; 0
    3c7c:	ce 17       	cp	r28, r30
    3c7e:	df 07       	cpc	r29, r31
    3c80:	40 f4       	brcc	.+16     	; 0x3c92 <free+0x5a>
    3c82:	4a 81       	ldd	r20, Y+2	; 0x02
    3c84:	5b 81       	ldd	r21, Y+3	; 0x03
    3c86:	9e 01       	movw	r18, r28
    3c88:	41 15       	cp	r20, r1
    3c8a:	51 05       	cpc	r21, r1
    3c8c:	f1 f0       	breq	.+60     	; 0x3cca <free+0x92>
    3c8e:	ea 01       	movw	r28, r20
    3c90:	f5 cf       	rjmp	.-22     	; 0x3c7c <free+0x44>
    3c92:	d3 83       	std	Z+3, r29	; 0x03
    3c94:	c2 83       	std	Z+2, r28	; 0x02
    3c96:	40 81       	ld	r20, Z
    3c98:	51 81       	ldd	r21, Z+1	; 0x01
    3c9a:	84 0f       	add	r24, r20
    3c9c:	95 1f       	adc	r25, r21
    3c9e:	c8 17       	cp	r28, r24
    3ca0:	d9 07       	cpc	r29, r25
    3ca2:	59 f4       	brne	.+22     	; 0x3cba <free+0x82>
    3ca4:	88 81       	ld	r24, Y
    3ca6:	99 81       	ldd	r25, Y+1	; 0x01
    3ca8:	84 0f       	add	r24, r20
    3caa:	95 1f       	adc	r25, r21
    3cac:	02 96       	adiw	r24, 0x02	; 2
    3cae:	91 83       	std	Z+1, r25	; 0x01
    3cb0:	80 83       	st	Z, r24
    3cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb4:	9b 81       	ldd	r25, Y+3	; 0x03
    3cb6:	93 83       	std	Z+3, r25	; 0x03
    3cb8:	82 83       	std	Z+2, r24	; 0x02
    3cba:	21 15       	cp	r18, r1
    3cbc:	31 05       	cpc	r19, r1
    3cbe:	29 f4       	brne	.+10     	; 0x3cca <free+0x92>
    3cc0:	f0 93 9e 07 	sts	0x079E, r31	; 0x80079e <__flp+0x1>
    3cc4:	e0 93 9d 07 	sts	0x079D, r30	; 0x80079d <__flp>
    3cc8:	3d c0       	rjmp	.+122    	; 0x3d44 <free+0x10c>
    3cca:	e9 01       	movw	r28, r18
    3ccc:	fb 83       	std	Y+3, r31	; 0x03
    3cce:	ea 83       	std	Y+2, r30	; 0x02
    3cd0:	49 91       	ld	r20, Y+
    3cd2:	59 91       	ld	r21, Y+
    3cd4:	c4 0f       	add	r28, r20
    3cd6:	d5 1f       	adc	r29, r21
    3cd8:	ec 17       	cp	r30, r28
    3cda:	fd 07       	cpc	r31, r29
    3cdc:	61 f4       	brne	.+24     	; 0x3cf6 <free+0xbe>
    3cde:	80 81       	ld	r24, Z
    3ce0:	91 81       	ldd	r25, Z+1	; 0x01
    3ce2:	84 0f       	add	r24, r20
    3ce4:	95 1f       	adc	r25, r21
    3ce6:	02 96       	adiw	r24, 0x02	; 2
    3ce8:	e9 01       	movw	r28, r18
    3cea:	99 83       	std	Y+1, r25	; 0x01
    3cec:	88 83       	st	Y, r24
    3cee:	82 81       	ldd	r24, Z+2	; 0x02
    3cf0:	93 81       	ldd	r25, Z+3	; 0x03
    3cf2:	9b 83       	std	Y+3, r25	; 0x03
    3cf4:	8a 83       	std	Y+2, r24	; 0x02
    3cf6:	e0 e0       	ldi	r30, 0x00	; 0
    3cf8:	f0 e0       	ldi	r31, 0x00	; 0
    3cfa:	12 96       	adiw	r26, 0x02	; 2
    3cfc:	8d 91       	ld	r24, X+
    3cfe:	9c 91       	ld	r25, X
    3d00:	13 97       	sbiw	r26, 0x03	; 3
    3d02:	00 97       	sbiw	r24, 0x00	; 0
    3d04:	19 f0       	breq	.+6      	; 0x3d0c <free+0xd4>
    3d06:	fd 01       	movw	r30, r26
    3d08:	dc 01       	movw	r26, r24
    3d0a:	f7 cf       	rjmp	.-18     	; 0x3cfa <free+0xc2>
    3d0c:	8d 91       	ld	r24, X+
    3d0e:	9c 91       	ld	r25, X
    3d10:	11 97       	sbiw	r26, 0x01	; 1
    3d12:	9d 01       	movw	r18, r26
    3d14:	2e 5f       	subi	r18, 0xFE	; 254
    3d16:	3f 4f       	sbci	r19, 0xFF	; 255
    3d18:	82 0f       	add	r24, r18
    3d1a:	93 1f       	adc	r25, r19
    3d1c:	20 91 9b 07 	lds	r18, 0x079B	; 0x80079b <__brkval>
    3d20:	30 91 9c 07 	lds	r19, 0x079C	; 0x80079c <__brkval+0x1>
    3d24:	28 17       	cp	r18, r24
    3d26:	39 07       	cpc	r19, r25
    3d28:	69 f4       	brne	.+26     	; 0x3d44 <free+0x10c>
    3d2a:	30 97       	sbiw	r30, 0x00	; 0
    3d2c:	29 f4       	brne	.+10     	; 0x3d38 <free+0x100>
    3d2e:	10 92 9e 07 	sts	0x079E, r1	; 0x80079e <__flp+0x1>
    3d32:	10 92 9d 07 	sts	0x079D, r1	; 0x80079d <__flp>
    3d36:	02 c0       	rjmp	.+4      	; 0x3d3c <free+0x104>
    3d38:	13 82       	std	Z+3, r1	; 0x03
    3d3a:	12 82       	std	Z+2, r1	; 0x02
    3d3c:	b0 93 9c 07 	sts	0x079C, r27	; 0x80079c <__brkval+0x1>
    3d40:	a0 93 9b 07 	sts	0x079B, r26	; 0x80079b <__brkval>
    3d44:	df 91       	pop	r29
    3d46:	cf 91       	pop	r28
    3d48:	08 95       	ret

00003d4a <atof>:
    3d4a:	66 27       	eor	r22, r22
    3d4c:	77 27       	eor	r23, r23
    3d4e:	ec c3       	rjmp	.+2008   	; 0x4528 <strtod>

00003d50 <atol>:
    3d50:	1f 93       	push	r17
    3d52:	fc 01       	movw	r30, r24
    3d54:	99 27       	eor	r25, r25
    3d56:	88 27       	eor	r24, r24
    3d58:	bc 01       	movw	r22, r24
    3d5a:	e8 94       	clt
    3d5c:	11 91       	ld	r17, Z+
    3d5e:	10 32       	cpi	r17, 0x20	; 32
    3d60:	e9 f3       	breq	.-6      	; 0x3d5c <atol+0xc>
    3d62:	19 30       	cpi	r17, 0x09	; 9
    3d64:	10 f0       	brcs	.+4      	; 0x3d6a <atol+0x1a>
    3d66:	1e 30       	cpi	r17, 0x0E	; 14
    3d68:	c8 f3       	brcs	.-14     	; 0x3d5c <atol+0xc>
    3d6a:	1b 32       	cpi	r17, 0x2B	; 43
    3d6c:	49 f0       	breq	.+18     	; 0x3d80 <atol+0x30>
    3d6e:	1d 32       	cpi	r17, 0x2D	; 45
    3d70:	41 f4       	brne	.+16     	; 0x3d82 <atol+0x32>
    3d72:	68 94       	set
    3d74:	05 c0       	rjmp	.+10     	; 0x3d80 <atol+0x30>
    3d76:	22 d0       	rcall	.+68     	; 0x3dbc <__mulsi_const_10>
    3d78:	61 0f       	add	r22, r17
    3d7a:	71 1d       	adc	r23, r1
    3d7c:	81 1d       	adc	r24, r1
    3d7e:	91 1d       	adc	r25, r1
    3d80:	11 91       	ld	r17, Z+
    3d82:	10 53       	subi	r17, 0x30	; 48
    3d84:	1a 30       	cpi	r17, 0x0A	; 10
    3d86:	b8 f3       	brcs	.-18     	; 0x3d76 <atol+0x26>
    3d88:	3e f4       	brtc	.+14     	; 0x3d98 <atol+0x48>
    3d8a:	90 95       	com	r25
    3d8c:	80 95       	com	r24
    3d8e:	70 95       	com	r23
    3d90:	61 95       	neg	r22
    3d92:	7f 4f       	sbci	r23, 0xFF	; 255
    3d94:	8f 4f       	sbci	r24, 0xFF	; 255
    3d96:	9f 4f       	sbci	r25, 0xFF	; 255
    3d98:	1f 91       	pop	r17
    3d9a:	08 95       	ret

00003d9c <memcpy>:
    3d9c:	fb 01       	movw	r30, r22
    3d9e:	dc 01       	movw	r26, r24
    3da0:	02 c0       	rjmp	.+4      	; 0x3da6 <memcpy+0xa>
    3da2:	01 90       	ld	r0, Z+
    3da4:	0d 92       	st	X+, r0
    3da6:	41 50       	subi	r20, 0x01	; 1
    3da8:	50 40       	sbci	r21, 0x00	; 0
    3daa:	d8 f7       	brcc	.-10     	; 0x3da2 <memcpy+0x6>
    3dac:	08 95       	ret

00003dae <memset>:
    3dae:	dc 01       	movw	r26, r24
    3db0:	01 c0       	rjmp	.+2      	; 0x3db4 <memset+0x6>
    3db2:	6d 93       	st	X+, r22
    3db4:	41 50       	subi	r20, 0x01	; 1
    3db6:	50 40       	sbci	r21, 0x00	; 0
    3db8:	e0 f7       	brcc	.-8      	; 0x3db2 <memset+0x4>
    3dba:	08 95       	ret

00003dbc <__mulsi_const_10>:
    3dbc:	59 2f       	mov	r21, r25
    3dbe:	48 2f       	mov	r20, r24
    3dc0:	37 2f       	mov	r19, r23
    3dc2:	26 2f       	mov	r18, r22
    3dc4:	66 0f       	add	r22, r22
    3dc6:	77 1f       	adc	r23, r23
    3dc8:	88 1f       	adc	r24, r24
    3dca:	99 1f       	adc	r25, r25
    3dcc:	66 0f       	add	r22, r22
    3dce:	77 1f       	adc	r23, r23
    3dd0:	88 1f       	adc	r24, r24
    3dd2:	99 1f       	adc	r25, r25
    3dd4:	62 0f       	add	r22, r18
    3dd6:	73 1f       	adc	r23, r19
    3dd8:	84 1f       	adc	r24, r20
    3dda:	95 1f       	adc	r25, r21
    3ddc:	66 0f       	add	r22, r22
    3dde:	77 1f       	adc	r23, r23
    3de0:	88 1f       	adc	r24, r24
    3de2:	99 1f       	adc	r25, r25
    3de4:	08 95       	ret

00003de6 <sprintf>:
    3de6:	0f 93       	push	r16
    3de8:	1f 93       	push	r17
    3dea:	cf 93       	push	r28
    3dec:	df 93       	push	r29
    3dee:	cd b7       	in	r28, 0x3d	; 61
    3df0:	de b7       	in	r29, 0x3e	; 62
    3df2:	2e 97       	sbiw	r28, 0x0e	; 14
    3df4:	0f b6       	in	r0, 0x3f	; 63
    3df6:	f8 94       	cli
    3df8:	de bf       	out	0x3e, r29	; 62
    3dfa:	0f be       	out	0x3f, r0	; 63
    3dfc:	cd bf       	out	0x3d, r28	; 61
    3dfe:	0d 89       	ldd	r16, Y+21	; 0x15
    3e00:	1e 89       	ldd	r17, Y+22	; 0x16
    3e02:	86 e0       	ldi	r24, 0x06	; 6
    3e04:	8c 83       	std	Y+4, r24	; 0x04
    3e06:	1a 83       	std	Y+2, r17	; 0x02
    3e08:	09 83       	std	Y+1, r16	; 0x01
    3e0a:	8f ef       	ldi	r24, 0xFF	; 255
    3e0c:	9f e7       	ldi	r25, 0x7F	; 127
    3e0e:	9e 83       	std	Y+6, r25	; 0x06
    3e10:	8d 83       	std	Y+5, r24	; 0x05
    3e12:	ae 01       	movw	r20, r28
    3e14:	47 5e       	subi	r20, 0xE7	; 231
    3e16:	5f 4f       	sbci	r21, 0xFF	; 255
    3e18:	6f 89       	ldd	r22, Y+23	; 0x17
    3e1a:	78 8d       	ldd	r23, Y+24	; 0x18
    3e1c:	ce 01       	movw	r24, r28
    3e1e:	01 96       	adiw	r24, 0x01	; 1
    3e20:	10 d0       	rcall	.+32     	; 0x3e42 <vfprintf>
    3e22:	ef 81       	ldd	r30, Y+7	; 0x07
    3e24:	f8 85       	ldd	r31, Y+8	; 0x08
    3e26:	e0 0f       	add	r30, r16
    3e28:	f1 1f       	adc	r31, r17
    3e2a:	10 82       	st	Z, r1
    3e2c:	2e 96       	adiw	r28, 0x0e	; 14
    3e2e:	0f b6       	in	r0, 0x3f	; 63
    3e30:	f8 94       	cli
    3e32:	de bf       	out	0x3e, r29	; 62
    3e34:	0f be       	out	0x3f, r0	; 63
    3e36:	cd bf       	out	0x3d, r28	; 61
    3e38:	df 91       	pop	r29
    3e3a:	cf 91       	pop	r28
    3e3c:	1f 91       	pop	r17
    3e3e:	0f 91       	pop	r16
    3e40:	08 95       	ret

00003e42 <vfprintf>:
    3e42:	2f 92       	push	r2
    3e44:	3f 92       	push	r3
    3e46:	4f 92       	push	r4
    3e48:	5f 92       	push	r5
    3e4a:	6f 92       	push	r6
    3e4c:	7f 92       	push	r7
    3e4e:	8f 92       	push	r8
    3e50:	9f 92       	push	r9
    3e52:	af 92       	push	r10
    3e54:	bf 92       	push	r11
    3e56:	cf 92       	push	r12
    3e58:	df 92       	push	r13
    3e5a:	ef 92       	push	r14
    3e5c:	ff 92       	push	r15
    3e5e:	0f 93       	push	r16
    3e60:	1f 93       	push	r17
    3e62:	cf 93       	push	r28
    3e64:	df 93       	push	r29
    3e66:	cd b7       	in	r28, 0x3d	; 61
    3e68:	de b7       	in	r29, 0x3e	; 62
    3e6a:	2b 97       	sbiw	r28, 0x0b	; 11
    3e6c:	0f b6       	in	r0, 0x3f	; 63
    3e6e:	f8 94       	cli
    3e70:	de bf       	out	0x3e, r29	; 62
    3e72:	0f be       	out	0x3f, r0	; 63
    3e74:	cd bf       	out	0x3d, r28	; 61
    3e76:	6c 01       	movw	r12, r24
    3e78:	7b 01       	movw	r14, r22
    3e7a:	8a 01       	movw	r16, r20
    3e7c:	fc 01       	movw	r30, r24
    3e7e:	17 82       	std	Z+7, r1	; 0x07
    3e80:	16 82       	std	Z+6, r1	; 0x06
    3e82:	83 81       	ldd	r24, Z+3	; 0x03
    3e84:	81 ff       	sbrs	r24, 1
    3e86:	bf c1       	rjmp	.+894    	; 0x4206 <vfprintf+0x3c4>
    3e88:	ce 01       	movw	r24, r28
    3e8a:	01 96       	adiw	r24, 0x01	; 1
    3e8c:	3c 01       	movw	r6, r24
    3e8e:	f6 01       	movw	r30, r12
    3e90:	93 81       	ldd	r25, Z+3	; 0x03
    3e92:	f7 01       	movw	r30, r14
    3e94:	93 fd       	sbrc	r25, 3
    3e96:	85 91       	lpm	r24, Z+
    3e98:	93 ff       	sbrs	r25, 3
    3e9a:	81 91       	ld	r24, Z+
    3e9c:	7f 01       	movw	r14, r30
    3e9e:	88 23       	and	r24, r24
    3ea0:	09 f4       	brne	.+2      	; 0x3ea4 <vfprintf+0x62>
    3ea2:	ad c1       	rjmp	.+858    	; 0x41fe <vfprintf+0x3bc>
    3ea4:	85 32       	cpi	r24, 0x25	; 37
    3ea6:	39 f4       	brne	.+14     	; 0x3eb6 <vfprintf+0x74>
    3ea8:	93 fd       	sbrc	r25, 3
    3eaa:	85 91       	lpm	r24, Z+
    3eac:	93 ff       	sbrs	r25, 3
    3eae:	81 91       	ld	r24, Z+
    3eb0:	7f 01       	movw	r14, r30
    3eb2:	85 32       	cpi	r24, 0x25	; 37
    3eb4:	21 f4       	brne	.+8      	; 0x3ebe <vfprintf+0x7c>
    3eb6:	b6 01       	movw	r22, r12
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
    3eba:	99 d5       	rcall	.+2866   	; 0x49ee <fputc>
    3ebc:	e8 cf       	rjmp	.-48     	; 0x3e8e <vfprintf+0x4c>
    3ebe:	91 2c       	mov	r9, r1
    3ec0:	21 2c       	mov	r2, r1
    3ec2:	31 2c       	mov	r3, r1
    3ec4:	ff e1       	ldi	r31, 0x1F	; 31
    3ec6:	f3 15       	cp	r31, r3
    3ec8:	d8 f0       	brcs	.+54     	; 0x3f00 <vfprintf+0xbe>
    3eca:	8b 32       	cpi	r24, 0x2B	; 43
    3ecc:	79 f0       	breq	.+30     	; 0x3eec <vfprintf+0xaa>
    3ece:	38 f4       	brcc	.+14     	; 0x3ede <vfprintf+0x9c>
    3ed0:	80 32       	cpi	r24, 0x20	; 32
    3ed2:	79 f0       	breq	.+30     	; 0x3ef2 <vfprintf+0xb0>
    3ed4:	83 32       	cpi	r24, 0x23	; 35
    3ed6:	a1 f4       	brne	.+40     	; 0x3f00 <vfprintf+0xbe>
    3ed8:	23 2d       	mov	r18, r3
    3eda:	20 61       	ori	r18, 0x10	; 16
    3edc:	1d c0       	rjmp	.+58     	; 0x3f18 <vfprintf+0xd6>
    3ede:	8d 32       	cpi	r24, 0x2D	; 45
    3ee0:	61 f0       	breq	.+24     	; 0x3efa <vfprintf+0xb8>
    3ee2:	80 33       	cpi	r24, 0x30	; 48
    3ee4:	69 f4       	brne	.+26     	; 0x3f00 <vfprintf+0xbe>
    3ee6:	23 2d       	mov	r18, r3
    3ee8:	21 60       	ori	r18, 0x01	; 1
    3eea:	16 c0       	rjmp	.+44     	; 0x3f18 <vfprintf+0xd6>
    3eec:	83 2d       	mov	r24, r3
    3eee:	82 60       	ori	r24, 0x02	; 2
    3ef0:	38 2e       	mov	r3, r24
    3ef2:	e3 2d       	mov	r30, r3
    3ef4:	e4 60       	ori	r30, 0x04	; 4
    3ef6:	3e 2e       	mov	r3, r30
    3ef8:	2a c0       	rjmp	.+84     	; 0x3f4e <vfprintf+0x10c>
    3efa:	f3 2d       	mov	r31, r3
    3efc:	f8 60       	ori	r31, 0x08	; 8
    3efe:	1d c0       	rjmp	.+58     	; 0x3f3a <vfprintf+0xf8>
    3f00:	37 fc       	sbrc	r3, 7
    3f02:	2d c0       	rjmp	.+90     	; 0x3f5e <vfprintf+0x11c>
    3f04:	20 ed       	ldi	r18, 0xD0	; 208
    3f06:	28 0f       	add	r18, r24
    3f08:	2a 30       	cpi	r18, 0x0A	; 10
    3f0a:	40 f0       	brcs	.+16     	; 0x3f1c <vfprintf+0xda>
    3f0c:	8e 32       	cpi	r24, 0x2E	; 46
    3f0e:	b9 f4       	brne	.+46     	; 0x3f3e <vfprintf+0xfc>
    3f10:	36 fc       	sbrc	r3, 6
    3f12:	75 c1       	rjmp	.+746    	; 0x41fe <vfprintf+0x3bc>
    3f14:	23 2d       	mov	r18, r3
    3f16:	20 64       	ori	r18, 0x40	; 64
    3f18:	32 2e       	mov	r3, r18
    3f1a:	19 c0       	rjmp	.+50     	; 0x3f4e <vfprintf+0x10c>
    3f1c:	36 fe       	sbrs	r3, 6
    3f1e:	06 c0       	rjmp	.+12     	; 0x3f2c <vfprintf+0xea>
    3f20:	8a e0       	ldi	r24, 0x0A	; 10
    3f22:	98 9e       	mul	r9, r24
    3f24:	20 0d       	add	r18, r0
    3f26:	11 24       	eor	r1, r1
    3f28:	92 2e       	mov	r9, r18
    3f2a:	11 c0       	rjmp	.+34     	; 0x3f4e <vfprintf+0x10c>
    3f2c:	ea e0       	ldi	r30, 0x0A	; 10
    3f2e:	2e 9e       	mul	r2, r30
    3f30:	20 0d       	add	r18, r0
    3f32:	11 24       	eor	r1, r1
    3f34:	22 2e       	mov	r2, r18
    3f36:	f3 2d       	mov	r31, r3
    3f38:	f0 62       	ori	r31, 0x20	; 32
    3f3a:	3f 2e       	mov	r3, r31
    3f3c:	08 c0       	rjmp	.+16     	; 0x3f4e <vfprintf+0x10c>
    3f3e:	8c 36       	cpi	r24, 0x6C	; 108
    3f40:	21 f4       	brne	.+8      	; 0x3f4a <vfprintf+0x108>
    3f42:	83 2d       	mov	r24, r3
    3f44:	80 68       	ori	r24, 0x80	; 128
    3f46:	38 2e       	mov	r3, r24
    3f48:	02 c0       	rjmp	.+4      	; 0x3f4e <vfprintf+0x10c>
    3f4a:	88 36       	cpi	r24, 0x68	; 104
    3f4c:	41 f4       	brne	.+16     	; 0x3f5e <vfprintf+0x11c>
    3f4e:	f7 01       	movw	r30, r14
    3f50:	93 fd       	sbrc	r25, 3
    3f52:	85 91       	lpm	r24, Z+
    3f54:	93 ff       	sbrs	r25, 3
    3f56:	81 91       	ld	r24, Z+
    3f58:	7f 01       	movw	r14, r30
    3f5a:	81 11       	cpse	r24, r1
    3f5c:	b3 cf       	rjmp	.-154    	; 0x3ec4 <vfprintf+0x82>
    3f5e:	98 2f       	mov	r25, r24
    3f60:	9f 7d       	andi	r25, 0xDF	; 223
    3f62:	95 54       	subi	r25, 0x45	; 69
    3f64:	93 30       	cpi	r25, 0x03	; 3
    3f66:	28 f4       	brcc	.+10     	; 0x3f72 <vfprintf+0x130>
    3f68:	0c 5f       	subi	r16, 0xFC	; 252
    3f6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f6c:	9f e3       	ldi	r25, 0x3F	; 63
    3f6e:	99 83       	std	Y+1, r25	; 0x01
    3f70:	0d c0       	rjmp	.+26     	; 0x3f8c <vfprintf+0x14a>
    3f72:	83 36       	cpi	r24, 0x63	; 99
    3f74:	31 f0       	breq	.+12     	; 0x3f82 <vfprintf+0x140>
    3f76:	83 37       	cpi	r24, 0x73	; 115
    3f78:	71 f0       	breq	.+28     	; 0x3f96 <vfprintf+0x154>
    3f7a:	83 35       	cpi	r24, 0x53	; 83
    3f7c:	09 f0       	breq	.+2      	; 0x3f80 <vfprintf+0x13e>
    3f7e:	55 c0       	rjmp	.+170    	; 0x402a <vfprintf+0x1e8>
    3f80:	20 c0       	rjmp	.+64     	; 0x3fc2 <vfprintf+0x180>
    3f82:	f8 01       	movw	r30, r16
    3f84:	80 81       	ld	r24, Z
    3f86:	89 83       	std	Y+1, r24	; 0x01
    3f88:	0e 5f       	subi	r16, 0xFE	; 254
    3f8a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f8c:	88 24       	eor	r8, r8
    3f8e:	83 94       	inc	r8
    3f90:	91 2c       	mov	r9, r1
    3f92:	53 01       	movw	r10, r6
    3f94:	12 c0       	rjmp	.+36     	; 0x3fba <vfprintf+0x178>
    3f96:	28 01       	movw	r4, r16
    3f98:	f2 e0       	ldi	r31, 0x02	; 2
    3f9a:	4f 0e       	add	r4, r31
    3f9c:	51 1c       	adc	r5, r1
    3f9e:	f8 01       	movw	r30, r16
    3fa0:	a0 80       	ld	r10, Z
    3fa2:	b1 80       	ldd	r11, Z+1	; 0x01
    3fa4:	36 fe       	sbrs	r3, 6
    3fa6:	03 c0       	rjmp	.+6      	; 0x3fae <vfprintf+0x16c>
    3fa8:	69 2d       	mov	r22, r9
    3faa:	70 e0       	ldi	r23, 0x00	; 0
    3fac:	02 c0       	rjmp	.+4      	; 0x3fb2 <vfprintf+0x170>
    3fae:	6f ef       	ldi	r22, 0xFF	; 255
    3fb0:	7f ef       	ldi	r23, 0xFF	; 255
    3fb2:	c5 01       	movw	r24, r10
    3fb4:	11 d5       	rcall	.+2594   	; 0x49d8 <strnlen>
    3fb6:	4c 01       	movw	r8, r24
    3fb8:	82 01       	movw	r16, r4
    3fba:	f3 2d       	mov	r31, r3
    3fbc:	ff 77       	andi	r31, 0x7F	; 127
    3fbe:	3f 2e       	mov	r3, r31
    3fc0:	15 c0       	rjmp	.+42     	; 0x3fec <vfprintf+0x1aa>
    3fc2:	28 01       	movw	r4, r16
    3fc4:	22 e0       	ldi	r18, 0x02	; 2
    3fc6:	42 0e       	add	r4, r18
    3fc8:	51 1c       	adc	r5, r1
    3fca:	f8 01       	movw	r30, r16
    3fcc:	a0 80       	ld	r10, Z
    3fce:	b1 80       	ldd	r11, Z+1	; 0x01
    3fd0:	36 fe       	sbrs	r3, 6
    3fd2:	03 c0       	rjmp	.+6      	; 0x3fda <vfprintf+0x198>
    3fd4:	69 2d       	mov	r22, r9
    3fd6:	70 e0       	ldi	r23, 0x00	; 0
    3fd8:	02 c0       	rjmp	.+4      	; 0x3fde <vfprintf+0x19c>
    3fda:	6f ef       	ldi	r22, 0xFF	; 255
    3fdc:	7f ef       	ldi	r23, 0xFF	; 255
    3fde:	c5 01       	movw	r24, r10
    3fe0:	f0 d4       	rcall	.+2528   	; 0x49c2 <strnlen_P>
    3fe2:	4c 01       	movw	r8, r24
    3fe4:	f3 2d       	mov	r31, r3
    3fe6:	f0 68       	ori	r31, 0x80	; 128
    3fe8:	3f 2e       	mov	r3, r31
    3fea:	82 01       	movw	r16, r4
    3fec:	33 fc       	sbrc	r3, 3
    3fee:	19 c0       	rjmp	.+50     	; 0x4022 <vfprintf+0x1e0>
    3ff0:	82 2d       	mov	r24, r2
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	88 16       	cp	r8, r24
    3ff6:	99 06       	cpc	r9, r25
    3ff8:	a0 f4       	brcc	.+40     	; 0x4022 <vfprintf+0x1e0>
    3ffa:	b6 01       	movw	r22, r12
    3ffc:	80 e2       	ldi	r24, 0x20	; 32
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	f6 d4       	rcall	.+2540   	; 0x49ee <fputc>
    4002:	2a 94       	dec	r2
    4004:	f5 cf       	rjmp	.-22     	; 0x3ff0 <vfprintf+0x1ae>
    4006:	f5 01       	movw	r30, r10
    4008:	37 fc       	sbrc	r3, 7
    400a:	85 91       	lpm	r24, Z+
    400c:	37 fe       	sbrs	r3, 7
    400e:	81 91       	ld	r24, Z+
    4010:	5f 01       	movw	r10, r30
    4012:	b6 01       	movw	r22, r12
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	eb d4       	rcall	.+2518   	; 0x49ee <fputc>
    4018:	21 10       	cpse	r2, r1
    401a:	2a 94       	dec	r2
    401c:	21 e0       	ldi	r18, 0x01	; 1
    401e:	82 1a       	sub	r8, r18
    4020:	91 08       	sbc	r9, r1
    4022:	81 14       	cp	r8, r1
    4024:	91 04       	cpc	r9, r1
    4026:	79 f7       	brne	.-34     	; 0x4006 <vfprintf+0x1c4>
    4028:	e1 c0       	rjmp	.+450    	; 0x41ec <vfprintf+0x3aa>
    402a:	84 36       	cpi	r24, 0x64	; 100
    402c:	11 f0       	breq	.+4      	; 0x4032 <vfprintf+0x1f0>
    402e:	89 36       	cpi	r24, 0x69	; 105
    4030:	39 f5       	brne	.+78     	; 0x4080 <vfprintf+0x23e>
    4032:	f8 01       	movw	r30, r16
    4034:	37 fe       	sbrs	r3, 7
    4036:	07 c0       	rjmp	.+14     	; 0x4046 <vfprintf+0x204>
    4038:	60 81       	ld	r22, Z
    403a:	71 81       	ldd	r23, Z+1	; 0x01
    403c:	82 81       	ldd	r24, Z+2	; 0x02
    403e:	93 81       	ldd	r25, Z+3	; 0x03
    4040:	0c 5f       	subi	r16, 0xFC	; 252
    4042:	1f 4f       	sbci	r17, 0xFF	; 255
    4044:	08 c0       	rjmp	.+16     	; 0x4056 <vfprintf+0x214>
    4046:	60 81       	ld	r22, Z
    4048:	71 81       	ldd	r23, Z+1	; 0x01
    404a:	07 2e       	mov	r0, r23
    404c:	00 0c       	add	r0, r0
    404e:	88 0b       	sbc	r24, r24
    4050:	99 0b       	sbc	r25, r25
    4052:	0e 5f       	subi	r16, 0xFE	; 254
    4054:	1f 4f       	sbci	r17, 0xFF	; 255
    4056:	f3 2d       	mov	r31, r3
    4058:	ff 76       	andi	r31, 0x6F	; 111
    405a:	3f 2e       	mov	r3, r31
    405c:	97 ff       	sbrs	r25, 7
    405e:	09 c0       	rjmp	.+18     	; 0x4072 <vfprintf+0x230>
    4060:	90 95       	com	r25
    4062:	80 95       	com	r24
    4064:	70 95       	com	r23
    4066:	61 95       	neg	r22
    4068:	7f 4f       	sbci	r23, 0xFF	; 255
    406a:	8f 4f       	sbci	r24, 0xFF	; 255
    406c:	9f 4f       	sbci	r25, 0xFF	; 255
    406e:	f0 68       	ori	r31, 0x80	; 128
    4070:	3f 2e       	mov	r3, r31
    4072:	2a e0       	ldi	r18, 0x0A	; 10
    4074:	30 e0       	ldi	r19, 0x00	; 0
    4076:	a3 01       	movw	r20, r6
    4078:	f6 d4       	rcall	.+2540   	; 0x4a66 <__ultoa_invert>
    407a:	88 2e       	mov	r8, r24
    407c:	86 18       	sub	r8, r6
    407e:	44 c0       	rjmp	.+136    	; 0x4108 <vfprintf+0x2c6>
    4080:	85 37       	cpi	r24, 0x75	; 117
    4082:	31 f4       	brne	.+12     	; 0x4090 <vfprintf+0x24e>
    4084:	23 2d       	mov	r18, r3
    4086:	2f 7e       	andi	r18, 0xEF	; 239
    4088:	b2 2e       	mov	r11, r18
    408a:	2a e0       	ldi	r18, 0x0A	; 10
    408c:	30 e0       	ldi	r19, 0x00	; 0
    408e:	25 c0       	rjmp	.+74     	; 0x40da <vfprintf+0x298>
    4090:	93 2d       	mov	r25, r3
    4092:	99 7f       	andi	r25, 0xF9	; 249
    4094:	b9 2e       	mov	r11, r25
    4096:	8f 36       	cpi	r24, 0x6F	; 111
    4098:	c1 f0       	breq	.+48     	; 0x40ca <vfprintf+0x288>
    409a:	18 f4       	brcc	.+6      	; 0x40a2 <vfprintf+0x260>
    409c:	88 35       	cpi	r24, 0x58	; 88
    409e:	79 f0       	breq	.+30     	; 0x40be <vfprintf+0x27c>
    40a0:	ae c0       	rjmp	.+348    	; 0x41fe <vfprintf+0x3bc>
    40a2:	80 37       	cpi	r24, 0x70	; 112
    40a4:	19 f0       	breq	.+6      	; 0x40ac <vfprintf+0x26a>
    40a6:	88 37       	cpi	r24, 0x78	; 120
    40a8:	21 f0       	breq	.+8      	; 0x40b2 <vfprintf+0x270>
    40aa:	a9 c0       	rjmp	.+338    	; 0x41fe <vfprintf+0x3bc>
    40ac:	e9 2f       	mov	r30, r25
    40ae:	e0 61       	ori	r30, 0x10	; 16
    40b0:	be 2e       	mov	r11, r30
    40b2:	b4 fe       	sbrs	r11, 4
    40b4:	0d c0       	rjmp	.+26     	; 0x40d0 <vfprintf+0x28e>
    40b6:	fb 2d       	mov	r31, r11
    40b8:	f4 60       	ori	r31, 0x04	; 4
    40ba:	bf 2e       	mov	r11, r31
    40bc:	09 c0       	rjmp	.+18     	; 0x40d0 <vfprintf+0x28e>
    40be:	34 fe       	sbrs	r3, 4
    40c0:	0a c0       	rjmp	.+20     	; 0x40d6 <vfprintf+0x294>
    40c2:	29 2f       	mov	r18, r25
    40c4:	26 60       	ori	r18, 0x06	; 6
    40c6:	b2 2e       	mov	r11, r18
    40c8:	06 c0       	rjmp	.+12     	; 0x40d6 <vfprintf+0x294>
    40ca:	28 e0       	ldi	r18, 0x08	; 8
    40cc:	30 e0       	ldi	r19, 0x00	; 0
    40ce:	05 c0       	rjmp	.+10     	; 0x40da <vfprintf+0x298>
    40d0:	20 e1       	ldi	r18, 0x10	; 16
    40d2:	30 e0       	ldi	r19, 0x00	; 0
    40d4:	02 c0       	rjmp	.+4      	; 0x40da <vfprintf+0x298>
    40d6:	20 e1       	ldi	r18, 0x10	; 16
    40d8:	32 e0       	ldi	r19, 0x02	; 2
    40da:	f8 01       	movw	r30, r16
    40dc:	b7 fe       	sbrs	r11, 7
    40de:	07 c0       	rjmp	.+14     	; 0x40ee <vfprintf+0x2ac>
    40e0:	60 81       	ld	r22, Z
    40e2:	71 81       	ldd	r23, Z+1	; 0x01
    40e4:	82 81       	ldd	r24, Z+2	; 0x02
    40e6:	93 81       	ldd	r25, Z+3	; 0x03
    40e8:	0c 5f       	subi	r16, 0xFC	; 252
    40ea:	1f 4f       	sbci	r17, 0xFF	; 255
    40ec:	06 c0       	rjmp	.+12     	; 0x40fa <vfprintf+0x2b8>
    40ee:	60 81       	ld	r22, Z
    40f0:	71 81       	ldd	r23, Z+1	; 0x01
    40f2:	80 e0       	ldi	r24, 0x00	; 0
    40f4:	90 e0       	ldi	r25, 0x00	; 0
    40f6:	0e 5f       	subi	r16, 0xFE	; 254
    40f8:	1f 4f       	sbci	r17, 0xFF	; 255
    40fa:	a3 01       	movw	r20, r6
    40fc:	b4 d4       	rcall	.+2408   	; 0x4a66 <__ultoa_invert>
    40fe:	88 2e       	mov	r8, r24
    4100:	86 18       	sub	r8, r6
    4102:	fb 2d       	mov	r31, r11
    4104:	ff 77       	andi	r31, 0x7F	; 127
    4106:	3f 2e       	mov	r3, r31
    4108:	36 fe       	sbrs	r3, 6
    410a:	0d c0       	rjmp	.+26     	; 0x4126 <vfprintf+0x2e4>
    410c:	23 2d       	mov	r18, r3
    410e:	2e 7f       	andi	r18, 0xFE	; 254
    4110:	a2 2e       	mov	r10, r18
    4112:	89 14       	cp	r8, r9
    4114:	58 f4       	brcc	.+22     	; 0x412c <vfprintf+0x2ea>
    4116:	34 fe       	sbrs	r3, 4
    4118:	0b c0       	rjmp	.+22     	; 0x4130 <vfprintf+0x2ee>
    411a:	32 fc       	sbrc	r3, 2
    411c:	09 c0       	rjmp	.+18     	; 0x4130 <vfprintf+0x2ee>
    411e:	83 2d       	mov	r24, r3
    4120:	8e 7e       	andi	r24, 0xEE	; 238
    4122:	a8 2e       	mov	r10, r24
    4124:	05 c0       	rjmp	.+10     	; 0x4130 <vfprintf+0x2ee>
    4126:	b8 2c       	mov	r11, r8
    4128:	a3 2c       	mov	r10, r3
    412a:	03 c0       	rjmp	.+6      	; 0x4132 <vfprintf+0x2f0>
    412c:	b8 2c       	mov	r11, r8
    412e:	01 c0       	rjmp	.+2      	; 0x4132 <vfprintf+0x2f0>
    4130:	b9 2c       	mov	r11, r9
    4132:	a4 fe       	sbrs	r10, 4
    4134:	0f c0       	rjmp	.+30     	; 0x4154 <vfprintf+0x312>
    4136:	fe 01       	movw	r30, r28
    4138:	e8 0d       	add	r30, r8
    413a:	f1 1d       	adc	r31, r1
    413c:	80 81       	ld	r24, Z
    413e:	80 33       	cpi	r24, 0x30	; 48
    4140:	21 f4       	brne	.+8      	; 0x414a <vfprintf+0x308>
    4142:	9a 2d       	mov	r25, r10
    4144:	99 7e       	andi	r25, 0xE9	; 233
    4146:	a9 2e       	mov	r10, r25
    4148:	09 c0       	rjmp	.+18     	; 0x415c <vfprintf+0x31a>
    414a:	a2 fe       	sbrs	r10, 2
    414c:	06 c0       	rjmp	.+12     	; 0x415a <vfprintf+0x318>
    414e:	b3 94       	inc	r11
    4150:	b3 94       	inc	r11
    4152:	04 c0       	rjmp	.+8      	; 0x415c <vfprintf+0x31a>
    4154:	8a 2d       	mov	r24, r10
    4156:	86 78       	andi	r24, 0x86	; 134
    4158:	09 f0       	breq	.+2      	; 0x415c <vfprintf+0x31a>
    415a:	b3 94       	inc	r11
    415c:	a3 fc       	sbrc	r10, 3
    415e:	10 c0       	rjmp	.+32     	; 0x4180 <vfprintf+0x33e>
    4160:	a0 fe       	sbrs	r10, 0
    4162:	06 c0       	rjmp	.+12     	; 0x4170 <vfprintf+0x32e>
    4164:	b2 14       	cp	r11, r2
    4166:	80 f4       	brcc	.+32     	; 0x4188 <vfprintf+0x346>
    4168:	28 0c       	add	r2, r8
    416a:	92 2c       	mov	r9, r2
    416c:	9b 18       	sub	r9, r11
    416e:	0d c0       	rjmp	.+26     	; 0x418a <vfprintf+0x348>
    4170:	b2 14       	cp	r11, r2
    4172:	58 f4       	brcc	.+22     	; 0x418a <vfprintf+0x348>
    4174:	b6 01       	movw	r22, r12
    4176:	80 e2       	ldi	r24, 0x20	; 32
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	39 d4       	rcall	.+2162   	; 0x49ee <fputc>
    417c:	b3 94       	inc	r11
    417e:	f8 cf       	rjmp	.-16     	; 0x4170 <vfprintf+0x32e>
    4180:	b2 14       	cp	r11, r2
    4182:	18 f4       	brcc	.+6      	; 0x418a <vfprintf+0x348>
    4184:	2b 18       	sub	r2, r11
    4186:	02 c0       	rjmp	.+4      	; 0x418c <vfprintf+0x34a>
    4188:	98 2c       	mov	r9, r8
    418a:	21 2c       	mov	r2, r1
    418c:	a4 fe       	sbrs	r10, 4
    418e:	0f c0       	rjmp	.+30     	; 0x41ae <vfprintf+0x36c>
    4190:	b6 01       	movw	r22, r12
    4192:	80 e3       	ldi	r24, 0x30	; 48
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	2b d4       	rcall	.+2134   	; 0x49ee <fputc>
    4198:	a2 fe       	sbrs	r10, 2
    419a:	16 c0       	rjmp	.+44     	; 0x41c8 <vfprintf+0x386>
    419c:	a1 fc       	sbrc	r10, 1
    419e:	03 c0       	rjmp	.+6      	; 0x41a6 <vfprintf+0x364>
    41a0:	88 e7       	ldi	r24, 0x78	; 120
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	02 c0       	rjmp	.+4      	; 0x41aa <vfprintf+0x368>
    41a6:	88 e5       	ldi	r24, 0x58	; 88
    41a8:	90 e0       	ldi	r25, 0x00	; 0
    41aa:	b6 01       	movw	r22, r12
    41ac:	0c c0       	rjmp	.+24     	; 0x41c6 <vfprintf+0x384>
    41ae:	8a 2d       	mov	r24, r10
    41b0:	86 78       	andi	r24, 0x86	; 134
    41b2:	51 f0       	breq	.+20     	; 0x41c8 <vfprintf+0x386>
    41b4:	a1 fe       	sbrs	r10, 1
    41b6:	02 c0       	rjmp	.+4      	; 0x41bc <vfprintf+0x37a>
    41b8:	8b e2       	ldi	r24, 0x2B	; 43
    41ba:	01 c0       	rjmp	.+2      	; 0x41be <vfprintf+0x37c>
    41bc:	80 e2       	ldi	r24, 0x20	; 32
    41be:	a7 fc       	sbrc	r10, 7
    41c0:	8d e2       	ldi	r24, 0x2D	; 45
    41c2:	b6 01       	movw	r22, r12
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	13 d4       	rcall	.+2086   	; 0x49ee <fputc>
    41c8:	89 14       	cp	r8, r9
    41ca:	30 f4       	brcc	.+12     	; 0x41d8 <vfprintf+0x396>
    41cc:	b6 01       	movw	r22, r12
    41ce:	80 e3       	ldi	r24, 0x30	; 48
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	0d d4       	rcall	.+2074   	; 0x49ee <fputc>
    41d4:	9a 94       	dec	r9
    41d6:	f8 cf       	rjmp	.-16     	; 0x41c8 <vfprintf+0x386>
    41d8:	8a 94       	dec	r8
    41da:	f3 01       	movw	r30, r6
    41dc:	e8 0d       	add	r30, r8
    41de:	f1 1d       	adc	r31, r1
    41e0:	80 81       	ld	r24, Z
    41e2:	b6 01       	movw	r22, r12
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	03 d4       	rcall	.+2054   	; 0x49ee <fputc>
    41e8:	81 10       	cpse	r8, r1
    41ea:	f6 cf       	rjmp	.-20     	; 0x41d8 <vfprintf+0x396>
    41ec:	22 20       	and	r2, r2
    41ee:	09 f4       	brne	.+2      	; 0x41f2 <vfprintf+0x3b0>
    41f0:	4e ce       	rjmp	.-868    	; 0x3e8e <vfprintf+0x4c>
    41f2:	b6 01       	movw	r22, r12
    41f4:	80 e2       	ldi	r24, 0x20	; 32
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	fa d3       	rcall	.+2036   	; 0x49ee <fputc>
    41fa:	2a 94       	dec	r2
    41fc:	f7 cf       	rjmp	.-18     	; 0x41ec <vfprintf+0x3aa>
    41fe:	f6 01       	movw	r30, r12
    4200:	86 81       	ldd	r24, Z+6	; 0x06
    4202:	97 81       	ldd	r25, Z+7	; 0x07
    4204:	02 c0       	rjmp	.+4      	; 0x420a <vfprintf+0x3c8>
    4206:	8f ef       	ldi	r24, 0xFF	; 255
    4208:	9f ef       	ldi	r25, 0xFF	; 255
    420a:	2b 96       	adiw	r28, 0x0b	; 11
    420c:	0f b6       	in	r0, 0x3f	; 63
    420e:	f8 94       	cli
    4210:	de bf       	out	0x3e, r29	; 62
    4212:	0f be       	out	0x3f, r0	; 63
    4214:	cd bf       	out	0x3d, r28	; 61
    4216:	df 91       	pop	r29
    4218:	cf 91       	pop	r28
    421a:	1f 91       	pop	r17
    421c:	0f 91       	pop	r16
    421e:	ff 90       	pop	r15
    4220:	ef 90       	pop	r14
    4222:	df 90       	pop	r13
    4224:	cf 90       	pop	r12
    4226:	bf 90       	pop	r11
    4228:	af 90       	pop	r10
    422a:	9f 90       	pop	r9
    422c:	8f 90       	pop	r8
    422e:	7f 90       	pop	r7
    4230:	6f 90       	pop	r6
    4232:	5f 90       	pop	r5
    4234:	4f 90       	pop	r4
    4236:	3f 90       	pop	r3
    4238:	2f 90       	pop	r2
    423a:	08 95       	ret

0000423c <dtoa_prf>:
    423c:	8f 92       	push	r8
    423e:	9f 92       	push	r9
    4240:	af 92       	push	r10
    4242:	bf 92       	push	r11
    4244:	cf 92       	push	r12
    4246:	df 92       	push	r13
    4248:	ef 92       	push	r14
    424a:	ff 92       	push	r15
    424c:	0f 93       	push	r16
    424e:	1f 93       	push	r17
    4250:	cf 93       	push	r28
    4252:	df 93       	push	r29
    4254:	cd b7       	in	r28, 0x3d	; 61
    4256:	de b7       	in	r29, 0x3e	; 62
    4258:	29 97       	sbiw	r28, 0x09	; 9
    425a:	0f b6       	in	r0, 0x3f	; 63
    425c:	f8 94       	cli
    425e:	de bf       	out	0x3e, r29	; 62
    4260:	0f be       	out	0x3f, r0	; 63
    4262:	cd bf       	out	0x3d, r28	; 61
    4264:	6a 01       	movw	r12, r20
    4266:	12 2f       	mov	r17, r18
    4268:	b0 2e       	mov	r11, r16
    426a:	2b e3       	ldi	r18, 0x3B	; 59
    426c:	20 17       	cp	r18, r16
    426e:	20 f0       	brcs	.+8      	; 0x4278 <dtoa_prf+0x3c>
    4270:	ff 24       	eor	r15, r15
    4272:	f3 94       	inc	r15
    4274:	f0 0e       	add	r15, r16
    4276:	02 c0       	rjmp	.+4      	; 0x427c <dtoa_prf+0x40>
    4278:	2c e3       	ldi	r18, 0x3C	; 60
    427a:	f2 2e       	mov	r15, r18
    427c:	0f 2d       	mov	r16, r15
    427e:	27 e0       	ldi	r18, 0x07	; 7
    4280:	ae 01       	movw	r20, r28
    4282:	4f 5f       	subi	r20, 0xFF	; 255
    4284:	5f 4f       	sbci	r21, 0xFF	; 255
    4286:	a5 d2       	rcall	.+1354   	; 0x47d2 <__ftoa_engine>
    4288:	bc 01       	movw	r22, r24
    428a:	49 81       	ldd	r20, Y+1	; 0x01
    428c:	84 2f       	mov	r24, r20
    428e:	89 70       	andi	r24, 0x09	; 9
    4290:	81 30       	cpi	r24, 0x01	; 1
    4292:	31 f0       	breq	.+12     	; 0x42a0 <dtoa_prf+0x64>
    4294:	e1 fc       	sbrc	r14, 1
    4296:	06 c0       	rjmp	.+12     	; 0x42a4 <dtoa_prf+0x68>
    4298:	e0 fe       	sbrs	r14, 0
    429a:	06 c0       	rjmp	.+12     	; 0x42a8 <dtoa_prf+0x6c>
    429c:	90 e2       	ldi	r25, 0x20	; 32
    429e:	05 c0       	rjmp	.+10     	; 0x42aa <dtoa_prf+0x6e>
    42a0:	9d e2       	ldi	r25, 0x2D	; 45
    42a2:	03 c0       	rjmp	.+6      	; 0x42aa <dtoa_prf+0x6e>
    42a4:	9b e2       	ldi	r25, 0x2B	; 43
    42a6:	01 c0       	rjmp	.+2      	; 0x42aa <dtoa_prf+0x6e>
    42a8:	90 e0       	ldi	r25, 0x00	; 0
    42aa:	5e 2d       	mov	r21, r14
    42ac:	50 71       	andi	r21, 0x10	; 16
    42ae:	43 ff       	sbrs	r20, 3
    42b0:	3c c0       	rjmp	.+120    	; 0x432a <dtoa_prf+0xee>
    42b2:	91 11       	cpse	r25, r1
    42b4:	02 c0       	rjmp	.+4      	; 0x42ba <dtoa_prf+0x7e>
    42b6:	83 e0       	ldi	r24, 0x03	; 3
    42b8:	01 c0       	rjmp	.+2      	; 0x42bc <dtoa_prf+0x80>
    42ba:	84 e0       	ldi	r24, 0x04	; 4
    42bc:	81 17       	cp	r24, r17
    42be:	18 f4       	brcc	.+6      	; 0x42c6 <dtoa_prf+0x8a>
    42c0:	21 2f       	mov	r18, r17
    42c2:	28 1b       	sub	r18, r24
    42c4:	01 c0       	rjmp	.+2      	; 0x42c8 <dtoa_prf+0x8c>
    42c6:	20 e0       	ldi	r18, 0x00	; 0
    42c8:	51 11       	cpse	r21, r1
    42ca:	0b c0       	rjmp	.+22     	; 0x42e2 <dtoa_prf+0xa6>
    42cc:	f6 01       	movw	r30, r12
    42ce:	82 2f       	mov	r24, r18
    42d0:	30 e2       	ldi	r19, 0x20	; 32
    42d2:	88 23       	and	r24, r24
    42d4:	19 f0       	breq	.+6      	; 0x42dc <dtoa_prf+0xa0>
    42d6:	31 93       	st	Z+, r19
    42d8:	81 50       	subi	r24, 0x01	; 1
    42da:	fb cf       	rjmp	.-10     	; 0x42d2 <dtoa_prf+0x96>
    42dc:	c2 0e       	add	r12, r18
    42de:	d1 1c       	adc	r13, r1
    42e0:	20 e0       	ldi	r18, 0x00	; 0
    42e2:	99 23       	and	r25, r25
    42e4:	29 f0       	breq	.+10     	; 0x42f0 <dtoa_prf+0xb4>
    42e6:	d6 01       	movw	r26, r12
    42e8:	9c 93       	st	X, r25
    42ea:	f6 01       	movw	r30, r12
    42ec:	31 96       	adiw	r30, 0x01	; 1
    42ee:	6f 01       	movw	r12, r30
    42f0:	c6 01       	movw	r24, r12
    42f2:	03 96       	adiw	r24, 0x03	; 3
    42f4:	e2 fe       	sbrs	r14, 2
    42f6:	0a c0       	rjmp	.+20     	; 0x430c <dtoa_prf+0xd0>
    42f8:	3e e4       	ldi	r19, 0x4E	; 78
    42fa:	d6 01       	movw	r26, r12
    42fc:	3c 93       	st	X, r19
    42fe:	41 e4       	ldi	r20, 0x41	; 65
    4300:	11 96       	adiw	r26, 0x01	; 1
    4302:	4c 93       	st	X, r20
    4304:	11 97       	sbiw	r26, 0x01	; 1
    4306:	12 96       	adiw	r26, 0x02	; 2
    4308:	3c 93       	st	X, r19
    430a:	06 c0       	rjmp	.+12     	; 0x4318 <dtoa_prf+0xdc>
    430c:	3e e6       	ldi	r19, 0x6E	; 110
    430e:	f6 01       	movw	r30, r12
    4310:	30 83       	st	Z, r19
    4312:	41 e6       	ldi	r20, 0x61	; 97
    4314:	41 83       	std	Z+1, r20	; 0x01
    4316:	32 83       	std	Z+2, r19	; 0x02
    4318:	fc 01       	movw	r30, r24
    431a:	32 2f       	mov	r19, r18
    431c:	40 e2       	ldi	r20, 0x20	; 32
    431e:	33 23       	and	r19, r19
    4320:	09 f4       	brne	.+2      	; 0x4324 <dtoa_prf+0xe8>
    4322:	42 c0       	rjmp	.+132    	; 0x43a8 <dtoa_prf+0x16c>
    4324:	41 93       	st	Z+, r20
    4326:	31 50       	subi	r19, 0x01	; 1
    4328:	fa cf       	rjmp	.-12     	; 0x431e <dtoa_prf+0xe2>
    432a:	42 ff       	sbrs	r20, 2
    432c:	44 c0       	rjmp	.+136    	; 0x43b6 <dtoa_prf+0x17a>
    432e:	91 11       	cpse	r25, r1
    4330:	02 c0       	rjmp	.+4      	; 0x4336 <dtoa_prf+0xfa>
    4332:	83 e0       	ldi	r24, 0x03	; 3
    4334:	01 c0       	rjmp	.+2      	; 0x4338 <dtoa_prf+0xfc>
    4336:	84 e0       	ldi	r24, 0x04	; 4
    4338:	81 17       	cp	r24, r17
    433a:	18 f4       	brcc	.+6      	; 0x4342 <dtoa_prf+0x106>
    433c:	21 2f       	mov	r18, r17
    433e:	28 1b       	sub	r18, r24
    4340:	01 c0       	rjmp	.+2      	; 0x4344 <dtoa_prf+0x108>
    4342:	20 e0       	ldi	r18, 0x00	; 0
    4344:	51 11       	cpse	r21, r1
    4346:	0b c0       	rjmp	.+22     	; 0x435e <dtoa_prf+0x122>
    4348:	f6 01       	movw	r30, r12
    434a:	82 2f       	mov	r24, r18
    434c:	30 e2       	ldi	r19, 0x20	; 32
    434e:	88 23       	and	r24, r24
    4350:	19 f0       	breq	.+6      	; 0x4358 <dtoa_prf+0x11c>
    4352:	31 93       	st	Z+, r19
    4354:	81 50       	subi	r24, 0x01	; 1
    4356:	fb cf       	rjmp	.-10     	; 0x434e <dtoa_prf+0x112>
    4358:	c2 0e       	add	r12, r18
    435a:	d1 1c       	adc	r13, r1
    435c:	20 e0       	ldi	r18, 0x00	; 0
    435e:	99 23       	and	r25, r25
    4360:	29 f0       	breq	.+10     	; 0x436c <dtoa_prf+0x130>
    4362:	d6 01       	movw	r26, r12
    4364:	9c 93       	st	X, r25
    4366:	f6 01       	movw	r30, r12
    4368:	31 96       	adiw	r30, 0x01	; 1
    436a:	6f 01       	movw	r12, r30
    436c:	c6 01       	movw	r24, r12
    436e:	03 96       	adiw	r24, 0x03	; 3
    4370:	e2 fe       	sbrs	r14, 2
    4372:	0b c0       	rjmp	.+22     	; 0x438a <dtoa_prf+0x14e>
    4374:	39 e4       	ldi	r19, 0x49	; 73
    4376:	d6 01       	movw	r26, r12
    4378:	3c 93       	st	X, r19
    437a:	3e e4       	ldi	r19, 0x4E	; 78
    437c:	11 96       	adiw	r26, 0x01	; 1
    437e:	3c 93       	st	X, r19
    4380:	11 97       	sbiw	r26, 0x01	; 1
    4382:	36 e4       	ldi	r19, 0x46	; 70
    4384:	12 96       	adiw	r26, 0x02	; 2
    4386:	3c 93       	st	X, r19
    4388:	07 c0       	rjmp	.+14     	; 0x4398 <dtoa_prf+0x15c>
    438a:	39 e6       	ldi	r19, 0x69	; 105
    438c:	f6 01       	movw	r30, r12
    438e:	30 83       	st	Z, r19
    4390:	3e e6       	ldi	r19, 0x6E	; 110
    4392:	31 83       	std	Z+1, r19	; 0x01
    4394:	36 e6       	ldi	r19, 0x66	; 102
    4396:	32 83       	std	Z+2, r19	; 0x02
    4398:	fc 01       	movw	r30, r24
    439a:	32 2f       	mov	r19, r18
    439c:	40 e2       	ldi	r20, 0x20	; 32
    439e:	33 23       	and	r19, r19
    43a0:	19 f0       	breq	.+6      	; 0x43a8 <dtoa_prf+0x16c>
    43a2:	41 93       	st	Z+, r20
    43a4:	31 50       	subi	r19, 0x01	; 1
    43a6:	fb cf       	rjmp	.-10     	; 0x439e <dtoa_prf+0x162>
    43a8:	fc 01       	movw	r30, r24
    43aa:	e2 0f       	add	r30, r18
    43ac:	f1 1d       	adc	r31, r1
    43ae:	10 82       	st	Z, r1
    43b0:	8e ef       	ldi	r24, 0xFE	; 254
    43b2:	9f ef       	ldi	r25, 0xFF	; 255
    43b4:	a6 c0       	rjmp	.+332    	; 0x4502 <dtoa_prf+0x2c6>
    43b6:	21 e0       	ldi	r18, 0x01	; 1
    43b8:	30 e0       	ldi	r19, 0x00	; 0
    43ba:	91 11       	cpse	r25, r1
    43bc:	02 c0       	rjmp	.+4      	; 0x43c2 <dtoa_prf+0x186>
    43be:	20 e0       	ldi	r18, 0x00	; 0
    43c0:	30 e0       	ldi	r19, 0x00	; 0
    43c2:	16 16       	cp	r1, r22
    43c4:	17 06       	cpc	r1, r23
    43c6:	1c f4       	brge	.+6      	; 0x43ce <dtoa_prf+0x192>
    43c8:	fb 01       	movw	r30, r22
    43ca:	31 96       	adiw	r30, 0x01	; 1
    43cc:	02 c0       	rjmp	.+4      	; 0x43d2 <dtoa_prf+0x196>
    43ce:	e1 e0       	ldi	r30, 0x01	; 1
    43d0:	f0 e0       	ldi	r31, 0x00	; 0
    43d2:	2e 0f       	add	r18, r30
    43d4:	3f 1f       	adc	r19, r31
    43d6:	bb 20       	and	r11, r11
    43d8:	21 f0       	breq	.+8      	; 0x43e2 <dtoa_prf+0x1a6>
    43da:	eb 2d       	mov	r30, r11
    43dc:	f0 e0       	ldi	r31, 0x00	; 0
    43de:	31 96       	adiw	r30, 0x01	; 1
    43e0:	02 c0       	rjmp	.+4      	; 0x43e6 <dtoa_prf+0x1aa>
    43e2:	e0 e0       	ldi	r30, 0x00	; 0
    43e4:	f0 e0       	ldi	r31, 0x00	; 0
    43e6:	2e 0f       	add	r18, r30
    43e8:	3f 1f       	adc	r19, r31
    43ea:	e1 2f       	mov	r30, r17
    43ec:	f0 e0       	ldi	r31, 0x00	; 0
    43ee:	2e 17       	cp	r18, r30
    43f0:	3f 07       	cpc	r19, r31
    43f2:	1c f4       	brge	.+6      	; 0x43fa <dtoa_prf+0x1be>
    43f4:	12 1b       	sub	r17, r18
    43f6:	21 2f       	mov	r18, r17
    43f8:	01 c0       	rjmp	.+2      	; 0x43fc <dtoa_prf+0x1c0>
    43fa:	20 e0       	ldi	r18, 0x00	; 0
    43fc:	8e 2d       	mov	r24, r14
    43fe:	88 71       	andi	r24, 0x18	; 24
    4400:	59 f4       	brne	.+22     	; 0x4418 <dtoa_prf+0x1dc>
    4402:	f6 01       	movw	r30, r12
    4404:	82 2f       	mov	r24, r18
    4406:	30 e2       	ldi	r19, 0x20	; 32
    4408:	88 23       	and	r24, r24
    440a:	19 f0       	breq	.+6      	; 0x4412 <dtoa_prf+0x1d6>
    440c:	31 93       	st	Z+, r19
    440e:	81 50       	subi	r24, 0x01	; 1
    4410:	fb cf       	rjmp	.-10     	; 0x4408 <dtoa_prf+0x1cc>
    4412:	c2 0e       	add	r12, r18
    4414:	d1 1c       	adc	r13, r1
    4416:	20 e0       	ldi	r18, 0x00	; 0
    4418:	99 23       	and	r25, r25
    441a:	29 f0       	breq	.+10     	; 0x4426 <dtoa_prf+0x1ea>
    441c:	d6 01       	movw	r26, r12
    441e:	9c 93       	st	X, r25
    4420:	f6 01       	movw	r30, r12
    4422:	31 96       	adiw	r30, 0x01	; 1
    4424:	6f 01       	movw	r12, r30
    4426:	51 11       	cpse	r21, r1
    4428:	0b c0       	rjmp	.+22     	; 0x4440 <dtoa_prf+0x204>
    442a:	f6 01       	movw	r30, r12
    442c:	82 2f       	mov	r24, r18
    442e:	90 e3       	ldi	r25, 0x30	; 48
    4430:	88 23       	and	r24, r24
    4432:	19 f0       	breq	.+6      	; 0x443a <dtoa_prf+0x1fe>
    4434:	91 93       	st	Z+, r25
    4436:	81 50       	subi	r24, 0x01	; 1
    4438:	fb cf       	rjmp	.-10     	; 0x4430 <dtoa_prf+0x1f4>
    443a:	c2 0e       	add	r12, r18
    443c:	d1 1c       	adc	r13, r1
    443e:	20 e0       	ldi	r18, 0x00	; 0
    4440:	0f 2d       	mov	r16, r15
    4442:	06 0f       	add	r16, r22
    4444:	9a 81       	ldd	r25, Y+2	; 0x02
    4446:	34 2f       	mov	r19, r20
    4448:	30 71       	andi	r19, 0x10	; 16
    444a:	44 ff       	sbrs	r20, 4
    444c:	03 c0       	rjmp	.+6      	; 0x4454 <dtoa_prf+0x218>
    444e:	91 33       	cpi	r25, 0x31	; 49
    4450:	09 f4       	brne	.+2      	; 0x4454 <dtoa_prf+0x218>
    4452:	01 50       	subi	r16, 0x01	; 1
    4454:	10 16       	cp	r1, r16
    4456:	24 f4       	brge	.+8      	; 0x4460 <dtoa_prf+0x224>
    4458:	09 30       	cpi	r16, 0x09	; 9
    445a:	18 f0       	brcs	.+6      	; 0x4462 <dtoa_prf+0x226>
    445c:	08 e0       	ldi	r16, 0x08	; 8
    445e:	01 c0       	rjmp	.+2      	; 0x4462 <dtoa_prf+0x226>
    4460:	01 e0       	ldi	r16, 0x01	; 1
    4462:	ab 01       	movw	r20, r22
    4464:	77 ff       	sbrs	r23, 7
    4466:	02 c0       	rjmp	.+4      	; 0x446c <dtoa_prf+0x230>
    4468:	40 e0       	ldi	r20, 0x00	; 0
    446a:	50 e0       	ldi	r21, 0x00	; 0
    446c:	fb 01       	movw	r30, r22
    446e:	e4 1b       	sub	r30, r20
    4470:	f5 0b       	sbc	r31, r21
    4472:	a1 e0       	ldi	r26, 0x01	; 1
    4474:	b0 e0       	ldi	r27, 0x00	; 0
    4476:	ac 0f       	add	r26, r28
    4478:	bd 1f       	adc	r27, r29
    447a:	ea 0f       	add	r30, r26
    447c:	fb 1f       	adc	r31, r27
    447e:	8e e2       	ldi	r24, 0x2E	; 46
    4480:	a8 2e       	mov	r10, r24
    4482:	4b 01       	movw	r8, r22
    4484:	80 1a       	sub	r8, r16
    4486:	91 08       	sbc	r9, r1
    4488:	0b 2d       	mov	r16, r11
    448a:	10 e0       	ldi	r17, 0x00	; 0
    448c:	11 95       	neg	r17
    448e:	01 95       	neg	r16
    4490:	11 09       	sbc	r17, r1
    4492:	4f 3f       	cpi	r20, 0xFF	; 255
    4494:	bf ef       	ldi	r27, 0xFF	; 255
    4496:	5b 07       	cpc	r21, r27
    4498:	21 f4       	brne	.+8      	; 0x44a2 <dtoa_prf+0x266>
    449a:	d6 01       	movw	r26, r12
    449c:	ac 92       	st	X, r10
    449e:	11 96       	adiw	r26, 0x01	; 1
    44a0:	6d 01       	movw	r12, r26
    44a2:	64 17       	cp	r22, r20
    44a4:	75 07       	cpc	r23, r21
    44a6:	2c f0       	brlt	.+10     	; 0x44b2 <dtoa_prf+0x276>
    44a8:	84 16       	cp	r8, r20
    44aa:	95 06       	cpc	r9, r21
    44ac:	14 f4       	brge	.+4      	; 0x44b2 <dtoa_prf+0x276>
    44ae:	81 81       	ldd	r24, Z+1	; 0x01
    44b0:	01 c0       	rjmp	.+2      	; 0x44b4 <dtoa_prf+0x278>
    44b2:	80 e3       	ldi	r24, 0x30	; 48
    44b4:	41 50       	subi	r20, 0x01	; 1
    44b6:	51 09       	sbc	r21, r1
    44b8:	31 96       	adiw	r30, 0x01	; 1
    44ba:	d6 01       	movw	r26, r12
    44bc:	11 96       	adiw	r26, 0x01	; 1
    44be:	7d 01       	movw	r14, r26
    44c0:	40 17       	cp	r20, r16
    44c2:	51 07       	cpc	r21, r17
    44c4:	24 f0       	brlt	.+8      	; 0x44ce <dtoa_prf+0x292>
    44c6:	d6 01       	movw	r26, r12
    44c8:	8c 93       	st	X, r24
    44ca:	67 01       	movw	r12, r14
    44cc:	e2 cf       	rjmp	.-60     	; 0x4492 <dtoa_prf+0x256>
    44ce:	64 17       	cp	r22, r20
    44d0:	75 07       	cpc	r23, r21
    44d2:	39 f4       	brne	.+14     	; 0x44e2 <dtoa_prf+0x2a6>
    44d4:	96 33       	cpi	r25, 0x36	; 54
    44d6:	20 f4       	brcc	.+8      	; 0x44e0 <dtoa_prf+0x2a4>
    44d8:	95 33       	cpi	r25, 0x35	; 53
    44da:	19 f4       	brne	.+6      	; 0x44e2 <dtoa_prf+0x2a6>
    44dc:	31 11       	cpse	r19, r1
    44de:	01 c0       	rjmp	.+2      	; 0x44e2 <dtoa_prf+0x2a6>
    44e0:	81 e3       	ldi	r24, 0x31	; 49
    44e2:	f6 01       	movw	r30, r12
    44e4:	80 83       	st	Z, r24
    44e6:	f7 01       	movw	r30, r14
    44e8:	82 2f       	mov	r24, r18
    44ea:	90 e2       	ldi	r25, 0x20	; 32
    44ec:	88 23       	and	r24, r24
    44ee:	19 f0       	breq	.+6      	; 0x44f6 <dtoa_prf+0x2ba>
    44f0:	91 93       	st	Z+, r25
    44f2:	81 50       	subi	r24, 0x01	; 1
    44f4:	fb cf       	rjmp	.-10     	; 0x44ec <dtoa_prf+0x2b0>
    44f6:	f7 01       	movw	r30, r14
    44f8:	e2 0f       	add	r30, r18
    44fa:	f1 1d       	adc	r31, r1
    44fc:	10 82       	st	Z, r1
    44fe:	80 e0       	ldi	r24, 0x00	; 0
    4500:	90 e0       	ldi	r25, 0x00	; 0
    4502:	29 96       	adiw	r28, 0x09	; 9
    4504:	0f b6       	in	r0, 0x3f	; 63
    4506:	f8 94       	cli
    4508:	de bf       	out	0x3e, r29	; 62
    450a:	0f be       	out	0x3f, r0	; 63
    450c:	cd bf       	out	0x3d, r28	; 61
    450e:	df 91       	pop	r29
    4510:	cf 91       	pop	r28
    4512:	1f 91       	pop	r17
    4514:	0f 91       	pop	r16
    4516:	ff 90       	pop	r15
    4518:	ef 90       	pop	r14
    451a:	df 90       	pop	r13
    451c:	cf 90       	pop	r12
    451e:	bf 90       	pop	r11
    4520:	af 90       	pop	r10
    4522:	9f 90       	pop	r9
    4524:	8f 90       	pop	r8
    4526:	08 95       	ret

00004528 <strtod>:
    4528:	8f 92       	push	r8
    452a:	9f 92       	push	r9
    452c:	af 92       	push	r10
    452e:	bf 92       	push	r11
    4530:	cf 92       	push	r12
    4532:	df 92       	push	r13
    4534:	ef 92       	push	r14
    4536:	ff 92       	push	r15
    4538:	0f 93       	push	r16
    453a:	1f 93       	push	r17
    453c:	cf 93       	push	r28
    453e:	df 93       	push	r29
    4540:	ec 01       	movw	r28, r24
    4542:	6b 01       	movw	r12, r22
    4544:	61 15       	cp	r22, r1
    4546:	71 05       	cpc	r23, r1
    4548:	19 f0       	breq	.+6      	; 0x4550 <strtod+0x28>
    454a:	fb 01       	movw	r30, r22
    454c:	91 83       	std	Z+1, r25	; 0x01
    454e:	80 83       	st	Z, r24
    4550:	7e 01       	movw	r14, r28
    4552:	ff ef       	ldi	r31, 0xFF	; 255
    4554:	ef 1a       	sub	r14, r31
    4556:	ff 0a       	sbc	r15, r31
    4558:	08 81       	ld	r16, Y
    455a:	80 2f       	mov	r24, r16
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	11 d2       	rcall	.+1058   	; 0x4982 <isspace>
    4560:	89 2b       	or	r24, r25
    4562:	11 f0       	breq	.+4      	; 0x4568 <strtod+0x40>
    4564:	e7 01       	movw	r28, r14
    4566:	f4 cf       	rjmp	.-24     	; 0x4550 <strtod+0x28>
    4568:	0d 32       	cpi	r16, 0x2D	; 45
    456a:	39 f4       	brne	.+14     	; 0x457a <strtod+0x52>
    456c:	7e 01       	movw	r14, r28
    456e:	82 e0       	ldi	r24, 0x02	; 2
    4570:	e8 0e       	add	r14, r24
    4572:	f1 1c       	adc	r15, r1
    4574:	09 81       	ldd	r16, Y+1	; 0x01
    4576:	11 e0       	ldi	r17, 0x01	; 1
    4578:	08 c0       	rjmp	.+16     	; 0x458a <strtod+0x62>
    457a:	0b 32       	cpi	r16, 0x2B	; 43
    457c:	29 f4       	brne	.+10     	; 0x4588 <strtod+0x60>
    457e:	7e 01       	movw	r14, r28
    4580:	92 e0       	ldi	r25, 0x02	; 2
    4582:	e9 0e       	add	r14, r25
    4584:	f1 1c       	adc	r15, r1
    4586:	09 81       	ldd	r16, Y+1	; 0x01
    4588:	10 e0       	ldi	r17, 0x00	; 0
    458a:	e7 01       	movw	r28, r14
    458c:	21 97       	sbiw	r28, 0x01	; 1
    458e:	43 e0       	ldi	r20, 0x03	; 3
    4590:	50 e0       	ldi	r21, 0x00	; 0
    4592:	66 e2       	ldi	r22, 0x26	; 38
    4594:	71 e0       	ldi	r23, 0x01	; 1
    4596:	ce 01       	movw	r24, r28
    4598:	fc d1       	rcall	.+1016   	; 0x4992 <strncasecmp_P>
    459a:	89 2b       	or	r24, r25
    459c:	b9 f4       	brne	.+46     	; 0x45cc <strtod+0xa4>
    459e:	23 96       	adiw	r28, 0x03	; 3
    45a0:	45 e0       	ldi	r20, 0x05	; 5
    45a2:	50 e0       	ldi	r21, 0x00	; 0
    45a4:	61 e2       	ldi	r22, 0x21	; 33
    45a6:	71 e0       	ldi	r23, 0x01	; 1
    45a8:	ce 01       	movw	r24, r28
    45aa:	f3 d1       	rcall	.+998    	; 0x4992 <strncasecmp_P>
    45ac:	89 2b       	or	r24, r25
    45ae:	09 f4       	brne	.+2      	; 0x45b2 <strtod+0x8a>
    45b0:	25 96       	adiw	r28, 0x05	; 5
    45b2:	c1 14       	cp	r12, r1
    45b4:	d1 04       	cpc	r13, r1
    45b6:	19 f0       	breq	.+6      	; 0x45be <strtod+0x96>
    45b8:	f6 01       	movw	r30, r12
    45ba:	d1 83       	std	Z+1, r29	; 0x01
    45bc:	c0 83       	st	Z, r28
    45be:	11 11       	cpse	r17, r1
    45c0:	f2 c0       	rjmp	.+484    	; 0x47a6 <strtod+0x27e>
    45c2:	60 e0       	ldi	r22, 0x00	; 0
    45c4:	70 e0       	ldi	r23, 0x00	; 0
    45c6:	80 e8       	ldi	r24, 0x80	; 128
    45c8:	9f e7       	ldi	r25, 0x7F	; 127
    45ca:	f6 c0       	rjmp	.+492    	; 0x47b8 <strtod+0x290>
    45cc:	43 e0       	ldi	r20, 0x03	; 3
    45ce:	50 e0       	ldi	r21, 0x00	; 0
    45d0:	6e e1       	ldi	r22, 0x1E	; 30
    45d2:	71 e0       	ldi	r23, 0x01	; 1
    45d4:	ce 01       	movw	r24, r28
    45d6:	dd d1       	rcall	.+954    	; 0x4992 <strncasecmp_P>
    45d8:	89 2b       	or	r24, r25
    45da:	59 f4       	brne	.+22     	; 0x45f2 <strtod+0xca>
    45dc:	c1 14       	cp	r12, r1
    45de:	d1 04       	cpc	r13, r1
    45e0:	09 f4       	brne	.+2      	; 0x45e4 <strtod+0xbc>
    45e2:	e6 c0       	rjmp	.+460    	; 0x47b0 <strtod+0x288>
    45e4:	f2 e0       	ldi	r31, 0x02	; 2
    45e6:	ef 0e       	add	r14, r31
    45e8:	f1 1c       	adc	r15, r1
    45ea:	f6 01       	movw	r30, r12
    45ec:	f1 82       	std	Z+1, r15	; 0x01
    45ee:	e0 82       	st	Z, r14
    45f0:	df c0       	rjmp	.+446    	; 0x47b0 <strtod+0x288>
    45f2:	20 e0       	ldi	r18, 0x00	; 0
    45f4:	30 e0       	ldi	r19, 0x00	; 0
    45f6:	a9 01       	movw	r20, r18
    45f8:	c0 e0       	ldi	r28, 0x00	; 0
    45fa:	d0 e0       	ldi	r29, 0x00	; 0
    45fc:	f7 01       	movw	r30, r14
    45fe:	60 ed       	ldi	r22, 0xD0	; 208
    4600:	a6 2e       	mov	r10, r22
    4602:	a0 0e       	add	r10, r16
    4604:	89 e0       	ldi	r24, 0x09	; 9
    4606:	8a 15       	cp	r24, r10
    4608:	28 f1       	brcs	.+74     	; 0x4654 <strtod+0x12c>
    460a:	91 2f       	mov	r25, r17
    460c:	92 60       	ori	r25, 0x02	; 2
    460e:	b9 2e       	mov	r11, r25
    4610:	81 2f       	mov	r24, r17
    4612:	88 70       	andi	r24, 0x08	; 8
    4614:	12 ff       	sbrs	r17, 2
    4616:	04 c0       	rjmp	.+8      	; 0x4620 <strtod+0xf8>
    4618:	81 11       	cpse	r24, r1
    461a:	23 c0       	rjmp	.+70     	; 0x4662 <strtod+0x13a>
    461c:	21 96       	adiw	r28, 0x01	; 1
    461e:	21 c0       	rjmp	.+66     	; 0x4662 <strtod+0x13a>
    4620:	81 11       	cpse	r24, r1
    4622:	21 97       	sbiw	r28, 0x01	; 1
    4624:	a5 e0       	ldi	r26, 0x05	; 5
    4626:	b0 e0       	ldi	r27, 0x00	; 0
    4628:	7f d2       	rcall	.+1278   	; 0x4b28 <__muluhisi3>
    462a:	dc 01       	movw	r26, r24
    462c:	cb 01       	movw	r24, r22
    462e:	88 0f       	add	r24, r24
    4630:	99 1f       	adc	r25, r25
    4632:	aa 1f       	adc	r26, r26
    4634:	bb 1f       	adc	r27, r27
    4636:	9c 01       	movw	r18, r24
    4638:	ad 01       	movw	r20, r26
    463a:	2a 0d       	add	r18, r10
    463c:	31 1d       	adc	r19, r1
    463e:	41 1d       	adc	r20, r1
    4640:	51 1d       	adc	r21, r1
    4642:	28 39       	cpi	r18, 0x98	; 152
    4644:	89 e9       	ldi	r24, 0x99	; 153
    4646:	38 07       	cpc	r19, r24
    4648:	48 07       	cpc	r20, r24
    464a:	89 e1       	ldi	r24, 0x19	; 25
    464c:	58 07       	cpc	r21, r24
    464e:	48 f0       	brcs	.+18     	; 0x4662 <strtod+0x13a>
    4650:	16 60       	ori	r17, 0x06	; 6
    4652:	06 c0       	rjmp	.+12     	; 0x4660 <strtod+0x138>
    4654:	9e ef       	ldi	r25, 0xFE	; 254
    4656:	a9 12       	cpse	r10, r25
    4658:	0a c0       	rjmp	.+20     	; 0x466e <strtod+0x146>
    465a:	13 fd       	sbrc	r17, 3
    465c:	40 c0       	rjmp	.+128    	; 0x46de <strtod+0x1b6>
    465e:	18 60       	ori	r17, 0x08	; 8
    4660:	b1 2e       	mov	r11, r17
    4662:	8f ef       	ldi	r24, 0xFF	; 255
    4664:	e8 1a       	sub	r14, r24
    4666:	f8 0a       	sbc	r15, r24
    4668:	00 81       	ld	r16, Z
    466a:	1b 2d       	mov	r17, r11
    466c:	c7 cf       	rjmp	.-114    	; 0x45fc <strtod+0xd4>
    466e:	80 2f       	mov	r24, r16
    4670:	8f 7d       	andi	r24, 0xDF	; 223
    4672:	85 34       	cpi	r24, 0x45	; 69
    4674:	a1 f5       	brne	.+104    	; 0x46de <strtod+0x1b6>
    4676:	80 81       	ld	r24, Z
    4678:	8d 32       	cpi	r24, 0x2D	; 45
    467a:	11 f4       	brne	.+4      	; 0x4680 <strtod+0x158>
    467c:	10 61       	ori	r17, 0x10	; 16
    467e:	06 c0       	rjmp	.+12     	; 0x468c <strtod+0x164>
    4680:	8b 32       	cpi	r24, 0x2B	; 43
    4682:	21 f0       	breq	.+8      	; 0x468c <strtod+0x164>
    4684:	31 96       	adiw	r30, 0x01	; 1
    4686:	61 e0       	ldi	r22, 0x01	; 1
    4688:	70 e0       	ldi	r23, 0x00	; 0
    468a:	04 c0       	rjmp	.+8      	; 0x4694 <strtod+0x16c>
    468c:	81 81       	ldd	r24, Z+1	; 0x01
    468e:	32 96       	adiw	r30, 0x02	; 2
    4690:	62 e0       	ldi	r22, 0x02	; 2
    4692:	70 e0       	ldi	r23, 0x00	; 0
    4694:	80 53       	subi	r24, 0x30	; 48
    4696:	8a 30       	cpi	r24, 0x0A	; 10
    4698:	18 f0       	brcs	.+6      	; 0x46a0 <strtod+0x178>
    469a:	e6 1b       	sub	r30, r22
    469c:	f7 0b       	sbc	r31, r23
    469e:	1f c0       	rjmp	.+62     	; 0x46de <strtod+0x1b6>
    46a0:	60 e0       	ldi	r22, 0x00	; 0
    46a2:	70 e0       	ldi	r23, 0x00	; 0
    46a4:	60 38       	cpi	r22, 0x80	; 128
    46a6:	9c e0       	ldi	r25, 0x0C	; 12
    46a8:	79 07       	cpc	r23, r25
    46aa:	5c f4       	brge	.+22     	; 0x46c2 <strtod+0x19a>
    46ac:	db 01       	movw	r26, r22
    46ae:	aa 0f       	add	r26, r26
    46b0:	bb 1f       	adc	r27, r27
    46b2:	aa 0f       	add	r26, r26
    46b4:	bb 1f       	adc	r27, r27
    46b6:	6a 0f       	add	r22, r26
    46b8:	7b 1f       	adc	r23, r27
    46ba:	66 0f       	add	r22, r22
    46bc:	77 1f       	adc	r23, r23
    46be:	68 0f       	add	r22, r24
    46c0:	71 1d       	adc	r23, r1
    46c2:	31 96       	adiw	r30, 0x01	; 1
    46c4:	df 01       	movw	r26, r30
    46c6:	11 97       	sbiw	r26, 0x01	; 1
    46c8:	8c 91       	ld	r24, X
    46ca:	80 53       	subi	r24, 0x30	; 48
    46cc:	8a 30       	cpi	r24, 0x0A	; 10
    46ce:	50 f3       	brcs	.-44     	; 0x46a4 <strtod+0x17c>
    46d0:	14 ff       	sbrs	r17, 4
    46d2:	03 c0       	rjmp	.+6      	; 0x46da <strtod+0x1b2>
    46d4:	71 95       	neg	r23
    46d6:	61 95       	neg	r22
    46d8:	71 09       	sbc	r23, r1
    46da:	c6 0f       	add	r28, r22
    46dc:	d7 1f       	adc	r29, r23
    46de:	11 ff       	sbrs	r17, 1
    46e0:	08 c0       	rjmp	.+16     	; 0x46f2 <strtod+0x1ca>
    46e2:	c1 14       	cp	r12, r1
    46e4:	d1 04       	cpc	r13, r1
    46e6:	29 f0       	breq	.+10     	; 0x46f2 <strtod+0x1ca>
    46e8:	cf 01       	movw	r24, r30
    46ea:	01 97       	sbiw	r24, 0x01	; 1
    46ec:	f6 01       	movw	r30, r12
    46ee:	91 83       	std	Z+1, r25	; 0x01
    46f0:	80 83       	st	Z, r24
    46f2:	ca 01       	movw	r24, r20
    46f4:	b9 01       	movw	r22, r18
    46f6:	a5 d8       	rcall	.-3766   	; 0x3842 <__floatunsisf>
    46f8:	21 2f       	mov	r18, r17
    46fa:	23 70       	andi	r18, 0x03	; 3
    46fc:	23 30       	cpi	r18, 0x03	; 3
    46fe:	19 f0       	breq	.+6      	; 0x4706 <strtod+0x1de>
    4700:	4b 01       	movw	r8, r22
    4702:	5c 01       	movw	r10, r24
    4704:	06 c0       	rjmp	.+12     	; 0x4712 <strtod+0x1ea>
    4706:	4b 01       	movw	r8, r22
    4708:	5c 01       	movw	r10, r24
    470a:	b7 fa       	bst	r11, 7
    470c:	b0 94       	com	r11
    470e:	b7 f8       	bld	r11, 7
    4710:	b0 94       	com	r11
    4712:	20 e0       	ldi	r18, 0x00	; 0
    4714:	30 e0       	ldi	r19, 0x00	; 0
    4716:	a9 01       	movw	r20, r18
    4718:	c5 01       	movw	r24, r10
    471a:	b4 01       	movw	r22, r8
    471c:	0e 94 84 1b 	call	0x3708	; 0x3708 <__cmpsf2>
    4720:	88 23       	and	r24, r24
    4722:	09 f4       	brne	.+2      	; 0x4726 <strtod+0x1fe>
    4724:	3d c0       	rjmp	.+122    	; 0x47a0 <strtod+0x278>
    4726:	d7 ff       	sbrs	r29, 7
    4728:	06 c0       	rjmp	.+12     	; 0x4736 <strtod+0x20e>
    472a:	d1 95       	neg	r29
    472c:	c1 95       	neg	r28
    472e:	d1 09       	sbc	r29, r1
    4730:	0d e3       	ldi	r16, 0x3D	; 61
    4732:	11 e0       	ldi	r17, 0x01	; 1
    4734:	02 c0       	rjmp	.+4      	; 0x473a <strtod+0x212>
    4736:	05 e5       	ldi	r16, 0x55	; 85
    4738:	11 e0       	ldi	r17, 0x01	; 1
    473a:	68 01       	movw	r12, r16
    473c:	f8 e1       	ldi	r31, 0x18	; 24
    473e:	cf 1a       	sub	r12, r31
    4740:	d1 08       	sbc	r13, r1
    4742:	90 e2       	ldi	r25, 0x20	; 32
    4744:	e9 2e       	mov	r14, r25
    4746:	f1 2c       	mov	r15, r1
    4748:	ce 15       	cp	r28, r14
    474a:	df 05       	cpc	r29, r15
    474c:	6c f0       	brlt	.+26     	; 0x4768 <strtod+0x240>
    474e:	f8 01       	movw	r30, r16
    4750:	25 91       	lpm	r18, Z+
    4752:	35 91       	lpm	r19, Z+
    4754:	45 91       	lpm	r20, Z+
    4756:	54 91       	lpm	r21, Z
    4758:	c5 01       	movw	r24, r10
    475a:	b4 01       	movw	r22, r8
    475c:	28 d9       	rcall	.-3504   	; 0x39ae <__mulsf3>
    475e:	4b 01       	movw	r8, r22
    4760:	5c 01       	movw	r10, r24
    4762:	ce 19       	sub	r28, r14
    4764:	df 09       	sbc	r29, r15
    4766:	f0 cf       	rjmp	.-32     	; 0x4748 <strtod+0x220>
    4768:	04 50       	subi	r16, 0x04	; 4
    476a:	11 09       	sbc	r17, r1
    476c:	f5 94       	asr	r15
    476e:	e7 94       	ror	r14
    4770:	0c 15       	cp	r16, r12
    4772:	1d 05       	cpc	r17, r13
    4774:	49 f7       	brne	.-46     	; 0x4748 <strtod+0x220>
    4776:	8a 2d       	mov	r24, r10
    4778:	88 0f       	add	r24, r24
    477a:	8b 2d       	mov	r24, r11
    477c:	88 1f       	adc	r24, r24
    477e:	8f 3f       	cpi	r24, 0xFF	; 255
    4780:	49 f0       	breq	.+18     	; 0x4794 <strtod+0x26c>
    4782:	20 e0       	ldi	r18, 0x00	; 0
    4784:	30 e0       	ldi	r19, 0x00	; 0
    4786:	a9 01       	movw	r20, r18
    4788:	c5 01       	movw	r24, r10
    478a:	b4 01       	movw	r22, r8
    478c:	0e 94 84 1b 	call	0x3708	; 0x3708 <__cmpsf2>
    4790:	81 11       	cpse	r24, r1
    4792:	06 c0       	rjmp	.+12     	; 0x47a0 <strtod+0x278>
    4794:	82 e2       	ldi	r24, 0x22	; 34
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	90 93 a0 07 	sts	0x07A0, r25	; 0x8007a0 <errno+0x1>
    479c:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <errno>
    47a0:	c5 01       	movw	r24, r10
    47a2:	b4 01       	movw	r22, r8
    47a4:	09 c0       	rjmp	.+18     	; 0x47b8 <strtod+0x290>
    47a6:	60 e0       	ldi	r22, 0x00	; 0
    47a8:	70 e0       	ldi	r23, 0x00	; 0
    47aa:	80 e8       	ldi	r24, 0x80	; 128
    47ac:	9f ef       	ldi	r25, 0xFF	; 255
    47ae:	04 c0       	rjmp	.+8      	; 0x47b8 <strtod+0x290>
    47b0:	60 e0       	ldi	r22, 0x00	; 0
    47b2:	70 e0       	ldi	r23, 0x00	; 0
    47b4:	80 ec       	ldi	r24, 0xC0	; 192
    47b6:	9f e7       	ldi	r25, 0x7F	; 127
    47b8:	df 91       	pop	r29
    47ba:	cf 91       	pop	r28
    47bc:	1f 91       	pop	r17
    47be:	0f 91       	pop	r16
    47c0:	ff 90       	pop	r15
    47c2:	ef 90       	pop	r14
    47c4:	df 90       	pop	r13
    47c6:	cf 90       	pop	r12
    47c8:	bf 90       	pop	r11
    47ca:	af 90       	pop	r10
    47cc:	9f 90       	pop	r9
    47ce:	8f 90       	pop	r8
    47d0:	08 95       	ret

000047d2 <__ftoa_engine>:
    47d2:	28 30       	cpi	r18, 0x08	; 8
    47d4:	08 f0       	brcs	.+2      	; 0x47d8 <__ftoa_engine+0x6>
    47d6:	27 e0       	ldi	r18, 0x07	; 7
    47d8:	33 27       	eor	r19, r19
    47da:	da 01       	movw	r26, r20
    47dc:	99 0f       	add	r25, r25
    47de:	31 1d       	adc	r19, r1
    47e0:	87 fd       	sbrc	r24, 7
    47e2:	91 60       	ori	r25, 0x01	; 1
    47e4:	00 96       	adiw	r24, 0x00	; 0
    47e6:	61 05       	cpc	r22, r1
    47e8:	71 05       	cpc	r23, r1
    47ea:	39 f4       	brne	.+14     	; 0x47fa <__ftoa_engine+0x28>
    47ec:	32 60       	ori	r19, 0x02	; 2
    47ee:	2e 5f       	subi	r18, 0xFE	; 254
    47f0:	3d 93       	st	X+, r19
    47f2:	30 e3       	ldi	r19, 0x30	; 48
    47f4:	2a 95       	dec	r18
    47f6:	e1 f7       	brne	.-8      	; 0x47f0 <__ftoa_engine+0x1e>
    47f8:	08 95       	ret
    47fa:	9f 3f       	cpi	r25, 0xFF	; 255
    47fc:	30 f0       	brcs	.+12     	; 0x480a <__ftoa_engine+0x38>
    47fe:	80 38       	cpi	r24, 0x80	; 128
    4800:	71 05       	cpc	r23, r1
    4802:	61 05       	cpc	r22, r1
    4804:	09 f0       	breq	.+2      	; 0x4808 <__ftoa_engine+0x36>
    4806:	3c 5f       	subi	r19, 0xFC	; 252
    4808:	3c 5f       	subi	r19, 0xFC	; 252
    480a:	3d 93       	st	X+, r19
    480c:	91 30       	cpi	r25, 0x01	; 1
    480e:	08 f0       	brcs	.+2      	; 0x4812 <__ftoa_engine+0x40>
    4810:	80 68       	ori	r24, 0x80	; 128
    4812:	91 1d       	adc	r25, r1
    4814:	df 93       	push	r29
    4816:	cf 93       	push	r28
    4818:	1f 93       	push	r17
    481a:	0f 93       	push	r16
    481c:	ff 92       	push	r15
    481e:	ef 92       	push	r14
    4820:	19 2f       	mov	r17, r25
    4822:	98 7f       	andi	r25, 0xF8	; 248
    4824:	96 95       	lsr	r25
    4826:	e9 2f       	mov	r30, r25
    4828:	96 95       	lsr	r25
    482a:	96 95       	lsr	r25
    482c:	e9 0f       	add	r30, r25
    482e:	ff 27       	eor	r31, r31
    4830:	ed 54       	subi	r30, 0x4D	; 77
    4832:	fe 4f       	sbci	r31, 0xFE	; 254
    4834:	99 27       	eor	r25, r25
    4836:	33 27       	eor	r19, r19
    4838:	ee 24       	eor	r14, r14
    483a:	ff 24       	eor	r15, r15
    483c:	a7 01       	movw	r20, r14
    483e:	e7 01       	movw	r28, r14
    4840:	05 90       	lpm	r0, Z+
    4842:	08 94       	sec
    4844:	07 94       	ror	r0
    4846:	28 f4       	brcc	.+10     	; 0x4852 <__ftoa_engine+0x80>
    4848:	36 0f       	add	r19, r22
    484a:	e7 1e       	adc	r14, r23
    484c:	f8 1e       	adc	r15, r24
    484e:	49 1f       	adc	r20, r25
    4850:	51 1d       	adc	r21, r1
    4852:	66 0f       	add	r22, r22
    4854:	77 1f       	adc	r23, r23
    4856:	88 1f       	adc	r24, r24
    4858:	99 1f       	adc	r25, r25
    485a:	06 94       	lsr	r0
    485c:	a1 f7       	brne	.-24     	; 0x4846 <__ftoa_engine+0x74>
    485e:	05 90       	lpm	r0, Z+
    4860:	07 94       	ror	r0
    4862:	28 f4       	brcc	.+10     	; 0x486e <__ftoa_engine+0x9c>
    4864:	e7 0e       	add	r14, r23
    4866:	f8 1e       	adc	r15, r24
    4868:	49 1f       	adc	r20, r25
    486a:	56 1f       	adc	r21, r22
    486c:	c1 1d       	adc	r28, r1
    486e:	77 0f       	add	r23, r23
    4870:	88 1f       	adc	r24, r24
    4872:	99 1f       	adc	r25, r25
    4874:	66 1f       	adc	r22, r22
    4876:	06 94       	lsr	r0
    4878:	a1 f7       	brne	.-24     	; 0x4862 <__ftoa_engine+0x90>
    487a:	05 90       	lpm	r0, Z+
    487c:	07 94       	ror	r0
    487e:	28 f4       	brcc	.+10     	; 0x488a <__ftoa_engine+0xb8>
    4880:	f8 0e       	add	r15, r24
    4882:	49 1f       	adc	r20, r25
    4884:	56 1f       	adc	r21, r22
    4886:	c7 1f       	adc	r28, r23
    4888:	d1 1d       	adc	r29, r1
    488a:	88 0f       	add	r24, r24
    488c:	99 1f       	adc	r25, r25
    488e:	66 1f       	adc	r22, r22
    4890:	77 1f       	adc	r23, r23
    4892:	06 94       	lsr	r0
    4894:	a1 f7       	brne	.-24     	; 0x487e <__ftoa_engine+0xac>
    4896:	05 90       	lpm	r0, Z+
    4898:	07 94       	ror	r0
    489a:	20 f4       	brcc	.+8      	; 0x48a4 <__ftoa_engine+0xd2>
    489c:	49 0f       	add	r20, r25
    489e:	56 1f       	adc	r21, r22
    48a0:	c7 1f       	adc	r28, r23
    48a2:	d8 1f       	adc	r29, r24
    48a4:	99 0f       	add	r25, r25
    48a6:	66 1f       	adc	r22, r22
    48a8:	77 1f       	adc	r23, r23
    48aa:	88 1f       	adc	r24, r24
    48ac:	06 94       	lsr	r0
    48ae:	a9 f7       	brne	.-22     	; 0x489a <__ftoa_engine+0xc8>
    48b0:	84 91       	lpm	r24, Z
    48b2:	10 95       	com	r17
    48b4:	17 70       	andi	r17, 0x07	; 7
    48b6:	41 f0       	breq	.+16     	; 0x48c8 <__ftoa_engine+0xf6>
    48b8:	d6 95       	lsr	r29
    48ba:	c7 95       	ror	r28
    48bc:	57 95       	ror	r21
    48be:	47 95       	ror	r20
    48c0:	f7 94       	ror	r15
    48c2:	e7 94       	ror	r14
    48c4:	1a 95       	dec	r17
    48c6:	c1 f7       	brne	.-16     	; 0x48b8 <__ftoa_engine+0xe6>
    48c8:	e9 e5       	ldi	r30, 0x59	; 89
    48ca:	f1 e0       	ldi	r31, 0x01	; 1
    48cc:	68 94       	set
    48ce:	15 90       	lpm	r1, Z+
    48d0:	15 91       	lpm	r17, Z+
    48d2:	35 91       	lpm	r19, Z+
    48d4:	65 91       	lpm	r22, Z+
    48d6:	95 91       	lpm	r25, Z+
    48d8:	05 90       	lpm	r0, Z+
    48da:	7f e2       	ldi	r23, 0x2F	; 47
    48dc:	73 95       	inc	r23
    48de:	e1 18       	sub	r14, r1
    48e0:	f1 0a       	sbc	r15, r17
    48e2:	43 0b       	sbc	r20, r19
    48e4:	56 0b       	sbc	r21, r22
    48e6:	c9 0b       	sbc	r28, r25
    48e8:	d0 09       	sbc	r29, r0
    48ea:	c0 f7       	brcc	.-16     	; 0x48dc <__ftoa_engine+0x10a>
    48ec:	e1 0c       	add	r14, r1
    48ee:	f1 1e       	adc	r15, r17
    48f0:	43 1f       	adc	r20, r19
    48f2:	56 1f       	adc	r21, r22
    48f4:	c9 1f       	adc	r28, r25
    48f6:	d0 1d       	adc	r29, r0
    48f8:	7e f4       	brtc	.+30     	; 0x4918 <__ftoa_engine+0x146>
    48fa:	70 33       	cpi	r23, 0x30	; 48
    48fc:	11 f4       	brne	.+4      	; 0x4902 <__ftoa_engine+0x130>
    48fe:	8a 95       	dec	r24
    4900:	e6 cf       	rjmp	.-52     	; 0x48ce <__ftoa_engine+0xfc>
    4902:	e8 94       	clt
    4904:	01 50       	subi	r16, 0x01	; 1
    4906:	30 f0       	brcs	.+12     	; 0x4914 <__ftoa_engine+0x142>
    4908:	08 0f       	add	r16, r24
    490a:	0a f4       	brpl	.+2      	; 0x490e <__ftoa_engine+0x13c>
    490c:	00 27       	eor	r16, r16
    490e:	02 17       	cp	r16, r18
    4910:	08 f4       	brcc	.+2      	; 0x4914 <__ftoa_engine+0x142>
    4912:	20 2f       	mov	r18, r16
    4914:	23 95       	inc	r18
    4916:	02 2f       	mov	r16, r18
    4918:	7a 33       	cpi	r23, 0x3A	; 58
    491a:	28 f0       	brcs	.+10     	; 0x4926 <__ftoa_engine+0x154>
    491c:	79 e3       	ldi	r23, 0x39	; 57
    491e:	7d 93       	st	X+, r23
    4920:	2a 95       	dec	r18
    4922:	e9 f7       	brne	.-6      	; 0x491e <__ftoa_engine+0x14c>
    4924:	10 c0       	rjmp	.+32     	; 0x4946 <__ftoa_engine+0x174>
    4926:	7d 93       	st	X+, r23
    4928:	2a 95       	dec	r18
    492a:	89 f6       	brne	.-94     	; 0x48ce <__ftoa_engine+0xfc>
    492c:	06 94       	lsr	r0
    492e:	97 95       	ror	r25
    4930:	67 95       	ror	r22
    4932:	37 95       	ror	r19
    4934:	17 95       	ror	r17
    4936:	17 94       	ror	r1
    4938:	e1 18       	sub	r14, r1
    493a:	f1 0a       	sbc	r15, r17
    493c:	43 0b       	sbc	r20, r19
    493e:	56 0b       	sbc	r21, r22
    4940:	c9 0b       	sbc	r28, r25
    4942:	d0 09       	sbc	r29, r0
    4944:	98 f0       	brcs	.+38     	; 0x496c <__ftoa_engine+0x19a>
    4946:	23 95       	inc	r18
    4948:	7e 91       	ld	r23, -X
    494a:	73 95       	inc	r23
    494c:	7a 33       	cpi	r23, 0x3A	; 58
    494e:	08 f0       	brcs	.+2      	; 0x4952 <__ftoa_engine+0x180>
    4950:	70 e3       	ldi	r23, 0x30	; 48
    4952:	7c 93       	st	X, r23
    4954:	20 13       	cpse	r18, r16
    4956:	b8 f7       	brcc	.-18     	; 0x4946 <__ftoa_engine+0x174>
    4958:	7e 91       	ld	r23, -X
    495a:	70 61       	ori	r23, 0x10	; 16
    495c:	7d 93       	st	X+, r23
    495e:	30 f0       	brcs	.+12     	; 0x496c <__ftoa_engine+0x19a>
    4960:	83 95       	inc	r24
    4962:	71 e3       	ldi	r23, 0x31	; 49
    4964:	7d 93       	st	X+, r23
    4966:	70 e3       	ldi	r23, 0x30	; 48
    4968:	2a 95       	dec	r18
    496a:	e1 f7       	brne	.-8      	; 0x4964 <__ftoa_engine+0x192>
    496c:	11 24       	eor	r1, r1
    496e:	ef 90       	pop	r14
    4970:	ff 90       	pop	r15
    4972:	0f 91       	pop	r16
    4974:	1f 91       	pop	r17
    4976:	cf 91       	pop	r28
    4978:	df 91       	pop	r29
    497a:	99 27       	eor	r25, r25
    497c:	87 fd       	sbrc	r24, 7
    497e:	90 95       	com	r25
    4980:	08 95       	ret

00004982 <isspace>:
    4982:	91 11       	cpse	r25, r1
    4984:	ce c0       	rjmp	.+412    	; 0x4b22 <__ctype_isfalse>
    4986:	80 32       	cpi	r24, 0x20	; 32
    4988:	19 f0       	breq	.+6      	; 0x4990 <isspace+0xe>
    498a:	89 50       	subi	r24, 0x09	; 9
    498c:	85 50       	subi	r24, 0x05	; 5
    498e:	d0 f7       	brcc	.-12     	; 0x4984 <isspace+0x2>
    4990:	08 95       	ret

00004992 <strncasecmp_P>:
    4992:	fb 01       	movw	r30, r22
    4994:	dc 01       	movw	r26, r24
    4996:	41 50       	subi	r20, 0x01	; 1
    4998:	50 40       	sbci	r21, 0x00	; 0
    499a:	88 f0       	brcs	.+34     	; 0x49be <strncasecmp_P+0x2c>
    499c:	8d 91       	ld	r24, X+
    499e:	81 34       	cpi	r24, 0x41	; 65
    49a0:	1c f0       	brlt	.+6      	; 0x49a8 <strncasecmp_P+0x16>
    49a2:	8b 35       	cpi	r24, 0x5B	; 91
    49a4:	0c f4       	brge	.+2      	; 0x49a8 <strncasecmp_P+0x16>
    49a6:	80 5e       	subi	r24, 0xE0	; 224
    49a8:	65 91       	lpm	r22, Z+
    49aa:	61 34       	cpi	r22, 0x41	; 65
    49ac:	1c f0       	brlt	.+6      	; 0x49b4 <strncasecmp_P+0x22>
    49ae:	6b 35       	cpi	r22, 0x5B	; 91
    49b0:	0c f4       	brge	.+2      	; 0x49b4 <strncasecmp_P+0x22>
    49b2:	60 5e       	subi	r22, 0xE0	; 224
    49b4:	86 1b       	sub	r24, r22
    49b6:	61 11       	cpse	r22, r1
    49b8:	71 f3       	breq	.-36     	; 0x4996 <strncasecmp_P+0x4>
    49ba:	99 0b       	sbc	r25, r25
    49bc:	08 95       	ret
    49be:	88 1b       	sub	r24, r24
    49c0:	fc cf       	rjmp	.-8      	; 0x49ba <strncasecmp_P+0x28>

000049c2 <strnlen_P>:
    49c2:	fc 01       	movw	r30, r24
    49c4:	05 90       	lpm	r0, Z+
    49c6:	61 50       	subi	r22, 0x01	; 1
    49c8:	70 40       	sbci	r23, 0x00	; 0
    49ca:	01 10       	cpse	r0, r1
    49cc:	d8 f7       	brcc	.-10     	; 0x49c4 <strnlen_P+0x2>
    49ce:	80 95       	com	r24
    49d0:	90 95       	com	r25
    49d2:	8e 0f       	add	r24, r30
    49d4:	9f 1f       	adc	r25, r31
    49d6:	08 95       	ret

000049d8 <strnlen>:
    49d8:	fc 01       	movw	r30, r24
    49da:	61 50       	subi	r22, 0x01	; 1
    49dc:	70 40       	sbci	r23, 0x00	; 0
    49de:	01 90       	ld	r0, Z+
    49e0:	01 10       	cpse	r0, r1
    49e2:	d8 f7       	brcc	.-10     	; 0x49da <strnlen+0x2>
    49e4:	80 95       	com	r24
    49e6:	90 95       	com	r25
    49e8:	8e 0f       	add	r24, r30
    49ea:	9f 1f       	adc	r25, r31
    49ec:	08 95       	ret

000049ee <fputc>:
    49ee:	0f 93       	push	r16
    49f0:	1f 93       	push	r17
    49f2:	cf 93       	push	r28
    49f4:	df 93       	push	r29
    49f6:	fb 01       	movw	r30, r22
    49f8:	23 81       	ldd	r18, Z+3	; 0x03
    49fa:	21 fd       	sbrc	r18, 1
    49fc:	03 c0       	rjmp	.+6      	; 0x4a04 <fputc+0x16>
    49fe:	8f ef       	ldi	r24, 0xFF	; 255
    4a00:	9f ef       	ldi	r25, 0xFF	; 255
    4a02:	2c c0       	rjmp	.+88     	; 0x4a5c <fputc+0x6e>
    4a04:	22 ff       	sbrs	r18, 2
    4a06:	16 c0       	rjmp	.+44     	; 0x4a34 <fputc+0x46>
    4a08:	46 81       	ldd	r20, Z+6	; 0x06
    4a0a:	57 81       	ldd	r21, Z+7	; 0x07
    4a0c:	24 81       	ldd	r18, Z+4	; 0x04
    4a0e:	35 81       	ldd	r19, Z+5	; 0x05
    4a10:	42 17       	cp	r20, r18
    4a12:	53 07       	cpc	r21, r19
    4a14:	44 f4       	brge	.+16     	; 0x4a26 <fputc+0x38>
    4a16:	a0 81       	ld	r26, Z
    4a18:	b1 81       	ldd	r27, Z+1	; 0x01
    4a1a:	9d 01       	movw	r18, r26
    4a1c:	2f 5f       	subi	r18, 0xFF	; 255
    4a1e:	3f 4f       	sbci	r19, 0xFF	; 255
    4a20:	31 83       	std	Z+1, r19	; 0x01
    4a22:	20 83       	st	Z, r18
    4a24:	8c 93       	st	X, r24
    4a26:	26 81       	ldd	r18, Z+6	; 0x06
    4a28:	37 81       	ldd	r19, Z+7	; 0x07
    4a2a:	2f 5f       	subi	r18, 0xFF	; 255
    4a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a2e:	37 83       	std	Z+7, r19	; 0x07
    4a30:	26 83       	std	Z+6, r18	; 0x06
    4a32:	14 c0       	rjmp	.+40     	; 0x4a5c <fputc+0x6e>
    4a34:	8b 01       	movw	r16, r22
    4a36:	ec 01       	movw	r28, r24
    4a38:	fb 01       	movw	r30, r22
    4a3a:	00 84       	ldd	r0, Z+8	; 0x08
    4a3c:	f1 85       	ldd	r31, Z+9	; 0x09
    4a3e:	e0 2d       	mov	r30, r0
    4a40:	09 95       	icall
    4a42:	89 2b       	or	r24, r25
    4a44:	e1 f6       	brne	.-72     	; 0x49fe <fputc+0x10>
    4a46:	d8 01       	movw	r26, r16
    4a48:	16 96       	adiw	r26, 0x06	; 6
    4a4a:	8d 91       	ld	r24, X+
    4a4c:	9c 91       	ld	r25, X
    4a4e:	17 97       	sbiw	r26, 0x07	; 7
    4a50:	01 96       	adiw	r24, 0x01	; 1
    4a52:	17 96       	adiw	r26, 0x07	; 7
    4a54:	9c 93       	st	X, r25
    4a56:	8e 93       	st	-X, r24
    4a58:	16 97       	sbiw	r26, 0x06	; 6
    4a5a:	ce 01       	movw	r24, r28
    4a5c:	df 91       	pop	r29
    4a5e:	cf 91       	pop	r28
    4a60:	1f 91       	pop	r17
    4a62:	0f 91       	pop	r16
    4a64:	08 95       	ret

00004a66 <__ultoa_invert>:
    4a66:	fa 01       	movw	r30, r20
    4a68:	aa 27       	eor	r26, r26
    4a6a:	28 30       	cpi	r18, 0x08	; 8
    4a6c:	51 f1       	breq	.+84     	; 0x4ac2 <__ultoa_invert+0x5c>
    4a6e:	20 31       	cpi	r18, 0x10	; 16
    4a70:	81 f1       	breq	.+96     	; 0x4ad2 <__ultoa_invert+0x6c>
    4a72:	e8 94       	clt
    4a74:	6f 93       	push	r22
    4a76:	6e 7f       	andi	r22, 0xFE	; 254
    4a78:	6e 5f       	subi	r22, 0xFE	; 254
    4a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    4a7c:	8f 4f       	sbci	r24, 0xFF	; 255
    4a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    4a80:	af 4f       	sbci	r26, 0xFF	; 255
    4a82:	b1 e0       	ldi	r27, 0x01	; 1
    4a84:	3e d0       	rcall	.+124    	; 0x4b02 <__ultoa_invert+0x9c>
    4a86:	b4 e0       	ldi	r27, 0x04	; 4
    4a88:	3c d0       	rcall	.+120    	; 0x4b02 <__ultoa_invert+0x9c>
    4a8a:	67 0f       	add	r22, r23
    4a8c:	78 1f       	adc	r23, r24
    4a8e:	89 1f       	adc	r24, r25
    4a90:	9a 1f       	adc	r25, r26
    4a92:	a1 1d       	adc	r26, r1
    4a94:	68 0f       	add	r22, r24
    4a96:	79 1f       	adc	r23, r25
    4a98:	8a 1f       	adc	r24, r26
    4a9a:	91 1d       	adc	r25, r1
    4a9c:	a1 1d       	adc	r26, r1
    4a9e:	6a 0f       	add	r22, r26
    4aa0:	71 1d       	adc	r23, r1
    4aa2:	81 1d       	adc	r24, r1
    4aa4:	91 1d       	adc	r25, r1
    4aa6:	a1 1d       	adc	r26, r1
    4aa8:	20 d0       	rcall	.+64     	; 0x4aea <__ultoa_invert+0x84>
    4aaa:	09 f4       	brne	.+2      	; 0x4aae <__ultoa_invert+0x48>
    4aac:	68 94       	set
    4aae:	3f 91       	pop	r19
    4ab0:	2a e0       	ldi	r18, 0x0A	; 10
    4ab2:	26 9f       	mul	r18, r22
    4ab4:	11 24       	eor	r1, r1
    4ab6:	30 19       	sub	r19, r0
    4ab8:	30 5d       	subi	r19, 0xD0	; 208
    4aba:	31 93       	st	Z+, r19
    4abc:	de f6       	brtc	.-74     	; 0x4a74 <__ultoa_invert+0xe>
    4abe:	cf 01       	movw	r24, r30
    4ac0:	08 95       	ret
    4ac2:	46 2f       	mov	r20, r22
    4ac4:	47 70       	andi	r20, 0x07	; 7
    4ac6:	40 5d       	subi	r20, 0xD0	; 208
    4ac8:	41 93       	st	Z+, r20
    4aca:	b3 e0       	ldi	r27, 0x03	; 3
    4acc:	0f d0       	rcall	.+30     	; 0x4aec <__ultoa_invert+0x86>
    4ace:	c9 f7       	brne	.-14     	; 0x4ac2 <__ultoa_invert+0x5c>
    4ad0:	f6 cf       	rjmp	.-20     	; 0x4abe <__ultoa_invert+0x58>
    4ad2:	46 2f       	mov	r20, r22
    4ad4:	4f 70       	andi	r20, 0x0F	; 15
    4ad6:	40 5d       	subi	r20, 0xD0	; 208
    4ad8:	4a 33       	cpi	r20, 0x3A	; 58
    4ada:	18 f0       	brcs	.+6      	; 0x4ae2 <__ultoa_invert+0x7c>
    4adc:	49 5d       	subi	r20, 0xD9	; 217
    4ade:	31 fd       	sbrc	r19, 1
    4ae0:	40 52       	subi	r20, 0x20	; 32
    4ae2:	41 93       	st	Z+, r20
    4ae4:	02 d0       	rcall	.+4      	; 0x4aea <__ultoa_invert+0x84>
    4ae6:	a9 f7       	brne	.-22     	; 0x4ad2 <__ultoa_invert+0x6c>
    4ae8:	ea cf       	rjmp	.-44     	; 0x4abe <__ultoa_invert+0x58>
    4aea:	b4 e0       	ldi	r27, 0x04	; 4
    4aec:	a6 95       	lsr	r26
    4aee:	97 95       	ror	r25
    4af0:	87 95       	ror	r24
    4af2:	77 95       	ror	r23
    4af4:	67 95       	ror	r22
    4af6:	ba 95       	dec	r27
    4af8:	c9 f7       	brne	.-14     	; 0x4aec <__ultoa_invert+0x86>
    4afa:	00 97       	sbiw	r24, 0x00	; 0
    4afc:	61 05       	cpc	r22, r1
    4afe:	71 05       	cpc	r23, r1
    4b00:	08 95       	ret
    4b02:	9b 01       	movw	r18, r22
    4b04:	ac 01       	movw	r20, r24
    4b06:	0a 2e       	mov	r0, r26
    4b08:	06 94       	lsr	r0
    4b0a:	57 95       	ror	r21
    4b0c:	47 95       	ror	r20
    4b0e:	37 95       	ror	r19
    4b10:	27 95       	ror	r18
    4b12:	ba 95       	dec	r27
    4b14:	c9 f7       	brne	.-14     	; 0x4b08 <__ultoa_invert+0xa2>
    4b16:	62 0f       	add	r22, r18
    4b18:	73 1f       	adc	r23, r19
    4b1a:	84 1f       	adc	r24, r20
    4b1c:	95 1f       	adc	r25, r21
    4b1e:	a0 1d       	adc	r26, r0
    4b20:	08 95       	ret

00004b22 <__ctype_isfalse>:
    4b22:	99 27       	eor	r25, r25
    4b24:	88 27       	eor	r24, r24

00004b26 <__ctype_istrue>:
    4b26:	08 95       	ret

00004b28 <__muluhisi3>:
    4b28:	09 d0       	rcall	.+18     	; 0x4b3c <__umulhisi3>
    4b2a:	a5 9f       	mul	r26, r21
    4b2c:	90 0d       	add	r25, r0
    4b2e:	b4 9f       	mul	r27, r20
    4b30:	90 0d       	add	r25, r0
    4b32:	a4 9f       	mul	r26, r20
    4b34:	80 0d       	add	r24, r0
    4b36:	91 1d       	adc	r25, r1
    4b38:	11 24       	eor	r1, r1
    4b3a:	08 95       	ret

00004b3c <__umulhisi3>:
    4b3c:	a2 9f       	mul	r26, r18
    4b3e:	b0 01       	movw	r22, r0
    4b40:	b3 9f       	mul	r27, r19
    4b42:	c0 01       	movw	r24, r0
    4b44:	a3 9f       	mul	r26, r19
    4b46:	70 0d       	add	r23, r0
    4b48:	81 1d       	adc	r24, r1
    4b4a:	11 24       	eor	r1, r1
    4b4c:	91 1d       	adc	r25, r1
    4b4e:	b2 9f       	mul	r27, r18
    4b50:	70 0d       	add	r23, r0
    4b52:	81 1d       	adc	r24, r1
    4b54:	11 24       	eor	r1, r1
    4b56:	91 1d       	adc	r25, r1
    4b58:	08 95       	ret

00004b5a <_exit>:
    4b5a:	f8 94       	cli

00004b5c <__stop_program>:
    4b5c:	ff cf       	rjmp	.-2      	; 0x4b5c <__stop_program>
