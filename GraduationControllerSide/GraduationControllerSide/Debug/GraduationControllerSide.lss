
GraduationControllerSide.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00001cfc  00001d90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cfc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fc  00800132  00800132  00001dc2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001dc2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000550  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006959  00000000  00000000  000023b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001921  00000000  00000000  00008d09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000370a  00000000  00000000  0000a62a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001138  00000000  00000000  0000dd34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000286c  00000000  00000000  0000ee6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000052c0  00000000  00000000  000116d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000500  00000000  00000000  00016998  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
       2:	00 00       	nop
       4:	7a c3       	rjmp	.+1780   	; 0x6fa <__vector_1>
       6:	00 00       	nop
       8:	a3 c3       	rjmp	.+1862   	; 0x750 <__vector_2>
       a:	00 00       	nop
       c:	cc c3       	rjmp	.+1944   	; 0x7a6 <__vector_3>
       e:	00 00       	nop
      10:	f5 c3       	rjmp	.+2026   	; 0x7fc <__vector_4>
      12:	00 00       	nop
      14:	1e c4       	rjmp	.+2108   	; 0x852 <__vector_5>
      16:	00 00       	nop
      18:	47 c4       	rjmp	.+2190   	; 0x8a8 <__vector_6>
      1a:	00 00       	nop
      1c:	70 c4       	rjmp	.+2272   	; 0x8fe <__vector_7>
      1e:	00 00       	nop
      20:	99 c4       	rjmp	.+2354   	; 0x954 <__vector_8>
      22:	00 00       	nop
      24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
      26:	00 00       	nop
      28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6b c7       	rjmp	.+3798   	; 0xf08 <__vector_12>
      32:	00 00       	nop
      34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
      36:	00 00       	nop
      38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
      3e:	00 00       	nop
      40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
      42:	00 00       	nop
      44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
      46:	00 00       	nop
      48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
      52:	00 00       	nop
      54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
      56:	00 00       	nop
      58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
      5e:	00 00       	nop
      60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
      62:	00 00       	nop
      64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
      66:	00 00       	nop
      68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
      72:	00 00       	nop
      74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
      76:	00 00       	nop
      78:	71 c7       	rjmp	.+3810   	; 0xf5c <__vector_30>
      7a:	00 00       	nop
      7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
      7e:	00 00       	nop
      80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
      82:	00 00       	nop
      84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
      86:	00 00       	nop
      88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b7 02       	muls	r27, r23
      8e:	bb 02       	muls	r27, r27
      90:	bf 02       	muls	r27, r31
      92:	c3 02       	muls	r28, r19
      94:	c7 02       	muls	r28, r23
      96:	cb 02       	muls	r28, r27
      98:	cf 02       	muls	r28, r31
      9a:	d3 02       	muls	r29, r19
      9c:	e0 02       	muls	r30, r16
      9e:	e4 02       	muls	r30, r20
      a0:	e8 02       	muls	r30, r24
      a2:	ec 02       	muls	r30, r28
      a4:	f0 02       	muls	r31, r16
      a6:	f4 02       	muls	r31, r20
      a8:	f8 02       	muls	r31, r24
      aa:	fc 02       	muls	r31, r28
      ac:	0a 03       	fmul	r16, r18
      ae:	10 03       	mulsu	r17, r16
      b0:	1b 03       	fmul	r17, r19
      b2:	25 03       	mulsu	r18, r21
      b4:	2f 03       	fmul	r18, r23
      b6:	33 03       	mulsu	r19, r19
      b8:	3c 03       	fmul	r19, r20
      ba:	44 03       	mulsu	r20, r20
      bc:	55 03       	mulsu	r21, r21
      be:	5a 03       	fmul	r21, r18
      c0:	5f 03       	fmul	r21, r23
      c2:	64 03       	mulsu	r22, r20
      c4:	69 03       	fmul	r22, r17
      c6:	6e 03       	fmul	r22, r22
      c8:	73 03       	mulsu	r23, r19
      ca:	78 03       	fmul	r23, r16

000000cc <__ctors_end>:
      cc:	11 24       	eor	r1, r1
      ce:	1f be       	out	0x3f, r1	; 63
      d0:	cf ef       	ldi	r28, 0xFF	; 255
      d2:	d0 e1       	ldi	r29, 0x10	; 16
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
      d8:	11 e0       	ldi	r17, 0x01	; 1
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b1 e0       	ldi	r27, 0x01	; 1
      de:	ec ef       	ldi	r30, 0xFC	; 252
      e0:	fc e1       	ldi	r31, 0x1C	; 28
      e2:	00 e0       	ldi	r16, 0x00	; 0
      e4:	0b bf       	out	0x3b, r16	; 59
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
      e8:	07 90       	elpm	r0, Z+
      ea:	0d 92       	st	X+, r0
      ec:	a2 33       	cpi	r26, 0x32	; 50
      ee:	b1 07       	cpc	r27, r17
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>

000000f2 <__do_clear_bss>:
      f2:	22 e0       	ldi	r18, 0x02	; 2
      f4:	a2 e3       	ldi	r26, 0x32	; 50
      f6:	b1 e0       	ldi	r27, 0x01	; 1
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
      fc:	ae 32       	cpi	r26, 0x2E	; 46
      fe:	b2 07       	cpc	r27, r18
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
     102:	be d1       	rcall	.+892    	; 0x480 <main>
     104:	0c 94 7c 0e 	jmp	0x1cf8	; 0x1cf8 <_exit>

00000108 <__bad_interrupt>:
     108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <setRange>:
	// (&) 0b11110000 (0xF0 - Leave HSB)
	// (|) 0b0000xx?? (range - Set range)
	// (|) 0b00001000 (0x08 - Set Full Res)
	value &= 0xF0;
	value |= range;
	value |= 0x08;
     10a:	48 2f       	mov	r20, r24
     10c:	48 60       	ori	r20, 0x08	; 8
	TWI_ByteWrite(Slave_Address, ADXL345_REG_DATA_FORMAT, value);
     10e:	61 e3       	ldi	r22, 0x31	; 49
     110:	83 e5       	ldi	r24, 0x53	; 83
     112:	31 c5       	rjmp	.+2658   	; 0xb76 <TWI_ByteWrite>
     114:	08 95       	ret

00000116 <setDataRate>:
}

// Set Data Rate
void setDataRate(adxl345_dataRate_t dataRate)
{
	TWI_ByteWrite(Slave_Address, ADXL345_REG_BW_RATE, dataRate);
     116:	48 2f       	mov	r20, r24
     118:	6c e2       	ldi	r22, 0x2C	; 44
     11a:	83 e5       	ldi	r24, 0x53	; 83
     11c:	2c c5       	rjmp	.+2648   	; 0xb76 <TWI_ByteWrite>
     11e:	08 95       	ret

00000120 <clearSettings>:
}

void clearSettings()
{
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	1f 92       	push	r1
     126:	cd b7       	in	r28, 0x3d	; 61
     128:	de b7       	in	r29, 0x3e	; 62
	setRange(Range);
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	ee df       	rcall	.-36     	; 0x10a <setRange>
	setDataRate(BW_RATE);
     12e:	8a e0       	ldi	r24, 0x0A	; 10
     130:	f2 df       	rcall	.-28     	; 0x116 <setDataRate>

	TWI_ByteWrite(Slave_Address, ADXL345_REG_THRESH_TAP, 0x00);
     132:	40 e0       	ldi	r20, 0x00	; 0
     134:	6d e1       	ldi	r22, 0x1D	; 29
     136:	83 e5       	ldi	r24, 0x53	; 83
     138:	1e d5       	rcall	.+2620   	; 0xb76 <TWI_ByteWrite>
	TWI_ByteWrite(Slave_Address, ADXL345_REG_DUR, 0x00);
     13a:	40 e0       	ldi	r20, 0x00	; 0
     13c:	61 e2       	ldi	r22, 0x21	; 33
     13e:	83 e5       	ldi	r24, 0x53	; 83
     140:	1a d5       	rcall	.+2612   	; 0xb76 <TWI_ByteWrite>
	TWI_ByteWrite(Slave_Address, ADXL345_REG_LATENT, 0x00);
     142:	40 e0       	ldi	r20, 0x00	; 0
     144:	62 e2       	ldi	r22, 0x22	; 34
     146:	83 e5       	ldi	r24, 0x53	; 83
     148:	16 d5       	rcall	.+2604   	; 0xb76 <TWI_ByteWrite>
	TWI_ByteWrite(Slave_Address, ADXL345_REG_WINDOW, 0x00);
     14a:	40 e0       	ldi	r20, 0x00	; 0
     14c:	63 e2       	ldi	r22, 0x23	; 35
     14e:	83 e5       	ldi	r24, 0x53	; 83
     150:	12 d5       	rcall	.+2596   	; 0xb76 <TWI_ByteWrite>
	TWI_ByteWrite(Slave_Address, ADXL345_REG_THRESH_ACT, 0x00);
     152:	40 e0       	ldi	r20, 0x00	; 0
     154:	64 e2       	ldi	r22, 0x24	; 36
     156:	83 e5       	ldi	r24, 0x53	; 83
     158:	0e d5       	rcall	.+2588   	; 0xb76 <TWI_ByteWrite>
	TWI_ByteWrite(Slave_Address, ADXL345_REG_THRESH_INACT, 0x00);
     15a:	40 e0       	ldi	r20, 0x00	; 0
     15c:	65 e2       	ldi	r22, 0x25	; 37
     15e:	83 e5       	ldi	r24, 0x53	; 83
     160:	0a d5       	rcall	.+2580   	; 0xb76 <TWI_ByteWrite>
	TWI_ByteWrite(Slave_Address, ADXL345_REG_TIME_INACT, 0x00);
     162:	40 e0       	ldi	r20, 0x00	; 0
     164:	66 e2       	ldi	r22, 0x26	; 38
     166:	83 e5       	ldi	r24, 0x53	; 83
     168:	06 d5       	rcall	.+2572   	; 0xb76 <TWI_ByteWrite>
	TWI_ByteWrite(Slave_Address, ADXL345_REG_THRESH_FF, 0x00);
     16a:	40 e0       	ldi	r20, 0x00	; 0
     16c:	68 e2       	ldi	r22, 0x28	; 40
     16e:	83 e5       	ldi	r24, 0x53	; 83
     170:	02 d5       	rcall	.+2564   	; 0xb76 <TWI_ByteWrite>
	TWI_ByteWrite(Slave_Address, ADXL345_REG_TIME_FF, 0x00);
     172:	40 e0       	ldi	r20, 0x00	; 0
     174:	69 e2       	ldi	r22, 0x29	; 41
     176:	83 e5       	ldi	r24, 0x53	; 83
     178:	fe d4       	rcall	.+2556   	; 0xb76 <TWI_ByteWrite>
     17a:	ae 01       	movw	r20, r28

	u_int8 value;
	TWI_ByteRead(Slave_Address, ADXL345_REG_ACT_INACT_CTL, &value);
     17c:	4f 5f       	subi	r20, 0xFF	; 255
     17e:	5f 4f       	sbci	r21, 0xFF	; 255
     180:	67 e2       	ldi	r22, 0x27	; 39
     182:	83 e5       	ldi	r24, 0x53	; 83
     184:	18 d5       	rcall	.+2608   	; 0xbb6 <TWI_ByteRead>
     186:	49 81       	ldd	r20, Y+1	; 0x01
	value &= 0b10001000;
     188:	48 78       	andi	r20, 0x88	; 136
     18a:	49 83       	std	Y+1, r20	; 0x01
     18c:	67 e2       	ldi	r22, 0x27	; 39
	TWI_ByteWrite(Slave_Address, ADXL345_REG_ACT_INACT_CTL, value);
     18e:	83 e5       	ldi	r24, 0x53	; 83
     190:	f2 d4       	rcall	.+2532   	; 0xb76 <TWI_ByteWrite>
     192:	ae 01       	movw	r20, r28

	TWI_ByteRead(Slave_Address, ADXL345_REG_TAP_AXES, &value);
     194:	4f 5f       	subi	r20, 0xFF	; 255
     196:	5f 4f       	sbci	r21, 0xFF	; 255
     198:	6a e2       	ldi	r22, 0x2A	; 42
     19a:	83 e5       	ldi	r24, 0x53	; 83
     19c:	0c d5       	rcall	.+2584   	; 0xbb6 <TWI_ByteRead>
     19e:	49 81       	ldd	r20, Y+1	; 0x01
     1a0:	48 7f       	andi	r20, 0xF8	; 248
	value &= 0b11111000;
     1a2:	49 83       	std	Y+1, r20	; 0x01
     1a4:	6a e2       	ldi	r22, 0x2A	; 42
     1a6:	83 e5       	ldi	r24, 0x53	; 83
	TWI_ByteWrite(Slave_Address, ADXL345_REG_TAP_AXES, value);
     1a8:	e6 d4       	rcall	.+2508   	; 0xb76 <TWI_ByteWrite>
     1aa:	0f 90       	pop	r0
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
}
     1b0:	08 95       	ret

000001b2 <Accelerometor_init>:
     1b2:	0f 93       	push	r16
     1b4:	03 e5       	ldi	r16, 0x53	; 83
     1b6:	20 e8       	ldi	r18, 0x80	; 128
#include "ADXL345.h"

void Accelerometor_init()
{
	TWI_Init(TWI_PRESCALER,TWI_interrupt_State,TWI_F_SCL,Slave_Address);
     1b8:	3a e1       	ldi	r19, 0x1A	; 26
     1ba:	46 e0       	ldi	r20, 0x06	; 6
     1bc:	50 e0       	ldi	r21, 0x00	; 0
     1be:	60 e0       	ldi	r22, 0x00	; 0
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	f7 d3       	rcall	.+2030   	; 0x9b2 <TWI_Init>
	TWI_ByteWrite(Slave_Address, ADXL345_REG_POWER_CTL, Mode);
     1c4:	48 e0       	ldi	r20, 0x08	; 8
     1c6:	6d e2       	ldi	r22, 0x2D	; 45
     1c8:	83 e5       	ldi	r24, 0x53	; 83
	clearSettings();
     1ca:	d5 d4       	rcall	.+2474   	; 0xb76 <TWI_ByteWrite>
     1cc:	a9 df       	rcall	.-174    	; 0x120 <clearSettings>
}
     1ce:	0f 91       	pop	r16
     1d0:	08 95       	ret

000001d2 <Accelerometor_ReadAxis>:
	value &= 0b11111000;
	TWI_ByteWrite(Slave_Address, ADXL345_REG_TAP_AXES, value);
}

void Accelerometor_ReadAxis( volatile ADXL345_Data *Data_ptr)
{
     1d2:	0f 93       	push	r16
     1d4:	1f 93       	push	r17
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	00 d0       	rcall	.+0      	; 0x1dc <Accelerometor_ReadAxis+0xa>
     1dc:	00 d0       	rcall	.+0      	; 0x1de <Accelerometor_ReadAxis+0xc>
     1de:	00 d0       	rcall	.+0      	; 0x1e0 <Accelerometor_ReadAxis+0xe>
     1e0:	cd b7       	in	r28, 0x3d	; 61
     1e2:	de b7       	in	r29, 0x3e	; 62
     1e4:	8c 01       	movw	r16, r24
		} Byte;
	} ADXL_DA;

	ADXL_DA X, Y, Z;

	TWI_ByteRead(Slave_Address, ADXL345_REG_DATAX0, &(X.Byte.LSB));
     1e6:	ae 01       	movw	r20, r28
     1e8:	4f 5f       	subi	r20, 0xFF	; 255
     1ea:	5f 4f       	sbci	r21, 0xFF	; 255
     1ec:	62 e3       	ldi	r22, 0x32	; 50
     1ee:	83 e5       	ldi	r24, 0x53	; 83
     1f0:	e2 d4       	rcall	.+2500   	; 0xbb6 <TWI_ByteRead>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f2:	8f e9       	ldi	r24, 0x9F	; 159
     1f4:	9f e0       	ldi	r25, 0x0F	; 15
     1f6:	01 97       	sbiw	r24, 0x01	; 1
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <Accelerometor_ReadAxis+0x24>
     1fa:	00 c0       	rjmp	.+0      	; 0x1fc <Accelerometor_ReadAxis+0x2a>
     1fc:	00 00       	nop
	_delay_ms(1);
	TWI_ByteRead(Slave_Address, ADXL345_REG_DATAX1, &(X.Byte.MSB));
     1fe:	ae 01       	movw	r20, r28
     200:	4e 5f       	subi	r20, 0xFE	; 254
     202:	5f 4f       	sbci	r21, 0xFF	; 255
     204:	63 e3       	ldi	r22, 0x33	; 51
     206:	83 e5       	ldi	r24, 0x53	; 83
     208:	d6 d4       	rcall	.+2476   	; 0xbb6 <TWI_ByteRead>
     20a:	ef e9       	ldi	r30, 0x9F	; 159
     20c:	ff e0       	ldi	r31, 0x0F	; 15
     20e:	31 97       	sbiw	r30, 0x01	; 1
     210:	f1 f7       	brne	.-4      	; 0x20e <Accelerometor_ReadAxis+0x3c>
     212:	00 c0       	rjmp	.+0      	; 0x214 <Accelerometor_ReadAxis+0x42>
     214:	00 00       	nop
	_delay_ms(1);
	TWI_ByteRead(Slave_Address, ADXL345_REG_DATAY0, &(Y.Byte.LSB));
     216:	ae 01       	movw	r20, r28
     218:	4d 5f       	subi	r20, 0xFD	; 253
     21a:	5f 4f       	sbci	r21, 0xFF	; 255
     21c:	64 e3       	ldi	r22, 0x34	; 52
     21e:	83 e5       	ldi	r24, 0x53	; 83
     220:	ca d4       	rcall	.+2452   	; 0xbb6 <TWI_ByteRead>
     222:	8f e9       	ldi	r24, 0x9F	; 159
     224:	9f e0       	ldi	r25, 0x0F	; 15
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <Accelerometor_ReadAxis+0x54>
     22a:	00 c0       	rjmp	.+0      	; 0x22c <Accelerometor_ReadAxis+0x5a>
     22c:	00 00       	nop
	_delay_ms(1);
	TWI_ByteRead(Slave_Address, ADXL345_REG_DATAY1, &(Y.Byte.MSB));
     22e:	ae 01       	movw	r20, r28
     230:	4c 5f       	subi	r20, 0xFC	; 252
     232:	5f 4f       	sbci	r21, 0xFF	; 255
     234:	65 e3       	ldi	r22, 0x35	; 53
     236:	83 e5       	ldi	r24, 0x53	; 83
     238:	be d4       	rcall	.+2428   	; 0xbb6 <TWI_ByteRead>
     23a:	ef e9       	ldi	r30, 0x9F	; 159
     23c:	ff e0       	ldi	r31, 0x0F	; 15
     23e:	31 97       	sbiw	r30, 0x01	; 1
     240:	f1 f7       	brne	.-4      	; 0x23e <Accelerometor_ReadAxis+0x6c>
     242:	00 c0       	rjmp	.+0      	; 0x244 <Accelerometor_ReadAxis+0x72>
     244:	00 00       	nop
	_delay_ms(1);
	TWI_ByteRead(Slave_Address, ADXL345_REG_DATAZ0, &(Z.Byte.LSB));
     246:	ae 01       	movw	r20, r28
     248:	4b 5f       	subi	r20, 0xFB	; 251
     24a:	5f 4f       	sbci	r21, 0xFF	; 255
     24c:	66 e3       	ldi	r22, 0x36	; 54
     24e:	83 e5       	ldi	r24, 0x53	; 83
     250:	b2 d4       	rcall	.+2404   	; 0xbb6 <TWI_ByteRead>
     252:	8f e9       	ldi	r24, 0x9F	; 159
     254:	9f e0       	ldi	r25, 0x0F	; 15
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	f1 f7       	brne	.-4      	; 0x256 <Accelerometor_ReadAxis+0x84>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <Accelerometor_ReadAxis+0x8a>
     25c:	00 00       	nop
	_delay_ms(1);
	TWI_ByteRead(Slave_Address, ADXL345_REG_DATAZ1, &(Z.Byte.MSB));
     25e:	ae 01       	movw	r20, r28
     260:	4a 5f       	subi	r20, 0xFA	; 250
     262:	5f 4f       	sbci	r21, 0xFF	; 255
     264:	67 e3       	ldi	r22, 0x37	; 55
     266:	83 e5       	ldi	r24, 0x53	; 83
     268:	a6 d4       	rcall	.+2380   	; 0xbb6 <TWI_ByteRead>
     26a:	ef e9       	ldi	r30, 0x9F	; 159
     26c:	ff e0       	ldi	r31, 0x0F	; 15
     26e:	31 97       	sbiw	r30, 0x01	; 1
     270:	f1 f7       	brne	.-4      	; 0x26e <Accelerometor_ReadAxis+0x9c>
     272:	00 c0       	rjmp	.+0      	; 0x274 <Accelerometor_ReadAxis+0xa2>
     274:	00 00       	nop
	_delay_ms(1);

	Data_ptr->X_Axis = X.Data;
     276:	69 81       	ldd	r22, Y+1	; 0x01
     278:	7a 81       	ldd	r23, Y+2	; 0x02
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__floatunsisf>
     282:	f8 01       	movw	r30, r16
     284:	60 83       	st	Z, r22
     286:	71 83       	std	Z+1, r23	; 0x01
     288:	82 83       	std	Z+2, r24	; 0x02
     28a:	93 83       	std	Z+3, r25	; 0x03
	Data_ptr->Y_Axis = Y.Data;
     28c:	6b 81       	ldd	r22, Y+3	; 0x03
     28e:	7c 81       	ldd	r23, Y+4	; 0x04
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__floatunsisf>
     298:	f8 01       	movw	r30, r16
     29a:	64 83       	std	Z+4, r22	; 0x04
     29c:	75 83       	std	Z+5, r23	; 0x05
     29e:	86 83       	std	Z+6, r24	; 0x06
     2a0:	97 83       	std	Z+7, r25	; 0x07
	Data_ptr->Z_Axis = Z.Data;
     2a2:	6d 81       	ldd	r22, Y+5	; 0x05
     2a4:	7e 81       	ldd	r23, Y+6	; 0x06
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__floatunsisf>
     2ae:	f8 01       	movw	r30, r16
     2b0:	60 87       	std	Z+8, r22	; 0x08
     2b2:	71 87       	std	Z+9, r23	; 0x09
     2b4:	82 87       	std	Z+10, r24	; 0x0a
     2b6:	93 87       	std	Z+11, r25	; 0x0b
}
     2b8:	26 96       	adiw	r28, 0x06	; 6
     2ba:	0f b6       	in	r0, 0x3f	; 63
     2bc:	f8 94       	cli
     2be:	de bf       	out	0x3e, r29	; 62
     2c0:	0f be       	out	0x3f, r0	; 63
     2c2:	cd bf       	out	0x3d, r28	; 61
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	08 95       	ret

000002ce <constrain>:

// make sure that value between range low-high
float constrain(float amt, float low, float high)
{
     2ce:	8f 92       	push	r8
     2d0:	9f 92       	push	r9
     2d2:	af 92       	push	r10
     2d4:	bf 92       	push	r11
     2d6:	cf 92       	push	r12
     2d8:	df 92       	push	r13
     2da:	ef 92       	push	r14
     2dc:	ff 92       	push	r15
     2de:	0f 93       	push	r16
     2e0:	1f 93       	push	r17
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	a6 2e       	mov	r10, r22
     2e8:	b7 2e       	mov	r11, r23
     2ea:	c8 2e       	mov	r12, r24
     2ec:	d9 2e       	mov	r13, r25
     2ee:	82 2e       	mov	r8, r18
     2f0:	93 2e       	mov	r9, r19
     2f2:	d4 2f       	mov	r29, r20
     2f4:	c5 2f       	mov	r28, r21
	return (amt < low) ? low : ((amt > high) ? high : amt);
     2f6:	0e 94 be 09 	call	0x137c	; 0x137c <__cmpsf2>
     2fa:	88 23       	and	r24, r24
     2fc:	8c f0       	brlt	.+34     	; 0x320 <constrain+0x52>
     2fe:	2e 2d       	mov	r18, r14
     300:	3f 2d       	mov	r19, r15
     302:	40 2f       	mov	r20, r16
     304:	51 2f       	mov	r21, r17
     306:	6a 2d       	mov	r22, r10
     308:	7b 2d       	mov	r23, r11
     30a:	8c 2d       	mov	r24, r12
     30c:	9d 2d       	mov	r25, r13
     30e:	0e 94 08 0b 	call	0x1610	; 0x1610 <__gesf2>
     312:	18 16       	cp	r1, r24
     314:	44 f4       	brge	.+16     	; 0x326 <constrain+0x58>
     316:	ae 2c       	mov	r10, r14
     318:	bf 2c       	mov	r11, r15
     31a:	d0 2f       	mov	r29, r16
     31c:	c1 2f       	mov	r28, r17
     31e:	05 c0       	rjmp	.+10     	; 0x32a <constrain+0x5c>
     320:	a8 2c       	mov	r10, r8
     322:	b9 2c       	mov	r11, r9
     324:	02 c0       	rjmp	.+4      	; 0x32a <constrain+0x5c>
     326:	dc 2d       	mov	r29, r12
     328:	cd 2d       	mov	r28, r13
}
     32a:	6a 2d       	mov	r22, r10
     32c:	7b 2d       	mov	r23, r11
     32e:	8d 2f       	mov	r24, r29
     330:	9c 2f       	mov	r25, r28
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	1f 91       	pop	r17
     338:	0f 91       	pop	r16
     33a:	ff 90       	pop	r15
     33c:	ef 90       	pop	r14
     33e:	df 90       	pop	r13
     340:	cf 90       	pop	r12
     342:	bf 90       	pop	r11
     344:	af 90       	pop	r10
     346:	9f 90       	pop	r9
     348:	8f 90       	pop	r8
     34a:	08 95       	ret

0000034c <setFreeFallParameters>:

// th - 0.6, duration - 0.08
void setFreeFallParameters()
{
     34c:	ef 92       	push	r14
     34e:	ff 92       	push	r15
     350:	0f 93       	push	r16
     352:	1f 93       	push	r17
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	1f 92       	push	r1
     35a:	cd b7       	in	r28, 0x3d	; 61
     35c:	de b7       	in	r29, 0x3e	; 62
	u_int8 value = 0;
     35e:	19 82       	std	Y+1, r1	; 0x01
	TWI_ByteRead(Slave_Address, ADXL345_REG_INT_MAP, &value);
     360:	ae 01       	movw	r20, r28
     362:	4f 5f       	subi	r20, 0xFF	; 255
     364:	5f 4f       	sbci	r21, 0xFF	; 255
     366:	6f e2       	ldi	r22, 0x2F	; 47
     368:	83 e5       	ldi	r24, 0x53	; 83
     36a:	25 d4       	rcall	.+2122   	; 0xbb6 <TWI_ByteRead>
	TWI_ByteWrite(Slave_Address, ADXL345_REG_INT_MAP, value | (FF_INTERRupt_NO << ADXL345_FREE_FALL));
     36c:	49 81       	ldd	r20, Y+1	; 0x01
     36e:	6f e2       	ldi	r22, 0x2F	; 47
     370:	83 e5       	ldi	r24, 0x53	; 83
     372:	01 d4       	rcall	.+2050   	; 0xb76 <TWI_ByteWrite>
	TWI_ByteRead(Slave_Address, ADXL345_REG_INT_ENABLE, &value);
     374:	ae 01       	movw	r20, r28
     376:	4f 5f       	subi	r20, 0xFF	; 255
     378:	5f 4f       	sbci	r21, 0xFF	; 255
     37a:	6e e2       	ldi	r22, 0x2E	; 46
     37c:	83 e5       	ldi	r24, 0x53	; 83
     37e:	1b d4       	rcall	.+2102   	; 0xbb6 <TWI_ByteRead>
	TWI_ByteWrite(Slave_Address, ADXL345_REG_INT_ENABLE, value | (1 << ADXL345_FREE_FALL));
     380:	49 81       	ldd	r20, Y+1	; 0x01
     382:	44 60       	ori	r20, 0x04	; 4
     384:	6e e2       	ldi	r22, 0x2E	; 46
     386:	83 e5       	ldi	r24, 0x53	; 83
     388:	f6 d3       	rcall	.+2028   	; 0xb76 <TWI_ByteWrite>
	// Set Free Fall Threshold (65.5mg / LSB)
	u_int8 scaled = constrain(FF_Threshold_Val / 0.0625f, 0, 255);
     38a:	e1 2c       	mov	r14, r1
     38c:	f1 2c       	mov	r15, r1
     38e:	0f e7       	ldi	r16, 0x7F	; 127
     390:	13 e4       	ldi	r17, 0x43	; 67
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	a9 01       	movw	r20, r18
     398:	60 e0       	ldi	r22, 0x00	; 0
     39a:	70 e0       	ldi	r23, 0x00	; 0
     39c:	80 e8       	ldi	r24, 0x80	; 128
     39e:	91 e4       	ldi	r25, 0x41	; 65
     3a0:	96 df       	rcall	.-212    	; 0x2ce <constrain>
     3a2:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__fixunssfsi>
	TWI_ByteWrite(Slave_Address, ADXL345_REG_THRESH_FF, scaled);
     3a6:	16 2f       	mov	r17, r22
     3a8:	46 2f       	mov	r20, r22
     3aa:	68 e2       	ldi	r22, 0x28	; 40
     3ac:	83 e5       	ldi	r24, 0x53	; 83
	// Set Free Fall Duration (5ms / LSB)
	u_int8 duration = constrain(FF_Duration/ 0.005f, 0, 255);
	TWI_ByteWrite(Slave_Address, ADXL345_REG_TIME_FF, duration);
     3ae:	e3 d3       	rcall	.+1990   	; 0xb76 <TWI_ByteWrite>
     3b0:	41 2f       	mov	r20, r17
     3b2:	69 e2       	ldi	r22, 0x29	; 41
     3b4:	83 e5       	ldi	r24, 0x53	; 83
     3b6:	df d3       	rcall	.+1982   	; 0xb76 <TWI_ByteWrite>
}
     3b8:	0f 90       	pop	r0
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	1f 91       	pop	r17
     3c0:	0f 91       	pop	r16
     3c2:	ff 90       	pop	r15
     3c4:	ef 90       	pop	r14
     3c6:	08 95       	ret

000003c8 <setActivityParameters>:

// th - 2
void setActivityParameters()
{
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	1f 92       	push	r1
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
	u_int8 value = 0;
     3da:	19 82       	std	Y+1, r1	; 0x01
	TWI_ByteRead(Slave_Address, ADXL345_REG_INT_MAP, &value);
     3dc:	ae 01       	movw	r20, r28
     3de:	4f 5f       	subi	r20, 0xFF	; 255
     3e0:	5f 4f       	sbci	r21, 0xFF	; 255
     3e2:	6f e2       	ldi	r22, 0x2F	; 47
     3e4:	83 e5       	ldi	r24, 0x53	; 83
     3e6:	e7 d3       	rcall	.+1998   	; 0xbb6 <TWI_ByteRead>
	TWI_ByteWrite(Slave_Address, ADXL345_REG_INT_MAP, value | (ACT_INTERRupt_NO << ADXL345_ACTIVITY));
     3e8:	49 81       	ldd	r20, Y+1	; 0x01
     3ea:	40 61       	ori	r20, 0x10	; 16
     3ec:	6f e2       	ldi	r22, 0x2F	; 47
     3ee:	83 e5       	ldi	r24, 0x53	; 83
     3f0:	c2 d3       	rcall	.+1924   	; 0xb76 <TWI_ByteWrite>
	TWI_ByteRead(Slave_Address, ADXL345_REG_INT_ENABLE, &value);
     3f2:	ae 01       	movw	r20, r28
     3f4:	4f 5f       	subi	r20, 0xFF	; 255
     3f6:	5f 4f       	sbci	r21, 0xFF	; 255
     3f8:	6e e2       	ldi	r22, 0x2E	; 46
     3fa:	83 e5       	ldi	r24, 0x53	; 83
     3fc:	dc d3       	rcall	.+1976   	; 0xbb6 <TWI_ByteRead>
	TWI_ByteWrite(Slave_Address, ADXL345_REG_INT_ENABLE, value | (1 << ADXL345_ACTIVITY));
     3fe:	49 81       	ldd	r20, Y+1	; 0x01
     400:	40 61       	ori	r20, 0x10	; 16
     402:	6e e2       	ldi	r22, 0x2E	; 46
     404:	83 e5       	ldi	r24, 0x53	; 83
     406:	b7 d3       	rcall	.+1902   	; 0xb76 <TWI_ByteWrite>
	// Set Activity Threshold (62.5mg / LSB)
	u_int8 threshold = constrain(ACT_Threshold_Val / 0.0625f, 0, 255);
     408:	e1 2c       	mov	r14, r1
     40a:	f1 2c       	mov	r15, r1
     40c:	0f e7       	ldi	r16, 0x7F	; 127
     40e:	13 e4       	ldi	r17, 0x43	; 67
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	a9 01       	movw	r20, r18
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	92 e4       	ldi	r25, 0x42	; 66
     41e:	57 df       	rcall	.-338    	; 0x2ce <constrain>
     420:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__fixunssfsi>
	TWI_ByteWrite(Slave_Address, ADXL345_REG_THRESH_ACT, threshold);
     424:	46 2f       	mov	r20, r22
     426:	64 e2       	ldi	r22, 0x24	; 36
     428:	83 e5       	ldi	r24, 0x53	; 83
	// Set Activity Axis
	TWI_ByteWrite(Slave_Address, ADXL345_REG_ACT_INACT_CTL,ACT_AXIS);
     42a:	a5 d3       	rcall	.+1866   	; 0xb76 <TWI_ByteWrite>
     42c:	40 e2       	ldi	r20, 0x20	; 32
     42e:	67 e2       	ldi	r22, 0x27	; 39
     430:	83 e5       	ldi	r24, 0x53	; 83
     432:	a1 d3       	rcall	.+1858   	; 0xb76 <TWI_ByteWrite>
}
     434:	0f 90       	pop	r0
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	1f 91       	pop	r17
     43c:	0f 91       	pop	r16
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	08 95       	ret

00000444 <ESP01_ResetBuffer>:
	return result;
}

void ESP01_ResetBuffer()
{
	memset(esp_buff, 0, esp_buff_len);
     444:	40 91 19 02 	lds	r20, 0x0219	; 0x800219 <esp_buff_len>
     448:	50 e0       	ldi	r21, 0x00	; 0
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	84 eb       	ldi	r24, 0xB4	; 180
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	0e 94 9a 0b 	call	0x1734	; 0x1734 <memset>
	esp_buff_len = 0;
     456:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <esp_buff_len>
     45a:	08 95       	ret

0000045c <INT4_Function>:



void INT4_Function(void)
{
	 UART1_TransmitString("Accident");
     45c:	8d e0       	ldi	r24, 0x0D	; 13
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	96 d4       	rcall	.+2348   	; 0xd8e <UART1_TransmitString>
	 TWI_ByteRead(ADXL345_ALTERNATIVE_ADDRESS,ADXL345_REG_INT_SOURCE,&Reg);
     462:	4b e1       	ldi	r20, 0x1B	; 27
     464:	52 e0       	ldi	r21, 0x02	; 2
     466:	60 e3       	ldi	r22, 0x30	; 48
     468:	83 e5       	ldi	r24, 0x53	; 83
     46a:	a5 c3       	rjmp	.+1866   	; 0xbb6 <TWI_ByteRead>
     46c:	08 95       	ret

0000046e <INT5_Function>:
}

void INT5_Function(void)
{
	UART1_TransmitString("Acceleration");
     46e:	86 e1       	ldi	r24, 0x16	; 22
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	8d d4       	rcall	.+2330   	; 0xd8e <UART1_TransmitString>
	TWI_ByteRead(ADXL345_ALTERNATIVE_ADDRESS,ADXL345_REG_INT_SOURCE,&Reg);
     474:	4b e1       	ldi	r20, 0x1B	; 27
     476:	52 e0       	ldi	r21, 0x02	; 2
     478:	60 e3       	ldi	r22, 0x30	; 48
     47a:	83 e5       	ldi	r24, 0x53	; 83
     47c:	9c c3       	rjmp	.+1848   	; 0xbb6 <TWI_ByteRead>
     47e:	08 95       	ret

00000480 <main>:
void INT4_Function(void);
void INT5_Function(void);


int main(void)
{
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	de b7       	in	r29, 0x3e	; 62
     488:	61 97       	sbiw	r28, 0x11	; 17
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	f8 94       	cli
     48e:	de bf       	out	0x3e, r29	; 62
     490:	0f be       	out	0x3f, r0	; 63
     492:	cd bf       	out	0x3d, r28	; 61
	EXT_INTERRUPTS_STATE(EXT_INTERRUPT4, EXT_INTERRUPT_ENABLE);
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	84 e0       	ldi	r24, 0x04	; 4
     498:	5b d0       	rcall	.+182    	; 0x550 <EXT_INTERRUPTS_STATE>
	EXT_INTERRUPTS_STATE(EXT_INTERRUPT5, EXT_INTERRUPT_ENABLE);
     49a:	60 e0       	ldi	r22, 0x00	; 0
     49c:	85 e0       	ldi	r24, 0x05	; 5
     49e:	58 d0       	rcall	.+176    	; 0x550 <EXT_INTERRUPTS_STATE>
	EXT_INTERRUPTS_SNCONTROL_MODE(EXT_INTERRUPT4, RISING_EDGE);
     4a0:	63 e0       	ldi	r22, 0x03	; 3
     4a2:	84 e0       	ldi	r24, 0x04	; 4
     4a4:	ad d0       	rcall	.+346    	; 0x600 <EXT_INTERRUPTS_SNCONTROL_MODE>
	EXT_INTERRUPTS_SNCONTROL_MODE(EXT_INTERRUPT5, RISING_EDGE);
     4a6:	63 e0       	ldi	r22, 0x03	; 3
     4a8:	85 e0       	ldi	r24, 0x05	; 5
     4aa:	aa d0       	rcall	.+340    	; 0x600 <EXT_INTERRUPTS_SNCONTROL_MODE>
	EXT_INTERRUPTS_SetCallBack(EXT_INTERRUPT4, INT4_Function);
     4ac:	6e e2       	ldi	r22, 0x2E	; 46
     4ae:	72 e0       	ldi	r23, 0x02	; 2
     4b0:	84 e0       	ldi	r24, 0x04	; 4
     4b2:	f2 d0       	rcall	.+484    	; 0x698 <EXT_INTERRUPTS_SetCallBack>
	EXT_INTERRUPTS_SetCallBack(EXT_INTERRUPT5, INT5_Function);
     4b4:	67 e3       	ldi	r22, 0x37	; 55
     4b6:	72 e0       	ldi	r23, 0x02	; 2
     4b8:	85 e0       	ldi	r24, 0x05	; 5
	UART1_Init();
     4ba:	ee d0       	rcall	.+476    	; 0x698 <EXT_INTERRUPTS_SetCallBack>
	UART1_TransmitString("Hello");
     4bc:	a9 d3       	rcall	.+1874   	; 0xc10 <UART1_Init>
     4be:	83 e2       	ldi	r24, 0x23	; 35
     4c0:	91 e0       	ldi	r25, 0x01	; 1
	GIE_Enable();
     4c2:	65 d4       	rcall	.+2250   	; 0xd8e <UART1_TransmitString>
	Accelerometor_init();
     4c4:	72 d2       	rcall	.+1252   	; 0x9aa <GIE_Enable>
     4c6:	75 de       	rcall	.-790    	; 0x1b2 <Accelerometor_init>
	setActivityParameters();
     4c8:	7f df       	rcall	.-258    	; 0x3c8 <setActivityParameters>
     4ca:	40 df       	rcall	.-384    	; 0x34c <setFreeFallParameters>
	setFreeFallParameters();
     4cc:	8c e1       	ldi	r24, 0x1C	; 28
     4ce:	92 e0       	ldi	r25, 0x02	; 2
	while(1)
	{
		Accelerometor_ReadAxis(&TestData);
     4d0:	80 de       	rcall	.-768    	; 0x1d2 <Accelerometor_ReadAxis>
     4d2:	89 e2       	ldi	r24, 0x29	; 41
     4d4:	91 e0       	ldi	r25, 0x01	; 1
		UART1_TransmitString("X = ");
     4d6:	5b d4       	rcall	.+2230   	; 0xd8e <UART1_TransmitString>
     4d8:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <TestData>
     4dc:	70 91 1d 02 	lds	r23, 0x021D	; 0x80021d <TestData+0x1>
		u_int32 xaxis = (u_int32)TestData.X_Axis * (float)0.004 * 9.80665F;
     4e0:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <TestData+0x2>
     4e4:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <TestData+0x3>
     4e8:	b5 d7       	rcall	.+3946   	; 0x1454 <__fixunssfsi>
     4ea:	e0 d7       	rcall	.+4032   	; 0x14ac <__floatunsisf>
     4ec:	2f e6       	ldi	r18, 0x6F	; 111
     4ee:	32 e1       	ldi	r19, 0x12	; 18
     4f0:	43 e8       	ldi	r20, 0x83	; 131
     4f2:	5b e3       	ldi	r21, 0x3B	; 59
     4f4:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__mulsf3>
     4f8:	2a e0       	ldi	r18, 0x0A	; 10
     4fa:	38 ee       	ldi	r19, 0xE8	; 232
     4fc:	4c e1       	ldi	r20, 0x1C	; 28
     4fe:	51 e4       	ldi	r21, 0x41	; 65
     500:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__mulsf3>
     504:	a7 d7       	rcall	.+3918   	; 0x1454 <__fixunssfsi>
     506:	8e 01       	movw	r16, r28
     508:	0f 5f       	subi	r16, 0xFF	; 255
     50a:	1f 4f       	sbci	r17, 0xFF	; 255
     50c:	21 e1       	ldi	r18, 0x11	; 17
     50e:	f8 01       	movw	r30, r16
		u_int8 xaxis_string[17];
		memset(xaxis_string, 0, 17);
     510:	11 92       	st	Z+, r1
     512:	2a 95       	dec	r18
     514:	e9 f7       	brne	.-6      	; 0x510 <main+0x90>
     516:	9f 93       	push	r25
     518:	8f 93       	push	r24
     51a:	7f 93       	push	r23
     51c:	6f 93       	push	r22
		sprintf(xaxis_string, "%d", xaxis);
     51e:	8e e2       	ldi	r24, 0x2E	; 46
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	9f 93       	push	r25
     524:	8f 93       	push	r24
     526:	1f 93       	push	r17
     528:	0f 93       	push	r16
     52a:	0e 94 a1 0b 	call	0x1742	; 0x1742 <sprintf>
     52e:	c8 01       	movw	r24, r16
     530:	2e d4       	rcall	.+2140   	; 0xd8e <UART1_TransmitString>
     532:	ff ef       	ldi	r31, 0xFF	; 255
     534:	24 e3       	ldi	r18, 0x34	; 52
		UART1_TransmitString(xaxis_string);
     536:	8c e0       	ldi	r24, 0x0C	; 12
     538:	f1 50       	subi	r31, 0x01	; 1
     53a:	20 40       	sbci	r18, 0x00	; 0
     53c:	80 40       	sbci	r24, 0x00	; 0
     53e:	e1 f7       	brne	.-8      	; 0x538 <main+0xb8>
     540:	00 c0       	rjmp	.+0      	; 0x542 <main+0xc2>
     542:	00 00       	nop
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	f8 94       	cli
     548:	de bf       	out	0x3e, r29	; 62
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	cd bf       	out	0x3d, r28	; 61
     54e:	be cf       	rjmp	.-132    	; 0x4cc <main+0x4c>

00000550 <EXT_INTERRUPTS_STATE>:
void (*EXT_INTERRUPT6_FUNCTION_PTR)(void) = 0;
void (*EXT_INTERRUPT7_FUNCTION_PTR)(void) = 0;

void EXT_INTERRUPTS_STATE(EXT_INTERRUPT_Types INTERRUPT_NO,EXT_INTERRUPT_STATE_Types STATE)
{
	switch(STATE)
     550:	66 23       	and	r22, r22
     552:	19 f0       	breq	.+6      	; 0x55a <EXT_INTERRUPTS_STATE+0xa>
     554:	61 30       	cpi	r22, 0x01	; 1
     556:	59 f1       	breq	.+86     	; 0x5ae <EXT_INTERRUPTS_STATE+0x5e>
     558:	08 95       	ret
	{
		case EXT_INTERRUPT_ENABLE:
		{
			switch(INTERRUPT_NO)
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	88 30       	cpi	r24, 0x08	; 8
     55e:	91 05       	cpc	r25, r1
     560:	08 f0       	brcs	.+2      	; 0x564 <EXT_INTERRUPTS_STATE+0x14>
     562:	4d c0       	rjmp	.+154    	; 0x5fe <EXT_INTERRUPTS_STATE+0xae>
     564:	fc 01       	movw	r30, r24
     566:	ea 5b       	subi	r30, 0xBA	; 186
     568:	ff 4f       	sbci	r31, 0xFF	; 255
     56a:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__tablejump2__>
			{
				case EXT_INTERRUPT0:
					SetBit(EIMSK_Register, INT0);
     56e:	89 b7       	in	r24, 0x39	; 57
     570:	81 60       	ori	r24, 0x01	; 1
     572:	89 bf       	out	0x39, r24	; 57
					break;
     574:	08 95       	ret
				case EXT_INTERRUPT1:
					SetBit(EIMSK_Register, INT1);
     576:	89 b7       	in	r24, 0x39	; 57
     578:	82 60       	ori	r24, 0x02	; 2
     57a:	89 bf       	out	0x39, r24	; 57
					break;
     57c:	08 95       	ret
				case EXT_INTERRUPT2:
					SetBit(EIMSK_Register, INT2);
     57e:	89 b7       	in	r24, 0x39	; 57
     580:	84 60       	ori	r24, 0x04	; 4
     582:	89 bf       	out	0x39, r24	; 57
					break;
     584:	08 95       	ret
				case EXT_INTERRUPT3:
					SetBit(EIMSK_Register, INT3);
     586:	89 b7       	in	r24, 0x39	; 57
     588:	88 60       	ori	r24, 0x08	; 8
     58a:	89 bf       	out	0x39, r24	; 57
					break;
     58c:	08 95       	ret
				case EXT_INTERRUPT4:
					SetBit(EIMSK_Register, INT4);
     58e:	89 b7       	in	r24, 0x39	; 57
     590:	80 61       	ori	r24, 0x10	; 16
     592:	89 bf       	out	0x39, r24	; 57
					break;
     594:	08 95       	ret
				case EXT_INTERRUPT5:
					SetBit(EIMSK_Register, INT5);
     596:	89 b7       	in	r24, 0x39	; 57
     598:	80 62       	ori	r24, 0x20	; 32
     59a:	89 bf       	out	0x39, r24	; 57
					break;
     59c:	08 95       	ret
				case EXT_INTERRUPT6:
					SetBit(EIMSK_Register, INT6);
     59e:	89 b7       	in	r24, 0x39	; 57
     5a0:	80 64       	ori	r24, 0x40	; 64
     5a2:	89 bf       	out	0x39, r24	; 57
					break;
     5a4:	08 95       	ret
				case EXT_INTERRUPT7:
					SetBit(EIMSK_Register, INT7);
     5a6:	89 b7       	in	r24, 0x39	; 57
     5a8:	80 68       	ori	r24, 0x80	; 128
     5aa:	89 bf       	out	0x39, r24	; 57
					break;
     5ac:	08 95       	ret
			}
			break;
		}
		case EXT_INTERRUPT_DISABLE:
		{
			switch(INTERRUPT_NO)
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	88 30       	cpi	r24, 0x08	; 8
     5b2:	91 05       	cpc	r25, r1
     5b4:	20 f5       	brcc	.+72     	; 0x5fe <EXT_INTERRUPTS_STATE+0xae>
     5b6:	fc 01       	movw	r30, r24
     5b8:	e2 5b       	subi	r30, 0xB2	; 178
     5ba:	ff 4f       	sbci	r31, 0xFF	; 255
     5bc:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__tablejump2__>
			{
				case EXT_INTERRUPT0:
					ClearBit(EIMSK_Register, INT0);
     5c0:	89 b7       	in	r24, 0x39	; 57
     5c2:	8e 7f       	andi	r24, 0xFE	; 254
     5c4:	89 bf       	out	0x39, r24	; 57
					break;
     5c6:	08 95       	ret
				case EXT_INTERRUPT1:
					ClearBit(EIMSK_Register, INT1);
     5c8:	89 b7       	in	r24, 0x39	; 57
     5ca:	8d 7f       	andi	r24, 0xFD	; 253
     5cc:	89 bf       	out	0x39, r24	; 57
					break;
     5ce:	08 95       	ret
				case EXT_INTERRUPT2:
					ClearBit(EIMSK_Register, INT2);
     5d0:	89 b7       	in	r24, 0x39	; 57
     5d2:	8b 7f       	andi	r24, 0xFB	; 251
     5d4:	89 bf       	out	0x39, r24	; 57
					break;
     5d6:	08 95       	ret
				case EXT_INTERRUPT3:
					ClearBit(EIMSK_Register, INT3);
     5d8:	89 b7       	in	r24, 0x39	; 57
     5da:	87 7f       	andi	r24, 0xF7	; 247
     5dc:	89 bf       	out	0x39, r24	; 57
					break;
     5de:	08 95       	ret
				case EXT_INTERRUPT4:
					ClearBit(EIMSK_Register, INT4);
     5e0:	89 b7       	in	r24, 0x39	; 57
     5e2:	8f 7e       	andi	r24, 0xEF	; 239
     5e4:	89 bf       	out	0x39, r24	; 57
					break;
     5e6:	08 95       	ret
				case EXT_INTERRUPT5:
					ClearBit(EIMSK_Register, INT5);
     5e8:	89 b7       	in	r24, 0x39	; 57
     5ea:	8f 7d       	andi	r24, 0xDF	; 223
     5ec:	89 bf       	out	0x39, r24	; 57
					break;
     5ee:	08 95       	ret
				case EXT_INTERRUPT6:
					ClearBit(EIMSK_Register, INT6);
     5f0:	89 b7       	in	r24, 0x39	; 57
     5f2:	8f 7b       	andi	r24, 0xBF	; 191
     5f4:	89 bf       	out	0x39, r24	; 57
					break;
     5f6:	08 95       	ret
				case EXT_INTERRUPT7:
					ClearBit(EIMSK_Register, INT7);
     5f8:	89 b7       	in	r24, 0x39	; 57
     5fa:	8f 77       	andi	r24, 0x7F	; 127
     5fc:	89 bf       	out	0x39, r24	; 57
     5fe:	08 95       	ret

00000600 <EXT_INTERRUPTS_SNCONTROL_MODE>:
	}
}

void EXT_INTERRUPTS_SNCONTROL_MODE(EXT_INTERRUPT_Types INTERRUPT_NO,SNC_MODE_Types MODE)
{
	switch(INTERRUPT_NO)
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	88 30       	cpi	r24, 0x08	; 8
     604:	91 05       	cpc	r25, r1
     606:	08 f0       	brcs	.+2      	; 0x60a <EXT_INTERRUPTS_SNCONTROL_MODE+0xa>
     608:	46 c0       	rjmp	.+140    	; 0x696 <EXT_INTERRUPTS_SNCONTROL_MODE+0x96>
     60a:	fc 01       	movw	r30, r24
     60c:	ea 5a       	subi	r30, 0xAA	; 170
     60e:	ff 4f       	sbci	r31, 0xFF	; 255
     610:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__tablejump2__>
	{
		case EXT_INTERRUPT0:
			EICRA_Register |= (MODE << ISC00);
     614:	ea e6       	ldi	r30, 0x6A	; 106
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	80 81       	ld	r24, Z
     61a:	68 2b       	or	r22, r24
     61c:	60 83       	st	Z, r22
			break;
     61e:	08 95       	ret
		case EXT_INTERRUPT1:
			EICRA_Register |= (MODE << ISC10);
     620:	ea e6       	ldi	r30, 0x6A	; 106
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	80 81       	ld	r24, Z
     626:	70 e0       	ldi	r23, 0x00	; 0
     628:	66 0f       	add	r22, r22
     62a:	77 1f       	adc	r23, r23
     62c:	66 0f       	add	r22, r22
     62e:	77 1f       	adc	r23, r23
     630:	68 2b       	or	r22, r24
     632:	60 83       	st	Z, r22
			break;
     634:	08 95       	ret
		case EXT_INTERRUPT2:
			EICRA_Register |= (MODE << ISC20);
     636:	ea e6       	ldi	r30, 0x6A	; 106
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	80 81       	ld	r24, Z
     63c:	90 e1       	ldi	r25, 0x10	; 16
     63e:	69 9f       	mul	r22, r25
     640:	b0 01       	movw	r22, r0
     642:	11 24       	eor	r1, r1
     644:	68 2b       	or	r22, r24
     646:	60 83       	st	Z, r22
			break;
     648:	08 95       	ret
		case EXT_INTERRUPT3:
			EICRA_Register |= (MODE << ISC30);
     64a:	ea e6       	ldi	r30, 0x6A	; 106
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	80 81       	ld	r24, Z
     650:	90 e4       	ldi	r25, 0x40	; 64
     652:	69 9f       	mul	r22, r25
     654:	b0 01       	movw	r22, r0
     656:	11 24       	eor	r1, r1
     658:	68 2b       	or	r22, r24
     65a:	60 83       	st	Z, r22
			break;
     65c:	08 95       	ret
		case EXT_INTERRUPT4:
			EICRB_Register |= (MODE << ISC40);
     65e:	8a b7       	in	r24, 0x3a	; 58
     660:	68 2b       	or	r22, r24
     662:	6a bf       	out	0x3a, r22	; 58
			break;
     664:	08 95       	ret
		case EXT_INTERRUPT5:
			EICRB_Register |= (MODE << ISC50);
     666:	8a b7       	in	r24, 0x3a	; 58
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	66 0f       	add	r22, r22
     66c:	77 1f       	adc	r23, r23
     66e:	66 0f       	add	r22, r22
     670:	77 1f       	adc	r23, r23
     672:	68 2b       	or	r22, r24
     674:	6a bf       	out	0x3a, r22	; 58
			break;
     676:	08 95       	ret
		case EXT_INTERRUPT6:
			EICRB_Register |= (MODE << ISC60);
     678:	8a b7       	in	r24, 0x3a	; 58
     67a:	90 e1       	ldi	r25, 0x10	; 16
     67c:	69 9f       	mul	r22, r25
     67e:	b0 01       	movw	r22, r0
     680:	11 24       	eor	r1, r1
     682:	68 2b       	or	r22, r24
     684:	6a bf       	out	0x3a, r22	; 58
			break;
     686:	08 95       	ret
		case EXT_INTERRUPT7:
			EICRB_Register |= (MODE << ISC70);
     688:	8a b7       	in	r24, 0x3a	; 58
     68a:	90 e4       	ldi	r25, 0x40	; 64
     68c:	69 9f       	mul	r22, r25
     68e:	b0 01       	movw	r22, r0
     690:	11 24       	eor	r1, r1
     692:	68 2b       	or	r22, r24
     694:	6a bf       	out	0x3a, r22	; 58
     696:	08 95       	ret

00000698 <EXT_INTERRUPTS_SetCallBack>:
	}
}

void EXT_INTERRUPTS_SetCallBack(EXT_INTERRUPT_Types INTERRUPT_NO,void (*EXT_INTERRUPT_FUNCTION_COPY_PTR)(void))
{
	switch(INTERRUPT_NO)
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	88 30       	cpi	r24, 0x08	; 8
     69c:	91 05       	cpc	r25, r1
     69e:	60 f5       	brcc	.+88     	; 0x6f8 <EXT_INTERRUPTS_SetCallBack+0x60>
     6a0:	fc 01       	movw	r30, r24
     6a2:	e2 5a       	subi	r30, 0xA2	; 162
     6a4:	ff 4f       	sbci	r31, 0xFF	; 255
     6a6:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__tablejump2__>
	{
		case EXT_INTERRUPT0:
			EXT_INTERRUPT0_FUNCTION_PTR = EXT_INTERRUPT_FUNCTION_COPY_PTR;
     6aa:	70 93 41 01 	sts	0x0141, r23	; 0x800141 <EXT_INTERRUPT0_FUNCTION_PTR+0x1>
     6ae:	60 93 40 01 	sts	0x0140, r22	; 0x800140 <EXT_INTERRUPT0_FUNCTION_PTR>
			break;
     6b2:	08 95       	ret
		case EXT_INTERRUPT1:
			EXT_INTERRUPT1_FUNCTION_PTR = EXT_INTERRUPT_FUNCTION_COPY_PTR;
     6b4:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <EXT_INTERRUPT1_FUNCTION_PTR+0x1>
     6b8:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <EXT_INTERRUPT1_FUNCTION_PTR>
			break;
     6bc:	08 95       	ret
		case EXT_INTERRUPT2:
			EXT_INTERRUPT2_FUNCTION_PTR = EXT_INTERRUPT_FUNCTION_COPY_PTR;
     6be:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <EXT_INTERRUPT2_FUNCTION_PTR+0x1>
     6c2:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <EXT_INTERRUPT2_FUNCTION_PTR>
			break;
     6c6:	08 95       	ret
		case EXT_INTERRUPT3:
			EXT_INTERRUPT3_FUNCTION_PTR = EXT_INTERRUPT_FUNCTION_COPY_PTR;
     6c8:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <EXT_INTERRUPT3_FUNCTION_PTR+0x1>
     6cc:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <EXT_INTERRUPT3_FUNCTION_PTR>
			break;
     6d0:	08 95       	ret
		case EXT_INTERRUPT4:
			EXT_INTERRUPT4_FUNCTION_PTR = EXT_INTERRUPT_FUNCTION_COPY_PTR;
     6d2:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <EXT_INTERRUPT4_FUNCTION_PTR+0x1>
     6d6:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <EXT_INTERRUPT4_FUNCTION_PTR>
			break;
     6da:	08 95       	ret
		case EXT_INTERRUPT5:
			EXT_INTERRUPT5_FUNCTION_PTR = EXT_INTERRUPT_FUNCTION_COPY_PTR;
     6dc:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <EXT_INTERRUPT5_FUNCTION_PTR+0x1>
     6e0:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <EXT_INTERRUPT5_FUNCTION_PTR>
			break;
     6e4:	08 95       	ret
		case EXT_INTERRUPT6:
			EXT_INTERRUPT6_FUNCTION_PTR = EXT_INTERRUPT_FUNCTION_COPY_PTR;
     6e6:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <EXT_INTERRUPT6_FUNCTION_PTR+0x1>
     6ea:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <EXT_INTERRUPT6_FUNCTION_PTR>
			break;
     6ee:	08 95       	ret
		case EXT_INTERRUPT7:
			EXT_INTERRUPT7_FUNCTION_PTR = EXT_INTERRUPT_FUNCTION_COPY_PTR;
     6f0:	70 93 33 01 	sts	0x0133, r23	; 0x800133 <__data_end+0x1>
     6f4:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <__data_end>
     6f8:	08 95       	ret

000006fa <__vector_1>:
			break;
	}
}

ISR(INT0_vect)
{
     6fa:	1f 92       	push	r1
     6fc:	0f 92       	push	r0
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	0f 92       	push	r0
     702:	11 24       	eor	r1, r1
     704:	0b b6       	in	r0, 0x3b	; 59
     706:	0f 92       	push	r0
     708:	2f 93       	push	r18
     70a:	3f 93       	push	r19
     70c:	4f 93       	push	r20
     70e:	5f 93       	push	r21
     710:	6f 93       	push	r22
     712:	7f 93       	push	r23
     714:	8f 93       	push	r24
     716:	9f 93       	push	r25
     718:	af 93       	push	r26
     71a:	bf 93       	push	r27
     71c:	ef 93       	push	r30
     71e:	ff 93       	push	r31
	EXT_INTERRUPT0_FUNCTION_PTR();
     720:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <EXT_INTERRUPT0_FUNCTION_PTR>
     724:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <EXT_INTERRUPT0_FUNCTION_PTR+0x1>
     728:	09 95       	icall
}
     72a:	ff 91       	pop	r31
     72c:	ef 91       	pop	r30
     72e:	bf 91       	pop	r27
     730:	af 91       	pop	r26
     732:	9f 91       	pop	r25
     734:	8f 91       	pop	r24
     736:	7f 91       	pop	r23
     738:	6f 91       	pop	r22
     73a:	5f 91       	pop	r21
     73c:	4f 91       	pop	r20
     73e:	3f 91       	pop	r19
     740:	2f 91       	pop	r18
     742:	0f 90       	pop	r0
     744:	0b be       	out	0x3b, r0	; 59
     746:	0f 90       	pop	r0
     748:	0f be       	out	0x3f, r0	; 63
     74a:	0f 90       	pop	r0
     74c:	1f 90       	pop	r1
     74e:	18 95       	reti

00000750 <__vector_2>:

ISR(INT1_vect)
{
     750:	1f 92       	push	r1
     752:	0f 92       	push	r0
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	0f 92       	push	r0
     758:	11 24       	eor	r1, r1
     75a:	0b b6       	in	r0, 0x3b	; 59
     75c:	0f 92       	push	r0
     75e:	2f 93       	push	r18
     760:	3f 93       	push	r19
     762:	4f 93       	push	r20
     764:	5f 93       	push	r21
     766:	6f 93       	push	r22
     768:	7f 93       	push	r23
     76a:	8f 93       	push	r24
     76c:	9f 93       	push	r25
     76e:	af 93       	push	r26
     770:	bf 93       	push	r27
     772:	ef 93       	push	r30
     774:	ff 93       	push	r31
	EXT_INTERRUPT1_FUNCTION_PTR();
     776:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <EXT_INTERRUPT1_FUNCTION_PTR>
     77a:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <EXT_INTERRUPT1_FUNCTION_PTR+0x1>
     77e:	09 95       	icall
}
     780:	ff 91       	pop	r31
     782:	ef 91       	pop	r30
     784:	bf 91       	pop	r27
     786:	af 91       	pop	r26
     788:	9f 91       	pop	r25
     78a:	8f 91       	pop	r24
     78c:	7f 91       	pop	r23
     78e:	6f 91       	pop	r22
     790:	5f 91       	pop	r21
     792:	4f 91       	pop	r20
     794:	3f 91       	pop	r19
     796:	2f 91       	pop	r18
     798:	0f 90       	pop	r0
     79a:	0b be       	out	0x3b, r0	; 59
     79c:	0f 90       	pop	r0
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	0f 90       	pop	r0
     7a2:	1f 90       	pop	r1
     7a4:	18 95       	reti

000007a6 <__vector_3>:

ISR(INT2_vect)
{
     7a6:	1f 92       	push	r1
     7a8:	0f 92       	push	r0
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	0f 92       	push	r0
     7ae:	11 24       	eor	r1, r1
     7b0:	0b b6       	in	r0, 0x3b	; 59
     7b2:	0f 92       	push	r0
     7b4:	2f 93       	push	r18
     7b6:	3f 93       	push	r19
     7b8:	4f 93       	push	r20
     7ba:	5f 93       	push	r21
     7bc:	6f 93       	push	r22
     7be:	7f 93       	push	r23
     7c0:	8f 93       	push	r24
     7c2:	9f 93       	push	r25
     7c4:	af 93       	push	r26
     7c6:	bf 93       	push	r27
     7c8:	ef 93       	push	r30
     7ca:	ff 93       	push	r31
	EXT_INTERRUPT2_FUNCTION_PTR();
     7cc:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <EXT_INTERRUPT2_FUNCTION_PTR>
     7d0:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <EXT_INTERRUPT2_FUNCTION_PTR+0x1>
     7d4:	09 95       	icall
}
     7d6:	ff 91       	pop	r31
     7d8:	ef 91       	pop	r30
     7da:	bf 91       	pop	r27
     7dc:	af 91       	pop	r26
     7de:	9f 91       	pop	r25
     7e0:	8f 91       	pop	r24
     7e2:	7f 91       	pop	r23
     7e4:	6f 91       	pop	r22
     7e6:	5f 91       	pop	r21
     7e8:	4f 91       	pop	r20
     7ea:	3f 91       	pop	r19
     7ec:	2f 91       	pop	r18
     7ee:	0f 90       	pop	r0
     7f0:	0b be       	out	0x3b, r0	; 59
     7f2:	0f 90       	pop	r0
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	0f 90       	pop	r0
     7f8:	1f 90       	pop	r1
     7fa:	18 95       	reti

000007fc <__vector_4>:

ISR(INT3_vect)
{
     7fc:	1f 92       	push	r1
     7fe:	0f 92       	push	r0
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	0f 92       	push	r0
     804:	11 24       	eor	r1, r1
     806:	0b b6       	in	r0, 0x3b	; 59
     808:	0f 92       	push	r0
     80a:	2f 93       	push	r18
     80c:	3f 93       	push	r19
     80e:	4f 93       	push	r20
     810:	5f 93       	push	r21
     812:	6f 93       	push	r22
     814:	7f 93       	push	r23
     816:	8f 93       	push	r24
     818:	9f 93       	push	r25
     81a:	af 93       	push	r26
     81c:	bf 93       	push	r27
     81e:	ef 93       	push	r30
     820:	ff 93       	push	r31
	EXT_INTERRUPT3_FUNCTION_PTR();
     822:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <EXT_INTERRUPT3_FUNCTION_PTR>
     826:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <EXT_INTERRUPT3_FUNCTION_PTR+0x1>
     82a:	09 95       	icall
}
     82c:	ff 91       	pop	r31
     82e:	ef 91       	pop	r30
     830:	bf 91       	pop	r27
     832:	af 91       	pop	r26
     834:	9f 91       	pop	r25
     836:	8f 91       	pop	r24
     838:	7f 91       	pop	r23
     83a:	6f 91       	pop	r22
     83c:	5f 91       	pop	r21
     83e:	4f 91       	pop	r20
     840:	3f 91       	pop	r19
     842:	2f 91       	pop	r18
     844:	0f 90       	pop	r0
     846:	0b be       	out	0x3b, r0	; 59
     848:	0f 90       	pop	r0
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	0f 90       	pop	r0
     84e:	1f 90       	pop	r1
     850:	18 95       	reti

00000852 <__vector_5>:

ISR(INT4_vect)
{
     852:	1f 92       	push	r1
     854:	0f 92       	push	r0
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	0f 92       	push	r0
     85a:	11 24       	eor	r1, r1
     85c:	0b b6       	in	r0, 0x3b	; 59
     85e:	0f 92       	push	r0
     860:	2f 93       	push	r18
     862:	3f 93       	push	r19
     864:	4f 93       	push	r20
     866:	5f 93       	push	r21
     868:	6f 93       	push	r22
     86a:	7f 93       	push	r23
     86c:	8f 93       	push	r24
     86e:	9f 93       	push	r25
     870:	af 93       	push	r26
     872:	bf 93       	push	r27
     874:	ef 93       	push	r30
     876:	ff 93       	push	r31
	EXT_INTERRUPT4_FUNCTION_PTR();
     878:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <EXT_INTERRUPT4_FUNCTION_PTR>
     87c:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <EXT_INTERRUPT4_FUNCTION_PTR+0x1>
     880:	09 95       	icall
}
     882:	ff 91       	pop	r31
     884:	ef 91       	pop	r30
     886:	bf 91       	pop	r27
     888:	af 91       	pop	r26
     88a:	9f 91       	pop	r25
     88c:	8f 91       	pop	r24
     88e:	7f 91       	pop	r23
     890:	6f 91       	pop	r22
     892:	5f 91       	pop	r21
     894:	4f 91       	pop	r20
     896:	3f 91       	pop	r19
     898:	2f 91       	pop	r18
     89a:	0f 90       	pop	r0
     89c:	0b be       	out	0x3b, r0	; 59
     89e:	0f 90       	pop	r0
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	0f 90       	pop	r0
     8a4:	1f 90       	pop	r1
     8a6:	18 95       	reti

000008a8 <__vector_6>:

ISR(INT5_vect)
{
     8a8:	1f 92       	push	r1
     8aa:	0f 92       	push	r0
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	0f 92       	push	r0
     8b0:	11 24       	eor	r1, r1
     8b2:	0b b6       	in	r0, 0x3b	; 59
     8b4:	0f 92       	push	r0
     8b6:	2f 93       	push	r18
     8b8:	3f 93       	push	r19
     8ba:	4f 93       	push	r20
     8bc:	5f 93       	push	r21
     8be:	6f 93       	push	r22
     8c0:	7f 93       	push	r23
     8c2:	8f 93       	push	r24
     8c4:	9f 93       	push	r25
     8c6:	af 93       	push	r26
     8c8:	bf 93       	push	r27
     8ca:	ef 93       	push	r30
     8cc:	ff 93       	push	r31
	EXT_INTERRUPT5_FUNCTION_PTR();
     8ce:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <EXT_INTERRUPT5_FUNCTION_PTR>
     8d2:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <EXT_INTERRUPT5_FUNCTION_PTR+0x1>
     8d6:	09 95       	icall
}
     8d8:	ff 91       	pop	r31
     8da:	ef 91       	pop	r30
     8dc:	bf 91       	pop	r27
     8de:	af 91       	pop	r26
     8e0:	9f 91       	pop	r25
     8e2:	8f 91       	pop	r24
     8e4:	7f 91       	pop	r23
     8e6:	6f 91       	pop	r22
     8e8:	5f 91       	pop	r21
     8ea:	4f 91       	pop	r20
     8ec:	3f 91       	pop	r19
     8ee:	2f 91       	pop	r18
     8f0:	0f 90       	pop	r0
     8f2:	0b be       	out	0x3b, r0	; 59
     8f4:	0f 90       	pop	r0
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	0f 90       	pop	r0
     8fa:	1f 90       	pop	r1
     8fc:	18 95       	reti

000008fe <__vector_7>:

ISR(INT6_vect)
{
     8fe:	1f 92       	push	r1
     900:	0f 92       	push	r0
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	0f 92       	push	r0
     906:	11 24       	eor	r1, r1
     908:	0b b6       	in	r0, 0x3b	; 59
     90a:	0f 92       	push	r0
     90c:	2f 93       	push	r18
     90e:	3f 93       	push	r19
     910:	4f 93       	push	r20
     912:	5f 93       	push	r21
     914:	6f 93       	push	r22
     916:	7f 93       	push	r23
     918:	8f 93       	push	r24
     91a:	9f 93       	push	r25
     91c:	af 93       	push	r26
     91e:	bf 93       	push	r27
     920:	ef 93       	push	r30
     922:	ff 93       	push	r31
	EXT_INTERRUPT6_FUNCTION_PTR();
     924:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <EXT_INTERRUPT6_FUNCTION_PTR>
     928:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <EXT_INTERRUPT6_FUNCTION_PTR+0x1>
     92c:	09 95       	icall
}
     92e:	ff 91       	pop	r31
     930:	ef 91       	pop	r30
     932:	bf 91       	pop	r27
     934:	af 91       	pop	r26
     936:	9f 91       	pop	r25
     938:	8f 91       	pop	r24
     93a:	7f 91       	pop	r23
     93c:	6f 91       	pop	r22
     93e:	5f 91       	pop	r21
     940:	4f 91       	pop	r20
     942:	3f 91       	pop	r19
     944:	2f 91       	pop	r18
     946:	0f 90       	pop	r0
     948:	0b be       	out	0x3b, r0	; 59
     94a:	0f 90       	pop	r0
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	0f 90       	pop	r0
     950:	1f 90       	pop	r1
     952:	18 95       	reti

00000954 <__vector_8>:

ISR(INT7_vect)
{
     954:	1f 92       	push	r1
     956:	0f 92       	push	r0
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	0f 92       	push	r0
     95c:	11 24       	eor	r1, r1
     95e:	0b b6       	in	r0, 0x3b	; 59
     960:	0f 92       	push	r0
     962:	2f 93       	push	r18
     964:	3f 93       	push	r19
     966:	4f 93       	push	r20
     968:	5f 93       	push	r21
     96a:	6f 93       	push	r22
     96c:	7f 93       	push	r23
     96e:	8f 93       	push	r24
     970:	9f 93       	push	r25
     972:	af 93       	push	r26
     974:	bf 93       	push	r27
     976:	ef 93       	push	r30
     978:	ff 93       	push	r31
	EXT_INTERRUPT7_FUNCTION_PTR();
     97a:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <__data_end>
     97e:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <__data_end+0x1>
     982:	09 95       	icall
     984:	ff 91       	pop	r31
     986:	ef 91       	pop	r30
     988:	bf 91       	pop	r27
     98a:	af 91       	pop	r26
     98c:	9f 91       	pop	r25
     98e:	8f 91       	pop	r24
     990:	7f 91       	pop	r23
     992:	6f 91       	pop	r22
     994:	5f 91       	pop	r21
     996:	4f 91       	pop	r20
     998:	3f 91       	pop	r19
     99a:	2f 91       	pop	r18
     99c:	0f 90       	pop	r0
     99e:	0b be       	out	0x3b, r0	; 59
     9a0:	0f 90       	pop	r0
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	0f 90       	pop	r0
     9a6:	1f 90       	pop	r1
     9a8:	18 95       	reti

000009aa <GIE_Enable>:
	ClearBit(GIE_SREG, GIE_SREG_IBIT);
}

void GIE_Enable(void)
{
	SetBit(GIE_SREG, GIE_SREG_IBIT);
     9aa:	8f b7       	in	r24, 0x3f	; 63
     9ac:	80 68       	ori	r24, 0x80	; 128
     9ae:	8f bf       	out	0x3f, r24	; 63
     9b0:	08 95       	ret

000009b2 <TWI_Init>:
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(ISBETCLEAR(TWCR,TWINT));
    /* Read Data */
    return TWDR;
}
     9b2:	0f 93       	push	r16
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	c8 2f       	mov	r28, r24
     9ba:	d6 2f       	mov	r29, r22
     9bc:	00 0f       	add	r16, r16
     9be:	00 93 72 00 	sts	0x0072, r16	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
     9c2:	81 30       	cpi	r24, 0x01	; 1
     9c4:	e9 f0       	breq	.+58     	; 0xa00 <TWI_Init+0x4e>
     9c6:	30 f0       	brcs	.+12     	; 0x9d4 <TWI_Init+0x22>
     9c8:	82 30       	cpi	r24, 0x02	; 2
     9ca:	91 f1       	breq	.+100    	; 0xa30 <TWI_Init+0x7e>
     9cc:	83 30       	cpi	r24, 0x03	; 3
     9ce:	09 f4       	brne	.+2      	; 0x9d2 <TWI_Init+0x20>
     9d0:	58 c0       	rjmp	.+176    	; 0xa82 <TWI_Init+0xd0>
     9d2:	87 c0       	rjmp	.+270    	; 0xae2 <TWI_Init+0x130>
     9d4:	ca 01       	movw	r24, r20
     9d6:	b9 01       	movw	r22, r18
     9d8:	69 d5       	rcall	.+2770   	; 0x14ac <__floatunsisf>
     9da:	9b 01       	movw	r18, r22
     9dc:	ac 01       	movw	r20, r24
     9de:	6a d4       	rcall	.+2260   	; 0x12b4 <__addsf3>
     9e0:	9b 01       	movw	r18, r22
     9e2:	ac 01       	movw	r20, r24
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	74 e2       	ldi	r23, 0x24	; 36
     9e8:	84 e7       	ldi	r24, 0x74	; 116
     9ea:	9b e4       	ldi	r25, 0x4B	; 75
     9ec:	cb d4       	rcall	.+2454   	; 0x1384 <__divsf3>
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	40 e0       	ldi	r20, 0x00	; 0
     9f4:	51 e4       	ldi	r21, 0x41	; 65
     9f6:	5d d4       	rcall	.+2234   	; 0x12b2 <__subsf3>
     9f8:	2d d5       	rcall	.+2650   	; 0x1454 <__fixunssfsi>
     9fa:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     9fe:	71 c0       	rjmp	.+226    	; 0xae2 <TWI_Init+0x130>
     a00:	ca 01       	movw	r24, r20
     a02:	b9 01       	movw	r22, r18
     a04:	53 d5       	rcall	.+2726   	; 0x14ac <__floatunsisf>
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	51 e4       	ldi	r21, 0x41	; 65
     a0e:	04 d6       	rcall	.+3080   	; 0x1618 <__mulsf3>
     a10:	9b 01       	movw	r18, r22
     a12:	ac 01       	movw	r20, r24
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	74 e2       	ldi	r23, 0x24	; 36
     a18:	84 e7       	ldi	r24, 0x74	; 116
     a1a:	9b e4       	ldi	r25, 0x4B	; 75
     a1c:	b3 d4       	rcall	.+2406   	; 0x1384 <__divsf3>
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	40 e0       	ldi	r20, 0x00	; 0
     a24:	50 e4       	ldi	r21, 0x40	; 64
     a26:	45 d4       	rcall	.+2186   	; 0x12b2 <__subsf3>
     a28:	15 d5       	rcall	.+2602   	; 0x1454 <__fixunssfsi>
     a2a:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     a2e:	59 c0       	rjmp	.+178    	; 0xae2 <TWI_Init+0x130>
     a30:	da 01       	movw	r26, r20
     a32:	c9 01       	movw	r24, r18
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	aa 1f       	adc	r26, r26
     a3a:	bb 1f       	adc	r27, r27
     a3c:	88 0f       	add	r24, r24
     a3e:	99 1f       	adc	r25, r25
     a40:	aa 1f       	adc	r26, r26
     a42:	bb 1f       	adc	r27, r27
     a44:	88 0f       	add	r24, r24
     a46:	99 1f       	adc	r25, r25
     a48:	aa 1f       	adc	r26, r26
     a4a:	bb 1f       	adc	r27, r27
     a4c:	88 0f       	add	r24, r24
     a4e:	99 1f       	adc	r25, r25
     a50:	aa 1f       	adc	r26, r26
     a52:	bb 1f       	adc	r27, r27
     a54:	bc 01       	movw	r22, r24
     a56:	cd 01       	movw	r24, r26
     a58:	66 0f       	add	r22, r22
     a5a:	77 1f       	adc	r23, r23
     a5c:	88 1f       	adc	r24, r24
     a5e:	99 1f       	adc	r25, r25
     a60:	25 d5       	rcall	.+2634   	; 0x14ac <__floatunsisf>
     a62:	9b 01       	movw	r18, r22
     a64:	ac 01       	movw	r20, r24
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	74 e2       	ldi	r23, 0x24	; 36
     a6a:	84 e7       	ldi	r24, 0x74	; 116
     a6c:	9b e4       	ldi	r25, 0x4B	; 75
     a6e:	8a d4       	rcall	.+2324   	; 0x1384 <__divsf3>
     a70:	20 e0       	ldi	r18, 0x00	; 0
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	5f e3       	ldi	r21, 0x3F	; 63
     a78:	1c d4       	rcall	.+2104   	; 0x12b2 <__subsf3>
     a7a:	ec d4       	rcall	.+2520   	; 0x1454 <__fixunssfsi>
     a7c:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     a80:	30 c0       	rjmp	.+96     	; 0xae2 <TWI_Init+0x130>
     a82:	da 01       	movw	r26, r20
     a84:	c9 01       	movw	r24, r18
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	aa 1f       	adc	r26, r26
     a8c:	bb 1f       	adc	r27, r27
     a8e:	88 0f       	add	r24, r24
     a90:	99 1f       	adc	r25, r25
     a92:	aa 1f       	adc	r26, r26
     a94:	bb 1f       	adc	r27, r27
     a96:	88 0f       	add	r24, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	aa 1f       	adc	r26, r26
     a9c:	bb 1f       	adc	r27, r27
     a9e:	88 0f       	add	r24, r24
     aa0:	99 1f       	adc	r25, r25
     aa2:	aa 1f       	adc	r26, r26
     aa4:	bb 1f       	adc	r27, r27
     aa6:	88 0f       	add	r24, r24
     aa8:	99 1f       	adc	r25, r25
     aaa:	aa 1f       	adc	r26, r26
     aac:	bb 1f       	adc	r27, r27
     aae:	88 0f       	add	r24, r24
     ab0:	99 1f       	adc	r25, r25
     ab2:	aa 1f       	adc	r26, r26
     ab4:	bb 1f       	adc	r27, r27
     ab6:	bc 01       	movw	r22, r24
     ab8:	cd 01       	movw	r24, r26
     aba:	66 0f       	add	r22, r22
     abc:	77 1f       	adc	r23, r23
     abe:	88 1f       	adc	r24, r24
     ac0:	99 1f       	adc	r25, r25
     ac2:	f4 d4       	rcall	.+2536   	; 0x14ac <__floatunsisf>
     ac4:	9b 01       	movw	r18, r22
     ac6:	ac 01       	movw	r20, r24
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	74 e2       	ldi	r23, 0x24	; 36
     acc:	84 e7       	ldi	r24, 0x74	; 116
     ace:	9b e4       	ldi	r25, 0x4B	; 75
     ad0:	59 d4       	rcall	.+2226   	; 0x1384 <__divsf3>
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	5e e3       	ldi	r21, 0x3E	; 62
     ada:	eb d3       	rcall	.+2006   	; 0x12b2 <__subsf3>
     adc:	bb d4       	rcall	.+2422   	; 0x1454 <__fixunssfsi>
     ade:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     ae2:	e1 e7       	ldi	r30, 0x71	; 113
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	80 81       	ld	r24, Z
     ae8:	c3 70       	andi	r28, 0x03	; 3
     aea:	c8 2b       	or	r28, r24
     aec:	c0 83       	st	Z, r28
     aee:	e4 e7       	ldi	r30, 0x74	; 116
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	80 81       	ld	r24, Z
     af4:	6d 2f       	mov	r22, r29
     af6:	61 70       	andi	r22, 0x01	; 1
     af8:	68 2b       	or	r22, r24
     afa:	64 60       	ori	r22, 0x04	; 4
     afc:	60 83       	st	Z, r22
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	0f 91       	pop	r16
     b04:	08 95       	ret

00000b06 <TWI_Start>:
     b06:	e4 e7       	ldi	r30, 0x74	; 116
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	87 70       	andi	r24, 0x07	; 7
     b0e:	80 83       	st	Z, r24
     b10:	80 81       	ld	r24, Z
     b12:	80 6a       	ori	r24, 0xA0	; 160
     b14:	80 83       	st	Z, r24
     b16:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     b1a:	88 23       	and	r24, r24
     b1c:	e4 f7       	brge	.-8      	; 0xb16 <TWI_Start+0x10>
     b1e:	08 95       	ret

00000b20 <TWI_Stop>:
     b20:	e4 e7       	ldi	r30, 0x74	; 116
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	80 81       	ld	r24, Z
     b26:	87 70       	andi	r24, 0x07	; 7
     b28:	80 83       	st	Z, r24
     b2a:	80 81       	ld	r24, Z
     b2c:	80 69       	ori	r24, 0x90	; 144
     b2e:	80 83       	st	Z, r24
     b30:	08 95       	ret

00000b32 <TWI_Write>:
     b32:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     b36:	e4 e7       	ldi	r30, 0x74	; 116
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	80 81       	ld	r24, Z
     b3c:	87 70       	andi	r24, 0x07	; 7
     b3e:	80 83       	st	Z, r24
     b40:	80 81       	ld	r24, Z
     b42:	80 68       	ori	r24, 0x80	; 128
     b44:	80 83       	st	Z, r24
     b46:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     b4a:	88 23       	and	r24, r24
     b4c:	e4 f7       	brge	.-8      	; 0xb46 <TWI_Write+0x14>
     b4e:	08 95       	ret

00000b50 <TWI_Read_With_NACK>:

u_int8 TWI_Read_With_NACK(void)
{

	TWCR &= 0X07;
     b50:	e4 e7       	ldi	r30, 0x74	; 116
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	87 70       	andi	r24, 0x07	; 7
     b58:	80 83       	st	Z, r24
	TWCR |= (1<<TWINT);
     b5a:	80 81       	ld	r24, Z
     b5c:	80 68       	ori	r24, 0x80	; 128
     b5e:	80 83       	st	Z, r24
	
	
	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(ISBETCLEAR(TWCR,TWINT));
     b60:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     b64:	88 23       	and	r24, r24
     b66:	e4 f7       	brge	.-8      	; 0xb60 <TWI_Read_With_NACK+0x10>
	/* Read Data */
	return TWDR;
     b68:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
}
     b6c:	08 95       	ret

00000b6e <TWI_Get_Status>:

u_int8 TWI_Get_Status(void)
{
   
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    return (TWSR & 0xF8);
     b6e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
}
     b72:	88 7f       	andi	r24, 0xF8	; 248
     b74:	08 95       	ret

00000b76 <TWI_ByteWrite>:


TWI_States TWI_ByteWrite(u_int8 SL_Address,u_int8 Reg_Address ,u_int8 Data )
{
     b76:	1f 93       	push	r17
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	18 2f       	mov	r17, r24
     b7e:	d6 2f       	mov	r29, r22
     b80:	c4 2f       	mov	r28, r20
	TWI_Start();
     b82:	c1 df       	rcall	.-126    	; 0xb06 <TWI_Start>
	while (TWI_Get_Status() != TW_START); // 0x08 
     b84:	f4 df       	rcall	.-24     	; 0xb6e <TWI_Get_Status>
     b86:	88 30       	cpi	r24, 0x08	; 8
     b88:	e9 f7       	brne	.-6      	; 0xb84 <TWI_ByteWrite+0xe>
     b8a:	81 2f       	mov	r24, r17
	
	TWI_Write((SL_Address<<1));
     b8c:	88 0f       	add	r24, r24
     b8e:	d1 df       	rcall	.-94     	; 0xb32 <TWI_Write>
	while (TWI_Get_Status() != TW_MT_SLA_W_ACK);
     b90:	ee df       	rcall	.-36     	; 0xb6e <TWI_Get_Status>
     b92:	88 31       	cpi	r24, 0x18	; 24
	
	TWI_Write(Reg_Address);
     b94:	e9 f7       	brne	.-6      	; 0xb90 <TWI_ByteWrite+0x1a>
     b96:	8d 2f       	mov	r24, r29
	while (TWI_Get_Status() != TW_MT_DATA_ACK);
     b98:	cc df       	rcall	.-104    	; 0xb32 <TWI_Write>
     b9a:	e9 df       	rcall	.-46     	; 0xb6e <TWI_Get_Status>
     b9c:	88 32       	cpi	r24, 0x28	; 40
	
	TWI_Write(Data);
     b9e:	e9 f7       	brne	.-6      	; 0xb9a <TWI_ByteWrite+0x24>
     ba0:	8c 2f       	mov	r24, r28
     ba2:	c7 df       	rcall	.-114    	; 0xb32 <TWI_Write>
	while (TWI_Get_Status() != TW_MT_DATA_ACK);
     ba4:	e4 df       	rcall	.-56     	; 0xb6e <TWI_Get_Status>
     ba6:	88 32       	cpi	r24, 0x28	; 40
     ba8:	e9 f7       	brne	.-6      	; 0xba4 <TWI_ByteWrite+0x2e>
     baa:	ba df       	rcall	.-140    	; 0xb20 <TWI_Stop>
	
	TWI_Stop(); // Send A stop  // Release The Clock Bus 
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	df 91       	pop	r29
	return 0;
}
     bb0:	cf 91       	pop	r28
     bb2:	1f 91       	pop	r17
     bb4:	08 95       	ret

00000bb6 <TWI_ByteRead>:
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17

 
TWI_States TWI_ByteRead(u_int8 SL_Address , u_int8 Reg_Address , u_int8 * DataRcv)
{
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	c8 2f       	mov	r28, r24
     bc0:	d6 2f       	mov	r29, r22
     bc2:	8a 01       	movw	r16, r20
	
	TWI_Start();
     bc4:	a0 df       	rcall	.-192    	; 0xb06 <TWI_Start>
	while (TWI_Get_Status() != TW_START);
     bc6:	d3 df       	rcall	.-90     	; 0xb6e <TWI_Get_Status>
     bc8:	88 30       	cpi	r24, 0x08	; 8
     bca:	e9 f7       	brne	.-6      	; 0xbc6 <TWI_ByteRead+0x10>
     bcc:	8c 2f       	mov	r24, r28
	
	TWI_Write((SL_Address<<1));
     bce:	88 0f       	add	r24, r24
     bd0:	b0 df       	rcall	.-160    	; 0xb32 <TWI_Write>
	while (TWI_Get_Status() != TW_MT_SLA_W_ACK);
     bd2:	cd df       	rcall	.-102    	; 0xb6e <TWI_Get_Status>
     bd4:	88 31       	cpi	r24, 0x18	; 24
	
	TWI_Write(Reg_Address);
     bd6:	e9 f7       	brne	.-6      	; 0xbd2 <TWI_ByteRead+0x1c>
     bd8:	8d 2f       	mov	r24, r29
	while (TWI_Get_Status() != TW_MT_DATA_ACK);
     bda:	ab df       	rcall	.-170    	; 0xb32 <TWI_Write>
     bdc:	c8 df       	rcall	.-112    	; 0xb6e <TWI_Get_Status>
     bde:	88 32       	cpi	r24, 0x28	; 40
     be0:	e9 f7       	brne	.-6      	; 0xbdc <TWI_ByteRead+0x26>
	
	TWI_Start(); //rep start
     be2:	91 df       	rcall	.-222    	; 0xb06 <TWI_Start>
     be4:	c4 df       	rcall	.-120    	; 0xb6e <TWI_Get_Status>
	while (TWI_Get_Status() != TW_REP_START);
     be6:	80 31       	cpi	r24, 0x10	; 16
     be8:	e9 f7       	brne	.-6      	; 0xbe4 <TWI_ByteRead+0x2e>
	
	TWI_Write((SL_Address<<1) | READ);
     bea:	8c 2f       	mov	r24, r28
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	88 0f       	add	r24, r24
     bf0:	99 1f       	adc	r25, r25
     bf2:	81 60       	ori	r24, 0x01	; 1
	while (TWI_Get_Status() != TW_MT_SLA_R_ACK);
     bf4:	9e df       	rcall	.-196    	; 0xb32 <TWI_Write>
     bf6:	bb df       	rcall	.-138    	; 0xb6e <TWI_Get_Status>
     bf8:	80 34       	cpi	r24, 0x40	; 64
     bfa:	e9 f7       	brne	.-6      	; 0xbf6 <TWI_ByteRead+0x40>
	
	*DataRcv=TWI_Read_With_NACK();
     bfc:	a9 df       	rcall	.-174    	; 0xb50 <TWI_Read_With_NACK>
     bfe:	f8 01       	movw	r30, r16
     c00:	80 83       	st	Z, r24
     c02:	8e df       	rcall	.-228    	; 0xb20 <TWI_Stop>
	TWI_Stop();
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	df 91       	pop	r29

	return 0;		
}
     c08:	cf 91       	pop	r28
     c0a:	1f 91       	pop	r17
     c0c:	0f 91       	pop	r16
     c0e:	08 95       	ret

00000c10 <UART1_Init>:
     c10:	ad e9       	ldi	r26, 0x9D	; 157
     c12:	b0 e0       	ldi	r27, 0x00	; 0
	{
		UART0_Transmit(String[j]);
		j++;
		_delay_ms(80);
	}
}
     c14:	2c 91       	ld	r18, X
     c16:	e0 e0       	ldi	r30, 0x00	; 0
     c18:	f1 e0       	ldi	r31, 0x01	; 1
     c1a:	90 81       	ld	r25, Z
     c1c:	30 e4       	ldi	r19, 0x40	; 64
     c1e:	93 9f       	mul	r25, r19
     c20:	c0 01       	movw	r24, r0
     c22:	11 24       	eor	r1, r1
     c24:	82 2b       	or	r24, r18
     c26:	8c 93       	st	X, r24
     c28:	2c 91       	ld	r18, X
     c2a:	91 81       	ldd	r25, Z+1	; 0x01
     c2c:	30 e1       	ldi	r19, 0x10	; 16
     c2e:	93 9f       	mul	r25, r19
     c30:	c0 01       	movw	r24, r0
     c32:	11 24       	eor	r1, r1
     c34:	82 2b       	or	r24, r18
     c36:	8c 93       	st	X, r24
     c38:	2c 91       	ld	r18, X
     c3a:	92 81       	ldd	r25, Z+2	; 0x02
     c3c:	89 2f       	mov	r24, r25
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	82 2b       	or	r24, r18
     c4e:	8c 93       	st	X, r24
     c50:	aa e9       	ldi	r26, 0x9A	; 154
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	2c 91       	ld	r18, X
     c56:	94 81       	ldd	r25, Z+4	; 0x04
     c58:	89 2f       	mov	r24, r25
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	82 2b       	or	r24, r18
     c6a:	8c 93       	st	X, r24
     c6c:	2c 91       	ld	r18, X
     c6e:	95 81       	ldd	r25, Z+5	; 0x05
     c70:	30 e4       	ldi	r19, 0x40	; 64
     c72:	93 9f       	mul	r25, r19
     c74:	c0 01       	movw	r24, r0
     c76:	11 24       	eor	r1, r1
     c78:	82 2b       	or	r24, r18
     c7a:	8c 93       	st	X, r24
     c7c:	2c 91       	ld	r18, X
     c7e:	96 81       	ldd	r25, Z+6	; 0x06
     c80:	30 e1       	ldi	r19, 0x10	; 16
     c82:	93 9f       	mul	r25, r19
     c84:	c0 01       	movw	r24, r0
     c86:	11 24       	eor	r1, r1
     c88:	82 2b       	or	r24, r18
     c8a:	8c 93       	st	X, r24
     c8c:	2c 91       	ld	r18, X
     c8e:	97 81       	ldd	r25, Z+7	; 0x07
     c90:	30 e8       	ldi	r19, 0x80	; 128
     c92:	93 9f       	mul	r25, r19
     c94:	c0 01       	movw	r24, r0
     c96:	11 24       	eor	r1, r1
     c98:	82 2b       	or	r24, r18
     c9a:	8c 93       	st	X, r24
     c9c:	80 85       	ldd	r24, Z+8	; 0x08
     c9e:	88 23       	and	r24, r24
     ca0:	19 f0       	breq	.+6      	; 0xca8 <UART1_Init+0x98>
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	41 f1       	breq	.+80     	; 0xcf6 <UART1_Init+0xe6>
     ca6:	4a c0       	rjmp	.+148    	; 0xd3c <UART1_Init+0x12c>
     ca8:	eb e9       	ldi	r30, 0x9B	; 155
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	8d 7f       	andi	r24, 0xFD	; 253
     cb0:	80 83       	st	Z, r24
     cb2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
     cb6:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__DATA_REGION_ORIGIN__+0xa>
     cba:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
     cbe:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	aa 1f       	adc	r26, r26
     cc8:	bb 1f       	adc	r27, r27
     cca:	88 0f       	add	r24, r24
     ccc:	99 1f       	adc	r25, r25
     cce:	aa 1f       	adc	r26, r26
     cd0:	bb 1f       	adc	r27, r27
     cd2:	9c 01       	movw	r18, r24
     cd4:	ad 01       	movw	r20, r26
     cd6:	22 0f       	add	r18, r18
     cd8:	33 1f       	adc	r19, r19
     cda:	44 1f       	adc	r20, r20
     cdc:	55 1f       	adc	r21, r21
     cde:	22 0f       	add	r18, r18
     ce0:	33 1f       	adc	r19, r19
     ce2:	44 1f       	adc	r20, r20
     ce4:	55 1f       	adc	r21, r21
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	74 e2       	ldi	r23, 0x24	; 36
     cea:	84 ef       	ldi	r24, 0xF4	; 244
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	f7 d4       	rcall	.+2542   	; 0x16de <__udivmodsi4>
     cf0:	21 50       	subi	r18, 0x01	; 1
     cf2:	31 09       	sbc	r19, r1
     cf4:	25 c0       	rjmp	.+74     	; 0xd40 <UART1_Init+0x130>
     cf6:	eb e9       	ldi	r30, 0x9B	; 155
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	82 60       	ori	r24, 0x02	; 2
     cfe:	80 83       	st	Z, r24
     d00:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
     d04:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__DATA_REGION_ORIGIN__+0xa>
     d08:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
     d0c:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	aa 1f       	adc	r26, r26
     d16:	bb 1f       	adc	r27, r27
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	aa 1f       	adc	r26, r26
     d1e:	bb 1f       	adc	r27, r27
     d20:	9c 01       	movw	r18, r24
     d22:	ad 01       	movw	r20, r26
     d24:	22 0f       	add	r18, r18
     d26:	33 1f       	adc	r19, r19
     d28:	44 1f       	adc	r20, r20
     d2a:	55 1f       	adc	r21, r21
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	74 e2       	ldi	r23, 0x24	; 36
     d30:	84 ef       	ldi	r24, 0xF4	; 244
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	d4 d4       	rcall	.+2472   	; 0x16de <__udivmodsi4>
     d36:	21 50       	subi	r18, 0x01	; 1
     d38:	31 09       	sbc	r19, r1
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <UART1_Init+0x130>
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     d44:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     d48:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     d4c:	94 30       	cpi	r25, 0x04	; 4
     d4e:	71 f4       	brne	.+28     	; 0xd6c <UART1_Init+0x15c>
     d50:	ed e9       	ldi	r30, 0x9D	; 157
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	82 60       	ori	r24, 0x02	; 2
     d58:	80 83       	st	Z, r24
     d5a:	80 81       	ld	r24, Z
     d5c:	84 60       	ori	r24, 0x04	; 4
     d5e:	80 83       	st	Z, r24
     d60:	ea e9       	ldi	r30, 0x9A	; 154
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	84 60       	ori	r24, 0x04	; 4
     d68:	80 83       	st	Z, r24
     d6a:	08 95       	ret
     d6c:	ed e9       	ldi	r30, 0x9D	; 157
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	20 81       	ld	r18, Z
     d72:	89 2f       	mov	r24, r25
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	82 2b       	or	r24, r18
     d7c:	80 83       	st	Z, r24
     d7e:	08 95       	ret

00000d80 <UART1_Transmit>:
     d80:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     d84:	95 ff       	sbrs	r25, 5
     d86:	fc cf       	rjmp	.-8      	; 0xd80 <UART1_Transmit>
     d88:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     d8c:	08 95       	ret

00000d8e <UART1_TransmitString>:

void UART1_TransmitString(u_int8 * String)
{
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	8c 01       	movw	r16, r24
	u_int8 j = 0;
     d96:	c0 e0       	ldi	r28, 0x00	; 0
	while(String[j] != 0)
     d98:	0b c0       	rjmp	.+22     	; 0xdb0 <UART1_TransmitString+0x22>
	{
		UART1_Transmit(String[j]);
     d9a:	f2 df       	rcall	.-28     	; 0xd80 <UART1_Transmit>
		j++;
     d9c:	cf 5f       	subi	r28, 0xFF	; 255
     d9e:	2f ef       	ldi	r18, 0xFF	; 255
     da0:	87 ee       	ldi	r24, 0xE7	; 231
     da2:	93 e0       	ldi	r25, 0x03	; 3
     da4:	21 50       	subi	r18, 0x01	; 1
     da6:	80 40       	sbci	r24, 0x00	; 0
     da8:	90 40       	sbci	r25, 0x00	; 0
     daa:	e1 f7       	brne	.-8      	; 0xda4 <UART1_TransmitString+0x16>
     dac:	00 c0       	rjmp	.+0      	; 0xdae <UART1_TransmitString+0x20>
     dae:	00 00       	nop
}

void UART1_TransmitString(u_int8 * String)
{
	u_int8 j = 0;
	while(String[j] != 0)
     db0:	f8 01       	movw	r30, r16
     db2:	ec 0f       	add	r30, r28
     db4:	f1 1d       	adc	r31, r1
     db6:	80 81       	ld	r24, Z
     db8:	81 11       	cpse	r24, r1
     dba:	ef cf       	rjmp	.-34     	; 0xd9a <UART1_TransmitString+0xc>
	{
		UART1_Transmit(String[j]);
		j++;
		_delay_ms(80);
	}
}
     dbc:	cf 91       	pop	r28
     dbe:	1f 91       	pop	r17
     dc0:	0f 91       	pop	r16
     dc2:	08 95       	ret

00000dc4 <vListInsertEnd>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
}
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	9c 01       	movw	r18, r24
     dca:	fb 01       	movw	r30, r22
     dcc:	dc 01       	movw	r26, r24
     dce:	11 96       	adiw	r26, 0x01	; 1
     dd0:	cd 91       	ld	r28, X+
     dd2:	dc 91       	ld	r29, X
     dd4:	12 97       	sbiw	r26, 0x02	; 2
     dd6:	d3 83       	std	Z+3, r29	; 0x03
     dd8:	c2 83       	std	Z+2, r28	; 0x02
     dda:	8c 81       	ldd	r24, Y+4	; 0x04
     ddc:	9d 81       	ldd	r25, Y+5	; 0x05
     dde:	95 83       	std	Z+5, r25	; 0x05
     de0:	84 83       	std	Z+4, r24	; 0x04
     de2:	8c 81       	ldd	r24, Y+4	; 0x04
     de4:	9d 81       	ldd	r25, Y+5	; 0x05
     de6:	dc 01       	movw	r26, r24
     de8:	13 96       	adiw	r26, 0x03	; 3
     dea:	7c 93       	st	X, r23
     dec:	6e 93       	st	-X, r22
     dee:	12 97       	sbiw	r26, 0x02	; 2
     df0:	7d 83       	std	Y+5, r23	; 0x05
     df2:	6c 83       	std	Y+4, r22	; 0x04
     df4:	31 87       	std	Z+9, r19	; 0x09
     df6:	20 87       	std	Z+8, r18	; 0x08
     df8:	f9 01       	movw	r30, r18
     dfa:	80 81       	ld	r24, Z
     dfc:	8f 5f       	subi	r24, 0xFF	; 255
     dfe:	80 83       	st	Z, r24
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	08 95       	ret

00000e06 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     e0c:	a0 85       	ldd	r26, Z+8	; 0x08
     e0e:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     e10:	c2 81       	ldd	r28, Z+2	; 0x02
     e12:	d3 81       	ldd	r29, Z+3	; 0x03
     e14:	84 81       	ldd	r24, Z+4	; 0x04
     e16:	95 81       	ldd	r25, Z+5	; 0x05
     e18:	9d 83       	std	Y+5, r25	; 0x05
     e1a:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     e1c:	c4 81       	ldd	r28, Z+4	; 0x04
     e1e:	d5 81       	ldd	r29, Z+5	; 0x05
     e20:	82 81       	ldd	r24, Z+2	; 0x02
     e22:	93 81       	ldd	r25, Z+3	; 0x03
     e24:	9b 83       	std	Y+3, r25	; 0x03
     e26:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     e28:	11 96       	adiw	r26, 0x01	; 1
     e2a:	8d 91       	ld	r24, X+
     e2c:	9c 91       	ld	r25, X
     e2e:	12 97       	sbiw	r26, 0x02	; 2
     e30:	e8 17       	cp	r30, r24
     e32:	f9 07       	cpc	r31, r25
     e34:	31 f4       	brne	.+12     	; 0xe42 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     e36:	84 81       	ldd	r24, Z+4	; 0x04
     e38:	95 81       	ldd	r25, Z+5	; 0x05
     e3a:	12 96       	adiw	r26, 0x02	; 2
     e3c:	9c 93       	st	X, r25
     e3e:	8e 93       	st	-X, r24
     e40:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
     e42:	11 86       	std	Z+9, r1	; 0x09
     e44:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     e46:	8c 91       	ld	r24, X
     e48:	81 50       	subi	r24, 0x01	; 1
     e4a:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     e4c:	8c 91       	ld	r24, X
}
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	08 95       	ret

00000e54 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     e54:	0f 92       	push	r0
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	0f 92       	push	r0
     e5c:	1f 92       	push	r1
     e5e:	11 24       	eor	r1, r1
     e60:	2f 92       	push	r2
     e62:	3f 92       	push	r3
     e64:	4f 92       	push	r4
     e66:	5f 92       	push	r5
     e68:	6f 92       	push	r6
     e6a:	7f 92       	push	r7
     e6c:	8f 92       	push	r8
     e6e:	9f 92       	push	r9
     e70:	af 92       	push	r10
     e72:	bf 92       	push	r11
     e74:	cf 92       	push	r12
     e76:	df 92       	push	r13
     e78:	ef 92       	push	r14
     e7a:	ff 92       	push	r15
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	2f 93       	push	r18
     e82:	3f 93       	push	r19
     e84:	4f 93       	push	r20
     e86:	5f 93       	push	r21
     e88:	6f 93       	push	r22
     e8a:	7f 93       	push	r23
     e8c:	8f 93       	push	r24
     e8e:	9f 93       	push	r25
     e90:	af 93       	push	r26
     e92:	bf 93       	push	r27
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	ef 93       	push	r30
     e9a:	ff 93       	push	r31
     e9c:	a0 91 b2 01 	lds	r26, 0x01B2	; 0x8001b2 <pxCurrentTCB>
     ea0:	b0 91 b3 01 	lds	r27, 0x01B3	; 0x8001b3 <pxCurrentTCB+0x1>
     ea4:	0d b6       	in	r0, 0x3d	; 61
     ea6:	0d 92       	st	X+, r0
     ea8:	0e b6       	in	r0, 0x3e	; 62
     eaa:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     eac:	b4 d0       	rcall	.+360    	; 0x1016 <xTaskIncrementTick>
     eae:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     eb0:	68 d1       	rcall	.+720    	; 0x1182 <vTaskSwitchContext>
     eb2:	a0 91 b2 01 	lds	r26, 0x01B2	; 0x8001b2 <pxCurrentTCB>
	}
	portRESTORE_CONTEXT();
     eb6:	b0 91 b3 01 	lds	r27, 0x01B3	; 0x8001b3 <pxCurrentTCB+0x1>
     eba:	cd 91       	ld	r28, X+
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	dd 91       	ld	r29, X+
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	ff 91       	pop	r31
     ec4:	ef 91       	pop	r30
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	bf 91       	pop	r27
     ecc:	af 91       	pop	r26
     ece:	9f 91       	pop	r25
     ed0:	8f 91       	pop	r24
     ed2:	7f 91       	pop	r23
     ed4:	6f 91       	pop	r22
     ed6:	5f 91       	pop	r21
     ed8:	4f 91       	pop	r20
     eda:	3f 91       	pop	r19
     edc:	2f 91       	pop	r18
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	ff 90       	pop	r15
     ee4:	ef 90       	pop	r14
     ee6:	df 90       	pop	r13
     ee8:	cf 90       	pop	r12
     eea:	bf 90       	pop	r11
     eec:	af 90       	pop	r10
     eee:	9f 90       	pop	r9
     ef0:	8f 90       	pop	r8
     ef2:	7f 90       	pop	r7
     ef4:	6f 90       	pop	r6
     ef6:	5f 90       	pop	r5
     ef8:	4f 90       	pop	r4
     efa:	3f 90       	pop	r3
     efc:	2f 90       	pop	r2
     efe:	1f 90       	pop	r1
     f00:	0f 90       	pop	r0
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	0f 90       	pop	r0
     f06:	08 95       	ret

00000f08 <__vector_12>:

	asm volatile ( "ret" );
     f08:	a5 df       	rcall	.-182    	; 0xe54 <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
     f0a:	18 95       	reti

00000f0c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	fc 01       	movw	r30, r24
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     f12:	82 8d       	ldd	r24, Z+26	; 0x1a

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
     f14:	93 8d       	ldd	r25, Z+27	; 0x1b
     f16:	89 17       	cp	r24, r25
     f18:	b8 f4       	brcc	.+46     	; 0xf48 <xQueueGiveFromISR+0x3c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
     f1a:	96 8d       	ldd	r25, Z+30	; 0x1e
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
     f1c:	8f 5f       	subi	r24, 0xFF	; 255
     f1e:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
     f20:	9f 3f       	cpi	r25, 0xFF	; 255
     f22:	71 f4       	brne	.+28     	; 0xf40 <xQueueGiveFromISR+0x34>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     f24:	81 89       	ldd	r24, Z+17	; 0x11
     f26:	88 23       	and	r24, r24
     f28:	89 f0       	breq	.+34     	; 0xf4c <xQueueGiveFromISR+0x40>
     f2a:	eb 01       	movw	r28, r22
     f2c:	cf 01       	movw	r24, r30
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     f2e:	41 96       	adiw	r24, 0x11	; 17
     f30:	7c d1       	rcall	.+760    	; 0x122a <xTaskRemoveFromEventList>
     f32:	88 23       	and	r24, r24
     f34:	69 f0       	breq	.+26     	; 0xf50 <xQueueGiveFromISR+0x44>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
     f36:	20 97       	sbiw	r28, 0x00	; 0
     f38:	69 f0       	breq	.+26     	; 0xf54 <xQueueGiveFromISR+0x48>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	88 83       	st	Y, r24
     f3e:	0b c0       	rjmp	.+22     	; 0xf56 <xQueueGiveFromISR+0x4a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
     f40:	9f 5f       	subi	r25, 0xFF	; 255
     f42:	96 8f       	std	Z+30, r25	; 0x1e
			}

			xReturn = pdPASS;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	07 c0       	rjmp	.+14     	; 0xf56 <xQueueGiveFromISR+0x4a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	05 c0       	rjmp	.+10     	; 0xf56 <xQueueGiveFromISR+0x4a>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	03 c0       	rjmp	.+6      	; 0xf56 <xQueueGiveFromISR+0x4a>
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	01 c0       	rjmp	.+2      	; 0xf56 <xQueueGiveFromISR+0x4a>
     f54:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	08 95       	ret

00000f5c <__vector_30>:
		vTaskDelay(200);
	}
}

ISR(USART1_RX_vect)
{
     f5c:	1f 92       	push	r1
     f5e:	0f 92       	push	r0
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	0f 92       	push	r0
     f64:	11 24       	eor	r1, r1
     f66:	0b b6       	in	r0, 0x3b	; 59
     f68:	0f 92       	push	r0
     f6a:	2f 93       	push	r18
     f6c:	3f 93       	push	r19
     f6e:	4f 93       	push	r20
     f70:	5f 93       	push	r21
     f72:	6f 93       	push	r22
     f74:	7f 93       	push	r23
     f76:	8f 93       	push	r24
     f78:	9f 93       	push	r25
     f7a:	af 93       	push	r26
     f7c:	bf 93       	push	r27
     f7e:	ef 93       	push	r30
     f80:	ff 93       	push	r31
	temp = UDR1_Register;
     f82:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     f86:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <temp>
	esp_buff[esp_buff_len] = temp;
     f8a:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <esp_buff_len>
     f8e:	e8 2f       	mov	r30, r24
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	ec 54       	subi	r30, 0x4C	; 76
     f94:	fe 4f       	sbci	r31, 0xFE	; 254
     f96:	90 83       	st	Z, r25
	esp_buff_len++;
     f98:	8f 5f       	subi	r24, 0xFF	; 255
     f9a:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <esp_buff_len>
	if(esp_buff_len == 100)
     f9e:	84 36       	cpi	r24, 0x64	; 100
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <__vector_30+0x48>
		ESP01_ResetBuffer();
     fa2:	50 da       	rcall	.-2912   	; 0x444 <ESP01_ResetBuffer>
	xSemaphoreGiveFromISR(ESP_SEM, NULL);
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <ESP_SEM>
     fac:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <ESP_SEM+0x1>
     fb0:	ad df       	rcall	.-166    	; 0xf0c <xQueueGiveFromISR>
     fb2:	ff 91       	pop	r31
     fb4:	ef 91       	pop	r30
     fb6:	bf 91       	pop	r27
     fb8:	af 91       	pop	r26
     fba:	9f 91       	pop	r25
     fbc:	8f 91       	pop	r24
     fbe:	7f 91       	pop	r23
     fc0:	6f 91       	pop	r22
     fc2:	5f 91       	pop	r21
     fc4:	4f 91       	pop	r20
     fc6:	3f 91       	pop	r19
     fc8:	2f 91       	pop	r18
     fca:	0f 90       	pop	r0
     fcc:	0b be       	out	0x3b, r0	; 59
     fce:	0f 90       	pop	r0
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	0f 90       	pop	r0
     fd4:	1f 90       	pop	r1
     fd6:	18 95       	reti

00000fd8 <prvResetNextTaskUnblockTime>:
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
}
     fd8:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <pxDelayedTaskList>
     fdc:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <pxDelayedTaskList+0x1>
     fe0:	80 81       	ld	r24, Z
     fe2:	81 11       	cpse	r24, r1
     fe4:	07 c0       	rjmp	.+14     	; 0xff4 <prvResetNextTaskUnblockTime+0x1c>
     fe6:	8f ef       	ldi	r24, 0xFF	; 255
     fe8:	9f ef       	ldi	r25, 0xFF	; 255
     fea:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <xNextTaskUnblockTime+0x1>
     fee:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <xNextTaskUnblockTime>
     ff2:	08 95       	ret
     ff4:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <pxDelayedTaskList>
     ff8:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <pxDelayedTaskList+0x1>
     ffc:	05 80       	ldd	r0, Z+5	; 0x05
     ffe:	f6 81       	ldd	r31, Z+6	; 0x06
    1000:	e0 2d       	mov	r30, r0
    1002:	06 80       	ldd	r0, Z+6	; 0x06
    1004:	f7 81       	ldd	r31, Z+7	; 0x07
    1006:	e0 2d       	mov	r30, r0
    1008:	82 81       	ldd	r24, Z+2	; 0x02
    100a:	93 81       	ldd	r25, Z+3	; 0x03
    100c:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <xNextTaskUnblockTime+0x1>
    1010:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <xNextTaskUnblockTime>
    1014:	08 95       	ret

00001016 <xTaskIncrementTick>:
    1016:	df 92       	push	r13
    1018:	ef 92       	push	r14
    101a:	ff 92       	push	r15
    101c:	0f 93       	push	r16
    101e:	1f 93       	push	r17
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
    1024:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <uxSchedulerSuspended>
    1028:	81 11       	cpse	r24, r1
    102a:	93 c0       	rjmp	.+294    	; 0x1152 <__stack+0x53>
    102c:	e0 90 49 01 	lds	r14, 0x0149	; 0x800149 <xTickCount>
    1030:	f0 90 4a 01 	lds	r15, 0x014A	; 0x80014a <xTickCount+0x1>
    1034:	8f ef       	ldi	r24, 0xFF	; 255
    1036:	e8 1a       	sub	r14, r24
    1038:	f8 0a       	sbc	r15, r24
    103a:	f0 92 4a 01 	sts	0x014A, r15	; 0x80014a <xTickCount+0x1>
    103e:	e0 92 49 01 	sts	0x0149, r14	; 0x800149 <xTickCount>
    1042:	e1 14       	cp	r14, r1
    1044:	f1 04       	cpc	r15, r1
    1046:	b1 f4       	brne	.+44     	; 0x1074 <xTaskIncrementTick+0x5e>
    1048:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <pxDelayedTaskList>
    104c:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <pxDelayedTaskList+0x1>
    1050:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <pxOverflowDelayedTaskList>
    1054:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <pxOverflowDelayedTaskList+0x1>
    1058:	30 93 57 01 	sts	0x0157, r19	; 0x800157 <pxDelayedTaskList+0x1>
    105c:	20 93 56 01 	sts	0x0156, r18	; 0x800156 <pxDelayedTaskList>
    1060:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <pxOverflowDelayedTaskList+0x1>
    1064:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <pxOverflowDelayedTaskList>
    1068:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <xNumOfOverflows>
    106c:	8f 5f       	subi	r24, 0xFF	; 255
    106e:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <xNumOfOverflows>
    1072:	b2 df       	rcall	.-156    	; 0xfd8 <prvResetNextTaskUnblockTime>
    1074:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <xNextTaskUnblockTime>
    1078:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <xNextTaskUnblockTime+0x1>
    107c:	e8 16       	cp	r14, r24
    107e:	f9 06       	cpc	r15, r25
    1080:	28 f4       	brcc	.+10     	; 0x108c <xTaskIncrementTick+0x76>
    1082:	d1 2c       	mov	r13, r1
    1084:	50 c0       	rjmp	.+160    	; 0x1126 <__stack+0x27>
    1086:	dd 24       	eor	r13, r13
    1088:	d3 94       	inc	r13
    108a:	01 c0       	rjmp	.+2      	; 0x108e <xTaskIncrementTick+0x78>
    108c:	d1 2c       	mov	r13, r1
    108e:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <pxDelayedTaskList>
    1092:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <pxDelayedTaskList+0x1>
    1096:	80 81       	ld	r24, Z
    1098:	81 11       	cpse	r24, r1
    109a:	07 c0       	rjmp	.+14     	; 0x10aa <xTaskIncrementTick+0x94>
    109c:	8f ef       	ldi	r24, 0xFF	; 255
    109e:	9f ef       	ldi	r25, 0xFF	; 255
    10a0:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <xNextTaskUnblockTime+0x1>
    10a4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <xNextTaskUnblockTime>
    10a8:	3e c0       	rjmp	.+124    	; 0x1126 <__stack+0x27>
    10aa:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <pxDelayedTaskList>
    10ae:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <pxDelayedTaskList+0x1>
    10b2:	05 80       	ldd	r0, Z+5	; 0x05
    10b4:	f6 81       	ldd	r31, Z+6	; 0x06
    10b6:	e0 2d       	mov	r30, r0
    10b8:	c6 81       	ldd	r28, Z+6	; 0x06
    10ba:	d7 81       	ldd	r29, Z+7	; 0x07
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	9b 81       	ldd	r25, Y+3	; 0x03
    10c0:	e8 16       	cp	r14, r24
    10c2:	f9 06       	cpc	r15, r25
    10c4:	28 f4       	brcc	.+10     	; 0x10d0 <xTaskIncrementTick+0xba>
    10c6:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <xNextTaskUnblockTime+0x1>
    10ca:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <xNextTaskUnblockTime>
    10ce:	2b c0       	rjmp	.+86     	; 0x1126 <__stack+0x27>
    10d0:	8e 01       	movw	r16, r28
    10d2:	0e 5f       	subi	r16, 0xFE	; 254
    10d4:	1f 4f       	sbci	r17, 0xFF	; 255
    10d6:	c8 01       	movw	r24, r16
    10d8:	96 de       	rcall	.-724    	; 0xe06 <uxListRemove>
    10da:	8c 89       	ldd	r24, Y+20	; 0x14
    10dc:	9d 89       	ldd	r25, Y+21	; 0x15
    10de:	89 2b       	or	r24, r25
    10e0:	19 f0       	breq	.+6      	; 0x10e8 <xTaskIncrementTick+0xd2>
    10e2:	ce 01       	movw	r24, r28
    10e4:	0c 96       	adiw	r24, 0x0c	; 12
    10e6:	8f de       	rcall	.-738    	; 0xe06 <uxListRemove>
    10e8:	8e 89       	ldd	r24, Y+22	; 0x16
    10ea:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <uxTopReadyPriority>
    10ee:	98 17       	cp	r25, r24
    10f0:	10 f4       	brcc	.+4      	; 0x10f6 <xTaskIncrementTick+0xe0>
    10f2:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <uxTopReadyPriority>
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	9c 01       	movw	r18, r24
    10fa:	22 0f       	add	r18, r18
    10fc:	33 1f       	adc	r19, r19
    10fe:	22 0f       	add	r18, r18
    1100:	33 1f       	adc	r19, r19
    1102:	22 0f       	add	r18, r18
    1104:	33 1f       	adc	r19, r19
    1106:	82 0f       	add	r24, r18
    1108:	93 1f       	adc	r25, r19
    110a:	b8 01       	movw	r22, r16
    110c:	88 5a       	subi	r24, 0xA8	; 168
    110e:	9e 4f       	sbci	r25, 0xFE	; 254
    1110:	59 de       	rcall	.-846    	; 0xdc4 <vListInsertEnd>
    1112:	9e 89       	ldd	r25, Y+22	; 0x16
    1114:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <pxCurrentTCB>
    1118:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <pxCurrentTCB+0x1>
    111c:	86 89       	ldd	r24, Z+22	; 0x16
    111e:	98 17       	cp	r25, r24
    1120:	08 f0       	brcs	.+2      	; 0x1124 <__stack+0x25>
    1122:	b1 cf       	rjmp	.-158    	; 0x1086 <xTaskIncrementTick+0x70>
    1124:	b4 cf       	rjmp	.-152    	; 0x108e <xTaskIncrementTick+0x78>
    1126:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <pxCurrentTCB>
    112a:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <pxCurrentTCB+0x1>
    112e:	86 89       	ldd	r24, Z+22	; 0x16
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	fc 01       	movw	r30, r24
    1134:	ee 0f       	add	r30, r30
    1136:	ff 1f       	adc	r31, r31
    1138:	ee 0f       	add	r30, r30
    113a:	ff 1f       	adc	r31, r31
    113c:	ee 0f       	add	r30, r30
    113e:	ff 1f       	adc	r31, r31
    1140:	8e 0f       	add	r24, r30
    1142:	9f 1f       	adc	r25, r31
    1144:	fc 01       	movw	r30, r24
    1146:	e8 5a       	subi	r30, 0xA8	; 168
    1148:	fe 4f       	sbci	r31, 0xFE	; 254
    114a:	80 81       	ld	r24, Z
    114c:	82 30       	cpi	r24, 0x02	; 2
    114e:	40 f4       	brcc	.+16     	; 0x1160 <__stack+0x61>
    1150:	09 c0       	rjmp	.+18     	; 0x1164 <__stack+0x65>
    1152:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <uxPendedTicks>
    1156:	8f 5f       	subi	r24, 0xFF	; 255
    1158:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <uxPendedTicks>
    115c:	d1 2c       	mov	r13, r1
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <__stack+0x65>
    1160:	dd 24       	eor	r13, r13
    1162:	d3 94       	inc	r13
    1164:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <xYieldPending>
    1168:	88 23       	and	r24, r24
    116a:	11 f0       	breq	.+4      	; 0x1170 <__stack+0x71>
    116c:	dd 24       	eor	r13, r13
    116e:	d3 94       	inc	r13
    1170:	8d 2d       	mov	r24, r13
    1172:	df 91       	pop	r29
    1174:	cf 91       	pop	r28
    1176:	1f 91       	pop	r17
    1178:	0f 91       	pop	r16
    117a:	ff 90       	pop	r15
    117c:	ef 90       	pop	r14
    117e:	df 90       	pop	r13
    1180:	08 95       	ret

00001182 <vTaskSwitchContext>:
    1182:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <uxSchedulerSuspended>
    1186:	88 23       	and	r24, r24
    1188:	21 f0       	breq	.+8      	; 0x1192 <vTaskSwitchContext+0x10>
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <xYieldPending>
    1190:	08 95       	ret
    1192:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <xYieldPending>
    1196:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <uxTopReadyPriority>
    119a:	01 c0       	rjmp	.+2      	; 0x119e <vTaskSwitchContext+0x1c>
    119c:	21 50       	subi	r18, 0x01	; 1
    119e:	82 2f       	mov	r24, r18
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	fc 01       	movw	r30, r24
    11a4:	ee 0f       	add	r30, r30
    11a6:	ff 1f       	adc	r31, r31
    11a8:	ee 0f       	add	r30, r30
    11aa:	ff 1f       	adc	r31, r31
    11ac:	ee 0f       	add	r30, r30
    11ae:	ff 1f       	adc	r31, r31
    11b0:	e8 0f       	add	r30, r24
    11b2:	f9 1f       	adc	r31, r25
    11b4:	e8 5a       	subi	r30, 0xA8	; 168
    11b6:	fe 4f       	sbci	r31, 0xFE	; 254
    11b8:	30 81       	ld	r19, Z
    11ba:	33 23       	and	r19, r19
    11bc:	79 f3       	breq	.-34     	; 0x119c <vTaskSwitchContext+0x1a>
    11be:	ac 01       	movw	r20, r24
    11c0:	44 0f       	add	r20, r20
    11c2:	55 1f       	adc	r21, r21
    11c4:	44 0f       	add	r20, r20
    11c6:	55 1f       	adc	r21, r21
    11c8:	44 0f       	add	r20, r20
    11ca:	55 1f       	adc	r21, r21
    11cc:	48 0f       	add	r20, r24
    11ce:	59 1f       	adc	r21, r25
    11d0:	df 01       	movw	r26, r30
    11d2:	01 80       	ldd	r0, Z+1	; 0x01
    11d4:	f2 81       	ldd	r31, Z+2	; 0x02
    11d6:	e0 2d       	mov	r30, r0
    11d8:	02 80       	ldd	r0, Z+2	; 0x02
    11da:	f3 81       	ldd	r31, Z+3	; 0x03
    11dc:	e0 2d       	mov	r30, r0
    11de:	12 96       	adiw	r26, 0x02	; 2
    11e0:	fc 93       	st	X, r31
    11e2:	ee 93       	st	-X, r30
    11e4:	11 97       	sbiw	r26, 0x01	; 1
    11e6:	45 5a       	subi	r20, 0xA5	; 165
    11e8:	5e 4f       	sbci	r21, 0xFE	; 254
    11ea:	e4 17       	cp	r30, r20
    11ec:	f5 07       	cpc	r31, r21
    11ee:	29 f4       	brne	.+10     	; 0x11fa <vTaskSwitchContext+0x78>
    11f0:	42 81       	ldd	r20, Z+2	; 0x02
    11f2:	53 81       	ldd	r21, Z+3	; 0x03
    11f4:	fd 01       	movw	r30, r26
    11f6:	52 83       	std	Z+2, r21	; 0x02
    11f8:	41 83       	std	Z+1, r20	; 0x01
    11fa:	fc 01       	movw	r30, r24
    11fc:	ee 0f       	add	r30, r30
    11fe:	ff 1f       	adc	r31, r31
    1200:	ee 0f       	add	r30, r30
    1202:	ff 1f       	adc	r31, r31
    1204:	ee 0f       	add	r30, r30
    1206:	ff 1f       	adc	r31, r31
    1208:	8e 0f       	add	r24, r30
    120a:	9f 1f       	adc	r25, r31
    120c:	fc 01       	movw	r30, r24
    120e:	e8 5a       	subi	r30, 0xA8	; 168
    1210:	fe 4f       	sbci	r31, 0xFE	; 254
    1212:	01 80       	ldd	r0, Z+1	; 0x01
    1214:	f2 81       	ldd	r31, Z+2	; 0x02
    1216:	e0 2d       	mov	r30, r0
    1218:	86 81       	ldd	r24, Z+6	; 0x06
    121a:	97 81       	ldd	r25, Z+7	; 0x07
    121c:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <pxCurrentTCB+0x1>
    1220:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <pxCurrentTCB>
    1224:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <uxTopReadyPriority>
    1228:	08 95       	ret

0000122a <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1232:	dc 01       	movw	r26, r24
    1234:	15 96       	adiw	r26, 0x05	; 5
    1236:	ed 91       	ld	r30, X+
    1238:	fc 91       	ld	r31, X
    123a:	16 97       	sbiw	r26, 0x06	; 6
    123c:	c6 81       	ldd	r28, Z+6	; 0x06
    123e:	d7 81       	ldd	r29, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    1240:	8e 01       	movw	r16, r28
    1242:	04 5f       	subi	r16, 0xF4	; 244
    1244:	1f 4f       	sbci	r17, 0xFF	; 255
    1246:	c8 01       	movw	r24, r16
    1248:	de dd       	rcall	.-1092   	; 0xe06 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    124a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <uxSchedulerSuspended>
    124e:	81 11       	cpse	r24, r1
    1250:	1a c0       	rjmp	.+52     	; 0x1286 <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    1252:	0a 50       	subi	r16, 0x0A	; 10
    1254:	11 09       	sbc	r17, r1
    1256:	c8 01       	movw	r24, r16
    1258:	d6 dd       	rcall	.-1108   	; 0xe06 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    125a:	8e 89       	ldd	r24, Y+22	; 0x16
    125c:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <uxTopReadyPriority>
    1260:	98 17       	cp	r25, r24
    1262:	10 f4       	brcc	.+4      	; 0x1268 <xTaskRemoveFromEventList+0x3e>
    1264:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <uxTopReadyPriority>
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	9c 01       	movw	r18, r24
    126c:	22 0f       	add	r18, r18
    126e:	33 1f       	adc	r19, r19
    1270:	22 0f       	add	r18, r18
    1272:	33 1f       	adc	r19, r19
    1274:	22 0f       	add	r18, r18
    1276:	33 1f       	adc	r19, r19
    1278:	82 0f       	add	r24, r18
    127a:	93 1f       	adc	r25, r19
    127c:	b8 01       	movw	r22, r16
    127e:	88 5a       	subi	r24, 0xA8	; 168
    1280:	9e 4f       	sbci	r25, 0xFE	; 254
    1282:	a0 dd       	rcall	.-1216   	; 0xdc4 <vListInsertEnd>
    1284:	04 c0       	rjmp	.+8      	; 0x128e <xTaskRemoveFromEventList+0x64>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    1286:	b8 01       	movw	r22, r16
    1288:	8b e4       	ldi	r24, 0x4B	; 75
    128a:	91 e0       	ldi	r25, 0x01	; 1
    128c:	9b dd       	rcall	.-1226   	; 0xdc4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    128e:	9e 89       	ldd	r25, Y+22	; 0x16
    1290:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <pxCurrentTCB>
    1294:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <pxCurrentTCB+0x1>
    1298:	86 89       	ldd	r24, Z+22	; 0x16
    129a:	89 17       	cp	r24, r25
    129c:	20 f4       	brcc	.+8      	; 0x12a6 <xTaskRemoveFromEventList+0x7c>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <xYieldPending>
    12a4:	01 c0       	rjmp	.+2      	; 0x12a8 <xTaskRemoveFromEventList+0x7e>
	}
	else
	{
		xReturn = pdFALSE;
    12a6:	80 e0       	ldi	r24, 0x00	; 0
	}

	return xReturn;
}
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	1f 91       	pop	r17
    12ae:	0f 91       	pop	r16
    12b0:	08 95       	ret

000012b2 <__subsf3>:
    12b2:	50 58       	subi	r21, 0x80	; 128

000012b4 <__addsf3>:
    12b4:	bb 27       	eor	r27, r27
    12b6:	aa 27       	eor	r26, r26
    12b8:	0e d0       	rcall	.+28     	; 0x12d6 <__addsf3x>
    12ba:	70 c1       	rjmp	.+736    	; 0x159c <__fp_round>
    12bc:	61 d1       	rcall	.+706    	; 0x1580 <__fp_pscA>
    12be:	30 f0       	brcs	.+12     	; 0x12cc <__addsf3+0x18>
    12c0:	66 d1       	rcall	.+716    	; 0x158e <__fp_pscB>
    12c2:	20 f0       	brcs	.+8      	; 0x12cc <__addsf3+0x18>
    12c4:	31 f4       	brne	.+12     	; 0x12d2 <__addsf3+0x1e>
    12c6:	9f 3f       	cpi	r25, 0xFF	; 255
    12c8:	11 f4       	brne	.+4      	; 0x12ce <__addsf3+0x1a>
    12ca:	1e f4       	brtc	.+6      	; 0x12d2 <__addsf3+0x1e>
    12cc:	56 c1       	rjmp	.+684    	; 0x157a <__fp_nan>
    12ce:	0e f4       	brtc	.+2      	; 0x12d2 <__addsf3+0x1e>
    12d0:	e0 95       	com	r30
    12d2:	e7 fb       	bst	r30, 7
    12d4:	4c c1       	rjmp	.+664    	; 0x156e <__fp_inf>

000012d6 <__addsf3x>:
    12d6:	e9 2f       	mov	r30, r25
    12d8:	72 d1       	rcall	.+740    	; 0x15be <__fp_split3>
    12da:	80 f3       	brcs	.-32     	; 0x12bc <__addsf3+0x8>
    12dc:	ba 17       	cp	r27, r26
    12de:	62 07       	cpc	r22, r18
    12e0:	73 07       	cpc	r23, r19
    12e2:	84 07       	cpc	r24, r20
    12e4:	95 07       	cpc	r25, r21
    12e6:	18 f0       	brcs	.+6      	; 0x12ee <__addsf3x+0x18>
    12e8:	71 f4       	brne	.+28     	; 0x1306 <__addsf3x+0x30>
    12ea:	9e f5       	brtc	.+102    	; 0x1352 <__addsf3x+0x7c>
    12ec:	8a c1       	rjmp	.+788    	; 0x1602 <__fp_zero>
    12ee:	0e f4       	brtc	.+2      	; 0x12f2 <__addsf3x+0x1c>
    12f0:	e0 95       	com	r30
    12f2:	0b 2e       	mov	r0, r27
    12f4:	ba 2f       	mov	r27, r26
    12f6:	a0 2d       	mov	r26, r0
    12f8:	0b 01       	movw	r0, r22
    12fa:	b9 01       	movw	r22, r18
    12fc:	90 01       	movw	r18, r0
    12fe:	0c 01       	movw	r0, r24
    1300:	ca 01       	movw	r24, r20
    1302:	a0 01       	movw	r20, r0
    1304:	11 24       	eor	r1, r1
    1306:	ff 27       	eor	r31, r31
    1308:	59 1b       	sub	r21, r25
    130a:	99 f0       	breq	.+38     	; 0x1332 <__addsf3x+0x5c>
    130c:	59 3f       	cpi	r21, 0xF9	; 249
    130e:	50 f4       	brcc	.+20     	; 0x1324 <__addsf3x+0x4e>
    1310:	50 3e       	cpi	r21, 0xE0	; 224
    1312:	68 f1       	brcs	.+90     	; 0x136e <__addsf3x+0x98>
    1314:	1a 16       	cp	r1, r26
    1316:	f0 40       	sbci	r31, 0x00	; 0
    1318:	a2 2f       	mov	r26, r18
    131a:	23 2f       	mov	r18, r19
    131c:	34 2f       	mov	r19, r20
    131e:	44 27       	eor	r20, r20
    1320:	58 5f       	subi	r21, 0xF8	; 248
    1322:	f3 cf       	rjmp	.-26     	; 0x130a <__addsf3x+0x34>
    1324:	46 95       	lsr	r20
    1326:	37 95       	ror	r19
    1328:	27 95       	ror	r18
    132a:	a7 95       	ror	r26
    132c:	f0 40       	sbci	r31, 0x00	; 0
    132e:	53 95       	inc	r21
    1330:	c9 f7       	brne	.-14     	; 0x1324 <__addsf3x+0x4e>
    1332:	7e f4       	brtc	.+30     	; 0x1352 <__addsf3x+0x7c>
    1334:	1f 16       	cp	r1, r31
    1336:	ba 0b       	sbc	r27, r26
    1338:	62 0b       	sbc	r22, r18
    133a:	73 0b       	sbc	r23, r19
    133c:	84 0b       	sbc	r24, r20
    133e:	ba f0       	brmi	.+46     	; 0x136e <__addsf3x+0x98>
    1340:	91 50       	subi	r25, 0x01	; 1
    1342:	a1 f0       	breq	.+40     	; 0x136c <__addsf3x+0x96>
    1344:	ff 0f       	add	r31, r31
    1346:	bb 1f       	adc	r27, r27
    1348:	66 1f       	adc	r22, r22
    134a:	77 1f       	adc	r23, r23
    134c:	88 1f       	adc	r24, r24
    134e:	c2 f7       	brpl	.-16     	; 0x1340 <__addsf3x+0x6a>
    1350:	0e c0       	rjmp	.+28     	; 0x136e <__addsf3x+0x98>
    1352:	ba 0f       	add	r27, r26
    1354:	62 1f       	adc	r22, r18
    1356:	73 1f       	adc	r23, r19
    1358:	84 1f       	adc	r24, r20
    135a:	48 f4       	brcc	.+18     	; 0x136e <__addsf3x+0x98>
    135c:	87 95       	ror	r24
    135e:	77 95       	ror	r23
    1360:	67 95       	ror	r22
    1362:	b7 95       	ror	r27
    1364:	f7 95       	ror	r31
    1366:	9e 3f       	cpi	r25, 0xFE	; 254
    1368:	08 f0       	brcs	.+2      	; 0x136c <__addsf3x+0x96>
    136a:	b3 cf       	rjmp	.-154    	; 0x12d2 <__addsf3+0x1e>
    136c:	93 95       	inc	r25
    136e:	88 0f       	add	r24, r24
    1370:	08 f0       	brcs	.+2      	; 0x1374 <__addsf3x+0x9e>
    1372:	99 27       	eor	r25, r25
    1374:	ee 0f       	add	r30, r30
    1376:	97 95       	ror	r25
    1378:	87 95       	ror	r24
    137a:	08 95       	ret

0000137c <__cmpsf2>:
    137c:	d4 d0       	rcall	.+424    	; 0x1526 <__fp_cmp>
    137e:	08 f4       	brcc	.+2      	; 0x1382 <__cmpsf2+0x6>
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	08 95       	ret

00001384 <__divsf3>:
    1384:	0c d0       	rcall	.+24     	; 0x139e <__divsf3x>
    1386:	0a c1       	rjmp	.+532    	; 0x159c <__fp_round>
    1388:	02 d1       	rcall	.+516    	; 0x158e <__fp_pscB>
    138a:	40 f0       	brcs	.+16     	; 0x139c <__divsf3+0x18>
    138c:	f9 d0       	rcall	.+498    	; 0x1580 <__fp_pscA>
    138e:	30 f0       	brcs	.+12     	; 0x139c <__divsf3+0x18>
    1390:	21 f4       	brne	.+8      	; 0x139a <__divsf3+0x16>
    1392:	5f 3f       	cpi	r21, 0xFF	; 255
    1394:	19 f0       	breq	.+6      	; 0x139c <__divsf3+0x18>
    1396:	eb c0       	rjmp	.+470    	; 0x156e <__fp_inf>
    1398:	51 11       	cpse	r21, r1
    139a:	34 c1       	rjmp	.+616    	; 0x1604 <__fp_szero>
    139c:	ee c0       	rjmp	.+476    	; 0x157a <__fp_nan>

0000139e <__divsf3x>:
    139e:	0f d1       	rcall	.+542    	; 0x15be <__fp_split3>
    13a0:	98 f3       	brcs	.-26     	; 0x1388 <__divsf3+0x4>

000013a2 <__divsf3_pse>:
    13a2:	99 23       	and	r25, r25
    13a4:	c9 f3       	breq	.-14     	; 0x1398 <__divsf3+0x14>
    13a6:	55 23       	and	r21, r21
    13a8:	b1 f3       	breq	.-20     	; 0x1396 <__divsf3+0x12>
    13aa:	95 1b       	sub	r25, r21
    13ac:	55 0b       	sbc	r21, r21
    13ae:	bb 27       	eor	r27, r27
    13b0:	aa 27       	eor	r26, r26
    13b2:	62 17       	cp	r22, r18
    13b4:	73 07       	cpc	r23, r19
    13b6:	84 07       	cpc	r24, r20
    13b8:	38 f0       	brcs	.+14     	; 0x13c8 <__divsf3_pse+0x26>
    13ba:	9f 5f       	subi	r25, 0xFF	; 255
    13bc:	5f 4f       	sbci	r21, 0xFF	; 255
    13be:	22 0f       	add	r18, r18
    13c0:	33 1f       	adc	r19, r19
    13c2:	44 1f       	adc	r20, r20
    13c4:	aa 1f       	adc	r26, r26
    13c6:	a9 f3       	breq	.-22     	; 0x13b2 <__divsf3_pse+0x10>
    13c8:	33 d0       	rcall	.+102    	; 0x1430 <__divsf3_pse+0x8e>
    13ca:	0e 2e       	mov	r0, r30
    13cc:	3a f0       	brmi	.+14     	; 0x13dc <__divsf3_pse+0x3a>
    13ce:	e0 e8       	ldi	r30, 0x80	; 128
    13d0:	30 d0       	rcall	.+96     	; 0x1432 <__divsf3_pse+0x90>
    13d2:	91 50       	subi	r25, 0x01	; 1
    13d4:	50 40       	sbci	r21, 0x00	; 0
    13d6:	e6 95       	lsr	r30
    13d8:	00 1c       	adc	r0, r0
    13da:	ca f7       	brpl	.-14     	; 0x13ce <__divsf3_pse+0x2c>
    13dc:	29 d0       	rcall	.+82     	; 0x1430 <__divsf3_pse+0x8e>
    13de:	fe 2f       	mov	r31, r30
    13e0:	27 d0       	rcall	.+78     	; 0x1430 <__divsf3_pse+0x8e>
    13e2:	66 0f       	add	r22, r22
    13e4:	77 1f       	adc	r23, r23
    13e6:	88 1f       	adc	r24, r24
    13e8:	bb 1f       	adc	r27, r27
    13ea:	26 17       	cp	r18, r22
    13ec:	37 07       	cpc	r19, r23
    13ee:	48 07       	cpc	r20, r24
    13f0:	ab 07       	cpc	r26, r27
    13f2:	b0 e8       	ldi	r27, 0x80	; 128
    13f4:	09 f0       	breq	.+2      	; 0x13f8 <__divsf3_pse+0x56>
    13f6:	bb 0b       	sbc	r27, r27
    13f8:	80 2d       	mov	r24, r0
    13fa:	bf 01       	movw	r22, r30
    13fc:	ff 27       	eor	r31, r31
    13fe:	93 58       	subi	r25, 0x83	; 131
    1400:	5f 4f       	sbci	r21, 0xFF	; 255
    1402:	2a f0       	brmi	.+10     	; 0x140e <__divsf3_pse+0x6c>
    1404:	9e 3f       	cpi	r25, 0xFE	; 254
    1406:	51 05       	cpc	r21, r1
    1408:	68 f0       	brcs	.+26     	; 0x1424 <__divsf3_pse+0x82>
    140a:	b1 c0       	rjmp	.+354    	; 0x156e <__fp_inf>
    140c:	fb c0       	rjmp	.+502    	; 0x1604 <__fp_szero>
    140e:	5f 3f       	cpi	r21, 0xFF	; 255
    1410:	ec f3       	brlt	.-6      	; 0x140c <__divsf3_pse+0x6a>
    1412:	98 3e       	cpi	r25, 0xE8	; 232
    1414:	dc f3       	brlt	.-10     	; 0x140c <__divsf3_pse+0x6a>
    1416:	86 95       	lsr	r24
    1418:	77 95       	ror	r23
    141a:	67 95       	ror	r22
    141c:	b7 95       	ror	r27
    141e:	f7 95       	ror	r31
    1420:	9f 5f       	subi	r25, 0xFF	; 255
    1422:	c9 f7       	brne	.-14     	; 0x1416 <__divsf3_pse+0x74>
    1424:	88 0f       	add	r24, r24
    1426:	91 1d       	adc	r25, r1
    1428:	96 95       	lsr	r25
    142a:	87 95       	ror	r24
    142c:	97 f9       	bld	r25, 7
    142e:	08 95       	ret
    1430:	e1 e0       	ldi	r30, 0x01	; 1
    1432:	66 0f       	add	r22, r22
    1434:	77 1f       	adc	r23, r23
    1436:	88 1f       	adc	r24, r24
    1438:	bb 1f       	adc	r27, r27
    143a:	62 17       	cp	r22, r18
    143c:	73 07       	cpc	r23, r19
    143e:	84 07       	cpc	r24, r20
    1440:	ba 07       	cpc	r27, r26
    1442:	20 f0       	brcs	.+8      	; 0x144c <__divsf3_pse+0xaa>
    1444:	62 1b       	sub	r22, r18
    1446:	73 0b       	sbc	r23, r19
    1448:	84 0b       	sbc	r24, r20
    144a:	ba 0b       	sbc	r27, r26
    144c:	ee 1f       	adc	r30, r30
    144e:	88 f7       	brcc	.-30     	; 0x1432 <__divsf3_pse+0x90>
    1450:	e0 95       	com	r30
    1452:	08 95       	ret

00001454 <__fixunssfsi>:
    1454:	bc d0       	rcall	.+376    	; 0x15ce <__fp_splitA>
    1456:	88 f0       	brcs	.+34     	; 0x147a <__fixunssfsi+0x26>
    1458:	9f 57       	subi	r25, 0x7F	; 127
    145a:	90 f0       	brcs	.+36     	; 0x1480 <__fixunssfsi+0x2c>
    145c:	b9 2f       	mov	r27, r25
    145e:	99 27       	eor	r25, r25
    1460:	b7 51       	subi	r27, 0x17	; 23
    1462:	a0 f0       	brcs	.+40     	; 0x148c <__fixunssfsi+0x38>
    1464:	d1 f0       	breq	.+52     	; 0x149a <__fixunssfsi+0x46>
    1466:	66 0f       	add	r22, r22
    1468:	77 1f       	adc	r23, r23
    146a:	88 1f       	adc	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	1a f0       	brmi	.+6      	; 0x1476 <__fixunssfsi+0x22>
    1470:	ba 95       	dec	r27
    1472:	c9 f7       	brne	.-14     	; 0x1466 <__fixunssfsi+0x12>
    1474:	12 c0       	rjmp	.+36     	; 0x149a <__fixunssfsi+0x46>
    1476:	b1 30       	cpi	r27, 0x01	; 1
    1478:	81 f0       	breq	.+32     	; 0x149a <__fixunssfsi+0x46>
    147a:	c3 d0       	rcall	.+390    	; 0x1602 <__fp_zero>
    147c:	b1 e0       	ldi	r27, 0x01	; 1
    147e:	08 95       	ret
    1480:	c0 c0       	rjmp	.+384    	; 0x1602 <__fp_zero>
    1482:	67 2f       	mov	r22, r23
    1484:	78 2f       	mov	r23, r24
    1486:	88 27       	eor	r24, r24
    1488:	b8 5f       	subi	r27, 0xF8	; 248
    148a:	39 f0       	breq	.+14     	; 0x149a <__fixunssfsi+0x46>
    148c:	b9 3f       	cpi	r27, 0xF9	; 249
    148e:	cc f3       	brlt	.-14     	; 0x1482 <__fixunssfsi+0x2e>
    1490:	86 95       	lsr	r24
    1492:	77 95       	ror	r23
    1494:	67 95       	ror	r22
    1496:	b3 95       	inc	r27
    1498:	d9 f7       	brne	.-10     	; 0x1490 <__fixunssfsi+0x3c>
    149a:	3e f4       	brtc	.+14     	; 0x14aa <__fixunssfsi+0x56>
    149c:	90 95       	com	r25
    149e:	80 95       	com	r24
    14a0:	70 95       	com	r23
    14a2:	61 95       	neg	r22
    14a4:	7f 4f       	sbci	r23, 0xFF	; 255
    14a6:	8f 4f       	sbci	r24, 0xFF	; 255
    14a8:	9f 4f       	sbci	r25, 0xFF	; 255
    14aa:	08 95       	ret

000014ac <__floatunsisf>:
    14ac:	e8 94       	clt
    14ae:	09 c0       	rjmp	.+18     	; 0x14c2 <__floatsisf+0x12>

000014b0 <__floatsisf>:
    14b0:	97 fb       	bst	r25, 7
    14b2:	3e f4       	brtc	.+14     	; 0x14c2 <__floatsisf+0x12>
    14b4:	90 95       	com	r25
    14b6:	80 95       	com	r24
    14b8:	70 95       	com	r23
    14ba:	61 95       	neg	r22
    14bc:	7f 4f       	sbci	r23, 0xFF	; 255
    14be:	8f 4f       	sbci	r24, 0xFF	; 255
    14c0:	9f 4f       	sbci	r25, 0xFF	; 255
    14c2:	99 23       	and	r25, r25
    14c4:	a9 f0       	breq	.+42     	; 0x14f0 <__floatsisf+0x40>
    14c6:	f9 2f       	mov	r31, r25
    14c8:	96 e9       	ldi	r25, 0x96	; 150
    14ca:	bb 27       	eor	r27, r27
    14cc:	93 95       	inc	r25
    14ce:	f6 95       	lsr	r31
    14d0:	87 95       	ror	r24
    14d2:	77 95       	ror	r23
    14d4:	67 95       	ror	r22
    14d6:	b7 95       	ror	r27
    14d8:	f1 11       	cpse	r31, r1
    14da:	f8 cf       	rjmp	.-16     	; 0x14cc <__floatsisf+0x1c>
    14dc:	fa f4       	brpl	.+62     	; 0x151c <__floatsisf+0x6c>
    14de:	bb 0f       	add	r27, r27
    14e0:	11 f4       	brne	.+4      	; 0x14e6 <__floatsisf+0x36>
    14e2:	60 ff       	sbrs	r22, 0
    14e4:	1b c0       	rjmp	.+54     	; 0x151c <__floatsisf+0x6c>
    14e6:	6f 5f       	subi	r22, 0xFF	; 255
    14e8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ea:	8f 4f       	sbci	r24, 0xFF	; 255
    14ec:	9f 4f       	sbci	r25, 0xFF	; 255
    14ee:	16 c0       	rjmp	.+44     	; 0x151c <__floatsisf+0x6c>
    14f0:	88 23       	and	r24, r24
    14f2:	11 f0       	breq	.+4      	; 0x14f8 <__floatsisf+0x48>
    14f4:	96 e9       	ldi	r25, 0x96	; 150
    14f6:	11 c0       	rjmp	.+34     	; 0x151a <__floatsisf+0x6a>
    14f8:	77 23       	and	r23, r23
    14fa:	21 f0       	breq	.+8      	; 0x1504 <__floatsisf+0x54>
    14fc:	9e e8       	ldi	r25, 0x8E	; 142
    14fe:	87 2f       	mov	r24, r23
    1500:	76 2f       	mov	r23, r22
    1502:	05 c0       	rjmp	.+10     	; 0x150e <__floatsisf+0x5e>
    1504:	66 23       	and	r22, r22
    1506:	71 f0       	breq	.+28     	; 0x1524 <__floatsisf+0x74>
    1508:	96 e8       	ldi	r25, 0x86	; 134
    150a:	86 2f       	mov	r24, r22
    150c:	70 e0       	ldi	r23, 0x00	; 0
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	2a f0       	brmi	.+10     	; 0x151c <__floatsisf+0x6c>
    1512:	9a 95       	dec	r25
    1514:	66 0f       	add	r22, r22
    1516:	77 1f       	adc	r23, r23
    1518:	88 1f       	adc	r24, r24
    151a:	da f7       	brpl	.-10     	; 0x1512 <__floatsisf+0x62>
    151c:	88 0f       	add	r24, r24
    151e:	96 95       	lsr	r25
    1520:	87 95       	ror	r24
    1522:	97 f9       	bld	r25, 7
    1524:	08 95       	ret

00001526 <__fp_cmp>:
    1526:	99 0f       	add	r25, r25
    1528:	00 08       	sbc	r0, r0
    152a:	55 0f       	add	r21, r21
    152c:	aa 0b       	sbc	r26, r26
    152e:	e0 e8       	ldi	r30, 0x80	; 128
    1530:	fe ef       	ldi	r31, 0xFE	; 254
    1532:	16 16       	cp	r1, r22
    1534:	17 06       	cpc	r1, r23
    1536:	e8 07       	cpc	r30, r24
    1538:	f9 07       	cpc	r31, r25
    153a:	c0 f0       	brcs	.+48     	; 0x156c <__fp_cmp+0x46>
    153c:	12 16       	cp	r1, r18
    153e:	13 06       	cpc	r1, r19
    1540:	e4 07       	cpc	r30, r20
    1542:	f5 07       	cpc	r31, r21
    1544:	98 f0       	brcs	.+38     	; 0x156c <__fp_cmp+0x46>
    1546:	62 1b       	sub	r22, r18
    1548:	73 0b       	sbc	r23, r19
    154a:	84 0b       	sbc	r24, r20
    154c:	95 0b       	sbc	r25, r21
    154e:	39 f4       	brne	.+14     	; 0x155e <__fp_cmp+0x38>
    1550:	0a 26       	eor	r0, r26
    1552:	61 f0       	breq	.+24     	; 0x156c <__fp_cmp+0x46>
    1554:	23 2b       	or	r18, r19
    1556:	24 2b       	or	r18, r20
    1558:	25 2b       	or	r18, r21
    155a:	21 f4       	brne	.+8      	; 0x1564 <__fp_cmp+0x3e>
    155c:	08 95       	ret
    155e:	0a 26       	eor	r0, r26
    1560:	09 f4       	brne	.+2      	; 0x1564 <__fp_cmp+0x3e>
    1562:	a1 40       	sbci	r26, 0x01	; 1
    1564:	a6 95       	lsr	r26
    1566:	8f ef       	ldi	r24, 0xFF	; 255
    1568:	81 1d       	adc	r24, r1
    156a:	81 1d       	adc	r24, r1
    156c:	08 95       	ret

0000156e <__fp_inf>:
    156e:	97 f9       	bld	r25, 7
    1570:	9f 67       	ori	r25, 0x7F	; 127
    1572:	80 e8       	ldi	r24, 0x80	; 128
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	08 95       	ret

0000157a <__fp_nan>:
    157a:	9f ef       	ldi	r25, 0xFF	; 255
    157c:	80 ec       	ldi	r24, 0xC0	; 192
    157e:	08 95       	ret

00001580 <__fp_pscA>:
    1580:	00 24       	eor	r0, r0
    1582:	0a 94       	dec	r0
    1584:	16 16       	cp	r1, r22
    1586:	17 06       	cpc	r1, r23
    1588:	18 06       	cpc	r1, r24
    158a:	09 06       	cpc	r0, r25
    158c:	08 95       	ret

0000158e <__fp_pscB>:
    158e:	00 24       	eor	r0, r0
    1590:	0a 94       	dec	r0
    1592:	12 16       	cp	r1, r18
    1594:	13 06       	cpc	r1, r19
    1596:	14 06       	cpc	r1, r20
    1598:	05 06       	cpc	r0, r21
    159a:	08 95       	ret

0000159c <__fp_round>:
    159c:	09 2e       	mov	r0, r25
    159e:	03 94       	inc	r0
    15a0:	00 0c       	add	r0, r0
    15a2:	11 f4       	brne	.+4      	; 0x15a8 <__fp_round+0xc>
    15a4:	88 23       	and	r24, r24
    15a6:	52 f0       	brmi	.+20     	; 0x15bc <__fp_round+0x20>
    15a8:	bb 0f       	add	r27, r27
    15aa:	40 f4       	brcc	.+16     	; 0x15bc <__fp_round+0x20>
    15ac:	bf 2b       	or	r27, r31
    15ae:	11 f4       	brne	.+4      	; 0x15b4 <__fp_round+0x18>
    15b0:	60 ff       	sbrs	r22, 0
    15b2:	04 c0       	rjmp	.+8      	; 0x15bc <__fp_round+0x20>
    15b4:	6f 5f       	subi	r22, 0xFF	; 255
    15b6:	7f 4f       	sbci	r23, 0xFF	; 255
    15b8:	8f 4f       	sbci	r24, 0xFF	; 255
    15ba:	9f 4f       	sbci	r25, 0xFF	; 255
    15bc:	08 95       	ret

000015be <__fp_split3>:
    15be:	57 fd       	sbrc	r21, 7
    15c0:	90 58       	subi	r25, 0x80	; 128
    15c2:	44 0f       	add	r20, r20
    15c4:	55 1f       	adc	r21, r21
    15c6:	59 f0       	breq	.+22     	; 0x15de <__fp_splitA+0x10>
    15c8:	5f 3f       	cpi	r21, 0xFF	; 255
    15ca:	71 f0       	breq	.+28     	; 0x15e8 <__fp_splitA+0x1a>
    15cc:	47 95       	ror	r20

000015ce <__fp_splitA>:
    15ce:	88 0f       	add	r24, r24
    15d0:	97 fb       	bst	r25, 7
    15d2:	99 1f       	adc	r25, r25
    15d4:	61 f0       	breq	.+24     	; 0x15ee <__fp_splitA+0x20>
    15d6:	9f 3f       	cpi	r25, 0xFF	; 255
    15d8:	79 f0       	breq	.+30     	; 0x15f8 <__fp_splitA+0x2a>
    15da:	87 95       	ror	r24
    15dc:	08 95       	ret
    15de:	12 16       	cp	r1, r18
    15e0:	13 06       	cpc	r1, r19
    15e2:	14 06       	cpc	r1, r20
    15e4:	55 1f       	adc	r21, r21
    15e6:	f2 cf       	rjmp	.-28     	; 0x15cc <__fp_split3+0xe>
    15e8:	46 95       	lsr	r20
    15ea:	f1 df       	rcall	.-30     	; 0x15ce <__fp_splitA>
    15ec:	08 c0       	rjmp	.+16     	; 0x15fe <__fp_splitA+0x30>
    15ee:	16 16       	cp	r1, r22
    15f0:	17 06       	cpc	r1, r23
    15f2:	18 06       	cpc	r1, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	f1 cf       	rjmp	.-30     	; 0x15da <__fp_splitA+0xc>
    15f8:	86 95       	lsr	r24
    15fa:	71 05       	cpc	r23, r1
    15fc:	61 05       	cpc	r22, r1
    15fe:	08 94       	sec
    1600:	08 95       	ret

00001602 <__fp_zero>:
    1602:	e8 94       	clt

00001604 <__fp_szero>:
    1604:	bb 27       	eor	r27, r27
    1606:	66 27       	eor	r22, r22
    1608:	77 27       	eor	r23, r23
    160a:	cb 01       	movw	r24, r22
    160c:	97 f9       	bld	r25, 7
    160e:	08 95       	ret

00001610 <__gesf2>:
    1610:	8a df       	rcall	.-236    	; 0x1526 <__fp_cmp>
    1612:	08 f4       	brcc	.+2      	; 0x1616 <__gesf2+0x6>
    1614:	8f ef       	ldi	r24, 0xFF	; 255
    1616:	08 95       	ret

00001618 <__mulsf3>:
    1618:	0b d0       	rcall	.+22     	; 0x1630 <__mulsf3x>
    161a:	c0 cf       	rjmp	.-128    	; 0x159c <__fp_round>
    161c:	b1 df       	rcall	.-158    	; 0x1580 <__fp_pscA>
    161e:	28 f0       	brcs	.+10     	; 0x162a <__mulsf3+0x12>
    1620:	b6 df       	rcall	.-148    	; 0x158e <__fp_pscB>
    1622:	18 f0       	brcs	.+6      	; 0x162a <__mulsf3+0x12>
    1624:	95 23       	and	r25, r21
    1626:	09 f0       	breq	.+2      	; 0x162a <__mulsf3+0x12>
    1628:	a2 cf       	rjmp	.-188    	; 0x156e <__fp_inf>
    162a:	a7 cf       	rjmp	.-178    	; 0x157a <__fp_nan>
    162c:	11 24       	eor	r1, r1
    162e:	ea cf       	rjmp	.-44     	; 0x1604 <__fp_szero>

00001630 <__mulsf3x>:
    1630:	c6 df       	rcall	.-116    	; 0x15be <__fp_split3>
    1632:	a0 f3       	brcs	.-24     	; 0x161c <__mulsf3+0x4>

00001634 <__mulsf3_pse>:
    1634:	95 9f       	mul	r25, r21
    1636:	d1 f3       	breq	.-12     	; 0x162c <__mulsf3+0x14>
    1638:	95 0f       	add	r25, r21
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	55 1f       	adc	r21, r21
    163e:	62 9f       	mul	r22, r18
    1640:	f0 01       	movw	r30, r0
    1642:	72 9f       	mul	r23, r18
    1644:	bb 27       	eor	r27, r27
    1646:	f0 0d       	add	r31, r0
    1648:	b1 1d       	adc	r27, r1
    164a:	63 9f       	mul	r22, r19
    164c:	aa 27       	eor	r26, r26
    164e:	f0 0d       	add	r31, r0
    1650:	b1 1d       	adc	r27, r1
    1652:	aa 1f       	adc	r26, r26
    1654:	64 9f       	mul	r22, r20
    1656:	66 27       	eor	r22, r22
    1658:	b0 0d       	add	r27, r0
    165a:	a1 1d       	adc	r26, r1
    165c:	66 1f       	adc	r22, r22
    165e:	82 9f       	mul	r24, r18
    1660:	22 27       	eor	r18, r18
    1662:	b0 0d       	add	r27, r0
    1664:	a1 1d       	adc	r26, r1
    1666:	62 1f       	adc	r22, r18
    1668:	73 9f       	mul	r23, r19
    166a:	b0 0d       	add	r27, r0
    166c:	a1 1d       	adc	r26, r1
    166e:	62 1f       	adc	r22, r18
    1670:	83 9f       	mul	r24, r19
    1672:	a0 0d       	add	r26, r0
    1674:	61 1d       	adc	r22, r1
    1676:	22 1f       	adc	r18, r18
    1678:	74 9f       	mul	r23, r20
    167a:	33 27       	eor	r19, r19
    167c:	a0 0d       	add	r26, r0
    167e:	61 1d       	adc	r22, r1
    1680:	23 1f       	adc	r18, r19
    1682:	84 9f       	mul	r24, r20
    1684:	60 0d       	add	r22, r0
    1686:	21 1d       	adc	r18, r1
    1688:	82 2f       	mov	r24, r18
    168a:	76 2f       	mov	r23, r22
    168c:	6a 2f       	mov	r22, r26
    168e:	11 24       	eor	r1, r1
    1690:	9f 57       	subi	r25, 0x7F	; 127
    1692:	50 40       	sbci	r21, 0x00	; 0
    1694:	8a f0       	brmi	.+34     	; 0x16b8 <__mulsf3_pse+0x84>
    1696:	e1 f0       	breq	.+56     	; 0x16d0 <__mulsf3_pse+0x9c>
    1698:	88 23       	and	r24, r24
    169a:	4a f0       	brmi	.+18     	; 0x16ae <__mulsf3_pse+0x7a>
    169c:	ee 0f       	add	r30, r30
    169e:	ff 1f       	adc	r31, r31
    16a0:	bb 1f       	adc	r27, r27
    16a2:	66 1f       	adc	r22, r22
    16a4:	77 1f       	adc	r23, r23
    16a6:	88 1f       	adc	r24, r24
    16a8:	91 50       	subi	r25, 0x01	; 1
    16aa:	50 40       	sbci	r21, 0x00	; 0
    16ac:	a9 f7       	brne	.-22     	; 0x1698 <__mulsf3_pse+0x64>
    16ae:	9e 3f       	cpi	r25, 0xFE	; 254
    16b0:	51 05       	cpc	r21, r1
    16b2:	70 f0       	brcs	.+28     	; 0x16d0 <__mulsf3_pse+0x9c>
    16b4:	5c cf       	rjmp	.-328    	; 0x156e <__fp_inf>
    16b6:	a6 cf       	rjmp	.-180    	; 0x1604 <__fp_szero>
    16b8:	5f 3f       	cpi	r21, 0xFF	; 255
    16ba:	ec f3       	brlt	.-6      	; 0x16b6 <__mulsf3_pse+0x82>
    16bc:	98 3e       	cpi	r25, 0xE8	; 232
    16be:	dc f3       	brlt	.-10     	; 0x16b6 <__mulsf3_pse+0x82>
    16c0:	86 95       	lsr	r24
    16c2:	77 95       	ror	r23
    16c4:	67 95       	ror	r22
    16c6:	b7 95       	ror	r27
    16c8:	f7 95       	ror	r31
    16ca:	e7 95       	ror	r30
    16cc:	9f 5f       	subi	r25, 0xFF	; 255
    16ce:	c1 f7       	brne	.-16     	; 0x16c0 <__mulsf3_pse+0x8c>
    16d0:	fe 2b       	or	r31, r30
    16d2:	88 0f       	add	r24, r24
    16d4:	91 1d       	adc	r25, r1
    16d6:	96 95       	lsr	r25
    16d8:	87 95       	ror	r24
    16da:	97 f9       	bld	r25, 7
    16dc:	08 95       	ret

000016de <__udivmodsi4>:
    16de:	a1 e2       	ldi	r26, 0x21	; 33
    16e0:	1a 2e       	mov	r1, r26
    16e2:	aa 1b       	sub	r26, r26
    16e4:	bb 1b       	sub	r27, r27
    16e6:	fd 01       	movw	r30, r26
    16e8:	0d c0       	rjmp	.+26     	; 0x1704 <__udivmodsi4_ep>

000016ea <__udivmodsi4_loop>:
    16ea:	aa 1f       	adc	r26, r26
    16ec:	bb 1f       	adc	r27, r27
    16ee:	ee 1f       	adc	r30, r30
    16f0:	ff 1f       	adc	r31, r31
    16f2:	a2 17       	cp	r26, r18
    16f4:	b3 07       	cpc	r27, r19
    16f6:	e4 07       	cpc	r30, r20
    16f8:	f5 07       	cpc	r31, r21
    16fa:	20 f0       	brcs	.+8      	; 0x1704 <__udivmodsi4_ep>
    16fc:	a2 1b       	sub	r26, r18
    16fe:	b3 0b       	sbc	r27, r19
    1700:	e4 0b       	sbc	r30, r20
    1702:	f5 0b       	sbc	r31, r21

00001704 <__udivmodsi4_ep>:
    1704:	66 1f       	adc	r22, r22
    1706:	77 1f       	adc	r23, r23
    1708:	88 1f       	adc	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	1a 94       	dec	r1
    170e:	69 f7       	brne	.-38     	; 0x16ea <__udivmodsi4_loop>
    1710:	60 95       	com	r22
    1712:	70 95       	com	r23
    1714:	80 95       	com	r24
    1716:	90 95       	com	r25
    1718:	9b 01       	movw	r18, r22
    171a:	ac 01       	movw	r20, r24
    171c:	bd 01       	movw	r22, r26
    171e:	cf 01       	movw	r24, r30
    1720:	08 95       	ret

00001722 <__tablejump2__>:
    1722:	ee 0f       	add	r30, r30
    1724:	ff 1f       	adc	r31, r31
    1726:	00 24       	eor	r0, r0
    1728:	00 1c       	adc	r0, r0
    172a:	0b be       	out	0x3b, r0	; 59
    172c:	07 90       	elpm	r0, Z+
    172e:	f6 91       	elpm	r31, Z
    1730:	e0 2d       	mov	r30, r0
    1732:	09 94       	ijmp

00001734 <memset>:
    1734:	dc 01       	movw	r26, r24
    1736:	01 c0       	rjmp	.+2      	; 0x173a <memset+0x6>
    1738:	6d 93       	st	X+, r22
    173a:	41 50       	subi	r20, 0x01	; 1
    173c:	50 40       	sbci	r21, 0x00	; 0
    173e:	e0 f7       	brcc	.-8      	; 0x1738 <memset+0x4>
    1740:	08 95       	ret

00001742 <sprintf>:
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	2e 97       	sbiw	r28, 0x0e	; 14
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
    175a:	0d 89       	ldd	r16, Y+21	; 0x15
    175c:	1e 89       	ldd	r17, Y+22	; 0x16
    175e:	86 e0       	ldi	r24, 0x06	; 6
    1760:	8c 83       	std	Y+4, r24	; 0x04
    1762:	1a 83       	std	Y+2, r17	; 0x02
    1764:	09 83       	std	Y+1, r16	; 0x01
    1766:	8f ef       	ldi	r24, 0xFF	; 255
    1768:	9f e7       	ldi	r25, 0x7F	; 127
    176a:	9e 83       	std	Y+6, r25	; 0x06
    176c:	8d 83       	std	Y+5, r24	; 0x05
    176e:	ae 01       	movw	r20, r28
    1770:	47 5e       	subi	r20, 0xE7	; 231
    1772:	5f 4f       	sbci	r21, 0xFF	; 255
    1774:	6f 89       	ldd	r22, Y+23	; 0x17
    1776:	78 8d       	ldd	r23, Y+24	; 0x18
    1778:	ce 01       	movw	r24, r28
    177a:	01 96       	adiw	r24, 0x01	; 1
    177c:	10 d0       	rcall	.+32     	; 0x179e <vfprintf>
    177e:	ef 81       	ldd	r30, Y+7	; 0x07
    1780:	f8 85       	ldd	r31, Y+8	; 0x08
    1782:	e0 0f       	add	r30, r16
    1784:	f1 1f       	adc	r31, r17
    1786:	10 82       	st	Z, r1
    1788:	2e 96       	adiw	r28, 0x0e	; 14
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	1f 91       	pop	r17
    179a:	0f 91       	pop	r16
    179c:	08 95       	ret

0000179e <vfprintf>:
    179e:	2f 92       	push	r2
    17a0:	3f 92       	push	r3
    17a2:	4f 92       	push	r4
    17a4:	5f 92       	push	r5
    17a6:	6f 92       	push	r6
    17a8:	7f 92       	push	r7
    17aa:	8f 92       	push	r8
    17ac:	9f 92       	push	r9
    17ae:	af 92       	push	r10
    17b0:	bf 92       	push	r11
    17b2:	cf 92       	push	r12
    17b4:	df 92       	push	r13
    17b6:	ef 92       	push	r14
    17b8:	ff 92       	push	r15
    17ba:	0f 93       	push	r16
    17bc:	1f 93       	push	r17
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	2b 97       	sbiw	r28, 0x0b	; 11
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	6c 01       	movw	r12, r24
    17d4:	7b 01       	movw	r14, r22
    17d6:	8a 01       	movw	r16, r20
    17d8:	fc 01       	movw	r30, r24
    17da:	17 82       	std	Z+7, r1	; 0x07
    17dc:	16 82       	std	Z+6, r1	; 0x06
    17de:	83 81       	ldd	r24, Z+3	; 0x03
    17e0:	81 ff       	sbrs	r24, 1
    17e2:	bf c1       	rjmp	.+894    	; 0x1b62 <vfprintf+0x3c4>
    17e4:	ce 01       	movw	r24, r28
    17e6:	01 96       	adiw	r24, 0x01	; 1
    17e8:	3c 01       	movw	r6, r24
    17ea:	f6 01       	movw	r30, r12
    17ec:	93 81       	ldd	r25, Z+3	; 0x03
    17ee:	f7 01       	movw	r30, r14
    17f0:	93 fd       	sbrc	r25, 3
    17f2:	85 91       	lpm	r24, Z+
    17f4:	93 ff       	sbrs	r25, 3
    17f6:	81 91       	ld	r24, Z+
    17f8:	7f 01       	movw	r14, r30
    17fa:	88 23       	and	r24, r24
    17fc:	09 f4       	brne	.+2      	; 0x1800 <vfprintf+0x62>
    17fe:	ad c1       	rjmp	.+858    	; 0x1b5a <vfprintf+0x3bc>
    1800:	85 32       	cpi	r24, 0x25	; 37
    1802:	39 f4       	brne	.+14     	; 0x1812 <vfprintf+0x74>
    1804:	93 fd       	sbrc	r25, 3
    1806:	85 91       	lpm	r24, Z+
    1808:	93 ff       	sbrs	r25, 3
    180a:	81 91       	ld	r24, Z+
    180c:	7f 01       	movw	r14, r30
    180e:	85 32       	cpi	r24, 0x25	; 37
    1810:	21 f4       	brne	.+8      	; 0x181a <vfprintf+0x7c>
    1812:	b6 01       	movw	r22, r12
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	d6 d1       	rcall	.+940    	; 0x1bc4 <fputc>
    1818:	e8 cf       	rjmp	.-48     	; 0x17ea <vfprintf+0x4c>
    181a:	91 2c       	mov	r9, r1
    181c:	21 2c       	mov	r2, r1
    181e:	31 2c       	mov	r3, r1
    1820:	ff e1       	ldi	r31, 0x1F	; 31
    1822:	f3 15       	cp	r31, r3
    1824:	d8 f0       	brcs	.+54     	; 0x185c <vfprintf+0xbe>
    1826:	8b 32       	cpi	r24, 0x2B	; 43
    1828:	79 f0       	breq	.+30     	; 0x1848 <vfprintf+0xaa>
    182a:	38 f4       	brcc	.+14     	; 0x183a <vfprintf+0x9c>
    182c:	80 32       	cpi	r24, 0x20	; 32
    182e:	79 f0       	breq	.+30     	; 0x184e <vfprintf+0xb0>
    1830:	83 32       	cpi	r24, 0x23	; 35
    1832:	a1 f4       	brne	.+40     	; 0x185c <vfprintf+0xbe>
    1834:	23 2d       	mov	r18, r3
    1836:	20 61       	ori	r18, 0x10	; 16
    1838:	1d c0       	rjmp	.+58     	; 0x1874 <vfprintf+0xd6>
    183a:	8d 32       	cpi	r24, 0x2D	; 45
    183c:	61 f0       	breq	.+24     	; 0x1856 <vfprintf+0xb8>
    183e:	80 33       	cpi	r24, 0x30	; 48
    1840:	69 f4       	brne	.+26     	; 0x185c <vfprintf+0xbe>
    1842:	23 2d       	mov	r18, r3
    1844:	21 60       	ori	r18, 0x01	; 1
    1846:	16 c0       	rjmp	.+44     	; 0x1874 <vfprintf+0xd6>
    1848:	83 2d       	mov	r24, r3
    184a:	82 60       	ori	r24, 0x02	; 2
    184c:	38 2e       	mov	r3, r24
    184e:	e3 2d       	mov	r30, r3
    1850:	e4 60       	ori	r30, 0x04	; 4
    1852:	3e 2e       	mov	r3, r30
    1854:	2a c0       	rjmp	.+84     	; 0x18aa <vfprintf+0x10c>
    1856:	f3 2d       	mov	r31, r3
    1858:	f8 60       	ori	r31, 0x08	; 8
    185a:	1d c0       	rjmp	.+58     	; 0x1896 <vfprintf+0xf8>
    185c:	37 fc       	sbrc	r3, 7
    185e:	2d c0       	rjmp	.+90     	; 0x18ba <vfprintf+0x11c>
    1860:	20 ed       	ldi	r18, 0xD0	; 208
    1862:	28 0f       	add	r18, r24
    1864:	2a 30       	cpi	r18, 0x0A	; 10
    1866:	40 f0       	brcs	.+16     	; 0x1878 <vfprintf+0xda>
    1868:	8e 32       	cpi	r24, 0x2E	; 46
    186a:	b9 f4       	brne	.+46     	; 0x189a <vfprintf+0xfc>
    186c:	36 fc       	sbrc	r3, 6
    186e:	75 c1       	rjmp	.+746    	; 0x1b5a <vfprintf+0x3bc>
    1870:	23 2d       	mov	r18, r3
    1872:	20 64       	ori	r18, 0x40	; 64
    1874:	32 2e       	mov	r3, r18
    1876:	19 c0       	rjmp	.+50     	; 0x18aa <vfprintf+0x10c>
    1878:	36 fe       	sbrs	r3, 6
    187a:	06 c0       	rjmp	.+12     	; 0x1888 <vfprintf+0xea>
    187c:	8a e0       	ldi	r24, 0x0A	; 10
    187e:	98 9e       	mul	r9, r24
    1880:	20 0d       	add	r18, r0
    1882:	11 24       	eor	r1, r1
    1884:	92 2e       	mov	r9, r18
    1886:	11 c0       	rjmp	.+34     	; 0x18aa <vfprintf+0x10c>
    1888:	ea e0       	ldi	r30, 0x0A	; 10
    188a:	2e 9e       	mul	r2, r30
    188c:	20 0d       	add	r18, r0
    188e:	11 24       	eor	r1, r1
    1890:	22 2e       	mov	r2, r18
    1892:	f3 2d       	mov	r31, r3
    1894:	f0 62       	ori	r31, 0x20	; 32
    1896:	3f 2e       	mov	r3, r31
    1898:	08 c0       	rjmp	.+16     	; 0x18aa <vfprintf+0x10c>
    189a:	8c 36       	cpi	r24, 0x6C	; 108
    189c:	21 f4       	brne	.+8      	; 0x18a6 <vfprintf+0x108>
    189e:	83 2d       	mov	r24, r3
    18a0:	80 68       	ori	r24, 0x80	; 128
    18a2:	38 2e       	mov	r3, r24
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <vfprintf+0x10c>
    18a6:	88 36       	cpi	r24, 0x68	; 104
    18a8:	41 f4       	brne	.+16     	; 0x18ba <vfprintf+0x11c>
    18aa:	f7 01       	movw	r30, r14
    18ac:	93 fd       	sbrc	r25, 3
    18ae:	85 91       	lpm	r24, Z+
    18b0:	93 ff       	sbrs	r25, 3
    18b2:	81 91       	ld	r24, Z+
    18b4:	7f 01       	movw	r14, r30
    18b6:	81 11       	cpse	r24, r1
    18b8:	b3 cf       	rjmp	.-154    	; 0x1820 <vfprintf+0x82>
    18ba:	98 2f       	mov	r25, r24
    18bc:	9f 7d       	andi	r25, 0xDF	; 223
    18be:	95 54       	subi	r25, 0x45	; 69
    18c0:	93 30       	cpi	r25, 0x03	; 3
    18c2:	28 f4       	brcc	.+10     	; 0x18ce <vfprintf+0x130>
    18c4:	0c 5f       	subi	r16, 0xFC	; 252
    18c6:	1f 4f       	sbci	r17, 0xFF	; 255
    18c8:	9f e3       	ldi	r25, 0x3F	; 63
    18ca:	99 83       	std	Y+1, r25	; 0x01
    18cc:	0d c0       	rjmp	.+26     	; 0x18e8 <vfprintf+0x14a>
    18ce:	83 36       	cpi	r24, 0x63	; 99
    18d0:	31 f0       	breq	.+12     	; 0x18de <vfprintf+0x140>
    18d2:	83 37       	cpi	r24, 0x73	; 115
    18d4:	71 f0       	breq	.+28     	; 0x18f2 <vfprintf+0x154>
    18d6:	83 35       	cpi	r24, 0x53	; 83
    18d8:	09 f0       	breq	.+2      	; 0x18dc <vfprintf+0x13e>
    18da:	55 c0       	rjmp	.+170    	; 0x1986 <vfprintf+0x1e8>
    18dc:	20 c0       	rjmp	.+64     	; 0x191e <vfprintf+0x180>
    18de:	f8 01       	movw	r30, r16
    18e0:	80 81       	ld	r24, Z
    18e2:	89 83       	std	Y+1, r24	; 0x01
    18e4:	0e 5f       	subi	r16, 0xFE	; 254
    18e6:	1f 4f       	sbci	r17, 0xFF	; 255
    18e8:	88 24       	eor	r8, r8
    18ea:	83 94       	inc	r8
    18ec:	91 2c       	mov	r9, r1
    18ee:	53 01       	movw	r10, r6
    18f0:	12 c0       	rjmp	.+36     	; 0x1916 <vfprintf+0x178>
    18f2:	28 01       	movw	r4, r16
    18f4:	f2 e0       	ldi	r31, 0x02	; 2
    18f6:	4f 0e       	add	r4, r31
    18f8:	51 1c       	adc	r5, r1
    18fa:	f8 01       	movw	r30, r16
    18fc:	a0 80       	ld	r10, Z
    18fe:	b1 80       	ldd	r11, Z+1	; 0x01
    1900:	36 fe       	sbrs	r3, 6
    1902:	03 c0       	rjmp	.+6      	; 0x190a <vfprintf+0x16c>
    1904:	69 2d       	mov	r22, r9
    1906:	70 e0       	ldi	r23, 0x00	; 0
    1908:	02 c0       	rjmp	.+4      	; 0x190e <vfprintf+0x170>
    190a:	6f ef       	ldi	r22, 0xFF	; 255
    190c:	7f ef       	ldi	r23, 0xFF	; 255
    190e:	c5 01       	movw	r24, r10
    1910:	4e d1       	rcall	.+668    	; 0x1bae <strnlen>
    1912:	4c 01       	movw	r8, r24
    1914:	82 01       	movw	r16, r4
    1916:	f3 2d       	mov	r31, r3
    1918:	ff 77       	andi	r31, 0x7F	; 127
    191a:	3f 2e       	mov	r3, r31
    191c:	15 c0       	rjmp	.+42     	; 0x1948 <vfprintf+0x1aa>
    191e:	28 01       	movw	r4, r16
    1920:	22 e0       	ldi	r18, 0x02	; 2
    1922:	42 0e       	add	r4, r18
    1924:	51 1c       	adc	r5, r1
    1926:	f8 01       	movw	r30, r16
    1928:	a0 80       	ld	r10, Z
    192a:	b1 80       	ldd	r11, Z+1	; 0x01
    192c:	36 fe       	sbrs	r3, 6
    192e:	03 c0       	rjmp	.+6      	; 0x1936 <vfprintf+0x198>
    1930:	69 2d       	mov	r22, r9
    1932:	70 e0       	ldi	r23, 0x00	; 0
    1934:	02 c0       	rjmp	.+4      	; 0x193a <vfprintf+0x19c>
    1936:	6f ef       	ldi	r22, 0xFF	; 255
    1938:	7f ef       	ldi	r23, 0xFF	; 255
    193a:	c5 01       	movw	r24, r10
    193c:	2d d1       	rcall	.+602    	; 0x1b98 <strnlen_P>
    193e:	4c 01       	movw	r8, r24
    1940:	f3 2d       	mov	r31, r3
    1942:	f0 68       	ori	r31, 0x80	; 128
    1944:	3f 2e       	mov	r3, r31
    1946:	82 01       	movw	r16, r4
    1948:	33 fc       	sbrc	r3, 3
    194a:	19 c0       	rjmp	.+50     	; 0x197e <vfprintf+0x1e0>
    194c:	82 2d       	mov	r24, r2
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	88 16       	cp	r8, r24
    1952:	99 06       	cpc	r9, r25
    1954:	a0 f4       	brcc	.+40     	; 0x197e <vfprintf+0x1e0>
    1956:	b6 01       	movw	r22, r12
    1958:	80 e2       	ldi	r24, 0x20	; 32
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	33 d1       	rcall	.+614    	; 0x1bc4 <fputc>
    195e:	2a 94       	dec	r2
    1960:	f5 cf       	rjmp	.-22     	; 0x194c <vfprintf+0x1ae>
    1962:	f5 01       	movw	r30, r10
    1964:	37 fc       	sbrc	r3, 7
    1966:	85 91       	lpm	r24, Z+
    1968:	37 fe       	sbrs	r3, 7
    196a:	81 91       	ld	r24, Z+
    196c:	5f 01       	movw	r10, r30
    196e:	b6 01       	movw	r22, r12
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	28 d1       	rcall	.+592    	; 0x1bc4 <fputc>
    1974:	21 10       	cpse	r2, r1
    1976:	2a 94       	dec	r2
    1978:	21 e0       	ldi	r18, 0x01	; 1
    197a:	82 1a       	sub	r8, r18
    197c:	91 08       	sbc	r9, r1
    197e:	81 14       	cp	r8, r1
    1980:	91 04       	cpc	r9, r1
    1982:	79 f7       	brne	.-34     	; 0x1962 <vfprintf+0x1c4>
    1984:	e1 c0       	rjmp	.+450    	; 0x1b48 <vfprintf+0x3aa>
    1986:	84 36       	cpi	r24, 0x64	; 100
    1988:	11 f0       	breq	.+4      	; 0x198e <vfprintf+0x1f0>
    198a:	89 36       	cpi	r24, 0x69	; 105
    198c:	39 f5       	brne	.+78     	; 0x19dc <vfprintf+0x23e>
    198e:	f8 01       	movw	r30, r16
    1990:	37 fe       	sbrs	r3, 7
    1992:	07 c0       	rjmp	.+14     	; 0x19a2 <vfprintf+0x204>
    1994:	60 81       	ld	r22, Z
    1996:	71 81       	ldd	r23, Z+1	; 0x01
    1998:	82 81       	ldd	r24, Z+2	; 0x02
    199a:	93 81       	ldd	r25, Z+3	; 0x03
    199c:	0c 5f       	subi	r16, 0xFC	; 252
    199e:	1f 4f       	sbci	r17, 0xFF	; 255
    19a0:	08 c0       	rjmp	.+16     	; 0x19b2 <vfprintf+0x214>
    19a2:	60 81       	ld	r22, Z
    19a4:	71 81       	ldd	r23, Z+1	; 0x01
    19a6:	07 2e       	mov	r0, r23
    19a8:	00 0c       	add	r0, r0
    19aa:	88 0b       	sbc	r24, r24
    19ac:	99 0b       	sbc	r25, r25
    19ae:	0e 5f       	subi	r16, 0xFE	; 254
    19b0:	1f 4f       	sbci	r17, 0xFF	; 255
    19b2:	f3 2d       	mov	r31, r3
    19b4:	ff 76       	andi	r31, 0x6F	; 111
    19b6:	3f 2e       	mov	r3, r31
    19b8:	97 ff       	sbrs	r25, 7
    19ba:	09 c0       	rjmp	.+18     	; 0x19ce <vfprintf+0x230>
    19bc:	90 95       	com	r25
    19be:	80 95       	com	r24
    19c0:	70 95       	com	r23
    19c2:	61 95       	neg	r22
    19c4:	7f 4f       	sbci	r23, 0xFF	; 255
    19c6:	8f 4f       	sbci	r24, 0xFF	; 255
    19c8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ca:	f0 68       	ori	r31, 0x80	; 128
    19cc:	3f 2e       	mov	r3, r31
    19ce:	2a e0       	ldi	r18, 0x0A	; 10
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	a3 01       	movw	r20, r6
    19d4:	33 d1       	rcall	.+614    	; 0x1c3c <__ultoa_invert>
    19d6:	88 2e       	mov	r8, r24
    19d8:	86 18       	sub	r8, r6
    19da:	44 c0       	rjmp	.+136    	; 0x1a64 <vfprintf+0x2c6>
    19dc:	85 37       	cpi	r24, 0x75	; 117
    19de:	31 f4       	brne	.+12     	; 0x19ec <vfprintf+0x24e>
    19e0:	23 2d       	mov	r18, r3
    19e2:	2f 7e       	andi	r18, 0xEF	; 239
    19e4:	b2 2e       	mov	r11, r18
    19e6:	2a e0       	ldi	r18, 0x0A	; 10
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	25 c0       	rjmp	.+74     	; 0x1a36 <vfprintf+0x298>
    19ec:	93 2d       	mov	r25, r3
    19ee:	99 7f       	andi	r25, 0xF9	; 249
    19f0:	b9 2e       	mov	r11, r25
    19f2:	8f 36       	cpi	r24, 0x6F	; 111
    19f4:	c1 f0       	breq	.+48     	; 0x1a26 <vfprintf+0x288>
    19f6:	18 f4       	brcc	.+6      	; 0x19fe <vfprintf+0x260>
    19f8:	88 35       	cpi	r24, 0x58	; 88
    19fa:	79 f0       	breq	.+30     	; 0x1a1a <vfprintf+0x27c>
    19fc:	ae c0       	rjmp	.+348    	; 0x1b5a <vfprintf+0x3bc>
    19fe:	80 37       	cpi	r24, 0x70	; 112
    1a00:	19 f0       	breq	.+6      	; 0x1a08 <vfprintf+0x26a>
    1a02:	88 37       	cpi	r24, 0x78	; 120
    1a04:	21 f0       	breq	.+8      	; 0x1a0e <vfprintf+0x270>
    1a06:	a9 c0       	rjmp	.+338    	; 0x1b5a <vfprintf+0x3bc>
    1a08:	e9 2f       	mov	r30, r25
    1a0a:	e0 61       	ori	r30, 0x10	; 16
    1a0c:	be 2e       	mov	r11, r30
    1a0e:	b4 fe       	sbrs	r11, 4
    1a10:	0d c0       	rjmp	.+26     	; 0x1a2c <vfprintf+0x28e>
    1a12:	fb 2d       	mov	r31, r11
    1a14:	f4 60       	ori	r31, 0x04	; 4
    1a16:	bf 2e       	mov	r11, r31
    1a18:	09 c0       	rjmp	.+18     	; 0x1a2c <vfprintf+0x28e>
    1a1a:	34 fe       	sbrs	r3, 4
    1a1c:	0a c0       	rjmp	.+20     	; 0x1a32 <vfprintf+0x294>
    1a1e:	29 2f       	mov	r18, r25
    1a20:	26 60       	ori	r18, 0x06	; 6
    1a22:	b2 2e       	mov	r11, r18
    1a24:	06 c0       	rjmp	.+12     	; 0x1a32 <vfprintf+0x294>
    1a26:	28 e0       	ldi	r18, 0x08	; 8
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	05 c0       	rjmp	.+10     	; 0x1a36 <vfprintf+0x298>
    1a2c:	20 e1       	ldi	r18, 0x10	; 16
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <vfprintf+0x298>
    1a32:	20 e1       	ldi	r18, 0x10	; 16
    1a34:	32 e0       	ldi	r19, 0x02	; 2
    1a36:	f8 01       	movw	r30, r16
    1a38:	b7 fe       	sbrs	r11, 7
    1a3a:	07 c0       	rjmp	.+14     	; 0x1a4a <vfprintf+0x2ac>
    1a3c:	60 81       	ld	r22, Z
    1a3e:	71 81       	ldd	r23, Z+1	; 0x01
    1a40:	82 81       	ldd	r24, Z+2	; 0x02
    1a42:	93 81       	ldd	r25, Z+3	; 0x03
    1a44:	0c 5f       	subi	r16, 0xFC	; 252
    1a46:	1f 4f       	sbci	r17, 0xFF	; 255
    1a48:	06 c0       	rjmp	.+12     	; 0x1a56 <vfprintf+0x2b8>
    1a4a:	60 81       	ld	r22, Z
    1a4c:	71 81       	ldd	r23, Z+1	; 0x01
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	0e 5f       	subi	r16, 0xFE	; 254
    1a54:	1f 4f       	sbci	r17, 0xFF	; 255
    1a56:	a3 01       	movw	r20, r6
    1a58:	f1 d0       	rcall	.+482    	; 0x1c3c <__ultoa_invert>
    1a5a:	88 2e       	mov	r8, r24
    1a5c:	86 18       	sub	r8, r6
    1a5e:	fb 2d       	mov	r31, r11
    1a60:	ff 77       	andi	r31, 0x7F	; 127
    1a62:	3f 2e       	mov	r3, r31
    1a64:	36 fe       	sbrs	r3, 6
    1a66:	0d c0       	rjmp	.+26     	; 0x1a82 <vfprintf+0x2e4>
    1a68:	23 2d       	mov	r18, r3
    1a6a:	2e 7f       	andi	r18, 0xFE	; 254
    1a6c:	a2 2e       	mov	r10, r18
    1a6e:	89 14       	cp	r8, r9
    1a70:	58 f4       	brcc	.+22     	; 0x1a88 <vfprintf+0x2ea>
    1a72:	34 fe       	sbrs	r3, 4
    1a74:	0b c0       	rjmp	.+22     	; 0x1a8c <vfprintf+0x2ee>
    1a76:	32 fc       	sbrc	r3, 2
    1a78:	09 c0       	rjmp	.+18     	; 0x1a8c <vfprintf+0x2ee>
    1a7a:	83 2d       	mov	r24, r3
    1a7c:	8e 7e       	andi	r24, 0xEE	; 238
    1a7e:	a8 2e       	mov	r10, r24
    1a80:	05 c0       	rjmp	.+10     	; 0x1a8c <vfprintf+0x2ee>
    1a82:	b8 2c       	mov	r11, r8
    1a84:	a3 2c       	mov	r10, r3
    1a86:	03 c0       	rjmp	.+6      	; 0x1a8e <vfprintf+0x2f0>
    1a88:	b8 2c       	mov	r11, r8
    1a8a:	01 c0       	rjmp	.+2      	; 0x1a8e <vfprintf+0x2f0>
    1a8c:	b9 2c       	mov	r11, r9
    1a8e:	a4 fe       	sbrs	r10, 4
    1a90:	0f c0       	rjmp	.+30     	; 0x1ab0 <vfprintf+0x312>
    1a92:	fe 01       	movw	r30, r28
    1a94:	e8 0d       	add	r30, r8
    1a96:	f1 1d       	adc	r31, r1
    1a98:	80 81       	ld	r24, Z
    1a9a:	80 33       	cpi	r24, 0x30	; 48
    1a9c:	21 f4       	brne	.+8      	; 0x1aa6 <vfprintf+0x308>
    1a9e:	9a 2d       	mov	r25, r10
    1aa0:	99 7e       	andi	r25, 0xE9	; 233
    1aa2:	a9 2e       	mov	r10, r25
    1aa4:	09 c0       	rjmp	.+18     	; 0x1ab8 <vfprintf+0x31a>
    1aa6:	a2 fe       	sbrs	r10, 2
    1aa8:	06 c0       	rjmp	.+12     	; 0x1ab6 <vfprintf+0x318>
    1aaa:	b3 94       	inc	r11
    1aac:	b3 94       	inc	r11
    1aae:	04 c0       	rjmp	.+8      	; 0x1ab8 <vfprintf+0x31a>
    1ab0:	8a 2d       	mov	r24, r10
    1ab2:	86 78       	andi	r24, 0x86	; 134
    1ab4:	09 f0       	breq	.+2      	; 0x1ab8 <vfprintf+0x31a>
    1ab6:	b3 94       	inc	r11
    1ab8:	a3 fc       	sbrc	r10, 3
    1aba:	10 c0       	rjmp	.+32     	; 0x1adc <vfprintf+0x33e>
    1abc:	a0 fe       	sbrs	r10, 0
    1abe:	06 c0       	rjmp	.+12     	; 0x1acc <vfprintf+0x32e>
    1ac0:	b2 14       	cp	r11, r2
    1ac2:	80 f4       	brcc	.+32     	; 0x1ae4 <vfprintf+0x346>
    1ac4:	28 0c       	add	r2, r8
    1ac6:	92 2c       	mov	r9, r2
    1ac8:	9b 18       	sub	r9, r11
    1aca:	0d c0       	rjmp	.+26     	; 0x1ae6 <vfprintf+0x348>
    1acc:	b2 14       	cp	r11, r2
    1ace:	58 f4       	brcc	.+22     	; 0x1ae6 <vfprintf+0x348>
    1ad0:	b6 01       	movw	r22, r12
    1ad2:	80 e2       	ldi	r24, 0x20	; 32
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	76 d0       	rcall	.+236    	; 0x1bc4 <fputc>
    1ad8:	b3 94       	inc	r11
    1ada:	f8 cf       	rjmp	.-16     	; 0x1acc <vfprintf+0x32e>
    1adc:	b2 14       	cp	r11, r2
    1ade:	18 f4       	brcc	.+6      	; 0x1ae6 <vfprintf+0x348>
    1ae0:	2b 18       	sub	r2, r11
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <vfprintf+0x34a>
    1ae4:	98 2c       	mov	r9, r8
    1ae6:	21 2c       	mov	r2, r1
    1ae8:	a4 fe       	sbrs	r10, 4
    1aea:	0f c0       	rjmp	.+30     	; 0x1b0a <vfprintf+0x36c>
    1aec:	b6 01       	movw	r22, r12
    1aee:	80 e3       	ldi	r24, 0x30	; 48
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	68 d0       	rcall	.+208    	; 0x1bc4 <fputc>
    1af4:	a2 fe       	sbrs	r10, 2
    1af6:	16 c0       	rjmp	.+44     	; 0x1b24 <vfprintf+0x386>
    1af8:	a1 fc       	sbrc	r10, 1
    1afa:	03 c0       	rjmp	.+6      	; 0x1b02 <vfprintf+0x364>
    1afc:	88 e7       	ldi	r24, 0x78	; 120
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <vfprintf+0x368>
    1b02:	88 e5       	ldi	r24, 0x58	; 88
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	b6 01       	movw	r22, r12
    1b08:	0c c0       	rjmp	.+24     	; 0x1b22 <vfprintf+0x384>
    1b0a:	8a 2d       	mov	r24, r10
    1b0c:	86 78       	andi	r24, 0x86	; 134
    1b0e:	51 f0       	breq	.+20     	; 0x1b24 <vfprintf+0x386>
    1b10:	a1 fe       	sbrs	r10, 1
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <vfprintf+0x37a>
    1b14:	8b e2       	ldi	r24, 0x2B	; 43
    1b16:	01 c0       	rjmp	.+2      	; 0x1b1a <vfprintf+0x37c>
    1b18:	80 e2       	ldi	r24, 0x20	; 32
    1b1a:	a7 fc       	sbrc	r10, 7
    1b1c:	8d e2       	ldi	r24, 0x2D	; 45
    1b1e:	b6 01       	movw	r22, r12
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	50 d0       	rcall	.+160    	; 0x1bc4 <fputc>
    1b24:	89 14       	cp	r8, r9
    1b26:	30 f4       	brcc	.+12     	; 0x1b34 <vfprintf+0x396>
    1b28:	b6 01       	movw	r22, r12
    1b2a:	80 e3       	ldi	r24, 0x30	; 48
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	4a d0       	rcall	.+148    	; 0x1bc4 <fputc>
    1b30:	9a 94       	dec	r9
    1b32:	f8 cf       	rjmp	.-16     	; 0x1b24 <vfprintf+0x386>
    1b34:	8a 94       	dec	r8
    1b36:	f3 01       	movw	r30, r6
    1b38:	e8 0d       	add	r30, r8
    1b3a:	f1 1d       	adc	r31, r1
    1b3c:	80 81       	ld	r24, Z
    1b3e:	b6 01       	movw	r22, r12
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	40 d0       	rcall	.+128    	; 0x1bc4 <fputc>
    1b44:	81 10       	cpse	r8, r1
    1b46:	f6 cf       	rjmp	.-20     	; 0x1b34 <vfprintf+0x396>
    1b48:	22 20       	and	r2, r2
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <vfprintf+0x3b0>
    1b4c:	4e ce       	rjmp	.-868    	; 0x17ea <vfprintf+0x4c>
    1b4e:	b6 01       	movw	r22, r12
    1b50:	80 e2       	ldi	r24, 0x20	; 32
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	37 d0       	rcall	.+110    	; 0x1bc4 <fputc>
    1b56:	2a 94       	dec	r2
    1b58:	f7 cf       	rjmp	.-18     	; 0x1b48 <vfprintf+0x3aa>
    1b5a:	f6 01       	movw	r30, r12
    1b5c:	86 81       	ldd	r24, Z+6	; 0x06
    1b5e:	97 81       	ldd	r25, Z+7	; 0x07
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <vfprintf+0x3c8>
    1b62:	8f ef       	ldi	r24, 0xFF	; 255
    1b64:	9f ef       	ldi	r25, 0xFF	; 255
    1b66:	2b 96       	adiw	r28, 0x0b	; 11
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	1f 91       	pop	r17
    1b78:	0f 91       	pop	r16
    1b7a:	ff 90       	pop	r15
    1b7c:	ef 90       	pop	r14
    1b7e:	df 90       	pop	r13
    1b80:	cf 90       	pop	r12
    1b82:	bf 90       	pop	r11
    1b84:	af 90       	pop	r10
    1b86:	9f 90       	pop	r9
    1b88:	8f 90       	pop	r8
    1b8a:	7f 90       	pop	r7
    1b8c:	6f 90       	pop	r6
    1b8e:	5f 90       	pop	r5
    1b90:	4f 90       	pop	r4
    1b92:	3f 90       	pop	r3
    1b94:	2f 90       	pop	r2
    1b96:	08 95       	ret

00001b98 <strnlen_P>:
    1b98:	fc 01       	movw	r30, r24
    1b9a:	05 90       	lpm	r0, Z+
    1b9c:	61 50       	subi	r22, 0x01	; 1
    1b9e:	70 40       	sbci	r23, 0x00	; 0
    1ba0:	01 10       	cpse	r0, r1
    1ba2:	d8 f7       	brcc	.-10     	; 0x1b9a <strnlen_P+0x2>
    1ba4:	80 95       	com	r24
    1ba6:	90 95       	com	r25
    1ba8:	8e 0f       	add	r24, r30
    1baa:	9f 1f       	adc	r25, r31
    1bac:	08 95       	ret

00001bae <strnlen>:
    1bae:	fc 01       	movw	r30, r24
    1bb0:	61 50       	subi	r22, 0x01	; 1
    1bb2:	70 40       	sbci	r23, 0x00	; 0
    1bb4:	01 90       	ld	r0, Z+
    1bb6:	01 10       	cpse	r0, r1
    1bb8:	d8 f7       	brcc	.-10     	; 0x1bb0 <strnlen+0x2>
    1bba:	80 95       	com	r24
    1bbc:	90 95       	com	r25
    1bbe:	8e 0f       	add	r24, r30
    1bc0:	9f 1f       	adc	r25, r31
    1bc2:	08 95       	ret

00001bc4 <fputc>:
    1bc4:	0f 93       	push	r16
    1bc6:	1f 93       	push	r17
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	fb 01       	movw	r30, r22
    1bce:	23 81       	ldd	r18, Z+3	; 0x03
    1bd0:	21 fd       	sbrc	r18, 1
    1bd2:	03 c0       	rjmp	.+6      	; 0x1bda <fputc+0x16>
    1bd4:	8f ef       	ldi	r24, 0xFF	; 255
    1bd6:	9f ef       	ldi	r25, 0xFF	; 255
    1bd8:	2c c0       	rjmp	.+88     	; 0x1c32 <fputc+0x6e>
    1bda:	22 ff       	sbrs	r18, 2
    1bdc:	16 c0       	rjmp	.+44     	; 0x1c0a <fputc+0x46>
    1bde:	46 81       	ldd	r20, Z+6	; 0x06
    1be0:	57 81       	ldd	r21, Z+7	; 0x07
    1be2:	24 81       	ldd	r18, Z+4	; 0x04
    1be4:	35 81       	ldd	r19, Z+5	; 0x05
    1be6:	42 17       	cp	r20, r18
    1be8:	53 07       	cpc	r21, r19
    1bea:	44 f4       	brge	.+16     	; 0x1bfc <fputc+0x38>
    1bec:	a0 81       	ld	r26, Z
    1bee:	b1 81       	ldd	r27, Z+1	; 0x01
    1bf0:	9d 01       	movw	r18, r26
    1bf2:	2f 5f       	subi	r18, 0xFF	; 255
    1bf4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf6:	31 83       	std	Z+1, r19	; 0x01
    1bf8:	20 83       	st	Z, r18
    1bfa:	8c 93       	st	X, r24
    1bfc:	26 81       	ldd	r18, Z+6	; 0x06
    1bfe:	37 81       	ldd	r19, Z+7	; 0x07
    1c00:	2f 5f       	subi	r18, 0xFF	; 255
    1c02:	3f 4f       	sbci	r19, 0xFF	; 255
    1c04:	37 83       	std	Z+7, r19	; 0x07
    1c06:	26 83       	std	Z+6, r18	; 0x06
    1c08:	14 c0       	rjmp	.+40     	; 0x1c32 <fputc+0x6e>
    1c0a:	8b 01       	movw	r16, r22
    1c0c:	ec 01       	movw	r28, r24
    1c0e:	fb 01       	movw	r30, r22
    1c10:	00 84       	ldd	r0, Z+8	; 0x08
    1c12:	f1 85       	ldd	r31, Z+9	; 0x09
    1c14:	e0 2d       	mov	r30, r0
    1c16:	09 95       	icall
    1c18:	89 2b       	or	r24, r25
    1c1a:	e1 f6       	brne	.-72     	; 0x1bd4 <fputc+0x10>
    1c1c:	d8 01       	movw	r26, r16
    1c1e:	16 96       	adiw	r26, 0x06	; 6
    1c20:	8d 91       	ld	r24, X+
    1c22:	9c 91       	ld	r25, X
    1c24:	17 97       	sbiw	r26, 0x07	; 7
    1c26:	01 96       	adiw	r24, 0x01	; 1
    1c28:	17 96       	adiw	r26, 0x07	; 7
    1c2a:	9c 93       	st	X, r25
    1c2c:	8e 93       	st	-X, r24
    1c2e:	16 97       	sbiw	r26, 0x06	; 6
    1c30:	ce 01       	movw	r24, r28
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	1f 91       	pop	r17
    1c38:	0f 91       	pop	r16
    1c3a:	08 95       	ret

00001c3c <__ultoa_invert>:
    1c3c:	fa 01       	movw	r30, r20
    1c3e:	aa 27       	eor	r26, r26
    1c40:	28 30       	cpi	r18, 0x08	; 8
    1c42:	51 f1       	breq	.+84     	; 0x1c98 <__ultoa_invert+0x5c>
    1c44:	20 31       	cpi	r18, 0x10	; 16
    1c46:	81 f1       	breq	.+96     	; 0x1ca8 <__ultoa_invert+0x6c>
    1c48:	e8 94       	clt
    1c4a:	6f 93       	push	r22
    1c4c:	6e 7f       	andi	r22, 0xFE	; 254
    1c4e:	6e 5f       	subi	r22, 0xFE	; 254
    1c50:	7f 4f       	sbci	r23, 0xFF	; 255
    1c52:	8f 4f       	sbci	r24, 0xFF	; 255
    1c54:	9f 4f       	sbci	r25, 0xFF	; 255
    1c56:	af 4f       	sbci	r26, 0xFF	; 255
    1c58:	b1 e0       	ldi	r27, 0x01	; 1
    1c5a:	3e d0       	rcall	.+124    	; 0x1cd8 <__ultoa_invert+0x9c>
    1c5c:	b4 e0       	ldi	r27, 0x04	; 4
    1c5e:	3c d0       	rcall	.+120    	; 0x1cd8 <__ultoa_invert+0x9c>
    1c60:	67 0f       	add	r22, r23
    1c62:	78 1f       	adc	r23, r24
    1c64:	89 1f       	adc	r24, r25
    1c66:	9a 1f       	adc	r25, r26
    1c68:	a1 1d       	adc	r26, r1
    1c6a:	68 0f       	add	r22, r24
    1c6c:	79 1f       	adc	r23, r25
    1c6e:	8a 1f       	adc	r24, r26
    1c70:	91 1d       	adc	r25, r1
    1c72:	a1 1d       	adc	r26, r1
    1c74:	6a 0f       	add	r22, r26
    1c76:	71 1d       	adc	r23, r1
    1c78:	81 1d       	adc	r24, r1
    1c7a:	91 1d       	adc	r25, r1
    1c7c:	a1 1d       	adc	r26, r1
    1c7e:	20 d0       	rcall	.+64     	; 0x1cc0 <__ultoa_invert+0x84>
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <__ultoa_invert+0x48>
    1c82:	68 94       	set
    1c84:	3f 91       	pop	r19
    1c86:	2a e0       	ldi	r18, 0x0A	; 10
    1c88:	26 9f       	mul	r18, r22
    1c8a:	11 24       	eor	r1, r1
    1c8c:	30 19       	sub	r19, r0
    1c8e:	30 5d       	subi	r19, 0xD0	; 208
    1c90:	31 93       	st	Z+, r19
    1c92:	de f6       	brtc	.-74     	; 0x1c4a <__ultoa_invert+0xe>
    1c94:	cf 01       	movw	r24, r30
    1c96:	08 95       	ret
    1c98:	46 2f       	mov	r20, r22
    1c9a:	47 70       	andi	r20, 0x07	; 7
    1c9c:	40 5d       	subi	r20, 0xD0	; 208
    1c9e:	41 93       	st	Z+, r20
    1ca0:	b3 e0       	ldi	r27, 0x03	; 3
    1ca2:	0f d0       	rcall	.+30     	; 0x1cc2 <__ultoa_invert+0x86>
    1ca4:	c9 f7       	brne	.-14     	; 0x1c98 <__ultoa_invert+0x5c>
    1ca6:	f6 cf       	rjmp	.-20     	; 0x1c94 <__ultoa_invert+0x58>
    1ca8:	46 2f       	mov	r20, r22
    1caa:	4f 70       	andi	r20, 0x0F	; 15
    1cac:	40 5d       	subi	r20, 0xD0	; 208
    1cae:	4a 33       	cpi	r20, 0x3A	; 58
    1cb0:	18 f0       	brcs	.+6      	; 0x1cb8 <__ultoa_invert+0x7c>
    1cb2:	49 5d       	subi	r20, 0xD9	; 217
    1cb4:	31 fd       	sbrc	r19, 1
    1cb6:	40 52       	subi	r20, 0x20	; 32
    1cb8:	41 93       	st	Z+, r20
    1cba:	02 d0       	rcall	.+4      	; 0x1cc0 <__ultoa_invert+0x84>
    1cbc:	a9 f7       	brne	.-22     	; 0x1ca8 <__ultoa_invert+0x6c>
    1cbe:	ea cf       	rjmp	.-44     	; 0x1c94 <__ultoa_invert+0x58>
    1cc0:	b4 e0       	ldi	r27, 0x04	; 4
    1cc2:	a6 95       	lsr	r26
    1cc4:	97 95       	ror	r25
    1cc6:	87 95       	ror	r24
    1cc8:	77 95       	ror	r23
    1cca:	67 95       	ror	r22
    1ccc:	ba 95       	dec	r27
    1cce:	c9 f7       	brne	.-14     	; 0x1cc2 <__ultoa_invert+0x86>
    1cd0:	00 97       	sbiw	r24, 0x00	; 0
    1cd2:	61 05       	cpc	r22, r1
    1cd4:	71 05       	cpc	r23, r1
    1cd6:	08 95       	ret
    1cd8:	9b 01       	movw	r18, r22
    1cda:	ac 01       	movw	r20, r24
    1cdc:	0a 2e       	mov	r0, r26
    1cde:	06 94       	lsr	r0
    1ce0:	57 95       	ror	r21
    1ce2:	47 95       	ror	r20
    1ce4:	37 95       	ror	r19
    1ce6:	27 95       	ror	r18
    1ce8:	ba 95       	dec	r27
    1cea:	c9 f7       	brne	.-14     	; 0x1cde <__ultoa_invert+0xa2>
    1cec:	62 0f       	add	r22, r18
    1cee:	73 1f       	adc	r23, r19
    1cf0:	84 1f       	adc	r24, r20
    1cf2:	95 1f       	adc	r25, r21
    1cf4:	a0 1d       	adc	r26, r0
    1cf6:	08 95       	ret

00001cf8 <_exit>:
    1cf8:	f8 94       	cli

00001cfa <__stop_program>:
    1cfa:	ff cf       	rjmp	.-2      	; 0x1cfa <__stop_program>
