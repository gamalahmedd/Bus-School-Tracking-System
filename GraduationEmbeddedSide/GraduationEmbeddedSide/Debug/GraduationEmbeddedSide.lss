
GraduationEmbeddedSide.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000005fa  0000066e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015f3  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b06  00000000  00000000  00001db7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bb3  00000000  00000000  000028bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00003470  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b97  00000000  00000000  000035b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000019bc  00000000  00000000  00004147  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00005b03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	61 c0       	rjmp	.+194    	; 0xc4 <__ctors_end>
   2:	00 00       	nop
   4:	74 c0       	rjmp	.+232    	; 0xee <__bad_interrupt>
   6:	00 00       	nop
   8:	72 c0       	rjmp	.+228    	; 0xee <__bad_interrupt>
   a:	00 00       	nop
   c:	70 c0       	rjmp	.+224    	; 0xee <__bad_interrupt>
   e:	00 00       	nop
  10:	6e c0       	rjmp	.+220    	; 0xee <__bad_interrupt>
  12:	00 00       	nop
  14:	6c c0       	rjmp	.+216    	; 0xee <__bad_interrupt>
  16:	00 00       	nop
  18:	6a c0       	rjmp	.+212    	; 0xee <__bad_interrupt>
  1a:	00 00       	nop
  1c:	68 c0       	rjmp	.+208    	; 0xee <__bad_interrupt>
  1e:	00 00       	nop
  20:	66 c0       	rjmp	.+204    	; 0xee <__bad_interrupt>
  22:	00 00       	nop
  24:	64 c0       	rjmp	.+200    	; 0xee <__bad_interrupt>
  26:	00 00       	nop
  28:	62 c0       	rjmp	.+196    	; 0xee <__bad_interrupt>
  2a:	00 00       	nop
  2c:	60 c0       	rjmp	.+192    	; 0xee <__bad_interrupt>
  2e:	00 00       	nop
  30:	5e c0       	rjmp	.+188    	; 0xee <__bad_interrupt>
  32:	00 00       	nop
  34:	5c c0       	rjmp	.+184    	; 0xee <__bad_interrupt>
  36:	00 00       	nop
  38:	5a c0       	rjmp	.+180    	; 0xee <__bad_interrupt>
  3a:	00 00       	nop
  3c:	58 c0       	rjmp	.+176    	; 0xee <__bad_interrupt>
  3e:	00 00       	nop
  40:	56 c0       	rjmp	.+172    	; 0xee <__bad_interrupt>
  42:	00 00       	nop
  44:	54 c0       	rjmp	.+168    	; 0xee <__bad_interrupt>
  46:	00 00       	nop
  48:	52 c0       	rjmp	.+164    	; 0xee <__bad_interrupt>
  4a:	00 00       	nop
  4c:	50 c0       	rjmp	.+160    	; 0xee <__bad_interrupt>
  4e:	00 00       	nop
  50:	4e c0       	rjmp	.+156    	; 0xee <__bad_interrupt>
  52:	00 00       	nop
  54:	4c c0       	rjmp	.+152    	; 0xee <__bad_interrupt>
  56:	00 00       	nop
  58:	4a c0       	rjmp	.+148    	; 0xee <__bad_interrupt>
  5a:	00 00       	nop
  5c:	48 c0       	rjmp	.+144    	; 0xee <__bad_interrupt>
  5e:	00 00       	nop
  60:	46 c0       	rjmp	.+140    	; 0xee <__bad_interrupt>
  62:	00 00       	nop
  64:	44 c0       	rjmp	.+136    	; 0xee <__bad_interrupt>
  66:	00 00       	nop
  68:	42 c0       	rjmp	.+132    	; 0xee <__bad_interrupt>
  6a:	00 00       	nop
  6c:	40 c0       	rjmp	.+128    	; 0xee <__bad_interrupt>
  6e:	00 00       	nop
  70:	3e c0       	rjmp	.+124    	; 0xee <__bad_interrupt>
  72:	00 00       	nop
  74:	3c c0       	rjmp	.+120    	; 0xee <__bad_interrupt>
  76:	00 00       	nop
  78:	3a c0       	rjmp	.+116    	; 0xee <__bad_interrupt>
  7a:	00 00       	nop
  7c:	38 c0       	rjmp	.+112    	; 0xee <__bad_interrupt>
  7e:	00 00       	nop
  80:	36 c0       	rjmp	.+108    	; 0xee <__bad_interrupt>
  82:	00 00       	nop
  84:	34 c0       	rjmp	.+104    	; 0xee <__bad_interrupt>
  86:	00 00       	nop
  88:	32 c0       	rjmp	.+100    	; 0xee <__bad_interrupt>
  8a:	00 00       	nop
  8c:	92 00       	.word	0x0092	; ????
  8e:	a0 00       	.word	0x00a0	; ????
  90:	ae 00       	.word	0x00ae	; ????
  92:	bc 00       	.word	0x00bc	; ????
  94:	ca 00       	.word	0x00ca	; ????
  96:	d8 00       	.word	0x00d8	; ????
  98:	e8 00       	.word	0x00e8	; ????
  9a:	02 01       	movw	r0, r4
  9c:	0f 01       	movw	r0, r30
  9e:	1c 01       	movw	r2, r24
  a0:	29 01       	movw	r4, r18
  a2:	36 01       	movw	r6, r12
  a4:	43 01       	movw	r8, r6
  a6:	52 01       	movw	r10, r4
  a8:	76 01       	movw	r14, r12
  aa:	84 01       	movw	r16, r8
  ac:	92 01       	movw	r18, r4
  ae:	a0 01       	movw	r20, r0
  b0:	ae 01       	movw	r20, r28
  b2:	bc 01       	movw	r22, r24
  b4:	cc 01       	movw	r24, r24
  b6:	e6 01       	movw	r28, r12
  b8:	f3 01       	movw	r30, r6
  ba:	00 02       	muls	r16, r16
  bc:	0d 02       	muls	r16, r29
  be:	1a 02       	muls	r17, r26
  c0:	27 02       	muls	r18, r23
  c2:	36 02       	muls	r19, r22

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d0 e1       	ldi	r29, 0x10	; 16
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	ea ef       	ldi	r30, 0xFA	; 250
  d8:	f5 e0       	ldi	r31, 0x05	; 5
  da:	00 e0       	ldi	r16, 0x00	; 0
  dc:	0b bf       	out	0x3b, r16	; 59
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x14>
  e0:	07 90       	elpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	ae 30       	cpi	r26, 0x0E	; 14
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0x10>
  ea:	02 d0       	rcall	.+4      	; 0xf0 <main>
  ec:	84 c2       	rjmp	.+1288   	; 0x5f6 <_exit>

000000ee <__bad_interrupt>:
  ee:	88 cf       	rjmp	.-240    	; 0x0 <__vectors>

000000f0 <main>:
#include "MCAL/UART/UART.h"
#include "MCAL/SPI/SPI.h"

int main(void)
{
	SPI_Init();
  f0:	cc d1       	rcall	.+920    	; 0x48a <SPI_Init>
	SPI_Master_TransmitString("Gamal");
  f2:	87 e0       	ldi	r24, 0x07	; 7
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	61 d2       	rcall	.+1218   	; 0x5ba <SPI_Master_TransmitString>
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <main+0x8>

000000fa <DIO_WriteChannel>:
		case DIO_PortG:
			Status = ReadBit(PING_Register, BitNo);
			break;
	}
	return Status;
}
  fa:	e8 2f       	mov	r30, r24
  fc:	e6 95       	lsr	r30
  fe:	e6 95       	lsr	r30
 100:	e6 95       	lsr	r30
 102:	87 70       	andi	r24, 0x07	; 7
 104:	66 23       	and	r22, r22
 106:	21 f0       	breq	.+8      	; 0x110 <DIO_WriteChannel+0x16>
 108:	61 30       	cpi	r22, 0x01	; 1
 10a:	09 f4       	brne	.+2      	; 0x10e <DIO_WriteChannel+0x14>
 10c:	71 c0       	rjmp	.+226    	; 0x1f0 <DIO_WriteChannel+0xf6>
 10e:	08 95       	ret
 110:	4e 2f       	mov	r20, r30
 112:	50 e0       	ldi	r21, 0x00	; 0
 114:	47 30       	cpi	r20, 0x07	; 7
 116:	51 05       	cpc	r21, r1
 118:	08 f0       	brcs	.+2      	; 0x11c <DIO_WriteChannel+0x22>
 11a:	d2 c0       	rjmp	.+420    	; 0x2c0 <DIO_WriteChannel+0x1c6>
 11c:	fa 01       	movw	r30, r20
 11e:	ea 5b       	subi	r30, 0xBA	; 186
 120:	ff 4f       	sbci	r31, 0xFF	; 255
 122:	60 c2       	rjmp	.+1216   	; 0x5e4 <__tablejump2__>
 124:	4b b3       	in	r20, 0x1b	; 27
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	b9 01       	movw	r22, r18
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_WriteChannel+0x38>
 12e:	66 0f       	add	r22, r22
 130:	77 1f       	adc	r23, r23
 132:	8a 95       	dec	r24
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_WriteChannel+0x34>
 136:	cb 01       	movw	r24, r22
 138:	80 95       	com	r24
 13a:	84 23       	and	r24, r20
 13c:	8b bb       	out	0x1b, r24	; 27
 13e:	08 95       	ret
 140:	48 b3       	in	r20, 0x18	; 24
 142:	21 e0       	ldi	r18, 0x01	; 1
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	b9 01       	movw	r22, r18
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_WriteChannel+0x54>
 14a:	66 0f       	add	r22, r22
 14c:	77 1f       	adc	r23, r23
 14e:	8a 95       	dec	r24
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_WriteChannel+0x50>
 152:	cb 01       	movw	r24, r22
 154:	80 95       	com	r24
 156:	84 23       	and	r24, r20
 158:	88 bb       	out	0x18, r24	; 24
 15a:	08 95       	ret
 15c:	45 b3       	in	r20, 0x15	; 21
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	b9 01       	movw	r22, r18
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_WriteChannel+0x70>
 166:	66 0f       	add	r22, r22
 168:	77 1f       	adc	r23, r23
 16a:	8a 95       	dec	r24
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_WriteChannel+0x6c>
 16e:	cb 01       	movw	r24, r22
 170:	80 95       	com	r24
 172:	84 23       	and	r24, r20
 174:	85 bb       	out	0x15, r24	; 21
 176:	08 95       	ret
 178:	42 b3       	in	r20, 0x12	; 18
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	b9 01       	movw	r22, r18
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_WriteChannel+0x8c>
 182:	66 0f       	add	r22, r22
 184:	77 1f       	adc	r23, r23
 186:	8a 95       	dec	r24
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_WriteChannel+0x88>
 18a:	cb 01       	movw	r24, r22
 18c:	80 95       	com	r24
 18e:	84 23       	and	r24, r20
 190:	82 bb       	out	0x12, r24	; 18
 192:	08 95       	ret
 194:	43 b1       	in	r20, 0x03	; 3
 196:	21 e0       	ldi	r18, 0x01	; 1
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	b9 01       	movw	r22, r18
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_WriteChannel+0xa8>
 19e:	66 0f       	add	r22, r22
 1a0:	77 1f       	adc	r23, r23
 1a2:	8a 95       	dec	r24
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_WriteChannel+0xa4>
 1a6:	cb 01       	movw	r24, r22
 1a8:	80 95       	com	r24
 1aa:	84 23       	and	r24, r20
 1ac:	83 b9       	out	0x03, r24	; 3
 1ae:	08 95       	ret
 1b0:	e2 e6       	ldi	r30, 0x62	; 98
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	40 81       	ld	r20, Z
 1b6:	21 e0       	ldi	r18, 0x01	; 1
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	b9 01       	movw	r22, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_WriteChannel+0xc8>
 1be:	66 0f       	add	r22, r22
 1c0:	77 1f       	adc	r23, r23
 1c2:	8a 95       	dec	r24
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_WriteChannel+0xc4>
 1c6:	cb 01       	movw	r24, r22
 1c8:	80 95       	com	r24
 1ca:	84 23       	and	r24, r20
 1cc:	80 83       	st	Z, r24
 1ce:	08 95       	ret
 1d0:	e5 e6       	ldi	r30, 0x65	; 101
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	40 81       	ld	r20, Z
 1d6:	21 e0       	ldi	r18, 0x01	; 1
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	b9 01       	movw	r22, r18
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_WriteChannel+0xe8>
 1de:	66 0f       	add	r22, r22
 1e0:	77 1f       	adc	r23, r23
 1e2:	8a 95       	dec	r24
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_WriteChannel+0xe4>
 1e6:	cb 01       	movw	r24, r22
 1e8:	80 95       	com	r24
 1ea:	84 23       	and	r24, r20
 1ec:	80 83       	st	Z, r24
 1ee:	08 95       	ret
 1f0:	4e 2f       	mov	r20, r30
 1f2:	50 e0       	ldi	r21, 0x00	; 0
 1f4:	47 30       	cpi	r20, 0x07	; 7
 1f6:	51 05       	cpc	r21, r1
 1f8:	08 f0       	brcs	.+2      	; 0x1fc <DIO_WriteChannel+0x102>
 1fa:	62 c0       	rjmp	.+196    	; 0x2c0 <DIO_WriteChannel+0x1c6>
 1fc:	fa 01       	movw	r30, r20
 1fe:	e3 5b       	subi	r30, 0xB3	; 179
 200:	ff 4f       	sbci	r31, 0xFF	; 255
 202:	f0 c1       	rjmp	.+992    	; 0x5e4 <__tablejump2__>
 204:	4b b3       	in	r20, 0x1b	; 27
 206:	21 e0       	ldi	r18, 0x01	; 1
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	b9 01       	movw	r22, r18
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_WriteChannel+0x118>
 20e:	66 0f       	add	r22, r22
 210:	77 1f       	adc	r23, r23
 212:	8a 95       	dec	r24
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_WriteChannel+0x114>
 216:	cb 01       	movw	r24, r22
 218:	84 2b       	or	r24, r20
 21a:	8b bb       	out	0x1b, r24	; 27
 21c:	08 95       	ret
 21e:	48 b3       	in	r20, 0x18	; 24
 220:	21 e0       	ldi	r18, 0x01	; 1
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	b9 01       	movw	r22, r18
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_WriteChannel+0x132>
 228:	66 0f       	add	r22, r22
 22a:	77 1f       	adc	r23, r23
 22c:	8a 95       	dec	r24
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_WriteChannel+0x12e>
 230:	cb 01       	movw	r24, r22
 232:	84 2b       	or	r24, r20
 234:	88 bb       	out	0x18, r24	; 24
 236:	08 95       	ret
 238:	45 b3       	in	r20, 0x15	; 21
 23a:	21 e0       	ldi	r18, 0x01	; 1
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	b9 01       	movw	r22, r18
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_WriteChannel+0x14c>
 242:	66 0f       	add	r22, r22
 244:	77 1f       	adc	r23, r23
 246:	8a 95       	dec	r24
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_WriteChannel+0x148>
 24a:	cb 01       	movw	r24, r22
 24c:	84 2b       	or	r24, r20
 24e:	85 bb       	out	0x15, r24	; 21
 250:	08 95       	ret
 252:	42 b3       	in	r20, 0x12	; 18
 254:	21 e0       	ldi	r18, 0x01	; 1
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	b9 01       	movw	r22, r18
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_WriteChannel+0x166>
 25c:	66 0f       	add	r22, r22
 25e:	77 1f       	adc	r23, r23
 260:	8a 95       	dec	r24
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_WriteChannel+0x162>
 264:	cb 01       	movw	r24, r22
 266:	84 2b       	or	r24, r20
 268:	82 bb       	out	0x12, r24	; 18
 26a:	08 95       	ret
 26c:	43 b1       	in	r20, 0x03	; 3
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	b9 01       	movw	r22, r18
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_WriteChannel+0x180>
 276:	66 0f       	add	r22, r22
 278:	77 1f       	adc	r23, r23
 27a:	8a 95       	dec	r24
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_WriteChannel+0x17c>
 27e:	cb 01       	movw	r24, r22
 280:	84 2b       	or	r24, r20
 282:	83 b9       	out	0x03, r24	; 3
 284:	08 95       	ret
 286:	e2 e6       	ldi	r30, 0x62	; 98
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	40 81       	ld	r20, Z
 28c:	21 e0       	ldi	r18, 0x01	; 1
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	b9 01       	movw	r22, r18
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_WriteChannel+0x19e>
 294:	66 0f       	add	r22, r22
 296:	77 1f       	adc	r23, r23
 298:	8a 95       	dec	r24
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_WriteChannel+0x19a>
 29c:	cb 01       	movw	r24, r22
 29e:	84 2b       	or	r24, r20
 2a0:	80 83       	st	Z, r24
 2a2:	08 95       	ret
 2a4:	e5 e6       	ldi	r30, 0x65	; 101
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	40 81       	ld	r20, Z
 2aa:	21 e0       	ldi	r18, 0x01	; 1
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	b9 01       	movw	r22, r18
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_WriteChannel+0x1bc>
 2b2:	66 0f       	add	r22, r22
 2b4:	77 1f       	adc	r23, r23
 2b6:	8a 95       	dec	r24
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_WriteChannel+0x1b8>
 2ba:	cb 01       	movw	r24, r22
 2bc:	84 2b       	or	r24, r20
 2be:	80 83       	st	Z, r24
 2c0:	08 95       	ret

000002c2 <DIO_ConfigChannel>:

void DIO_ConfigChannel(DIO_ChannelTypes ChannelID , DIO_DirectionTypes Direction)
{
	DIO_PortTypes PortX = ChannelID / 8;
 2c2:	e8 2f       	mov	r30, r24
 2c4:	e6 95       	lsr	r30
 2c6:	e6 95       	lsr	r30
 2c8:	e6 95       	lsr	r30
	DIO_ChannelTypes BitNo = ChannelID % 8;
 2ca:	87 70       	andi	r24, 0x07	; 7
	switch(Direction)
 2cc:	66 23       	and	r22, r22
 2ce:	21 f0       	breq	.+8      	; 0x2d8 <DIO_ConfigChannel+0x16>
 2d0:	61 30       	cpi	r22, 0x01	; 1
 2d2:	09 f4       	brne	.+2      	; 0x2d6 <DIO_ConfigChannel+0x14>
 2d4:	71 c0       	rjmp	.+226    	; 0x3b8 <DIO_ConfigChannel+0xf6>
 2d6:	08 95       	ret
	{
		case INPUT:
		{
			switch(PortX)
 2d8:	4e 2f       	mov	r20, r30
 2da:	50 e0       	ldi	r21, 0x00	; 0
 2dc:	47 30       	cpi	r20, 0x07	; 7
 2de:	51 05       	cpc	r21, r1
 2e0:	08 f0       	brcs	.+2      	; 0x2e4 <DIO_ConfigChannel+0x22>
 2e2:	d2 c0       	rjmp	.+420    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 2e4:	fa 01       	movw	r30, r20
 2e6:	ec 5a       	subi	r30, 0xAC	; 172
 2e8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ea:	7c c1       	rjmp	.+760    	; 0x5e4 <__tablejump2__>
			{
				case DIO_PortA:
					ClearBit(DDRA_Register, BitNo);
 2ec:	4a b3       	in	r20, 0x1a	; 26
 2ee:	21 e0       	ldi	r18, 0x01	; 1
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	b9 01       	movw	r22, r18
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_ConfigChannel+0x38>
 2f6:	66 0f       	add	r22, r22
 2f8:	77 1f       	adc	r23, r23
 2fa:	8a 95       	dec	r24
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_ConfigChannel+0x34>
 2fe:	cb 01       	movw	r24, r22
 300:	80 95       	com	r24
 302:	84 23       	and	r24, r20
 304:	8a bb       	out	0x1a, r24	; 26
					break;
 306:	08 95       	ret
				case DIO_PortB:
					ClearBit(DDRB_Register, BitNo);
 308:	47 b3       	in	r20, 0x17	; 23
 30a:	21 e0       	ldi	r18, 0x01	; 1
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	b9 01       	movw	r22, r18
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_ConfigChannel+0x54>
 312:	66 0f       	add	r22, r22
 314:	77 1f       	adc	r23, r23
 316:	8a 95       	dec	r24
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_ConfigChannel+0x50>
 31a:	cb 01       	movw	r24, r22
 31c:	80 95       	com	r24
 31e:	84 23       	and	r24, r20
 320:	87 bb       	out	0x17, r24	; 23
					break;
 322:	08 95       	ret
				case DIO_PortC:
					ClearBit(DDRC_Register, BitNo);
 324:	44 b3       	in	r20, 0x14	; 20
 326:	21 e0       	ldi	r18, 0x01	; 1
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	b9 01       	movw	r22, r18
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_ConfigChannel+0x70>
 32e:	66 0f       	add	r22, r22
 330:	77 1f       	adc	r23, r23
 332:	8a 95       	dec	r24
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_ConfigChannel+0x6c>
 336:	cb 01       	movw	r24, r22
 338:	80 95       	com	r24
 33a:	84 23       	and	r24, r20
 33c:	84 bb       	out	0x14, r24	; 20
					break;
 33e:	08 95       	ret
				case DIO_PortD:
					ClearBit(DDRD_Register, BitNo);
 340:	41 b3       	in	r20, 0x11	; 17
 342:	21 e0       	ldi	r18, 0x01	; 1
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	b9 01       	movw	r22, r18
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_ConfigChannel+0x8c>
 34a:	66 0f       	add	r22, r22
 34c:	77 1f       	adc	r23, r23
 34e:	8a 95       	dec	r24
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_ConfigChannel+0x88>
 352:	cb 01       	movw	r24, r22
 354:	80 95       	com	r24
 356:	84 23       	and	r24, r20
 358:	81 bb       	out	0x11, r24	; 17
					break;
 35a:	08 95       	ret
				case DIO_PortE:
					ClearBit(DDRE_Register, BitNo);
 35c:	42 b1       	in	r20, 0x02	; 2
 35e:	21 e0       	ldi	r18, 0x01	; 1
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	b9 01       	movw	r22, r18
 364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_ConfigChannel+0xa8>
 366:	66 0f       	add	r22, r22
 368:	77 1f       	adc	r23, r23
 36a:	8a 95       	dec	r24
 36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_ConfigChannel+0xa4>
 36e:	cb 01       	movw	r24, r22
 370:	80 95       	com	r24
 372:	84 23       	and	r24, r20
 374:	82 b9       	out	0x02, r24	; 2
					break;
 376:	08 95       	ret
				case DIO_PortF:
					ClearBit(DDRF_Register, BitNo);
 378:	e1 e6       	ldi	r30, 0x61	; 97
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	40 81       	ld	r20, Z
 37e:	21 e0       	ldi	r18, 0x01	; 1
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	b9 01       	movw	r22, r18
 384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_ConfigChannel+0xc8>
 386:	66 0f       	add	r22, r22
 388:	77 1f       	adc	r23, r23
 38a:	8a 95       	dec	r24
 38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_ConfigChannel+0xc4>
 38e:	cb 01       	movw	r24, r22
 390:	80 95       	com	r24
 392:	84 23       	and	r24, r20
 394:	80 83       	st	Z, r24
					break;
 396:	08 95       	ret
				case DIO_PortG:
					ClearBit(DDRG_Register, BitNo);
 398:	e4 e6       	ldi	r30, 0x64	; 100
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	40 81       	ld	r20, Z
 39e:	21 e0       	ldi	r18, 0x01	; 1
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	b9 01       	movw	r22, r18
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_ConfigChannel+0xe8>
 3a6:	66 0f       	add	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	8a 95       	dec	r24
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_ConfigChannel+0xe4>
 3ae:	cb 01       	movw	r24, r22
 3b0:	80 95       	com	r24
 3b2:	84 23       	and	r24, r20
 3b4:	80 83       	st	Z, r24
					break;
 3b6:	08 95       	ret
			}
			break;
		}
		case OUTPUT:
		{
			switch(PortX)
 3b8:	4e 2f       	mov	r20, r30
 3ba:	50 e0       	ldi	r21, 0x00	; 0
 3bc:	47 30       	cpi	r20, 0x07	; 7
 3be:	51 05       	cpc	r21, r1
 3c0:	08 f0       	brcs	.+2      	; 0x3c4 <DIO_ConfigChannel+0x102>
 3c2:	62 c0       	rjmp	.+196    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 3c4:	fa 01       	movw	r30, r20
 3c6:	e5 5a       	subi	r30, 0xA5	; 165
 3c8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ca:	0c c1       	rjmp	.+536    	; 0x5e4 <__tablejump2__>
			{
				case DIO_PortA:
				SetBit(DDRA_Register, BitNo);
 3cc:	4a b3       	in	r20, 0x1a	; 26
 3ce:	21 e0       	ldi	r18, 0x01	; 1
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	b9 01       	movw	r22, r18
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_ConfigChannel+0x118>
 3d6:	66 0f       	add	r22, r22
 3d8:	77 1f       	adc	r23, r23
 3da:	8a 95       	dec	r24
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_ConfigChannel+0x114>
 3de:	cb 01       	movw	r24, r22
 3e0:	84 2b       	or	r24, r20
 3e2:	8a bb       	out	0x1a, r24	; 26
				break;
 3e4:	08 95       	ret
				case DIO_PortB:
				SetBit(DDRB_Register, BitNo);
 3e6:	47 b3       	in	r20, 0x17	; 23
 3e8:	21 e0       	ldi	r18, 0x01	; 1
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	b9 01       	movw	r22, r18
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_ConfigChannel+0x132>
 3f0:	66 0f       	add	r22, r22
 3f2:	77 1f       	adc	r23, r23
 3f4:	8a 95       	dec	r24
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_ConfigChannel+0x12e>
 3f8:	cb 01       	movw	r24, r22
 3fa:	84 2b       	or	r24, r20
 3fc:	87 bb       	out	0x17, r24	; 23
				break;
 3fe:	08 95       	ret
				case DIO_PortC:
				SetBit(DDRC_Register, BitNo);
 400:	44 b3       	in	r20, 0x14	; 20
 402:	21 e0       	ldi	r18, 0x01	; 1
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	b9 01       	movw	r22, r18
 408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40a:	66 0f       	add	r22, r22
 40c:	77 1f       	adc	r23, r23
 40e:	8a 95       	dec	r24
 410:	e2 f7       	brpl	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 412:	cb 01       	movw	r24, r22
 414:	84 2b       	or	r24, r20
 416:	84 bb       	out	0x14, r24	; 20
				break;
 418:	08 95       	ret
				case DIO_PortD:
				SetBit(DDRD_Register, BitNo);
 41a:	41 b3       	in	r20, 0x11	; 17
 41c:	21 e0       	ldi	r18, 0x01	; 1
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	b9 01       	movw	r22, r18
 422:	02 c0       	rjmp	.+4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 424:	66 0f       	add	r22, r22
 426:	77 1f       	adc	r23, r23
 428:	8a 95       	dec	r24
 42a:	e2 f7       	brpl	.-8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 42c:	cb 01       	movw	r24, r22
 42e:	84 2b       	or	r24, r20
 430:	81 bb       	out	0x11, r24	; 17
				break;
 432:	08 95       	ret
				case DIO_PortE:
				SetBit(DDRE_Register, BitNo);
 434:	42 b1       	in	r20, 0x02	; 2
 436:	21 e0       	ldi	r18, 0x01	; 1
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	b9 01       	movw	r22, r18
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43e:	66 0f       	add	r22, r22
 440:	77 1f       	adc	r23, r23
 442:	8a 95       	dec	r24
 444:	e2 f7       	brpl	.-8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 446:	cb 01       	movw	r24, r22
 448:	84 2b       	or	r24, r20
 44a:	82 b9       	out	0x02, r24	; 2
				break;
 44c:	08 95       	ret
				case DIO_PortF:
				SetBit(DDRF_Register, BitNo);
 44e:	e1 e6       	ldi	r30, 0x61	; 97
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	40 81       	ld	r20, Z
 454:	21 e0       	ldi	r18, 0x01	; 1
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	b9 01       	movw	r22, r18
 45a:	02 c0       	rjmp	.+4      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 45c:	66 0f       	add	r22, r22
 45e:	77 1f       	adc	r23, r23
 460:	8a 95       	dec	r24
 462:	e2 f7       	brpl	.-8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 464:	cb 01       	movw	r24, r22
 466:	84 2b       	or	r24, r20
 468:	80 83       	st	Z, r24
				break;
 46a:	08 95       	ret
				case DIO_PortG:
				SetBit(DDRG_Register, BitNo);
 46c:	e4 e6       	ldi	r30, 0x64	; 100
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	40 81       	ld	r20, Z
 472:	21 e0       	ldi	r18, 0x01	; 1
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	b9 01       	movw	r22, r18
 478:	02 c0       	rjmp	.+4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47a:	66 0f       	add	r22, r22
 47c:	77 1f       	adc	r23, r23
 47e:	8a 95       	dec	r24
 480:	e2 f7       	brpl	.-8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 482:	cb 01       	movw	r24, r22
 484:	84 2b       	or	r24, r20
 486:	80 83       	st	Z, r24
 488:	08 95       	ret

0000048a <SPI_Init>:
u_int8 SPI_Slave_ReceiveChar(u_int8 Data)
{
	SPDR_Register = Data;
	while(ReadBit(SPSR_Register, SPIF) == 0);
	return SPDR_Register;
}
 48a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 48e:	88 23       	and	r24, r24
 490:	09 f4       	brne	.+2      	; 0x494 <SPI_Init+0xa>
 492:	47 c0       	rjmp	.+142    	; 0x522 <SPI_Init+0x98>
 494:	81 30       	cpi	r24, 0x01	; 1
 496:	09 f0       	breq	.+2      	; 0x49a <SPI_Init+0x10>
 498:	84 c0       	rjmp	.+264    	; 0x5a2 <SPI_Init+0x118>
 49a:	61 e0       	ldi	r22, 0x01	; 1
 49c:	8a e0       	ldi	r24, 0x0A	; 10
 49e:	11 df       	rcall	.-478    	; 0x2c2 <DIO_ConfigChannel>
 4a0:	61 e0       	ldi	r22, 0x01	; 1
 4a2:	89 e0       	ldi	r24, 0x09	; 9
 4a4:	0e df       	rcall	.-484    	; 0x2c2 <DIO_ConfigChannel>
 4a6:	61 e0       	ldi	r22, 0x01	; 1
 4a8:	88 e0       	ldi	r24, 0x08	; 8
 4aa:	0b df       	rcall	.-490    	; 0x2c2 <DIO_ConfigChannel>
 4ac:	60 e0       	ldi	r22, 0x00	; 0
 4ae:	8b e0       	ldi	r24, 0x0B	; 11
 4b0:	08 df       	rcall	.-496    	; 0x2c2 <DIO_ConfigChannel>
 4b2:	61 e0       	ldi	r22, 0x01	; 1
 4b4:	88 e0       	ldi	r24, 0x08	; 8
 4b6:	21 de       	rcall	.-958    	; 0xfa <DIO_WriteChannel>
 4b8:	2d b1       	in	r18, 0x0d	; 13
 4ba:	e0 e0       	ldi	r30, 0x00	; 0
 4bc:	f1 e0       	ldi	r31, 0x01	; 1
 4be:	90 81       	ld	r25, Z
 4c0:	30 e1       	ldi	r19, 0x10	; 16
 4c2:	93 9f       	mul	r25, r19
 4c4:	c0 01       	movw	r24, r0
 4c6:	11 24       	eor	r1, r1
 4c8:	82 2b       	or	r24, r18
 4ca:	8d b9       	out	0x0d, r24	; 13
 4cc:	9e b1       	in	r25, 0x0e	; 14
 4ce:	82 81       	ldd	r24, Z+2	; 0x02
 4d0:	89 2b       	or	r24, r25
 4d2:	8e b9       	out	0x0e, r24	; 14
 4d4:	9d b1       	in	r25, 0x0d	; 13
 4d6:	81 81       	ldd	r24, Z+1	; 0x01
 4d8:	89 2b       	or	r24, r25
 4da:	8d b9       	out	0x0d, r24	; 13
 4dc:	2d b1       	in	r18, 0x0d	; 13
 4de:	93 81       	ldd	r25, Z+3	; 0x03
 4e0:	30 e2       	ldi	r19, 0x20	; 32
 4e2:	93 9f       	mul	r25, r19
 4e4:	c0 01       	movw	r24, r0
 4e6:	11 24       	eor	r1, r1
 4e8:	82 2b       	or	r24, r18
 4ea:	8d b9       	out	0x0d, r24	; 13
 4ec:	2d b1       	in	r18, 0x0d	; 13
 4ee:	94 81       	ldd	r25, Z+4	; 0x04
 4f0:	30 e8       	ldi	r19, 0x80	; 128
 4f2:	93 9f       	mul	r25, r19
 4f4:	c0 01       	movw	r24, r0
 4f6:	11 24       	eor	r1, r1
 4f8:	82 2b       	or	r24, r18
 4fa:	8d b9       	out	0x0d, r24	; 13
 4fc:	2d b1       	in	r18, 0x0d	; 13
 4fe:	96 81       	ldd	r25, Z+6	; 0x06
 500:	89 2f       	mov	r24, r25
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	82 2b       	or	r24, r18
 50e:	8d b9       	out	0x0d, r24	; 13
 510:	2d b1       	in	r18, 0x0d	; 13
 512:	95 81       	ldd	r25, Z+5	; 0x05
 514:	30 e4       	ldi	r19, 0x40	; 64
 516:	93 9f       	mul	r25, r19
 518:	c0 01       	movw	r24, r0
 51a:	11 24       	eor	r1, r1
 51c:	82 2b       	or	r24, r18
 51e:	8d b9       	out	0x0d, r24	; 13
 520:	08 95       	ret
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	8a e0       	ldi	r24, 0x0A	; 10
 526:	cd de       	rcall	.-614    	; 0x2c2 <DIO_ConfigChannel>
 528:	60 e0       	ldi	r22, 0x00	; 0
 52a:	89 e0       	ldi	r24, 0x09	; 9
 52c:	ca de       	rcall	.-620    	; 0x2c2 <DIO_ConfigChannel>
 52e:	60 e0       	ldi	r22, 0x00	; 0
 530:	88 e0       	ldi	r24, 0x08	; 8
 532:	c7 de       	rcall	.-626    	; 0x2c2 <DIO_ConfigChannel>
 534:	61 e0       	ldi	r22, 0x01	; 1
 536:	8b e0       	ldi	r24, 0x0B	; 11
 538:	c4 de       	rcall	.-632    	; 0x2c2 <DIO_ConfigChannel>
 53a:	2d b1       	in	r18, 0x0d	; 13
 53c:	e0 e0       	ldi	r30, 0x00	; 0
 53e:	f1 e0       	ldi	r31, 0x01	; 1
 540:	90 81       	ld	r25, Z
 542:	30 e1       	ldi	r19, 0x10	; 16
 544:	93 9f       	mul	r25, r19
 546:	c0 01       	movw	r24, r0
 548:	11 24       	eor	r1, r1
 54a:	82 2b       	or	r24, r18
 54c:	8d b9       	out	0x0d, r24	; 13
 54e:	9e b1       	in	r25, 0x0e	; 14
 550:	82 81       	ldd	r24, Z+2	; 0x02
 552:	89 2b       	or	r24, r25
 554:	8e b9       	out	0x0e, r24	; 14
 556:	9d b1       	in	r25, 0x0d	; 13
 558:	81 81       	ldd	r24, Z+1	; 0x01
 55a:	89 2b       	or	r24, r25
 55c:	8d b9       	out	0x0d, r24	; 13
 55e:	2d b1       	in	r18, 0x0d	; 13
 560:	93 81       	ldd	r25, Z+3	; 0x03
 562:	30 e2       	ldi	r19, 0x20	; 32
 564:	93 9f       	mul	r25, r19
 566:	c0 01       	movw	r24, r0
 568:	11 24       	eor	r1, r1
 56a:	82 2b       	or	r24, r18
 56c:	8d b9       	out	0x0d, r24	; 13
 56e:	2d b1       	in	r18, 0x0d	; 13
 570:	94 81       	ldd	r25, Z+4	; 0x04
 572:	30 e8       	ldi	r19, 0x80	; 128
 574:	93 9f       	mul	r25, r19
 576:	c0 01       	movw	r24, r0
 578:	11 24       	eor	r1, r1
 57a:	82 2b       	or	r24, r18
 57c:	8d b9       	out	0x0d, r24	; 13
 57e:	2d b1       	in	r18, 0x0d	; 13
 580:	96 81       	ldd	r25, Z+6	; 0x06
 582:	89 2f       	mov	r24, r25
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	88 0f       	add	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	82 2b       	or	r24, r18
 590:	8d b9       	out	0x0d, r24	; 13
 592:	2d b1       	in	r18, 0x0d	; 13
 594:	95 81       	ldd	r25, Z+5	; 0x05
 596:	30 e4       	ldi	r19, 0x40	; 64
 598:	93 9f       	mul	r25, r19
 59a:	c0 01       	movw	r24, r0
 59c:	11 24       	eor	r1, r1
 59e:	82 2b       	or	r24, r18
 5a0:	8d b9       	out	0x0d, r24	; 13
 5a2:	08 95       	ret

000005a4 <SPI_Master_TransmitChar>:
 5a4:	cf 93       	push	r28
 5a6:	c8 2f       	mov	r28, r24
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	88 e0       	ldi	r24, 0x08	; 8
 5ac:	a6 dd       	rcall	.-1204   	; 0xfa <DIO_WriteChannel>
 5ae:	cf b9       	out	0x0f, r28	; 15
 5b0:	77 9b       	sbis	0x0e, 7	; 14
 5b2:	fe cf       	rjmp	.-4      	; 0x5b0 <SPI_Master_TransmitChar+0xc>
 5b4:	8f b1       	in	r24, 0x0f	; 15
 5b6:	cf 91       	pop	r28
 5b8:	08 95       	ret

000005ba <SPI_Master_TransmitString>:

void SPI_Master_TransmitString(u_int8* String)
{
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	ec 01       	movw	r28, r24
	while((*String) != 0)
 5c0:	0b c0       	rjmp	.+22     	; 0x5d8 <SPI_Master_TransmitString+0x1e>
	{
		SPI_Master_TransmitChar(*String);
 5c2:	f0 df       	rcall	.-32     	; 0x5a4 <SPI_Master_TransmitChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5c4:	2f ef       	ldi	r18, 0xFF	; 255
 5c6:	82 e5       	ldi	r24, 0x52	; 82
 5c8:	97 e0       	ldi	r25, 0x07	; 7
 5ca:	21 50       	subi	r18, 0x01	; 1
 5cc:	80 40       	sbci	r24, 0x00	; 0
 5ce:	90 40       	sbci	r25, 0x00	; 0
 5d0:	e1 f7       	brne	.-8      	; 0x5ca <SPI_Master_TransmitString+0x10>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <SPI_Master_TransmitString+0x1a>
 5d4:	00 00       	nop
		_delay_ms(150);
		String++;
 5d6:	21 96       	adiw	r28, 0x01	; 1
	return SPDR_Register;
}

void SPI_Master_TransmitString(u_int8* String)
{
	while((*String) != 0)
 5d8:	88 81       	ld	r24, Y
 5da:	81 11       	cpse	r24, r1
 5dc:	f2 cf       	rjmp	.-28     	; 0x5c2 <SPI_Master_TransmitString+0x8>
	{
		SPI_Master_TransmitChar(*String);
		_delay_ms(150);
		String++;
	}
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	08 95       	ret

000005e4 <__tablejump2__>:
 5e4:	ee 0f       	add	r30, r30
 5e6:	ff 1f       	adc	r31, r31
 5e8:	00 24       	eor	r0, r0
 5ea:	00 1c       	adc	r0, r0
 5ec:	0b be       	out	0x3b, r0	; 59
 5ee:	07 90       	elpm	r0, Z+
 5f0:	f6 91       	elpm	r31, Z
 5f2:	e0 2d       	mov	r30, r0
 5f4:	09 94       	ijmp

000005f6 <_exit>:
 5f6:	f8 94       	cli

000005f8 <__stop_program>:
 5f8:	ff cf       	rjmp	.-2      	; 0x5f8 <__stop_program>
