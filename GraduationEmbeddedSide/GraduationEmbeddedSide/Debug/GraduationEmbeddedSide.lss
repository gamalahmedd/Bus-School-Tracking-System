
GraduationEmbeddedSide.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000f48  00000fdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000026b  00800114  00800114  00000ff0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ff0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001020  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003d73  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000120f  00000000  00000000  0000503b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e8b  00000000  00000000  0000624a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000072c  00000000  00000000  000080d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001629  00000000  00000000  00008804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000325a  00000000  00000000  00009e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  0000d087  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	61 c0       	rjmp	.+194    	; 0xc4 <__ctors_end>
   2:	00 00       	nop
   4:	b8 c4       	rjmp	.+2416   	; 0x976 <__vector_1>
   6:	00 00       	nop
   8:	e1 c4       	rjmp	.+2498   	; 0x9cc <__vector_2>
   a:	00 00       	nop
   c:	0a c5       	rjmp	.+2580   	; 0xa22 <__vector_3>
   e:	00 00       	nop
  10:	33 c5       	rjmp	.+2662   	; 0xa78 <__vector_4>
  12:	00 00       	nop
  14:	5c c5       	rjmp	.+2744   	; 0xace <__vector_5>
  16:	00 00       	nop
  18:	85 c5       	rjmp	.+2826   	; 0xb24 <__vector_6>
  1a:	00 00       	nop
  1c:	ae c5       	rjmp	.+2908   	; 0xb7a <__vector_7>
  1e:	00 00       	nop
  20:	d7 c5       	rjmp	.+2990   	; 0xbd0 <__vector_8>
  22:	00 00       	nop
  24:	6c c0       	rjmp	.+216    	; 0xfe <__bad_interrupt>
  26:	00 00       	nop
  28:	6a c0       	rjmp	.+212    	; 0xfe <__bad_interrupt>
  2a:	00 00       	nop
  2c:	68 c0       	rjmp	.+208    	; 0xfe <__bad_interrupt>
  2e:	00 00       	nop
  30:	66 c0       	rjmp	.+204    	; 0xfe <__bad_interrupt>
  32:	00 00       	nop
  34:	64 c0       	rjmp	.+200    	; 0xfe <__bad_interrupt>
  36:	00 00       	nop
  38:	62 c0       	rjmp	.+196    	; 0xfe <__bad_interrupt>
  3a:	00 00       	nop
  3c:	60 c0       	rjmp	.+192    	; 0xfe <__bad_interrupt>
  3e:	00 00       	nop
  40:	5e c0       	rjmp	.+188    	; 0xfe <__bad_interrupt>
  42:	00 00       	nop
  44:	5c c0       	rjmp	.+184    	; 0xfe <__bad_interrupt>
  46:	00 00       	nop
  48:	5a c0       	rjmp	.+180    	; 0xfe <__bad_interrupt>
  4a:	00 00       	nop
  4c:	58 c0       	rjmp	.+176    	; 0xfe <__bad_interrupt>
  4e:	00 00       	nop
  50:	56 c0       	rjmp	.+172    	; 0xfe <__bad_interrupt>
  52:	00 00       	nop
  54:	54 c0       	rjmp	.+168    	; 0xfe <__bad_interrupt>
  56:	00 00       	nop
  58:	52 c0       	rjmp	.+164    	; 0xfe <__bad_interrupt>
  5a:	00 00       	nop
  5c:	50 c0       	rjmp	.+160    	; 0xfe <__bad_interrupt>
  5e:	00 00       	nop
  60:	4e c0       	rjmp	.+156    	; 0xfe <__bad_interrupt>
  62:	00 00       	nop
  64:	4c c0       	rjmp	.+152    	; 0xfe <__bad_interrupt>
  66:	00 00       	nop
  68:	4a c0       	rjmp	.+148    	; 0xfe <__bad_interrupt>
  6a:	00 00       	nop
  6c:	48 c0       	rjmp	.+144    	; 0xfe <__bad_interrupt>
  6e:	00 00       	nop
  70:	46 c0       	rjmp	.+140    	; 0xfe <__bad_interrupt>
  72:	00 00       	nop
  74:	44 c0       	rjmp	.+136    	; 0xfe <__bad_interrupt>
  76:	00 00       	nop
  78:	43 c0       	rjmp	.+134    	; 0x100 <__vector_30>
  7a:	00 00       	nop
  7c:	40 c0       	rjmp	.+128    	; 0xfe <__bad_interrupt>
  7e:	00 00       	nop
  80:	3e c0       	rjmp	.+124    	; 0xfe <__bad_interrupt>
  82:	00 00       	nop
  84:	3c c0       	rjmp	.+120    	; 0xfe <__bad_interrupt>
  86:	00 00       	nop
  88:	3a c0       	rjmp	.+116    	; 0xfe <__bad_interrupt>
  8a:	00 00       	nop
  8c:	08 03       	fmul	r16, r16
  8e:	16 03       	mulsu	r17, r22
  90:	24 03       	mulsu	r18, r20
  92:	32 03       	mulsu	r19, r18
  94:	40 03       	mulsu	r20, r16
  96:	4e 03       	fmul	r20, r22
  98:	5e 03       	fmul	r21, r22
  9a:	78 03       	fmul	r23, r16
  9c:	85 03       	fmuls	r16, r21
  9e:	92 03       	fmuls	r17, r18
  a0:	9f 03       	fmulsu	r17, r23
  a2:	ac 03       	fmulsu	r18, r20
  a4:	b9 03       	fmulsu	r19, r17
  a6:	c8 03       	fmulsu	r20, r16
  a8:	ec 03       	fmulsu	r22, r20
  aa:	fa 03       	fmulsu	r23, r18
  ac:	08 04       	cpc	r0, r8
  ae:	16 04       	cpc	r1, r6
  b0:	24 04       	cpc	r2, r4
  b2:	32 04       	cpc	r3, r2
  b4:	42 04       	cpc	r4, r2
  b6:	5c 04       	cpc	r5, r12
  b8:	69 04       	cpc	r6, r9
  ba:	76 04       	cpc	r7, r6
  bc:	83 04       	cpc	r8, r3
  be:	90 04       	cpc	r9, r0
  c0:	9d 04       	cpc	r9, r13
  c2:	ac 04       	cpc	r10, r12

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d0 e1       	ldi	r29, 0x10	; 16
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	e8 e4       	ldi	r30, 0x48	; 72
  d8:	ff e0       	ldi	r31, 0x0F	; 15
  da:	00 e0       	ldi	r16, 0x00	; 0
  dc:	0b bf       	out	0x3b, r16	; 59
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x14>
  e0:	07 90       	elpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	a4 31       	cpi	r26, 0x14	; 20
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0x10>

000000ea <__do_clear_bss>:
  ea:	23 e0       	ldi	r18, 0x03	; 3
  ec:	a4 e1       	ldi	r26, 0x14	; 20
  ee:	b1 e0       	ldi	r27, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	af 37       	cpi	r26, 0x7F	; 127
  f6:	b2 07       	cpc	r27, r18
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
  fa:	fb d1       	rcall	.+1014   	; 0x4f2 <main>
  fc:	23 c7       	rjmp	.+3654   	; 0xf44 <_exit>

000000fe <__bad_interrupt>:
  fe:	80 cf       	rjmp	.-256    	; 0x0 <__vectors>

00000100 <__vector_30>:
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	0b b6       	in	r0, 0x3b	; 59
 10c:	0f 92       	push	r0
 10e:	2f 93       	push	r18
 110:	3f 93       	push	r19
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
 11a:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 11e:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <temp>
 122:	8a 30       	cpi	r24, 0x0A	; 10
 124:	19 f0       	breq	.+6      	; 0x12c <__vector_30+0x2c>
 126:	8d 30       	cpi	r24, 0x0D	; 13
 128:	59 f0       	breq	.+22     	; 0x140 <__vector_30+0x40>
 12a:	12 c0       	rjmp	.+36     	; 0x150 <__vector_30+0x50>
 12c:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <data_len>
 130:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <data_len+0x1>
 134:	02 97       	sbiw	r24, 0x02	; 2
 136:	d0 f0       	brcs	.+52     	; 0x16c <__vector_30+0x6c>
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <data_ready>
 13e:	16 c0       	rjmp	.+44     	; 0x16c <__vector_30+0x6c>
 140:	e0 91 6c 03 	lds	r30, 0x036C	; 0x80036c <data_len>
 144:	f0 91 6d 03 	lds	r31, 0x036D	; 0x80036d <data_len+0x1>
 148:	e5 5c       	subi	r30, 0xC5	; 197
 14a:	fe 4f       	sbci	r31, 0xFE	; 254
 14c:	10 82       	st	Z, r1
 14e:	0e c0       	rjmp	.+28     	; 0x16c <__vector_30+0x6c>
 150:	20 91 6c 03 	lds	r18, 0x036C	; 0x80036c <data_len>
 154:	30 91 6d 03 	lds	r19, 0x036D	; 0x80036d <data_len+0x1>
 158:	f9 01       	movw	r30, r18
 15a:	e5 5c       	subi	r30, 0xC5	; 197
 15c:	fe 4f       	sbci	r31, 0xFE	; 254
 15e:	80 83       	st	Z, r24
 160:	2f 5f       	subi	r18, 0xFF	; 255
 162:	3f 4f       	sbci	r19, 0xFF	; 255
 164:	30 93 6d 03 	sts	0x036D, r19	; 0x80036d <data_len+0x1>
 168:	20 93 6c 03 	sts	0x036C, r18	; 0x80036c <data_len>
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	3f 91       	pop	r19
 176:	2f 91       	pop	r18
 178:	0f 90       	pop	r0
 17a:	0b be       	out	0x3b, r0	; 59
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <mfrc522_write>:


}

void mfrc522_write(uint8_t reg, uint8_t data)
{
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	c8 2f       	mov	r28, r24
 18c:	d6 2f       	mov	r29, r22
	//ENABLE_CHIP();
	SPI_Cannel_State(DIO_ChannelB0 ,SPI_Enable);
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	88 e0       	ldi	r24, 0x08	; 8
 192:	e1 d5       	rcall	.+3010   	; 0xd56 <SPI_Cannel_State>
    //_NOP();
	SPI_Master_TransmitChar((reg<<1)&0x7E);
 194:	8c 2f       	mov	r24, r28
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	8e 77       	andi	r24, 0x7E	; 126
 19e:	d0 d5       	rcall	.+2976   	; 0xd40 <SPI_Master_TransmitChar>
	SPI_Master_TransmitChar(data);
 1a0:	8d 2f       	mov	r24, r29
 1a2:	ce d5       	rcall	.+2972   	; 0xd40 <SPI_Master_TransmitChar>
	SPI_Cannel_State(DIO_ChannelB0 ,SPI_Disable);
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	88 e0       	ldi	r24, 0x08	; 8
 1a8:	d6 d5       	rcall	.+2988   	; 0xd56 <SPI_Cannel_State>
 1aa:	df 91       	pop	r29
	//DISABLE_CHIP();
}
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <mfrc522_read>:
 1b0:	cf 93       	push	r28

uint8_t mfrc522_read(uint8_t reg)
{
 1b2:	c8 2f       	mov	r28, r24
	uint8_t data;	
	//ENABLE_CHIP();
	SPI_Cannel_State(DIO_ChannelB0 ,SPI_Enable);
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	88 e0       	ldi	r24, 0x08	; 8
 1b8:	ce d5       	rcall	.+2972   	; 0xd56 <SPI_Cannel_State>
    //_NOP();
	SPI_Master_TransmitChar(((reg<<1)&0x7E)|0x80);
 1ba:	8c 2f       	mov	r24, r28
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	8e 77       	andi	r24, 0x7E	; 126
 1c4:	80 68       	ori	r24, 0x80	; 128
 1c6:	bc d5       	rcall	.+2936   	; 0xd40 <SPI_Master_TransmitChar>
	data = SPI_Master_TransmitChar(0x00);
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	ba d5       	rcall	.+2932   	; 0xd40 <SPI_Master_TransmitChar>
 1cc:	c8 2f       	mov	r28, r24
	//DISABLE_CHIP();
	SPI_Cannel_State(DIO_ChannelB0 ,SPI_Disable);
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	88 e0       	ldi	r24, 0x08	; 8
 1d2:	c1 d5       	rcall	.+2946   	; 0xd56 <SPI_Cannel_State>
 1d4:	8c 2f       	mov	r24, r28
	return data;
}
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <mfrc522_reset>:
 1da:	6f e0       	ldi	r22, 0x0F	; 15

void mfrc522_reset()
{
	mfrc522_write(CommandReg,SoftReset_CMD);
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	d3 cf       	rjmp	.-90     	; 0x186 <mfrc522_write>
 1e0:	08 95       	ret

000001e2 <mfrc522_init>:


void mfrc522_init()
{
	uint8_t byte;
	mfrc522_reset();
 1e2:	fb df       	rcall	.-10     	; 0x1da <mfrc522_reset>
	
	mfrc522_write(TModeReg, 0x8D);
 1e4:	6d e8       	ldi	r22, 0x8D	; 141
 1e6:	8a e2       	ldi	r24, 0x2A	; 42
 1e8:	ce df       	rcall	.-100    	; 0x186 <mfrc522_write>
    mfrc522_write(TPrescalerReg, 0x3E);
 1ea:	6e e3       	ldi	r22, 0x3E	; 62
 1ec:	8b e2       	ldi	r24, 0x2B	; 43
 1ee:	cb df       	rcall	.-106    	; 0x186 <mfrc522_write>
    mfrc522_write(TReloadReg_1, 30);   
 1f0:	6e e1       	ldi	r22, 0x1E	; 30
 1f2:	8c e2       	ldi	r24, 0x2C	; 44
 1f4:	c8 df       	rcall	.-112    	; 0x186 <mfrc522_write>
    mfrc522_write(TReloadReg_2, 0);	
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	8d e2       	ldi	r24, 0x2D	; 45
 1fa:	c5 df       	rcall	.-118    	; 0x186 <mfrc522_write>
	mfrc522_write(TxASKReg, 0x40);	
 1fc:	60 e4       	ldi	r22, 0x40	; 64
 1fe:	85 e1       	ldi	r24, 0x15	; 21
	mfrc522_write(ModeReg, 0x3D);
 200:	c2 df       	rcall	.-124    	; 0x186 <mfrc522_write>
 202:	6d e3       	ldi	r22, 0x3D	; 61
 204:	81 e1       	ldi	r24, 0x11	; 17
 206:	bf df       	rcall	.-130    	; 0x186 <mfrc522_write>

	byte = mfrc522_read(TxControlReg);
 208:	84 e1       	ldi	r24, 0x14	; 20
 20a:	d2 df       	rcall	.-92     	; 0x1b0 <mfrc522_read>
	if(!(byte&0x03))
 20c:	98 2f       	mov	r25, r24
 20e:	93 70       	andi	r25, 0x03	; 3
	{
		mfrc522_write(TxControlReg,byte|0x03);
 210:	31 f4       	brne	.+12     	; 0x21e <mfrc522_init+0x3c>
 212:	68 2f       	mov	r22, r24
 214:	63 60       	ori	r22, 0x03	; 3
 216:	84 e1       	ldi	r24, 0x14	; 20
 218:	b6 df       	rcall	.-148    	; 0x186 <mfrc522_write>

        byte = mfrc522_read(TxControlReg);  // without this reader is not detected
 21a:	84 e1       	ldi	r24, 0x14	; 20
 21c:	c9 cf       	rjmp	.-110    	; 0x1b0 <mfrc522_read>
 21e:	08 95       	ret

00000220 <mfrc522_to_card>:
 220:	4f 92       	push	r4
   
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
 222:	5f 92       	push	r5
 224:	6f 92       	push	r6
 226:	7f 92       	push	r7
 228:	8f 92       	push	r8
 22a:	9f 92       	push	r9
 22c:	af 92       	push	r10
 22e:	bf 92       	push	r11
 230:	cf 92       	push	r12
 232:	df 92       	push	r13
 234:	ef 92       	push	r14
 236:	ff 92       	push	r15
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	d8 2f       	mov	r29, r24
 242:	7b 01       	movw	r14, r22
 244:	c4 2f       	mov	r28, r20
 246:	59 01       	movw	r10, r18
    uint8_t lastBits;
    uint8_t n;
    uint8_t	tmp;
    uint32_t i;

    switch (cmd)
 248:	8c 30       	cpi	r24, 0x0C	; 12
 24a:	29 f0       	breq	.+10     	; 0x256 <mfrc522_to_card+0x36>
 24c:	8e 30       	cpi	r24, 0x0E	; 14
 24e:	61 f0       	breq	.+24     	; 0x268 <mfrc522_to_card+0x48>

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
    uint8_t waitIRq = 0x00;
 250:	91 2c       	mov	r9, r1
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
 252:	81 2c       	mov	r8, r1
 254:	10 c0       	rjmp	.+32     	; 0x276 <mfrc522_to_card+0x56>
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
 256:	0f 2e       	mov	r0, r31
 258:	f0 e3       	ldi	r31, 0x30	; 48
 25a:	9f 2e       	mov	r9, r31
 25c:	f0 2d       	mov	r31, r0
			waitIRq = 0x10;
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
 25e:	0f 2e       	mov	r0, r31
 260:	f7 e7       	ldi	r31, 0x77	; 119
 262:	8f 2e       	mov	r8, r31
 264:	f0 2d       	mov	r31, r0
			waitIRq = 0x30;
			break;
 266:	07 c0       	rjmp	.+14     	; 0x276 <mfrc522_to_card+0x56>
    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
 268:	68 94       	set
 26a:	99 24       	eor	r9, r9
 26c:	94 f8       	bld	r9, 4

    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
 26e:	0f 2e       	mov	r0, r31
 270:	f2 e1       	ldi	r31, 0x12	; 18
 272:	8f 2e       	mov	r8, r31
 274:	f0 2d       	mov	r31, r0
		default:
			break;
    }
   
    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
 276:	84 e0       	ldi	r24, 0x04	; 4
 278:	9b df       	rcall	.-202    	; 0x1b0 <mfrc522_read>
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
 27a:	68 2f       	mov	r22, r24
 27c:	6f 77       	andi	r22, 0x7F	; 127
 27e:	84 e0       	ldi	r24, 0x04	; 4
 280:	82 df       	rcall	.-252    	; 0x186 <mfrc522_write>
    n=mfrc522_read(FIFOLevelReg);
 282:	8a e0       	ldi	r24, 0x0A	; 10
 284:	95 df       	rcall	.-214    	; 0x1b0 <mfrc522_read>
 286:	68 2f       	mov	r22, r24
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
 288:	60 68       	ori	r22, 0x80	; 128
 28a:	8a e0       	ldi	r24, 0x0A	; 10
 28c:	7c df       	rcall	.-264    	; 0x186 <mfrc522_write>
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	79 df       	rcall	.-270    	; 0x186 <mfrc522_write>
 294:	41 2c       	mov	r4, r1

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 296:	51 2c       	mov	r5, r1
 298:	32 01       	movw	r6, r4
 29a:	0b c0       	rjmp	.+22     	; 0x2b2 <mfrc522_to_card+0x92>
 29c:	f7 01       	movw	r30, r14
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
 29e:	e4 0d       	add	r30, r4
 2a0:	f5 1d       	adc	r31, r5
 2a2:	60 81       	ld	r22, Z
 2a4:	89 e0       	ldi	r24, 0x09	; 9
 2a6:	6f df       	rcall	.-290    	; 0x186 <mfrc522_write>
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 2aa:	48 1a       	sub	r4, r24
 2ac:	58 0a       	sbc	r5, r24
 2ae:	68 0a       	sbc	r6, r24
 2b0:	78 0a       	sbc	r7, r24
 2b2:	8c 2f       	mov	r24, r28
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	a0 e0       	ldi	r26, 0x00	; 0
 2b8:	b0 e0       	ldi	r27, 0x00	; 0
 2ba:	48 16       	cp	r4, r24
 2bc:	59 06       	cpc	r5, r25
 2be:	6a 06       	cpc	r6, r26
 2c0:	7b 06       	cpc	r7, r27
 2c2:	60 f3       	brcs	.-40     	; 0x29c <mfrc522_to_card+0x7c>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
 2c4:	6d 2f       	mov	r22, r29
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	5e df       	rcall	.-324    	; 0x186 <mfrc522_write>
    if (cmd == Transceive_CMD)
 2ca:	dc 30       	cpi	r29, 0x0C	; 12
    {    
		n=mfrc522_read(BitFramingReg);
 2cc:	31 f4       	brne	.+12     	; 0x2da <mfrc522_to_card+0xba>
 2ce:	8d e0       	ldi	r24, 0x0D	; 13
 2d0:	6f df       	rcall	.-290    	; 0x1b0 <mfrc522_read>
		mfrc522_write(BitFramingReg,n|0x80);  
 2d2:	68 2f       	mov	r22, r24
 2d4:	60 68       	ori	r22, 0x80	; 128
 2d6:	8d e0       	ldi	r24, 0x0D	; 13
 2d8:	56 df       	rcall	.-340    	; 0x186 <mfrc522_write>
 2da:	0f 2e       	mov	r0, r31
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 2dc:	f0 ed       	ldi	r31, 0xD0	; 208
 2de:	cf 2e       	mov	r12, r31
 2e0:	f7 e0       	ldi	r31, 0x07	; 7
 2e2:	df 2e       	mov	r13, r31
 2e4:	e1 2c       	mov	r14, r1
 2e6:	f1 2c       	mov	r15, r1
 2e8:	f0 2d       	mov	r31, r0
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
 2ea:	84 e0       	ldi	r24, 0x04	; 4
 2ec:	61 df       	rcall	.-318    	; 0x1b0 <mfrc522_read>
 2ee:	c8 2f       	mov	r28, r24
 2f0:	e1 e0       	ldi	r30, 0x01	; 1
        i--;
 2f2:	ce 1a       	sub	r12, r30
 2f4:	d1 08       	sbc	r13, r1
 2f6:	e1 08       	sbc	r14, r1
 2f8:	f1 08       	sbc	r15, r1
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 2fa:	29 f0       	breq	.+10     	; 0x306 <mfrc522_to_card+0xe6>
 2fc:	80 fd       	sbrc	r24, 0
 2fe:	03 c0       	rjmp	.+6      	; 0x306 <mfrc522_to_card+0xe6>
 300:	89 2d       	mov	r24, r9
 302:	8c 23       	and	r24, r28

	tmp=mfrc522_read(BitFramingReg);
 304:	91 f3       	breq	.-28     	; 0x2ea <mfrc522_to_card+0xca>
 306:	8d e0       	ldi	r24, 0x0D	; 13
	mfrc522_write(BitFramingReg,tmp&(~0x80));
 308:	53 df       	rcall	.-346    	; 0x1b0 <mfrc522_read>
 30a:	68 2f       	mov	r22, r24
 30c:	6f 77       	andi	r22, 0x7F	; 127
 30e:	8d e0       	ldi	r24, 0x0D	; 13
 310:	3a df       	rcall	.-396    	; 0x186 <mfrc522_write>
	
    if (i != 0)
 312:	cd 28       	or	r12, r13
 314:	ce 28       	or	r12, r14
 316:	cf 28       	or	r12, r15
 318:	09 f4       	brne	.+2      	; 0x31c <mfrc522_to_card+0xfc>
 31a:	5c c0       	rjmp	.+184    	; 0x3d4 <mfrc522_to_card+0x1b4>
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 31c:	86 e0       	ldi	r24, 0x06	; 6
 31e:	48 df       	rcall	.-368    	; 0x1b0 <mfrc522_read>
 320:	8b 71       	andi	r24, 0x1B	; 27
 322:	09 f0       	breq	.+2      	; 0x326 <mfrc522_to_card+0x106>
 324:	59 c0       	rjmp	.+178    	; 0x3d8 <mfrc522_to_card+0x1b8>
        {
            status = CARD_FOUND;
            if (n & irqEn & 0x01)
 326:	c8 21       	and	r28, r8
 328:	c0 fd       	sbrc	r28, 0
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = CARD_FOUND;
 32a:	02 c0       	rjmp	.+4      	; 0x330 <mfrc522_to_card+0x110>
 32c:	c1 e0       	ldi	r28, 0x01	; 1
            if (n & irqEn & 0x01)
            {   
				status = CARD_NOT_FOUND;			//??   
 32e:	01 c0       	rjmp	.+2      	; 0x332 <mfrc522_to_card+0x112>
			}

            if (cmd == Transceive_CMD)
 330:	c2 e0       	ldi	r28, 0x02	; 2
 332:	dc 30       	cpi	r29, 0x0C	; 12
 334:	09 f0       	breq	.+2      	; 0x338 <mfrc522_to_card+0x118>
            {
               	n = mfrc522_read(FIFOLevelReg);
 336:	51 c0       	rjmp	.+162    	; 0x3da <mfrc522_to_card+0x1ba>
 338:	8a e0       	ldi	r24, 0x0A	; 10
 33a:	3a df       	rcall	.-396    	; 0x1b0 <mfrc522_read>
 33c:	d8 2f       	mov	r29, r24
              	lastBits = mfrc522_read(ControlReg) & 0x07;
 33e:	8c e0       	ldi	r24, 0x0C	; 12
 340:	37 df       	rcall	.-402    	; 0x1b0 <mfrc522_read>
 342:	28 2f       	mov	r18, r24
 344:	27 70       	andi	r18, 0x07	; 7
 346:	a9 f0       	breq	.+42     	; 0x372 <mfrc522_to_card+0x152>
                if (lastBits)
 348:	8d 2f       	mov	r24, r29
                {   
					*back_data_len = (n-1)*8 + lastBits;   
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	82 0f       	add	r24, r18
 35c:	91 1d       	adc	r25, r1
 35e:	09 2e       	mov	r0, r25
 360:	00 0c       	add	r0, r0
 362:	aa 0b       	sbc	r26, r26
 364:	bb 0b       	sbc	r27, r27
 366:	f8 01       	movw	r30, r16
 368:	80 83       	st	Z, r24
 36a:	91 83       	std	Z+1, r25	; 0x01
 36c:	a2 83       	std	Z+2, r26	; 0x02
 36e:	b3 83       	std	Z+3, r27	; 0x03
 370:	11 c0       	rjmp	.+34     	; 0x394 <mfrc522_to_card+0x174>
 372:	8d 2f       	mov	r24, r29
				}
                else
                {   
					*back_data_len = n*8;   
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	09 2e       	mov	r0, r25
 384:	00 0c       	add	r0, r0
 386:	aa 0b       	sbc	r26, r26
 388:	bb 0b       	sbc	r27, r27
 38a:	f8 01       	movw	r30, r16
 38c:	80 83       	st	Z, r24
 38e:	91 83       	std	Z+1, r25	; 0x01
 390:	a2 83       	std	Z+2, r26	; 0x02
 392:	b3 83       	std	Z+3, r27	; 0x03
				}

                if (n == 0)
 394:	d1 11       	cpse	r29, r1
 396:	01 c0       	rjmp	.+2      	; 0x39a <mfrc522_to_card+0x17a>
                {   
					n = 1;    
 398:	d1 e0       	ldi	r29, 0x01	; 1
				}
                if (n > MAX_LEN)
 39a:	d1 31       	cpi	r29, 0x11	; 17
 39c:	08 f0       	brcs	.+2      	; 0x3a0 <mfrc522_to_card+0x180>
                {   
					n = MAX_LEN;   
 39e:	d0 e1       	ldi	r29, 0x10	; 16
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 3a0:	c1 2c       	mov	r12, r1
 3a2:	d1 2c       	mov	r13, r1
 3a4:	76 01       	movw	r14, r12
 3a6:	0c c0       	rjmp	.+24     	; 0x3c0 <mfrc522_to_card+0x1a0>
                {   
					back_data[i] = mfrc522_read(FIFODataReg);    
 3a8:	85 01       	movw	r16, r10
 3aa:	0c 0d       	add	r16, r12
 3ac:	1d 1d       	adc	r17, r13
 3ae:	89 e0       	ldi	r24, 0x09	; 9
 3b0:	ff de       	rcall	.-514    	; 0x1b0 <mfrc522_read>
 3b2:	f8 01       	movw	r30, r16
 3b4:	80 83       	st	Z, r24
 3b6:	ff ef       	ldi	r31, 0xFF	; 255
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 3b8:	cf 1a       	sub	r12, r31
 3ba:	df 0a       	sbc	r13, r31
 3bc:	ef 0a       	sbc	r14, r31
 3be:	ff 0a       	sbc	r15, r31
 3c0:	8d 2f       	mov	r24, r29
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	a0 e0       	ldi	r26, 0x00	; 0
 3c6:	b0 e0       	ldi	r27, 0x00	; 0
 3c8:	c8 16       	cp	r12, r24
 3ca:	d9 06       	cpc	r13, r25
 3cc:	ea 06       	cpc	r14, r26
 3ce:	fb 06       	cpc	r15, r27
 3d0:	58 f3       	brcs	.-42     	; 0x3a8 <mfrc522_to_card+0x188>
 3d2:	03 c0       	rjmp	.+6      	; 0x3da <mfrc522_to_card+0x1ba>
 3d4:	c3 e0       	ldi	r28, 0x03	; 3
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
 3d6:	01 c0       	rjmp	.+2      	; 0x3da <mfrc522_to_card+0x1ba>
 3d8:	c3 e0       	ldi	r28, 0x03	; 3
				}
            }
        }
        else
        {   
			status = ERROR;  
 3da:	8c 2f       	mov	r24, r28
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //mfrc522_write(cmdReg, PCD_IDLE); 

    return status;
}
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	1f 91       	pop	r17
 3e2:	0f 91       	pop	r16
 3e4:	ff 90       	pop	r15
 3e6:	ef 90       	pop	r14
 3e8:	df 90       	pop	r13
 3ea:	cf 90       	pop	r12
 3ec:	bf 90       	pop	r11
 3ee:	af 90       	pop	r10
 3f0:	9f 90       	pop	r9
 3f2:	8f 90       	pop	r8
 3f4:	7f 90       	pop	r7
 3f6:	6f 90       	pop	r6
 3f8:	5f 90       	pop	r5
 3fa:	4f 90       	pop	r4
 3fc:	08 95       	ret

000003fe <mfrc522_request>:
 3fe:	ef 92       	push	r14
{
	mfrc522_write(CommandReg,SoftReset_CMD);
}

uint8_t	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
{
 400:	ff 92       	push	r15
 402:	0f 93       	push	r16
 404:	1f 93       	push	r17
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	00 d0       	rcall	.+0      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40c:	00 d0       	rcall	.+0      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40e:	cd b7       	in	r28, 0x3d	; 61
 410:	de b7       	in	r29, 0x3e	; 62
 412:	18 2f       	mov	r17, r24
 414:	7b 01       	movw	r14, r22
	uint8_t  status;  
	uint32_t backBits;//The received data bits

	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
 416:	67 e0       	ldi	r22, 0x07	; 7
 418:	8d e0       	ldi	r24, 0x0D	; 13
 41a:	b5 de       	rcall	.-662    	; 0x186 <mfrc522_write>
	
	tag_type[0] = req_mode;
 41c:	f7 01       	movw	r30, r14
 41e:	10 83       	st	Z, r17
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);
 420:	8e 01       	movw	r16, r28
 422:	0f 5f       	subi	r16, 0xFF	; 255
 424:	1f 4f       	sbci	r17, 0xFF	; 255
 426:	97 01       	movw	r18, r14
 428:	41 e0       	ldi	r20, 0x01	; 1
 42a:	b7 01       	movw	r22, r14
 42c:	8c e0       	ldi	r24, 0x0C	; 12
 42e:	f8 de       	rcall	.-528    	; 0x220 <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
 430:	81 30       	cpi	r24, 0x01	; 1
 432:	51 f4       	brne	.+20     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 434:	49 81       	ldd	r20, Y+1	; 0x01
 436:	5a 81       	ldd	r21, Y+2	; 0x02
 438:	6b 81       	ldd	r22, Y+3	; 0x03
 43a:	7c 81       	ldd	r23, Y+4	; 0x04
 43c:	40 31       	cpi	r20, 0x10	; 16
 43e:	51 05       	cpc	r21, r1
 440:	61 05       	cpc	r22, r1
 442:	71 05       	cpc	r23, r1
 444:	19 f4       	brne	.+6      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 446:	03 c0       	rjmp	.+6      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
	{    
		status = ERROR;
 448:	83 e0       	ldi	r24, 0x03	; 3
 44a:	01 c0       	rjmp	.+2      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44c:	83 e0       	ldi	r24, 0x03	; 3
	}
   
	return status;
}
 44e:	0f 90       	pop	r0
 450:	0f 90       	pop	r0
 452:	0f 90       	pop	r0
 454:	0f 90       	pop	r0
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	1f 91       	pop	r17
 45c:	0f 91       	pop	r16
 45e:	ff 90       	pop	r15
 460:	ef 90       	pop	r14
 462:	08 95       	ret

00000464 <mfrc522_get_card_serial>:
    return status;
}


uint8_t mfrc522_get_card_serial(uint8_t * serial_out)
{
 464:	ef 92       	push	r14
 466:	ff 92       	push	r15
 468:	0f 93       	push	r16
 46a:	1f 93       	push	r17
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	00 d0       	rcall	.+0      	; 0x472 <mfrc522_get_card_serial+0xe>
 472:	00 d0       	rcall	.+0      	; 0x474 <mfrc522_get_card_serial+0x10>
 474:	cd b7       	in	r28, 0x3d	; 61
 476:	de b7       	in	r29, 0x3e	; 62
 478:	7c 01       	movw	r14, r24
	uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
    uint32_t unLen;
    
	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 47a:	60 e0       	ldi	r22, 0x00	; 0
 47c:	8d e0       	ldi	r24, 0x0D	; 13
 47e:	83 de       	rcall	.-762    	; 0x186 <mfrc522_write>
 
    serial_out[0] = PICC_ANTICOLL;
 480:	83 e9       	ldi	r24, 0x93	; 147
 482:	f7 01       	movw	r30, r14
 484:	80 83       	st	Z, r24
    serial_out[1] = 0x20;
 486:	80 e2       	ldi	r24, 0x20	; 32
 488:	81 83       	std	Z+1, r24	; 0x01
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);
 48a:	8e 01       	movw	r16, r28
 48c:	0f 5f       	subi	r16, 0xFF	; 255
 48e:	1f 4f       	sbci	r17, 0xFF	; 255
 490:	97 01       	movw	r18, r14
 492:	42 e0       	ldi	r20, 0x02	; 2
 494:	b7 01       	movw	r22, r14
 496:	8c e0       	ldi	r24, 0x0C	; 12
 498:	c3 de       	rcall	.-634    	; 0x220 <mfrc522_to_card>

    if (status == CARD_FOUND)
 49a:	81 30       	cpi	r24, 0x01	; 1
 49c:	91 f4       	brne	.+36     	; 0x4c2 <mfrc522_get_card_serial+0x5e>
 49e:	07 c0       	rjmp	.+14     	; 0x4ae <mfrc522_get_card_serial+0x4a>
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{   
		 	serNumCheck ^= serial_out[i];
 4a0:	f7 01       	movw	r30, r14
 4a2:	e9 0f       	add	r30, r25
 4a4:	f1 1d       	adc	r31, r1
 4a6:	30 81       	ld	r19, Z
 4a8:	23 27       	eor	r18, r19
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);

    if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
 4aa:	9f 5f       	subi	r25, 0xFF	; 255
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <mfrc522_get_card_serial+0x4e>
 4ae:	20 e0       	ldi	r18, 0x00	; 0
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	94 30       	cpi	r25, 0x04	; 4
 4b4:	a8 f3       	brcs	.-22     	; 0x4a0 <mfrc522_get_card_serial+0x3c>
		{   
		 	serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
 4b6:	f7 01       	movw	r30, r14
 4b8:	e9 0f       	add	r30, r25
 4ba:	f1 1d       	adc	r31, r1
 4bc:	90 81       	ld	r25, Z
 4be:	29 13       	cpse	r18, r25
		{   
			status = ERROR;    
 4c0:	83 e0       	ldi	r24, 0x03	; 3
		}
    }
    return status;
}
 4c2:	0f 90       	pop	r0
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	0f 90       	pop	r0
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	1f 91       	pop	r17
 4d0:	0f 91       	pop	r16
 4d2:	ff 90       	pop	r15
 4d4:	ef 90       	pop	r14
 4d6:	08 95       	ret

000004d8 <intialize_section>:
			}
	}
}

void intialize_section(void){
	SPI_Init();
 4d8:	a6 d3       	rcall	.+1868   	; 0xc26 <SPI_Init>
	UART0_Init();	
 4da:	52 d4       	rcall	.+2212   	; 0xd80 <UART0_Init>
	mfrc522_init();
 4dc:	82 de       	rcall	.-764    	; 0x1e2 <mfrc522_init>
	DIO_ConfigChannel(DIO_ChannelA0 ,OUTPUT);
 4de:	61 e0       	ldi	r22, 0x01	; 1
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	65 d1       	rcall	.+714    	; 0x7ae <DIO_ConfigChannel>
	DIO_ConfigChannel(DIO_ChannelA1 ,OUTPUT);
 4e4:	61 e0       	ldi	r22, 0x01	; 1
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	62 d1       	rcall	.+708    	; 0x7ae <DIO_ConfigChannel>
	DIO_ConfigChannel(DIO_ChannelA2 ,OUTPUT);
 4ea:	61 e0       	ldi	r22, 0x01	; 1
 4ec:	82 e0       	ldi	r24, 0x02	; 2
 4ee:	5f c1       	rjmp	.+702    	; 0x7ae <DIO_ConfigChannel>
 4f0:	08 95       	ret

000004f2 <main>:
 4f2:	f2 df       	rcall	.-28     	; 0x4d8 <intialize_section>
int main()
{
	intialize_section();
	
	
	byte = mfrc522_read(ComIEnReg);
 4f4:	82 e0       	ldi	r24, 0x02	; 2
 4f6:	5c de       	rcall	.-840    	; 0x1b0 <mfrc522_read>
 4f8:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <byte>
	mfrc522_write(ComIEnReg,byte|0x20);
 4fc:	68 2f       	mov	r22, r24
 4fe:	60 62       	ori	r22, 0x20	; 32
 500:	82 e0       	ldi	r24, 0x02	; 2
	byte = mfrc522_read(DivIEnReg);
 502:	41 de       	rcall	.-894    	; 0x186 <mfrc522_write>
 504:	83 e0       	ldi	r24, 0x03	; 3
 506:	54 de       	rcall	.-856    	; 0x1b0 <mfrc522_read>
 508:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <byte>
	mfrc522_write(DivIEnReg,byte|0x80);
 50c:	68 2f       	mov	r22, r24
 50e:	60 68       	ori	r22, 0x80	; 128
 510:	83 e0       	ldi	r24, 0x03	; 3
	while(1)
	{
		byte = mfrc522_request(PICC_REQALL,str);
 512:	39 de       	rcall	.-910    	; 0x186 <mfrc522_write>
 514:	6f e6       	ldi	r22, 0x6F	; 111
 516:	73 e0       	ldi	r23, 0x03	; 3
 518:	82 e5       	ldi	r24, 0x52	; 82
 51a:	71 df       	rcall	.-286    	; 0x3fe <mfrc522_request>
 51c:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 520:	2f ef       	ldi	r18, 0xFF	; 255
 522:	81 ee       	ldi	r24, 0xE1	; 225
 524:	94 e0       	ldi	r25, 0x04	; 4
 526:	21 50       	subi	r18, 0x01	; 1
 528:	80 40       	sbci	r24, 0x00	; 0
 52a:	90 40       	sbci	r25, 0x00	; 0
 52c:	e1 f7       	brne	.-8      	; 0x526 <main+0x34>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <main+0x3e>
 530:	00 00       	nop
		_delay_ms(100);
		if(byte == CARD_FOUND)
 532:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <byte>
 536:	81 30       	cpi	r24, 0x01	; 1
		{
			byte = mfrc522_get_card_serial(str);
 538:	11 f5       	brne	.+68     	; 0x57e <main+0x8c>
 53a:	8f e6       	ldi	r24, 0x6F	; 111
 53c:	93 e0       	ldi	r25, 0x03	; 3
 53e:	92 df       	rcall	.-220    	; 0x464 <mfrc522_get_card_serial>
 540:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <byte>
			if(byte == CARD_FOUND)
 544:	81 30       	cpi	r24, 0x01	; 1
			{
				DIO_WriteChannel(DIO_ChannelA0 ,STD_HIGH);
 546:	d9 f4       	brne	.+54     	; 0x57e <main+0x8c>
 548:	61 e0       	ldi	r22, 0x01	; 1
 54a:	80 e0       	ldi	r24, 0x00	; 0
				person_recognised = 1;
 54c:	4c d0       	rcall	.+152    	; 0x5e6 <DIO_WriteChannel>
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <person_recognised>
				UART0_Transmit('@');
 554:	80 e4       	ldi	r24, 0x40	; 64
				for(byte=0;byte<8;byte++){
 556:	c3 d4       	rcall	.+2438   	; 0xede <UART0_Transmit>
 558:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <byte>
					UART0_Transmit(str[byte]);
 55c:	0a c0       	rjmp	.+20     	; 0x572 <main+0x80>
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	e1 59       	subi	r30, 0x91	; 145
 562:	fc 4f       	sbci	r31, 0xFC	; 252
 564:	80 81       	ld	r24, Z
 566:	bb d4       	rcall	.+2422   	; 0xede <UART0_Transmit>
			if(byte == CARD_FOUND)
			{
				DIO_WriteChannel(DIO_ChannelA0 ,STD_HIGH);
				person_recognised = 1;
				UART0_Transmit('@');
				for(byte=0;byte<8;byte++){
 568:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <byte>
 56c:	8f 5f       	subi	r24, 0xFF	; 255
 56e:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <byte>
 572:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <byte>
					UART0_Transmit(str[byte]);
				}
				UART0_Transmit(';');
 576:	e8 30       	cpi	r30, 0x08	; 8
 578:	90 f3       	brcs	.-28     	; 0x55e <main+0x6c>
 57a:	8b e3       	ldi	r24, 0x3B	; 59
			}

		}
		if(1 == person_recognised){
 57c:	b0 d4       	rcall	.+2400   	; 0xede <UART0_Transmit>
 57e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <person_recognised>
			person_recognised = 0;
 582:	81 30       	cpi	r24, 0x01	; 1
 584:	39 f6       	brne	.-114    	; 0x514 <main+0x22>
			data_recieved = UART0_Receive();
 586:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <person_recognised>
 58a:	ad d4       	rcall	.+2394   	; 0xee6 <UART0_Receive>
 58c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
			if('1' == data_recieved){
 590:	81 33       	cpi	r24, 0x31	; 49
				DIO_WriteChannel(DIO_ChannelA1 ,STD_HIGH);
 592:	99 f4       	brne	.+38     	; 0x5ba <main+0xc8>
 594:	61 e0       	ldi	r22, 0x01	; 1
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	26 d0       	rcall	.+76     	; 0x5e6 <DIO_WriteChannel>
 59a:	2f ef       	ldi	r18, 0xFF	; 255
 59c:	89 e6       	ldi	r24, 0x69	; 105
 59e:	98 e1       	ldi	r25, 0x18	; 24
 5a0:	21 50       	subi	r18, 0x01	; 1
 5a2:	80 40       	sbci	r24, 0x00	; 0
 5a4:	90 40       	sbci	r25, 0x00	; 0
 5a6:	e1 f7       	brne	.-8      	; 0x5a0 <main+0xae>
				_delay_ms(500);
				DIO_WriteChannel(DIO_ChannelA1 ,STD_LOW);
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <main+0xb8>
 5aa:	00 00       	nop
 5ac:	60 e0       	ldi	r22, 0x00	; 0
 5ae:	81 e0       	ldi	r24, 0x01	; 1
				DIO_WriteChannel(DIO_ChannelA0 ,STD_LOW);
 5b0:	1a d0       	rcall	.+52     	; 0x5e6 <DIO_WriteChannel>
 5b2:	60 e0       	ldi	r22, 0x00	; 0
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	17 d0       	rcall	.+46     	; 0x5e6 <DIO_WriteChannel>
 5b8:	ad cf       	rjmp	.-166    	; 0x514 <main+0x22>
			}
			else if('2' == data_recieved){
 5ba:	82 33       	cpi	r24, 0x32	; 50
 5bc:	09 f0       	breq	.+2      	; 0x5c0 <main+0xce>
				DIO_WriteChannel(DIO_ChannelA2 ,STD_HIGH);
 5be:	aa cf       	rjmp	.-172    	; 0x514 <main+0x22>
 5c0:	61 e0       	ldi	r22, 0x01	; 1
 5c2:	82 e0       	ldi	r24, 0x02	; 2
 5c4:	10 d0       	rcall	.+32     	; 0x5e6 <DIO_WriteChannel>
 5c6:	2f ef       	ldi	r18, 0xFF	; 255
 5c8:	89 e6       	ldi	r24, 0x69	; 105
 5ca:	98 e1       	ldi	r25, 0x18	; 24
 5cc:	21 50       	subi	r18, 0x01	; 1
 5ce:	80 40       	sbci	r24, 0x00	; 0
 5d0:	90 40       	sbci	r25, 0x00	; 0
 5d2:	e1 f7       	brne	.-8      	; 0x5cc <main+0xda>
 5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <main+0xe4>
				_delay_ms(500);
				DIO_WriteChannel(DIO_ChannelA2 ,STD_LOW);
 5d6:	00 00       	nop
 5d8:	60 e0       	ldi	r22, 0x00	; 0
 5da:	82 e0       	ldi	r24, 0x02	; 2
 5dc:	04 d0       	rcall	.+8      	; 0x5e6 <DIO_WriteChannel>
				DIO_WriteChannel(DIO_ChannelA0 ,STD_LOW);
 5de:	60 e0       	ldi	r22, 0x00	; 0
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	01 d0       	rcall	.+2      	; 0x5e6 <DIO_WriteChannel>
 5e4:	97 cf       	rjmp	.-210    	; 0x514 <main+0x22>

000005e6 <DIO_WriteChannel>:
 5e6:	e8 2f       	mov	r30, r24
 5e8:	e6 95       	lsr	r30
 5ea:	e6 95       	lsr	r30
 5ec:	e6 95       	lsr	r30
 5ee:	87 70       	andi	r24, 0x07	; 7
 5f0:	66 23       	and	r22, r22
 5f2:	21 f0       	breq	.+8      	; 0x5fc <DIO_WriteChannel+0x16>
 5f4:	61 30       	cpi	r22, 0x01	; 1
 5f6:	09 f4       	brne	.+2      	; 0x5fa <DIO_WriteChannel+0x14>
 5f8:	71 c0       	rjmp	.+226    	; 0x6dc <DIO_WriteChannel+0xf6>
 5fa:	08 95       	ret
 5fc:	4e 2f       	mov	r20, r30
 5fe:	50 e0       	ldi	r21, 0x00	; 0
 600:	47 30       	cpi	r20, 0x07	; 7
 602:	51 05       	cpc	r21, r1
 604:	08 f0       	brcs	.+2      	; 0x608 <DIO_WriteChannel+0x22>
 606:	d2 c0       	rjmp	.+420    	; 0x7ac <DIO_WriteChannel+0x1c6>
 608:	fa 01       	movw	r30, r20
 60a:	ea 5b       	subi	r30, 0xBA	; 186
 60c:	ff 4f       	sbci	r31, 0xFF	; 255
 60e:	91 c4       	rjmp	.+2338   	; 0xf32 <__tablejump2__>
 610:	4b b3       	in	r20, 0x1b	; 27
 612:	21 e0       	ldi	r18, 0x01	; 1
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	b9 01       	movw	r22, r18
 618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_WriteChannel+0x38>
 61a:	66 0f       	add	r22, r22
 61c:	77 1f       	adc	r23, r23
 61e:	8a 95       	dec	r24
 620:	e2 f7       	brpl	.-8      	; 0x61a <DIO_WriteChannel+0x34>
 622:	cb 01       	movw	r24, r22
 624:	80 95       	com	r24
 626:	84 23       	and	r24, r20
 628:	8b bb       	out	0x1b, r24	; 27
 62a:	08 95       	ret
 62c:	48 b3       	in	r20, 0x18	; 24
 62e:	21 e0       	ldi	r18, 0x01	; 1
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	b9 01       	movw	r22, r18
 634:	02 c0       	rjmp	.+4      	; 0x63a <DIO_WriteChannel+0x54>
 636:	66 0f       	add	r22, r22
 638:	77 1f       	adc	r23, r23
 63a:	8a 95       	dec	r24
 63c:	e2 f7       	brpl	.-8      	; 0x636 <DIO_WriteChannel+0x50>
 63e:	cb 01       	movw	r24, r22
 640:	80 95       	com	r24
 642:	84 23       	and	r24, r20
 644:	88 bb       	out	0x18, r24	; 24
 646:	08 95       	ret
 648:	45 b3       	in	r20, 0x15	; 21
 64a:	21 e0       	ldi	r18, 0x01	; 1
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	b9 01       	movw	r22, r18
 650:	02 c0       	rjmp	.+4      	; 0x656 <DIO_WriteChannel+0x70>
 652:	66 0f       	add	r22, r22
 654:	77 1f       	adc	r23, r23
 656:	8a 95       	dec	r24
 658:	e2 f7       	brpl	.-8      	; 0x652 <DIO_WriteChannel+0x6c>
 65a:	cb 01       	movw	r24, r22
 65c:	80 95       	com	r24
 65e:	84 23       	and	r24, r20
 660:	85 bb       	out	0x15, r24	; 21
 662:	08 95       	ret
 664:	42 b3       	in	r20, 0x12	; 18
 666:	21 e0       	ldi	r18, 0x01	; 1
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	b9 01       	movw	r22, r18
 66c:	02 c0       	rjmp	.+4      	; 0x672 <DIO_WriteChannel+0x8c>
 66e:	66 0f       	add	r22, r22
 670:	77 1f       	adc	r23, r23
 672:	8a 95       	dec	r24
 674:	e2 f7       	brpl	.-8      	; 0x66e <DIO_WriteChannel+0x88>
 676:	cb 01       	movw	r24, r22
 678:	80 95       	com	r24
 67a:	84 23       	and	r24, r20
 67c:	82 bb       	out	0x12, r24	; 18
 67e:	08 95       	ret
 680:	43 b1       	in	r20, 0x03	; 3
 682:	21 e0       	ldi	r18, 0x01	; 1
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	b9 01       	movw	r22, r18
 688:	02 c0       	rjmp	.+4      	; 0x68e <DIO_WriteChannel+0xa8>
 68a:	66 0f       	add	r22, r22
 68c:	77 1f       	adc	r23, r23
 68e:	8a 95       	dec	r24
 690:	e2 f7       	brpl	.-8      	; 0x68a <DIO_WriteChannel+0xa4>
 692:	cb 01       	movw	r24, r22
 694:	80 95       	com	r24
 696:	84 23       	and	r24, r20
 698:	83 b9       	out	0x03, r24	; 3
 69a:	08 95       	ret
 69c:	e2 e6       	ldi	r30, 0x62	; 98
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	40 81       	ld	r20, Z
 6a2:	21 e0       	ldi	r18, 0x01	; 1
 6a4:	30 e0       	ldi	r19, 0x00	; 0
 6a6:	b9 01       	movw	r22, r18
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <DIO_WriteChannel+0xc8>
 6aa:	66 0f       	add	r22, r22
 6ac:	77 1f       	adc	r23, r23
 6ae:	8a 95       	dec	r24
 6b0:	e2 f7       	brpl	.-8      	; 0x6aa <DIO_WriteChannel+0xc4>
 6b2:	cb 01       	movw	r24, r22
 6b4:	80 95       	com	r24
 6b6:	84 23       	and	r24, r20
 6b8:	80 83       	st	Z, r24
 6ba:	08 95       	ret
 6bc:	e5 e6       	ldi	r30, 0x65	; 101
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	40 81       	ld	r20, Z
 6c2:	21 e0       	ldi	r18, 0x01	; 1
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	b9 01       	movw	r22, r18
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <DIO_WriteChannel+0xe8>
 6ca:	66 0f       	add	r22, r22
 6cc:	77 1f       	adc	r23, r23
 6ce:	8a 95       	dec	r24
 6d0:	e2 f7       	brpl	.-8      	; 0x6ca <DIO_WriteChannel+0xe4>
 6d2:	cb 01       	movw	r24, r22
 6d4:	80 95       	com	r24
 6d6:	84 23       	and	r24, r20
 6d8:	80 83       	st	Z, r24
 6da:	08 95       	ret
 6dc:	4e 2f       	mov	r20, r30
 6de:	50 e0       	ldi	r21, 0x00	; 0
 6e0:	47 30       	cpi	r20, 0x07	; 7
 6e2:	51 05       	cpc	r21, r1
 6e4:	08 f0       	brcs	.+2      	; 0x6e8 <DIO_WriteChannel+0x102>
 6e6:	62 c0       	rjmp	.+196    	; 0x7ac <DIO_WriteChannel+0x1c6>
 6e8:	fa 01       	movw	r30, r20
 6ea:	e3 5b       	subi	r30, 0xB3	; 179
 6ec:	ff 4f       	sbci	r31, 0xFF	; 255
 6ee:	21 c4       	rjmp	.+2114   	; 0xf32 <__tablejump2__>
 6f0:	4b b3       	in	r20, 0x1b	; 27
 6f2:	21 e0       	ldi	r18, 0x01	; 1
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	b9 01       	movw	r22, r18
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <DIO_WriteChannel+0x118>
 6fa:	66 0f       	add	r22, r22
 6fc:	77 1f       	adc	r23, r23
 6fe:	8a 95       	dec	r24
 700:	e2 f7       	brpl	.-8      	; 0x6fa <DIO_WriteChannel+0x114>
 702:	cb 01       	movw	r24, r22
 704:	84 2b       	or	r24, r20
 706:	8b bb       	out	0x1b, r24	; 27
 708:	08 95       	ret
 70a:	48 b3       	in	r20, 0x18	; 24
 70c:	21 e0       	ldi	r18, 0x01	; 1
 70e:	30 e0       	ldi	r19, 0x00	; 0
 710:	b9 01       	movw	r22, r18
 712:	02 c0       	rjmp	.+4      	; 0x718 <DIO_WriteChannel+0x132>
 714:	66 0f       	add	r22, r22
 716:	77 1f       	adc	r23, r23
 718:	8a 95       	dec	r24
 71a:	e2 f7       	brpl	.-8      	; 0x714 <DIO_WriteChannel+0x12e>
 71c:	cb 01       	movw	r24, r22
 71e:	84 2b       	or	r24, r20
 720:	88 bb       	out	0x18, r24	; 24
 722:	08 95       	ret
 724:	45 b3       	in	r20, 0x15	; 21
 726:	21 e0       	ldi	r18, 0x01	; 1
 728:	30 e0       	ldi	r19, 0x00	; 0
 72a:	b9 01       	movw	r22, r18
 72c:	02 c0       	rjmp	.+4      	; 0x732 <DIO_WriteChannel+0x14c>
 72e:	66 0f       	add	r22, r22
 730:	77 1f       	adc	r23, r23
 732:	8a 95       	dec	r24
 734:	e2 f7       	brpl	.-8      	; 0x72e <DIO_WriteChannel+0x148>
 736:	cb 01       	movw	r24, r22
 738:	84 2b       	or	r24, r20
 73a:	85 bb       	out	0x15, r24	; 21
 73c:	08 95       	ret
 73e:	42 b3       	in	r20, 0x12	; 18
 740:	21 e0       	ldi	r18, 0x01	; 1
 742:	30 e0       	ldi	r19, 0x00	; 0
 744:	b9 01       	movw	r22, r18
 746:	02 c0       	rjmp	.+4      	; 0x74c <DIO_WriteChannel+0x166>
 748:	66 0f       	add	r22, r22
 74a:	77 1f       	adc	r23, r23
 74c:	8a 95       	dec	r24
 74e:	e2 f7       	brpl	.-8      	; 0x748 <DIO_WriteChannel+0x162>
 750:	cb 01       	movw	r24, r22
 752:	84 2b       	or	r24, r20
 754:	82 bb       	out	0x12, r24	; 18
 756:	08 95       	ret
 758:	43 b1       	in	r20, 0x03	; 3
 75a:	21 e0       	ldi	r18, 0x01	; 1
 75c:	30 e0       	ldi	r19, 0x00	; 0
 75e:	b9 01       	movw	r22, r18
 760:	02 c0       	rjmp	.+4      	; 0x766 <DIO_WriteChannel+0x180>
 762:	66 0f       	add	r22, r22
 764:	77 1f       	adc	r23, r23
 766:	8a 95       	dec	r24
 768:	e2 f7       	brpl	.-8      	; 0x762 <DIO_WriteChannel+0x17c>
 76a:	cb 01       	movw	r24, r22
 76c:	84 2b       	or	r24, r20
 76e:	83 b9       	out	0x03, r24	; 3
 770:	08 95       	ret
 772:	e2 e6       	ldi	r30, 0x62	; 98
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	40 81       	ld	r20, Z
 778:	21 e0       	ldi	r18, 0x01	; 1
 77a:	30 e0       	ldi	r19, 0x00	; 0
 77c:	b9 01       	movw	r22, r18
 77e:	02 c0       	rjmp	.+4      	; 0x784 <DIO_WriteChannel+0x19e>
 780:	66 0f       	add	r22, r22
 782:	77 1f       	adc	r23, r23
 784:	8a 95       	dec	r24
 786:	e2 f7       	brpl	.-8      	; 0x780 <DIO_WriteChannel+0x19a>
 788:	cb 01       	movw	r24, r22
 78a:	84 2b       	or	r24, r20
 78c:	80 83       	st	Z, r24
 78e:	08 95       	ret
 790:	e5 e6       	ldi	r30, 0x65	; 101
 792:	f0 e0       	ldi	r31, 0x00	; 0
 794:	40 81       	ld	r20, Z
 796:	21 e0       	ldi	r18, 0x01	; 1
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	b9 01       	movw	r22, r18
 79c:	02 c0       	rjmp	.+4      	; 0x7a2 <DIO_WriteChannel+0x1bc>
 79e:	66 0f       	add	r22, r22
 7a0:	77 1f       	adc	r23, r23
 7a2:	8a 95       	dec	r24
 7a4:	e2 f7       	brpl	.-8      	; 0x79e <DIO_WriteChannel+0x1b8>
 7a6:	cb 01       	movw	r24, r22
 7a8:	84 2b       	or	r24, r20
 7aa:	80 83       	st	Z, r24
 7ac:	08 95       	ret

000007ae <DIO_ConfigChannel>:
 7ae:	e8 2f       	mov	r30, r24
 7b0:	e6 95       	lsr	r30
 7b2:	e6 95       	lsr	r30
 7b4:	e6 95       	lsr	r30
 7b6:	87 70       	andi	r24, 0x07	; 7
 7b8:	66 23       	and	r22, r22
 7ba:	21 f0       	breq	.+8      	; 0x7c4 <DIO_ConfigChannel+0x16>
 7bc:	61 30       	cpi	r22, 0x01	; 1
 7be:	09 f4       	brne	.+2      	; 0x7c2 <DIO_ConfigChannel+0x14>
 7c0:	71 c0       	rjmp	.+226    	; 0x8a4 <DIO_ConfigChannel+0xf6>
 7c2:	08 95       	ret
 7c4:	4e 2f       	mov	r20, r30
 7c6:	50 e0       	ldi	r21, 0x00	; 0
 7c8:	47 30       	cpi	r20, 0x07	; 7
 7ca:	51 05       	cpc	r21, r1
 7cc:	08 f0       	brcs	.+2      	; 0x7d0 <DIO_ConfigChannel+0x22>
 7ce:	d2 c0       	rjmp	.+420    	; 0x974 <DIO_ConfigChannel+0x1c6>
 7d0:	fa 01       	movw	r30, r20
 7d2:	ec 5a       	subi	r30, 0xAC	; 172
 7d4:	ff 4f       	sbci	r31, 0xFF	; 255
 7d6:	ad c3       	rjmp	.+1882   	; 0xf32 <__tablejump2__>
 7d8:	4a b3       	in	r20, 0x1a	; 26
 7da:	21 e0       	ldi	r18, 0x01	; 1
 7dc:	30 e0       	ldi	r19, 0x00	; 0
 7de:	b9 01       	movw	r22, r18
 7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <DIO_ConfigChannel+0x38>
 7e2:	66 0f       	add	r22, r22
 7e4:	77 1f       	adc	r23, r23
 7e6:	8a 95       	dec	r24
 7e8:	e2 f7       	brpl	.-8      	; 0x7e2 <DIO_ConfigChannel+0x34>
 7ea:	cb 01       	movw	r24, r22
 7ec:	80 95       	com	r24
 7ee:	84 23       	and	r24, r20
 7f0:	8a bb       	out	0x1a, r24	; 26
 7f2:	08 95       	ret
 7f4:	47 b3       	in	r20, 0x17	; 23
 7f6:	21 e0       	ldi	r18, 0x01	; 1
 7f8:	30 e0       	ldi	r19, 0x00	; 0
 7fa:	b9 01       	movw	r22, r18
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <DIO_ConfigChannel+0x54>
 7fe:	66 0f       	add	r22, r22
 800:	77 1f       	adc	r23, r23
 802:	8a 95       	dec	r24
 804:	e2 f7       	brpl	.-8      	; 0x7fe <DIO_ConfigChannel+0x50>
 806:	cb 01       	movw	r24, r22
 808:	80 95       	com	r24
 80a:	84 23       	and	r24, r20
 80c:	87 bb       	out	0x17, r24	; 23
 80e:	08 95       	ret
 810:	44 b3       	in	r20, 0x14	; 20
 812:	21 e0       	ldi	r18, 0x01	; 1
 814:	30 e0       	ldi	r19, 0x00	; 0
 816:	b9 01       	movw	r22, r18
 818:	02 c0       	rjmp	.+4      	; 0x81e <DIO_ConfigChannel+0x70>
 81a:	66 0f       	add	r22, r22
 81c:	77 1f       	adc	r23, r23
 81e:	8a 95       	dec	r24
 820:	e2 f7       	brpl	.-8      	; 0x81a <DIO_ConfigChannel+0x6c>
 822:	cb 01       	movw	r24, r22
 824:	80 95       	com	r24
 826:	84 23       	and	r24, r20
 828:	84 bb       	out	0x14, r24	; 20
 82a:	08 95       	ret
 82c:	41 b3       	in	r20, 0x11	; 17
 82e:	21 e0       	ldi	r18, 0x01	; 1
 830:	30 e0       	ldi	r19, 0x00	; 0
 832:	b9 01       	movw	r22, r18
 834:	02 c0       	rjmp	.+4      	; 0x83a <DIO_ConfigChannel+0x8c>
 836:	66 0f       	add	r22, r22
 838:	77 1f       	adc	r23, r23
 83a:	8a 95       	dec	r24
 83c:	e2 f7       	brpl	.-8      	; 0x836 <DIO_ConfigChannel+0x88>
 83e:	cb 01       	movw	r24, r22
 840:	80 95       	com	r24
 842:	84 23       	and	r24, r20
 844:	81 bb       	out	0x11, r24	; 17
 846:	08 95       	ret
 848:	42 b1       	in	r20, 0x02	; 2
 84a:	21 e0       	ldi	r18, 0x01	; 1
 84c:	30 e0       	ldi	r19, 0x00	; 0
 84e:	b9 01       	movw	r22, r18
 850:	02 c0       	rjmp	.+4      	; 0x856 <DIO_ConfigChannel+0xa8>
 852:	66 0f       	add	r22, r22
 854:	77 1f       	adc	r23, r23
 856:	8a 95       	dec	r24
 858:	e2 f7       	brpl	.-8      	; 0x852 <DIO_ConfigChannel+0xa4>
 85a:	cb 01       	movw	r24, r22
 85c:	80 95       	com	r24
 85e:	84 23       	and	r24, r20
 860:	82 b9       	out	0x02, r24	; 2
 862:	08 95       	ret
 864:	e1 e6       	ldi	r30, 0x61	; 97
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	40 81       	ld	r20, Z
 86a:	21 e0       	ldi	r18, 0x01	; 1
 86c:	30 e0       	ldi	r19, 0x00	; 0
 86e:	b9 01       	movw	r22, r18
 870:	02 c0       	rjmp	.+4      	; 0x876 <DIO_ConfigChannel+0xc8>
 872:	66 0f       	add	r22, r22
 874:	77 1f       	adc	r23, r23
 876:	8a 95       	dec	r24
 878:	e2 f7       	brpl	.-8      	; 0x872 <DIO_ConfigChannel+0xc4>
 87a:	cb 01       	movw	r24, r22
 87c:	80 95       	com	r24
 87e:	84 23       	and	r24, r20
 880:	80 83       	st	Z, r24
 882:	08 95       	ret
 884:	e4 e6       	ldi	r30, 0x64	; 100
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	40 81       	ld	r20, Z
 88a:	21 e0       	ldi	r18, 0x01	; 1
 88c:	30 e0       	ldi	r19, 0x00	; 0
 88e:	b9 01       	movw	r22, r18
 890:	02 c0       	rjmp	.+4      	; 0x896 <DIO_ConfigChannel+0xe8>
 892:	66 0f       	add	r22, r22
 894:	77 1f       	adc	r23, r23
 896:	8a 95       	dec	r24
 898:	e2 f7       	brpl	.-8      	; 0x892 <DIO_ConfigChannel+0xe4>
 89a:	cb 01       	movw	r24, r22
 89c:	80 95       	com	r24
 89e:	84 23       	and	r24, r20
 8a0:	80 83       	st	Z, r24
 8a2:	08 95       	ret
 8a4:	4e 2f       	mov	r20, r30
 8a6:	50 e0       	ldi	r21, 0x00	; 0
 8a8:	47 30       	cpi	r20, 0x07	; 7
 8aa:	51 05       	cpc	r21, r1
 8ac:	08 f0       	brcs	.+2      	; 0x8b0 <DIO_ConfigChannel+0x102>
 8ae:	62 c0       	rjmp	.+196    	; 0x974 <DIO_ConfigChannel+0x1c6>
 8b0:	fa 01       	movw	r30, r20
 8b2:	e5 5a       	subi	r30, 0xA5	; 165
 8b4:	ff 4f       	sbci	r31, 0xFF	; 255
 8b6:	3d c3       	rjmp	.+1658   	; 0xf32 <__tablejump2__>
 8b8:	4a b3       	in	r20, 0x1a	; 26
 8ba:	21 e0       	ldi	r18, 0x01	; 1
 8bc:	30 e0       	ldi	r19, 0x00	; 0
 8be:	b9 01       	movw	r22, r18
 8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <DIO_ConfigChannel+0x118>
 8c2:	66 0f       	add	r22, r22
 8c4:	77 1f       	adc	r23, r23
 8c6:	8a 95       	dec	r24
 8c8:	e2 f7       	brpl	.-8      	; 0x8c2 <DIO_ConfigChannel+0x114>
 8ca:	cb 01       	movw	r24, r22
 8cc:	84 2b       	or	r24, r20
 8ce:	8a bb       	out	0x1a, r24	; 26
 8d0:	08 95       	ret
 8d2:	47 b3       	in	r20, 0x17	; 23
 8d4:	21 e0       	ldi	r18, 0x01	; 1
 8d6:	30 e0       	ldi	r19, 0x00	; 0
 8d8:	b9 01       	movw	r22, r18
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <DIO_ConfigChannel+0x132>
 8dc:	66 0f       	add	r22, r22
 8de:	77 1f       	adc	r23, r23
 8e0:	8a 95       	dec	r24
 8e2:	e2 f7       	brpl	.-8      	; 0x8dc <DIO_ConfigChannel+0x12e>
 8e4:	cb 01       	movw	r24, r22
 8e6:	84 2b       	or	r24, r20
 8e8:	87 bb       	out	0x17, r24	; 23
 8ea:	08 95       	ret
 8ec:	44 b3       	in	r20, 0x14	; 20
 8ee:	21 e0       	ldi	r18, 0x01	; 1
 8f0:	30 e0       	ldi	r19, 0x00	; 0
 8f2:	b9 01       	movw	r22, r18
 8f4:	02 c0       	rjmp	.+4      	; 0x8fa <DIO_ConfigChannel+0x14c>
 8f6:	66 0f       	add	r22, r22
 8f8:	77 1f       	adc	r23, r23
 8fa:	8a 95       	dec	r24
 8fc:	e2 f7       	brpl	.-8      	; 0x8f6 <DIO_ConfigChannel+0x148>
 8fe:	cb 01       	movw	r24, r22
 900:	84 2b       	or	r24, r20
 902:	84 bb       	out	0x14, r24	; 20
 904:	08 95       	ret
 906:	41 b3       	in	r20, 0x11	; 17
 908:	21 e0       	ldi	r18, 0x01	; 1
 90a:	30 e0       	ldi	r19, 0x00	; 0
 90c:	b9 01       	movw	r22, r18
 90e:	02 c0       	rjmp	.+4      	; 0x914 <DIO_ConfigChannel+0x166>
 910:	66 0f       	add	r22, r22
 912:	77 1f       	adc	r23, r23
 914:	8a 95       	dec	r24
 916:	e2 f7       	brpl	.-8      	; 0x910 <DIO_ConfigChannel+0x162>
 918:	cb 01       	movw	r24, r22
 91a:	84 2b       	or	r24, r20
 91c:	81 bb       	out	0x11, r24	; 17
 91e:	08 95       	ret
 920:	42 b1       	in	r20, 0x02	; 2
 922:	21 e0       	ldi	r18, 0x01	; 1
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	b9 01       	movw	r22, r18
 928:	02 c0       	rjmp	.+4      	; 0x92e <DIO_ConfigChannel+0x180>
 92a:	66 0f       	add	r22, r22
 92c:	77 1f       	adc	r23, r23
 92e:	8a 95       	dec	r24
 930:	e2 f7       	brpl	.-8      	; 0x92a <DIO_ConfigChannel+0x17c>
 932:	cb 01       	movw	r24, r22
 934:	84 2b       	or	r24, r20
 936:	82 b9       	out	0x02, r24	; 2
 938:	08 95       	ret
 93a:	e1 e6       	ldi	r30, 0x61	; 97
 93c:	f0 e0       	ldi	r31, 0x00	; 0
 93e:	40 81       	ld	r20, Z
 940:	21 e0       	ldi	r18, 0x01	; 1
 942:	30 e0       	ldi	r19, 0x00	; 0
 944:	b9 01       	movw	r22, r18
 946:	02 c0       	rjmp	.+4      	; 0x94c <DIO_ConfigChannel+0x19e>
 948:	66 0f       	add	r22, r22
 94a:	77 1f       	adc	r23, r23
 94c:	8a 95       	dec	r24
 94e:	e2 f7       	brpl	.-8      	; 0x948 <DIO_ConfigChannel+0x19a>
 950:	cb 01       	movw	r24, r22
 952:	84 2b       	or	r24, r20
 954:	80 83       	st	Z, r24
 956:	08 95       	ret
 958:	e4 e6       	ldi	r30, 0x64	; 100
 95a:	f0 e0       	ldi	r31, 0x00	; 0
 95c:	40 81       	ld	r20, Z
 95e:	21 e0       	ldi	r18, 0x01	; 1
 960:	30 e0       	ldi	r19, 0x00	; 0
 962:	b9 01       	movw	r22, r18
 964:	02 c0       	rjmp	.+4      	; 0x96a <DIO_ConfigChannel+0x1bc>
 966:	66 0f       	add	r22, r22
 968:	77 1f       	adc	r23, r23
 96a:	8a 95       	dec	r24
 96c:	e2 f7       	brpl	.-8      	; 0x966 <DIO_ConfigChannel+0x1b8>
 96e:	cb 01       	movw	r24, r22
 970:	84 2b       	or	r24, r20
 972:	80 83       	st	Z, r24
 974:	08 95       	ret

00000976 <__vector_1>:
 976:	1f 92       	push	r1
 978:	0f 92       	push	r0
 97a:	0f b6       	in	r0, 0x3f	; 63
 97c:	0f 92       	push	r0
 97e:	11 24       	eor	r1, r1
 980:	0b b6       	in	r0, 0x3b	; 59
 982:	0f 92       	push	r0
 984:	2f 93       	push	r18
 986:	3f 93       	push	r19
 988:	4f 93       	push	r20
 98a:	5f 93       	push	r21
 98c:	6f 93       	push	r22
 98e:	7f 93       	push	r23
 990:	8f 93       	push	r24
 992:	9f 93       	push	r25
 994:	af 93       	push	r26
 996:	bf 93       	push	r27
 998:	ef 93       	push	r30
 99a:	ff 93       	push	r31
 99c:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <EXT_INTERRUPT0_FUNCTION_PTR>
 9a0:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <EXT_INTERRUPT0_FUNCTION_PTR+0x1>
 9a4:	09 95       	icall
 9a6:	ff 91       	pop	r31
 9a8:	ef 91       	pop	r30
 9aa:	bf 91       	pop	r27
 9ac:	af 91       	pop	r26
 9ae:	9f 91       	pop	r25
 9b0:	8f 91       	pop	r24
 9b2:	7f 91       	pop	r23
 9b4:	6f 91       	pop	r22
 9b6:	5f 91       	pop	r21
 9b8:	4f 91       	pop	r20
 9ba:	3f 91       	pop	r19
 9bc:	2f 91       	pop	r18
 9be:	0f 90       	pop	r0
 9c0:	0b be       	out	0x3b, r0	; 59
 9c2:	0f 90       	pop	r0
 9c4:	0f be       	out	0x3f, r0	; 63
 9c6:	0f 90       	pop	r0
 9c8:	1f 90       	pop	r1
 9ca:	18 95       	reti

000009cc <__vector_2>:
 9cc:	1f 92       	push	r1
 9ce:	0f 92       	push	r0
 9d0:	0f b6       	in	r0, 0x3f	; 63
 9d2:	0f 92       	push	r0
 9d4:	11 24       	eor	r1, r1
 9d6:	0b b6       	in	r0, 0x3b	; 59
 9d8:	0f 92       	push	r0
 9da:	2f 93       	push	r18
 9dc:	3f 93       	push	r19
 9de:	4f 93       	push	r20
 9e0:	5f 93       	push	r21
 9e2:	6f 93       	push	r22
 9e4:	7f 93       	push	r23
 9e6:	8f 93       	push	r24
 9e8:	9f 93       	push	r25
 9ea:	af 93       	push	r26
 9ec:	bf 93       	push	r27
 9ee:	ef 93       	push	r30
 9f0:	ff 93       	push	r31
 9f2:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <EXT_INTERRUPT1_FUNCTION_PTR>
 9f6:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <EXT_INTERRUPT1_FUNCTION_PTR+0x1>
 9fa:	09 95       	icall
 9fc:	ff 91       	pop	r31
 9fe:	ef 91       	pop	r30
 a00:	bf 91       	pop	r27
 a02:	af 91       	pop	r26
 a04:	9f 91       	pop	r25
 a06:	8f 91       	pop	r24
 a08:	7f 91       	pop	r23
 a0a:	6f 91       	pop	r22
 a0c:	5f 91       	pop	r21
 a0e:	4f 91       	pop	r20
 a10:	3f 91       	pop	r19
 a12:	2f 91       	pop	r18
 a14:	0f 90       	pop	r0
 a16:	0b be       	out	0x3b, r0	; 59
 a18:	0f 90       	pop	r0
 a1a:	0f be       	out	0x3f, r0	; 63
 a1c:	0f 90       	pop	r0
 a1e:	1f 90       	pop	r1
 a20:	18 95       	reti

00000a22 <__vector_3>:
 a22:	1f 92       	push	r1
 a24:	0f 92       	push	r0
 a26:	0f b6       	in	r0, 0x3f	; 63
 a28:	0f 92       	push	r0
 a2a:	11 24       	eor	r1, r1
 a2c:	0b b6       	in	r0, 0x3b	; 59
 a2e:	0f 92       	push	r0
 a30:	2f 93       	push	r18
 a32:	3f 93       	push	r19
 a34:	4f 93       	push	r20
 a36:	5f 93       	push	r21
 a38:	6f 93       	push	r22
 a3a:	7f 93       	push	r23
 a3c:	8f 93       	push	r24
 a3e:	9f 93       	push	r25
 a40:	af 93       	push	r26
 a42:	bf 93       	push	r27
 a44:	ef 93       	push	r30
 a46:	ff 93       	push	r31
 a48:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <EXT_INTERRUPT2_FUNCTION_PTR>
 a4c:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <EXT_INTERRUPT2_FUNCTION_PTR+0x1>
 a50:	09 95       	icall
 a52:	ff 91       	pop	r31
 a54:	ef 91       	pop	r30
 a56:	bf 91       	pop	r27
 a58:	af 91       	pop	r26
 a5a:	9f 91       	pop	r25
 a5c:	8f 91       	pop	r24
 a5e:	7f 91       	pop	r23
 a60:	6f 91       	pop	r22
 a62:	5f 91       	pop	r21
 a64:	4f 91       	pop	r20
 a66:	3f 91       	pop	r19
 a68:	2f 91       	pop	r18
 a6a:	0f 90       	pop	r0
 a6c:	0b be       	out	0x3b, r0	; 59
 a6e:	0f 90       	pop	r0
 a70:	0f be       	out	0x3f, r0	; 63
 a72:	0f 90       	pop	r0
 a74:	1f 90       	pop	r1
 a76:	18 95       	reti

00000a78 <__vector_4>:
 a78:	1f 92       	push	r1
 a7a:	0f 92       	push	r0
 a7c:	0f b6       	in	r0, 0x3f	; 63
 a7e:	0f 92       	push	r0
 a80:	11 24       	eor	r1, r1
 a82:	0b b6       	in	r0, 0x3b	; 59
 a84:	0f 92       	push	r0
 a86:	2f 93       	push	r18
 a88:	3f 93       	push	r19
 a8a:	4f 93       	push	r20
 a8c:	5f 93       	push	r21
 a8e:	6f 93       	push	r22
 a90:	7f 93       	push	r23
 a92:	8f 93       	push	r24
 a94:	9f 93       	push	r25
 a96:	af 93       	push	r26
 a98:	bf 93       	push	r27
 a9a:	ef 93       	push	r30
 a9c:	ff 93       	push	r31
 a9e:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <EXT_INTERRUPT3_FUNCTION_PTR>
 aa2:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <EXT_INTERRUPT3_FUNCTION_PTR+0x1>
 aa6:	09 95       	icall
 aa8:	ff 91       	pop	r31
 aaa:	ef 91       	pop	r30
 aac:	bf 91       	pop	r27
 aae:	af 91       	pop	r26
 ab0:	9f 91       	pop	r25
 ab2:	8f 91       	pop	r24
 ab4:	7f 91       	pop	r23
 ab6:	6f 91       	pop	r22
 ab8:	5f 91       	pop	r21
 aba:	4f 91       	pop	r20
 abc:	3f 91       	pop	r19
 abe:	2f 91       	pop	r18
 ac0:	0f 90       	pop	r0
 ac2:	0b be       	out	0x3b, r0	; 59
 ac4:	0f 90       	pop	r0
 ac6:	0f be       	out	0x3f, r0	; 63
 ac8:	0f 90       	pop	r0
 aca:	1f 90       	pop	r1
 acc:	18 95       	reti

00000ace <__vector_5>:
 ace:	1f 92       	push	r1
 ad0:	0f 92       	push	r0
 ad2:	0f b6       	in	r0, 0x3f	; 63
 ad4:	0f 92       	push	r0
 ad6:	11 24       	eor	r1, r1
 ad8:	0b b6       	in	r0, 0x3b	; 59
 ada:	0f 92       	push	r0
 adc:	2f 93       	push	r18
 ade:	3f 93       	push	r19
 ae0:	4f 93       	push	r20
 ae2:	5f 93       	push	r21
 ae4:	6f 93       	push	r22
 ae6:	7f 93       	push	r23
 ae8:	8f 93       	push	r24
 aea:	9f 93       	push	r25
 aec:	af 93       	push	r26
 aee:	bf 93       	push	r27
 af0:	ef 93       	push	r30
 af2:	ff 93       	push	r31
 af4:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <EXT_INTERRUPT4_FUNCTION_PTR>
 af8:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <EXT_INTERRUPT4_FUNCTION_PTR+0x1>
 afc:	09 95       	icall
 afe:	ff 91       	pop	r31
 b00:	ef 91       	pop	r30
 b02:	bf 91       	pop	r27
 b04:	af 91       	pop	r26
 b06:	9f 91       	pop	r25
 b08:	8f 91       	pop	r24
 b0a:	7f 91       	pop	r23
 b0c:	6f 91       	pop	r22
 b0e:	5f 91       	pop	r21
 b10:	4f 91       	pop	r20
 b12:	3f 91       	pop	r19
 b14:	2f 91       	pop	r18
 b16:	0f 90       	pop	r0
 b18:	0b be       	out	0x3b, r0	; 59
 b1a:	0f 90       	pop	r0
 b1c:	0f be       	out	0x3f, r0	; 63
 b1e:	0f 90       	pop	r0
 b20:	1f 90       	pop	r1
 b22:	18 95       	reti

00000b24 <__vector_6>:
 b24:	1f 92       	push	r1
 b26:	0f 92       	push	r0
 b28:	0f b6       	in	r0, 0x3f	; 63
 b2a:	0f 92       	push	r0
 b2c:	11 24       	eor	r1, r1
 b2e:	0b b6       	in	r0, 0x3b	; 59
 b30:	0f 92       	push	r0
 b32:	2f 93       	push	r18
 b34:	3f 93       	push	r19
 b36:	4f 93       	push	r20
 b38:	5f 93       	push	r21
 b3a:	6f 93       	push	r22
 b3c:	7f 93       	push	r23
 b3e:	8f 93       	push	r24
 b40:	9f 93       	push	r25
 b42:	af 93       	push	r26
 b44:	bf 93       	push	r27
 b46:	ef 93       	push	r30
 b48:	ff 93       	push	r31
 b4a:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <EXT_INTERRUPT5_FUNCTION_PTR>
 b4e:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <EXT_INTERRUPT5_FUNCTION_PTR+0x1>
 b52:	09 95       	icall
 b54:	ff 91       	pop	r31
 b56:	ef 91       	pop	r30
 b58:	bf 91       	pop	r27
 b5a:	af 91       	pop	r26
 b5c:	9f 91       	pop	r25
 b5e:	8f 91       	pop	r24
 b60:	7f 91       	pop	r23
 b62:	6f 91       	pop	r22
 b64:	5f 91       	pop	r21
 b66:	4f 91       	pop	r20
 b68:	3f 91       	pop	r19
 b6a:	2f 91       	pop	r18
 b6c:	0f 90       	pop	r0
 b6e:	0b be       	out	0x3b, r0	; 59
 b70:	0f 90       	pop	r0
 b72:	0f be       	out	0x3f, r0	; 63
 b74:	0f 90       	pop	r0
 b76:	1f 90       	pop	r1
 b78:	18 95       	reti

00000b7a <__vector_7>:
 b7a:	1f 92       	push	r1
 b7c:	0f 92       	push	r0
 b7e:	0f b6       	in	r0, 0x3f	; 63
 b80:	0f 92       	push	r0
 b82:	11 24       	eor	r1, r1
 b84:	0b b6       	in	r0, 0x3b	; 59
 b86:	0f 92       	push	r0
 b88:	2f 93       	push	r18
 b8a:	3f 93       	push	r19
 b8c:	4f 93       	push	r20
 b8e:	5f 93       	push	r21
 b90:	6f 93       	push	r22
 b92:	7f 93       	push	r23
 b94:	8f 93       	push	r24
 b96:	9f 93       	push	r25
 b98:	af 93       	push	r26
 b9a:	bf 93       	push	r27
 b9c:	ef 93       	push	r30
 b9e:	ff 93       	push	r31
 ba0:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <EXT_INTERRUPT6_FUNCTION_PTR>
 ba4:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <EXT_INTERRUPT6_FUNCTION_PTR+0x1>
 ba8:	09 95       	icall
 baa:	ff 91       	pop	r31
 bac:	ef 91       	pop	r30
 bae:	bf 91       	pop	r27
 bb0:	af 91       	pop	r26
 bb2:	9f 91       	pop	r25
 bb4:	8f 91       	pop	r24
 bb6:	7f 91       	pop	r23
 bb8:	6f 91       	pop	r22
 bba:	5f 91       	pop	r21
 bbc:	4f 91       	pop	r20
 bbe:	3f 91       	pop	r19
 bc0:	2f 91       	pop	r18
 bc2:	0f 90       	pop	r0
 bc4:	0b be       	out	0x3b, r0	; 59
 bc6:	0f 90       	pop	r0
 bc8:	0f be       	out	0x3f, r0	; 63
 bca:	0f 90       	pop	r0
 bcc:	1f 90       	pop	r1
 bce:	18 95       	reti

00000bd0 <__vector_8>:
 bd0:	1f 92       	push	r1
 bd2:	0f 92       	push	r0
 bd4:	0f b6       	in	r0, 0x3f	; 63
 bd6:	0f 92       	push	r0
 bd8:	11 24       	eor	r1, r1
 bda:	0b b6       	in	r0, 0x3b	; 59
 bdc:	0f 92       	push	r0
 bde:	2f 93       	push	r18
 be0:	3f 93       	push	r19
 be2:	4f 93       	push	r20
 be4:	5f 93       	push	r21
 be6:	6f 93       	push	r22
 be8:	7f 93       	push	r23
 bea:	8f 93       	push	r24
 bec:	9f 93       	push	r25
 bee:	af 93       	push	r26
 bf0:	bf 93       	push	r27
 bf2:	ef 93       	push	r30
 bf4:	ff 93       	push	r31
 bf6:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <EXT_INTERRUPT7_FUNCTION_PTR>
 bfa:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <EXT_INTERRUPT7_FUNCTION_PTR+0x1>
 bfe:	09 95       	icall
 c00:	ff 91       	pop	r31
 c02:	ef 91       	pop	r30
 c04:	bf 91       	pop	r27
 c06:	af 91       	pop	r26
 c08:	9f 91       	pop	r25
 c0a:	8f 91       	pop	r24
 c0c:	7f 91       	pop	r23
 c0e:	6f 91       	pop	r22
 c10:	5f 91       	pop	r21
 c12:	4f 91       	pop	r20
 c14:	3f 91       	pop	r19
 c16:	2f 91       	pop	r18
 c18:	0f 90       	pop	r0
 c1a:	0b be       	out	0x3b, r0	; 59
 c1c:	0f 90       	pop	r0
 c1e:	0f be       	out	0x3f, r0	; 63
 c20:	0f 90       	pop	r0
 c22:	1f 90       	pop	r1
 c24:	18 95       	reti

00000c26 <SPI_Init>:
	{
		SPI_Master_TransmitChar(*String);
		_delay_ms(150);
		String++;
	}
}
 c26:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 c2a:	88 23       	and	r24, r24
 c2c:	09 f4       	brne	.+2      	; 0xc30 <SPI_Init+0xa>
 c2e:	47 c0       	rjmp	.+142    	; 0xcbe <SPI_Init+0x98>
 c30:	81 30       	cpi	r24, 0x01	; 1
 c32:	09 f0       	breq	.+2      	; 0xc36 <SPI_Init+0x10>
 c34:	84 c0       	rjmp	.+264    	; 0xd3e <SPI_Init+0x118>
 c36:	61 e0       	ldi	r22, 0x01	; 1
 c38:	8a e0       	ldi	r24, 0x0A	; 10
 c3a:	b9 dd       	rcall	.-1166   	; 0x7ae <DIO_ConfigChannel>
 c3c:	61 e0       	ldi	r22, 0x01	; 1
 c3e:	89 e0       	ldi	r24, 0x09	; 9
 c40:	b6 dd       	rcall	.-1172   	; 0x7ae <DIO_ConfigChannel>
 c42:	61 e0       	ldi	r22, 0x01	; 1
 c44:	88 e0       	ldi	r24, 0x08	; 8
 c46:	b3 dd       	rcall	.-1178   	; 0x7ae <DIO_ConfigChannel>
 c48:	60 e0       	ldi	r22, 0x00	; 0
 c4a:	8b e0       	ldi	r24, 0x0B	; 11
 c4c:	b0 dd       	rcall	.-1184   	; 0x7ae <DIO_ConfigChannel>
 c4e:	61 e0       	ldi	r22, 0x01	; 1
 c50:	88 e0       	ldi	r24, 0x08	; 8
 c52:	c9 dc       	rcall	.-1646   	; 0x5e6 <DIO_WriteChannel>
 c54:	2d b1       	in	r18, 0x0d	; 13
 c56:	e0 e0       	ldi	r30, 0x00	; 0
 c58:	f1 e0       	ldi	r31, 0x01	; 1
 c5a:	90 81       	ld	r25, Z
 c5c:	30 e1       	ldi	r19, 0x10	; 16
 c5e:	93 9f       	mul	r25, r19
 c60:	c0 01       	movw	r24, r0
 c62:	11 24       	eor	r1, r1
 c64:	82 2b       	or	r24, r18
 c66:	8d b9       	out	0x0d, r24	; 13
 c68:	9e b1       	in	r25, 0x0e	; 14
 c6a:	82 81       	ldd	r24, Z+2	; 0x02
 c6c:	89 2b       	or	r24, r25
 c6e:	8e b9       	out	0x0e, r24	; 14
 c70:	9d b1       	in	r25, 0x0d	; 13
 c72:	81 81       	ldd	r24, Z+1	; 0x01
 c74:	89 2b       	or	r24, r25
 c76:	8d b9       	out	0x0d, r24	; 13
 c78:	2d b1       	in	r18, 0x0d	; 13
 c7a:	93 81       	ldd	r25, Z+3	; 0x03
 c7c:	30 e2       	ldi	r19, 0x20	; 32
 c7e:	93 9f       	mul	r25, r19
 c80:	c0 01       	movw	r24, r0
 c82:	11 24       	eor	r1, r1
 c84:	82 2b       	or	r24, r18
 c86:	8d b9       	out	0x0d, r24	; 13
 c88:	2d b1       	in	r18, 0x0d	; 13
 c8a:	94 81       	ldd	r25, Z+4	; 0x04
 c8c:	30 e8       	ldi	r19, 0x80	; 128
 c8e:	93 9f       	mul	r25, r19
 c90:	c0 01       	movw	r24, r0
 c92:	11 24       	eor	r1, r1
 c94:	82 2b       	or	r24, r18
 c96:	8d b9       	out	0x0d, r24	; 13
 c98:	2d b1       	in	r18, 0x0d	; 13
 c9a:	96 81       	ldd	r25, Z+6	; 0x06
 c9c:	89 2f       	mov	r24, r25
 c9e:	90 e0       	ldi	r25, 0x00	; 0
 ca0:	88 0f       	add	r24, r24
 ca2:	99 1f       	adc	r25, r25
 ca4:	88 0f       	add	r24, r24
 ca6:	99 1f       	adc	r25, r25
 ca8:	82 2b       	or	r24, r18
 caa:	8d b9       	out	0x0d, r24	; 13
 cac:	2d b1       	in	r18, 0x0d	; 13
 cae:	95 81       	ldd	r25, Z+5	; 0x05
 cb0:	30 e4       	ldi	r19, 0x40	; 64
 cb2:	93 9f       	mul	r25, r19
 cb4:	c0 01       	movw	r24, r0
 cb6:	11 24       	eor	r1, r1
 cb8:	82 2b       	or	r24, r18
 cba:	8d b9       	out	0x0d, r24	; 13
 cbc:	08 95       	ret
 cbe:	60 e0       	ldi	r22, 0x00	; 0
 cc0:	8a e0       	ldi	r24, 0x0A	; 10
 cc2:	75 dd       	rcall	.-1302   	; 0x7ae <DIO_ConfigChannel>
 cc4:	60 e0       	ldi	r22, 0x00	; 0
 cc6:	89 e0       	ldi	r24, 0x09	; 9
 cc8:	72 dd       	rcall	.-1308   	; 0x7ae <DIO_ConfigChannel>
 cca:	60 e0       	ldi	r22, 0x00	; 0
 ccc:	88 e0       	ldi	r24, 0x08	; 8
 cce:	6f dd       	rcall	.-1314   	; 0x7ae <DIO_ConfigChannel>
 cd0:	61 e0       	ldi	r22, 0x01	; 1
 cd2:	8b e0       	ldi	r24, 0x0B	; 11
 cd4:	6c dd       	rcall	.-1320   	; 0x7ae <DIO_ConfigChannel>
 cd6:	2d b1       	in	r18, 0x0d	; 13
 cd8:	e0 e0       	ldi	r30, 0x00	; 0
 cda:	f1 e0       	ldi	r31, 0x01	; 1
 cdc:	90 81       	ld	r25, Z
 cde:	30 e1       	ldi	r19, 0x10	; 16
 ce0:	93 9f       	mul	r25, r19
 ce2:	c0 01       	movw	r24, r0
 ce4:	11 24       	eor	r1, r1
 ce6:	82 2b       	or	r24, r18
 ce8:	8d b9       	out	0x0d, r24	; 13
 cea:	9e b1       	in	r25, 0x0e	; 14
 cec:	82 81       	ldd	r24, Z+2	; 0x02
 cee:	89 2b       	or	r24, r25
 cf0:	8e b9       	out	0x0e, r24	; 14
 cf2:	9d b1       	in	r25, 0x0d	; 13
 cf4:	81 81       	ldd	r24, Z+1	; 0x01
 cf6:	89 2b       	or	r24, r25
 cf8:	8d b9       	out	0x0d, r24	; 13
 cfa:	2d b1       	in	r18, 0x0d	; 13
 cfc:	93 81       	ldd	r25, Z+3	; 0x03
 cfe:	30 e2       	ldi	r19, 0x20	; 32
 d00:	93 9f       	mul	r25, r19
 d02:	c0 01       	movw	r24, r0
 d04:	11 24       	eor	r1, r1
 d06:	82 2b       	or	r24, r18
 d08:	8d b9       	out	0x0d, r24	; 13
 d0a:	2d b1       	in	r18, 0x0d	; 13
 d0c:	94 81       	ldd	r25, Z+4	; 0x04
 d0e:	30 e8       	ldi	r19, 0x80	; 128
 d10:	93 9f       	mul	r25, r19
 d12:	c0 01       	movw	r24, r0
 d14:	11 24       	eor	r1, r1
 d16:	82 2b       	or	r24, r18
 d18:	8d b9       	out	0x0d, r24	; 13
 d1a:	2d b1       	in	r18, 0x0d	; 13
 d1c:	96 81       	ldd	r25, Z+6	; 0x06
 d1e:	89 2f       	mov	r24, r25
 d20:	90 e0       	ldi	r25, 0x00	; 0
 d22:	88 0f       	add	r24, r24
 d24:	99 1f       	adc	r25, r25
 d26:	88 0f       	add	r24, r24
 d28:	99 1f       	adc	r25, r25
 d2a:	82 2b       	or	r24, r18
 d2c:	8d b9       	out	0x0d, r24	; 13
 d2e:	2d b1       	in	r18, 0x0d	; 13
 d30:	95 81       	ldd	r25, Z+5	; 0x05
 d32:	30 e4       	ldi	r19, 0x40	; 64
 d34:	93 9f       	mul	r25, r19
 d36:	c0 01       	movw	r24, r0
 d38:	11 24       	eor	r1, r1
 d3a:	82 2b       	or	r24, r18
 d3c:	8d b9       	out	0x0d, r24	; 13
 d3e:	08 95       	ret

00000d40 <SPI_Master_TransmitChar>:
 d40:	cf 93       	push	r28
 d42:	c8 2f       	mov	r28, r24
 d44:	60 e0       	ldi	r22, 0x00	; 0
 d46:	88 e0       	ldi	r24, 0x08	; 8
 d48:	4e dc       	rcall	.-1892   	; 0x5e6 <DIO_WriteChannel>
 d4a:	cf b9       	out	0x0f, r28	; 15
 d4c:	77 9b       	sbis	0x0e, 7	; 14
 d4e:	fe cf       	rjmp	.-4      	; 0xd4c <SPI_Master_TransmitChar+0xc>
 d50:	8f b1       	in	r24, 0x0f	; 15
 d52:	cf 91       	pop	r28
 d54:	08 95       	ret

00000d56 <SPI_Cannel_State>:

void SPI_Cannel_State(DIO_ChannelTypes ChannelID,SPI_State State)
{
 d56:	cf 93       	push	r28
 d58:	df 93       	push	r29
 d5a:	c8 2f       	mov	r28, r24
 d5c:	d6 2f       	mov	r29, r22
	DIO_ConfigChannel(ChannelID,OUTPUT);
 d5e:	61 e0       	ldi	r22, 0x01	; 1
 d60:	26 dd       	rcall	.-1460   	; 0x7ae <DIO_ConfigChannel>
	switch (State)
 d62:	dd 23       	and	r29, r29
 d64:	19 f0       	breq	.+6      	; 0xd6c <SPI_Cannel_State+0x16>
 d66:	d1 30       	cpi	r29, 0x01	; 1
 d68:	29 f0       	breq	.+10     	; 0xd74 <SPI_Cannel_State+0x1e>
 d6a:	07 c0       	rjmp	.+14     	; 0xd7a <SPI_Cannel_State+0x24>
	{
		case SPI_Disable:DIO_WriteChannel(ChannelID,STD_HIGH);break;
 d6c:	61 e0       	ldi	r22, 0x01	; 1
 d6e:	8c 2f       	mov	r24, r28
 d70:	3a dc       	rcall	.-1932   	; 0x5e6 <DIO_WriteChannel>
 d72:	03 c0       	rjmp	.+6      	; 0xd7a <SPI_Cannel_State+0x24>
		case SPI_Enable:DIO_WriteChannel(ChannelID,STD_LOW);break;
 d74:	60 e0       	ldi	r22, 0x00	; 0
 d76:	8c 2f       	mov	r24, r28
 d78:	36 dc       	rcall	.-1940   	; 0x5e6 <DIO_WriteChannel>
	}
 d7a:	df 91       	pop	r29
 d7c:	cf 91       	pop	r28
 d7e:	08 95       	ret

00000d80 <UART0_Init>:
 d80:	a5 e9       	ldi	r26, 0x95	; 149
 d82:	b0 e0       	ldi	r27, 0x00	; 0
 d84:	2c 91       	ld	r18, X
 d86:	e7 e0       	ldi	r30, 0x07	; 7
 d88:	f1 e0       	ldi	r31, 0x01	; 1
 d8a:	90 81       	ld	r25, Z
 d8c:	30 e4       	ldi	r19, 0x40	; 64
 d8e:	93 9f       	mul	r25, r19
 d90:	c0 01       	movw	r24, r0
 d92:	11 24       	eor	r1, r1
 d94:	82 2b       	or	r24, r18
 d96:	8c 93       	st	X, r24
 d98:	2c 91       	ld	r18, X
 d9a:	91 81       	ldd	r25, Z+1	; 0x01
 d9c:	30 e1       	ldi	r19, 0x10	; 16
 d9e:	93 9f       	mul	r25, r19
 da0:	c0 01       	movw	r24, r0
 da2:	11 24       	eor	r1, r1
 da4:	82 2b       	or	r24, r18
 da6:	8c 93       	st	X, r24
 da8:	2c 91       	ld	r18, X
 daa:	92 81       	ldd	r25, Z+2	; 0x02
 dac:	89 2f       	mov	r24, r25
 dae:	90 e0       	ldi	r25, 0x00	; 0
 db0:	88 0f       	add	r24, r24
 db2:	99 1f       	adc	r25, r25
 db4:	88 0f       	add	r24, r24
 db6:	99 1f       	adc	r25, r25
 db8:	88 0f       	add	r24, r24
 dba:	99 1f       	adc	r25, r25
 dbc:	82 2b       	or	r24, r18
 dbe:	8c 93       	st	X, r24
 dc0:	2a b1       	in	r18, 0x0a	; 10
 dc2:	94 81       	ldd	r25, Z+4	; 0x04
 dc4:	89 2f       	mov	r24, r25
 dc6:	90 e0       	ldi	r25, 0x00	; 0
 dc8:	88 0f       	add	r24, r24
 dca:	99 1f       	adc	r25, r25
 dcc:	88 0f       	add	r24, r24
 dce:	99 1f       	adc	r25, r25
 dd0:	88 0f       	add	r24, r24
 dd2:	99 1f       	adc	r25, r25
 dd4:	82 2b       	or	r24, r18
 dd6:	8a b9       	out	0x0a, r24	; 10
 dd8:	2a b1       	in	r18, 0x0a	; 10
 dda:	95 81       	ldd	r25, Z+5	; 0x05
 ddc:	30 e4       	ldi	r19, 0x40	; 64
 dde:	93 9f       	mul	r25, r19
 de0:	c0 01       	movw	r24, r0
 de2:	11 24       	eor	r1, r1
 de4:	82 2b       	or	r24, r18
 de6:	8a b9       	out	0x0a, r24	; 10
 de8:	2a b1       	in	r18, 0x0a	; 10
 dea:	96 81       	ldd	r25, Z+6	; 0x06
 dec:	30 e1       	ldi	r19, 0x10	; 16
 dee:	93 9f       	mul	r25, r19
 df0:	c0 01       	movw	r24, r0
 df2:	11 24       	eor	r1, r1
 df4:	82 2b       	or	r24, r18
 df6:	8a b9       	out	0x0a, r24	; 10
 df8:	2a b1       	in	r18, 0x0a	; 10
 dfa:	97 81       	ldd	r25, Z+7	; 0x07
 dfc:	30 e8       	ldi	r19, 0x80	; 128
 dfe:	93 9f       	mul	r25, r19
 e00:	c0 01       	movw	r24, r0
 e02:	11 24       	eor	r1, r1
 e04:	82 2b       	or	r24, r18
 e06:	8a b9       	out	0x0a, r24	; 10
 e08:	80 85       	ldd	r24, Z+8	; 0x08
 e0a:	88 23       	and	r24, r24
 e0c:	19 f0       	breq	.+6      	; 0xe14 <UART0_Init+0x94>
 e0e:	81 30       	cpi	r24, 0x01	; 1
 e10:	31 f1       	breq	.+76     	; 0xe5e <UART0_Init+0xde>
 e12:	46 c0       	rjmp	.+140    	; 0xea0 <UART0_Init+0x120>
 e14:	8b b1       	in	r24, 0x0b	; 11
 e16:	8d 7f       	andi	r24, 0xFD	; 253
 e18:	8b b9       	out	0x0b, r24	; 11
 e1a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <UART0_Cfg+0x9>
 e1e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <UART0_Cfg+0xa>
 e22:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <UART0_Cfg+0xb>
 e26:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <UART0_Cfg+0xc>
 e2a:	88 0f       	add	r24, r24
 e2c:	99 1f       	adc	r25, r25
 e2e:	aa 1f       	adc	r26, r26
 e30:	bb 1f       	adc	r27, r27
 e32:	88 0f       	add	r24, r24
 e34:	99 1f       	adc	r25, r25
 e36:	aa 1f       	adc	r26, r26
 e38:	bb 1f       	adc	r27, r27
 e3a:	9c 01       	movw	r18, r24
 e3c:	ad 01       	movw	r20, r26
 e3e:	22 0f       	add	r18, r18
 e40:	33 1f       	adc	r19, r19
 e42:	44 1f       	adc	r20, r20
 e44:	55 1f       	adc	r21, r21
 e46:	22 0f       	add	r18, r18
 e48:	33 1f       	adc	r19, r19
 e4a:	44 1f       	adc	r20, r20
 e4c:	55 1f       	adc	r21, r21
 e4e:	60 e0       	ldi	r22, 0x00	; 0
 e50:	74 e2       	ldi	r23, 0x24	; 36
 e52:	84 ef       	ldi	r24, 0xF4	; 244
 e54:	90 e0       	ldi	r25, 0x00	; 0
 e56:	4b d0       	rcall	.+150    	; 0xeee <__udivmodsi4>
 e58:	21 50       	subi	r18, 0x01	; 1
 e5a:	31 09       	sbc	r19, r1
 e5c:	23 c0       	rjmp	.+70     	; 0xea4 <UART0_Init+0x124>
 e5e:	8b b1       	in	r24, 0x0b	; 11
 e60:	82 60       	ori	r24, 0x02	; 2
 e62:	8b b9       	out	0x0b, r24	; 11
 e64:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <UART0_Cfg+0x9>
 e68:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <UART0_Cfg+0xa>
 e6c:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <UART0_Cfg+0xb>
 e70:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <UART0_Cfg+0xc>
 e74:	88 0f       	add	r24, r24
 e76:	99 1f       	adc	r25, r25
 e78:	aa 1f       	adc	r26, r26
 e7a:	bb 1f       	adc	r27, r27
 e7c:	88 0f       	add	r24, r24
 e7e:	99 1f       	adc	r25, r25
 e80:	aa 1f       	adc	r26, r26
 e82:	bb 1f       	adc	r27, r27
 e84:	9c 01       	movw	r18, r24
 e86:	ad 01       	movw	r20, r26
 e88:	22 0f       	add	r18, r18
 e8a:	33 1f       	adc	r19, r19
 e8c:	44 1f       	adc	r20, r20
 e8e:	55 1f       	adc	r21, r21
 e90:	60 e0       	ldi	r22, 0x00	; 0
 e92:	74 e2       	ldi	r23, 0x24	; 36
 e94:	84 ef       	ldi	r24, 0xF4	; 244
 e96:	90 e0       	ldi	r25, 0x00	; 0
 e98:	2a d0       	rcall	.+84     	; 0xeee <__udivmodsi4>
 e9a:	21 50       	subi	r18, 0x01	; 1
 e9c:	31 09       	sbc	r19, r1
 e9e:	02 c0       	rjmp	.+4      	; 0xea4 <UART0_Init+0x124>
 ea0:	20 e0       	ldi	r18, 0x00	; 0
 ea2:	30 e0       	ldi	r19, 0x00	; 0
 ea4:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 ea8:	29 b9       	out	0x09, r18	; 9
 eaa:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <UART0_Cfg+0x3>
 eae:	94 30       	cpi	r25, 0x04	; 4
 eb0:	61 f4       	brne	.+24     	; 0xeca <UART0_Init+0x14a>
 eb2:	e5 e9       	ldi	r30, 0x95	; 149
 eb4:	f0 e0       	ldi	r31, 0x00	; 0
 eb6:	80 81       	ld	r24, Z
 eb8:	82 60       	ori	r24, 0x02	; 2
 eba:	80 83       	st	Z, r24
 ebc:	80 81       	ld	r24, Z
 ebe:	84 60       	ori	r24, 0x04	; 4
 ec0:	80 83       	st	Z, r24
 ec2:	8a b1       	in	r24, 0x0a	; 10
 ec4:	84 60       	ori	r24, 0x04	; 4
 ec6:	8a b9       	out	0x0a, r24	; 10
 ec8:	08 95       	ret
 eca:	e5 e9       	ldi	r30, 0x95	; 149
 ecc:	f0 e0       	ldi	r31, 0x00	; 0
 ece:	20 81       	ld	r18, Z
 ed0:	89 2f       	mov	r24, r25
 ed2:	90 e0       	ldi	r25, 0x00	; 0
 ed4:	88 0f       	add	r24, r24
 ed6:	99 1f       	adc	r25, r25
 ed8:	82 2b       	or	r24, r18
 eda:	80 83       	st	Z, r24
 edc:	08 95       	ret

00000ede <UART0_Transmit>:
 ede:	5d 9b       	sbis	0x0b, 5	; 11
 ee0:	fe cf       	rjmp	.-4      	; 0xede <UART0_Transmit>
 ee2:	8c b9       	out	0x0c, r24	; 12
 ee4:	08 95       	ret

00000ee6 <UART0_Receive>:
 ee6:	5f 9b       	sbis	0x0b, 7	; 11
 ee8:	fe cf       	rjmp	.-4      	; 0xee6 <UART0_Receive>
 eea:	8c b1       	in	r24, 0x0c	; 12
 eec:	08 95       	ret

00000eee <__udivmodsi4>:
 eee:	a1 e2       	ldi	r26, 0x21	; 33
 ef0:	1a 2e       	mov	r1, r26
 ef2:	aa 1b       	sub	r26, r26
 ef4:	bb 1b       	sub	r27, r27
 ef6:	fd 01       	movw	r30, r26
 ef8:	0d c0       	rjmp	.+26     	; 0xf14 <__udivmodsi4_ep>

00000efa <__udivmodsi4_loop>:
 efa:	aa 1f       	adc	r26, r26
 efc:	bb 1f       	adc	r27, r27
 efe:	ee 1f       	adc	r30, r30
 f00:	ff 1f       	adc	r31, r31
 f02:	a2 17       	cp	r26, r18
 f04:	b3 07       	cpc	r27, r19
 f06:	e4 07       	cpc	r30, r20
 f08:	f5 07       	cpc	r31, r21
 f0a:	20 f0       	brcs	.+8      	; 0xf14 <__udivmodsi4_ep>
 f0c:	a2 1b       	sub	r26, r18
 f0e:	b3 0b       	sbc	r27, r19
 f10:	e4 0b       	sbc	r30, r20
 f12:	f5 0b       	sbc	r31, r21

00000f14 <__udivmodsi4_ep>:
 f14:	66 1f       	adc	r22, r22
 f16:	77 1f       	adc	r23, r23
 f18:	88 1f       	adc	r24, r24
 f1a:	99 1f       	adc	r25, r25
 f1c:	1a 94       	dec	r1
 f1e:	69 f7       	brne	.-38     	; 0xefa <__udivmodsi4_loop>
 f20:	60 95       	com	r22
 f22:	70 95       	com	r23
 f24:	80 95       	com	r24
 f26:	90 95       	com	r25
 f28:	9b 01       	movw	r18, r22
 f2a:	ac 01       	movw	r20, r24
 f2c:	bd 01       	movw	r22, r26
 f2e:	cf 01       	movw	r24, r30
 f30:	08 95       	ret

00000f32 <__tablejump2__>:
 f32:	ee 0f       	add	r30, r30
 f34:	ff 1f       	adc	r31, r31
 f36:	00 24       	eor	r0, r0
 f38:	00 1c       	adc	r0, r0
 f3a:	0b be       	out	0x3b, r0	; 59
 f3c:	07 90       	elpm	r0, Z+
 f3e:	f6 91       	elpm	r31, Z
 f40:	e0 2d       	mov	r30, r0
 f42:	09 94       	ijmp

00000f44 <_exit>:
 f44:	f8 94       	cli

00000f46 <__stop_program>:
 f46:	ff cf       	rjmp	.-2      	; 0xf46 <__stop_program>
