
GraduationEmbeddedSide.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000f9c  00001030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000057  00800118  00800118  00001048  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001078  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003143  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000120e  00000000  00000000  000044a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c1a  00000000  00000000  000056b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000077c  00000000  00000000  000072cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001655  00000000  00000000  00007a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003184  00000000  00000000  0000909d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  0000c221  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	61 c0       	rjmp	.+194    	; 0xc4 <__ctors_end>
   2:	00 00       	nop
   4:	d5 c4       	rjmp	.+2474   	; 0x9b0 <__vector_1>
   6:	00 00       	nop
   8:	fe c4       	rjmp	.+2556   	; 0xa06 <__vector_2>
   a:	00 00       	nop
   c:	27 c5       	rjmp	.+2638   	; 0xa5c <__vector_3>
   e:	00 00       	nop
  10:	50 c5       	rjmp	.+2720   	; 0xab2 <__vector_4>
  12:	00 00       	nop
  14:	79 c5       	rjmp	.+2802   	; 0xb08 <__vector_5>
  16:	00 00       	nop
  18:	a2 c5       	rjmp	.+2884   	; 0xb5e <__vector_6>
  1a:	00 00       	nop
  1c:	cb c5       	rjmp	.+2966   	; 0xbb4 <__vector_7>
  1e:	00 00       	nop
  20:	f4 c5       	rjmp	.+3048   	; 0xc0a <__vector_8>
  22:	00 00       	nop
  24:	6c c0       	rjmp	.+216    	; 0xfe <__bad_interrupt>
  26:	00 00       	nop
  28:	6a c0       	rjmp	.+212    	; 0xfe <__bad_interrupt>
  2a:	00 00       	nop
  2c:	68 c0       	rjmp	.+208    	; 0xfe <__bad_interrupt>
  2e:	00 00       	nop
  30:	66 c0       	rjmp	.+204    	; 0xfe <__bad_interrupt>
  32:	00 00       	nop
  34:	64 c0       	rjmp	.+200    	; 0xfe <__bad_interrupt>
  36:	00 00       	nop
  38:	62 c0       	rjmp	.+196    	; 0xfe <__bad_interrupt>
  3a:	00 00       	nop
  3c:	60 c0       	rjmp	.+192    	; 0xfe <__bad_interrupt>
  3e:	00 00       	nop
  40:	5e c0       	rjmp	.+188    	; 0xfe <__bad_interrupt>
  42:	00 00       	nop
  44:	5c c0       	rjmp	.+184    	; 0xfe <__bad_interrupt>
  46:	00 00       	nop
  48:	5a c0       	rjmp	.+180    	; 0xfe <__bad_interrupt>
  4a:	00 00       	nop
  4c:	58 c0       	rjmp	.+176    	; 0xfe <__bad_interrupt>
  4e:	00 00       	nop
  50:	56 c0       	rjmp	.+172    	; 0xfe <__bad_interrupt>
  52:	00 00       	nop
  54:	54 c0       	rjmp	.+168    	; 0xfe <__bad_interrupt>
  56:	00 00       	nop
  58:	52 c0       	rjmp	.+164    	; 0xfe <__bad_interrupt>
  5a:	00 00       	nop
  5c:	50 c0       	rjmp	.+160    	; 0xfe <__bad_interrupt>
  5e:	00 00       	nop
  60:	4e c0       	rjmp	.+156    	; 0xfe <__bad_interrupt>
  62:	00 00       	nop
  64:	4c c0       	rjmp	.+152    	; 0xfe <__bad_interrupt>
  66:	00 00       	nop
  68:	4a c0       	rjmp	.+148    	; 0xfe <__bad_interrupt>
  6a:	00 00       	nop
  6c:	48 c0       	rjmp	.+144    	; 0xfe <__bad_interrupt>
  6e:	00 00       	nop
  70:	46 c0       	rjmp	.+140    	; 0xfe <__bad_interrupt>
  72:	00 00       	nop
  74:	44 c0       	rjmp	.+136    	; 0xfe <__bad_interrupt>
  76:	00 00       	nop
  78:	7b c0       	rjmp	.+246    	; 0x170 <__vector_30>
  7a:	00 00       	nop
  7c:	40 c0       	rjmp	.+128    	; 0xfe <__bad_interrupt>
  7e:	00 00       	nop
  80:	3e c0       	rjmp	.+124    	; 0xfe <__bad_interrupt>
  82:	00 00       	nop
  84:	3c c0       	rjmp	.+120    	; 0xfe <__bad_interrupt>
  86:	00 00       	nop
  88:	3a c0       	rjmp	.+116    	; 0xfe <__bad_interrupt>
  8a:	00 00       	nop
  8c:	25 03       	mulsu	r18, r21
  8e:	33 03       	mulsu	r19, r19
  90:	41 03       	mulsu	r20, r17
  92:	4f 03       	fmul	r20, r23
  94:	5d 03       	fmul	r21, r21
  96:	6b 03       	fmul	r22, r19
  98:	7b 03       	fmul	r23, r19
  9a:	95 03       	fmuls	r17, r21
  9c:	a2 03       	fmuls	r18, r18
  9e:	af 03       	fmulsu	r18, r23
  a0:	bc 03       	fmulsu	r19, r20
  a2:	c9 03       	fmulsu	r20, r17
  a4:	d6 03       	fmuls	r21, r22
  a6:	e5 03       	fmuls	r22, r21
  a8:	09 04       	cpc	r0, r9
  aa:	17 04       	cpc	r1, r7
  ac:	25 04       	cpc	r2, r5
  ae:	33 04       	cpc	r3, r3
  b0:	41 04       	cpc	r4, r1
  b2:	4f 04       	cpc	r4, r15
  b4:	5f 04       	cpc	r5, r15
  b6:	79 04       	cpc	r7, r9
  b8:	86 04       	cpc	r8, r6
  ba:	93 04       	cpc	r9, r3
  bc:	a0 04       	cpc	r10, r0
  be:	ad 04       	cpc	r10, r13
  c0:	ba 04       	cpc	r11, r10
  c2:	c9 04       	cpc	r12, r9

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d0 e1       	ldi	r29, 0x10	; 16
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	ec e9       	ldi	r30, 0x9C	; 156
  d8:	ff e0       	ldi	r31, 0x0F	; 15
  da:	00 e0       	ldi	r16, 0x00	; 0
  dc:	0b bf       	out	0x3b, r16	; 59
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x14>
  e0:	07 90       	elpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	a8 31       	cpi	r26, 0x18	; 24
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0x10>

000000ea <__do_clear_bss>:
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	a8 e1       	ldi	r26, 0x18	; 24
  ee:	b1 e0       	ldi	r27, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	af 36       	cpi	r26, 0x6F	; 111
  f6:	b2 07       	cpc	r27, r18
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
  fa:	4d d2       	rcall	.+1178   	; 0x596 <main>
  fc:	4d c7       	rjmp	.+3738   	; 0xf98 <_exit>

000000fe <__bad_interrupt>:
  fe:	80 cf       	rjmp	.-256    	; 0x0 <__vectors>

00000100 <ESP01_Init>:
#include <avr/interrupt.h>


void ESP01_Init()
{
	GIE_Enable();
 100:	af d5       	rcall	.+2910   	; 0xc60 <GIE_Enable>
	UART1_Init();
 102:	59 d6       	rcall	.+3250   	; 0xdb6 <UART1_Init>
 104:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <result>
	result = 0;
 108:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <data_ready>
	data_ready = 0;
 10c:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <data_len>
	data_len = 0;
 110:	82 e3       	ldi	r24, 0x32	; 50
	memset(rx_buff, 0, 50);
 112:	e9 e2       	ldi	r30, 0x29	; 41
 114:	f1 e0       	ldi	r31, 0x01	; 1
 116:	df 01       	movw	r26, r30
 118:	1d 92       	st	X+, r1
 11a:	8a 95       	dec	r24
 11c:	e9 f7       	brne	.-6      	; 0x118 <ESP01_Init+0x18>
 11e:	08 95       	ret

00000120 <ESP01_ResetBuffer>:
 120:	40 91 5c 01 	lds	r20, 0x015C	; 0x80015c <data_len>
	ESP01_ResetBuffer();
}

void ESP01_ResetBuffer()
{
	memset(rx_buff, 0, data_len);
 124:	50 e0       	ldi	r21, 0x00	; 0
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	89 e2       	ldi	r24, 0x29	; 41
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	2d d7       	rcall	.+3674   	; 0xf8a <memset>
	data_len = 0;
 130:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <data_len>
	data_ready = 0;
 134:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <data_ready>
 138:	08 95       	ret

0000013a <ESP01_CheckConnection>:
	memset(rx_buff, 0, 50);
}

u_int8 ESP01_CheckConnection()
{	
	if(find_string(rx_buff, "1") == 1) {result = 1;}
 13a:	64 e1       	ldi	r22, 0x14	; 20
 13c:	71 e0       	ldi	r23, 0x01	; 1
 13e:	89 e2       	ldi	r24, 0x29	; 41
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	e3 d1       	rcall	.+966    	; 0x50a <find_string>
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	19 f4       	brne	.+6      	; 0x14e <ESP01_CheckConnection+0x14>
 148:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <result>
 14c:	0f c0       	rjmp	.+30     	; 0x16c <ESP01_CheckConnection+0x32>
	else if(find_string(rx_buff, "0" == 1)){result = 0;}
 14e:	86 e1       	ldi	r24, 0x16	; 22
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	19 f4       	brne	.+6      	; 0x15c <ESP01_CheckConnection+0x22>
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <ESP01_CheckConnection+0x26>
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	89 e2       	ldi	r24, 0x29	; 41
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	d2 d1       	rcall	.+932    	; 0x50a <find_string>
 166:	81 11       	cpse	r24, r1
 168:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <result>
		
	ESP01_ResetBuffer();
 16c:	d9 cf       	rjmp	.-78     	; 0x120 <ESP01_ResetBuffer>
}
 16e:	08 95       	ret

00000170 <__vector_30>:
	data_len = 0;
	data_ready = 0;
}

ISR(USART1_RX_vect)
{
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	0b b6       	in	r0, 0x3b	; 59
 17c:	0f 92       	push	r0
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
 182:	ef 93       	push	r30
 184:	ff 93       	push	r31
	temp = UDR1_Register;
 186:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 18a:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <temp>
	rx_buff[data_len] = temp;
 18e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <data_len>
 192:	e8 2f       	mov	r30, r24
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	e7 5d       	subi	r30, 0xD7	; 215
 198:	fe 4f       	sbci	r31, 0xFE	; 254
 19a:	90 83       	st	Z, r25
	data_len++;
 19c:	8f 5f       	subi	r24, 0xFF	; 255
 19e:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <data_len>
 1a2:	ff 91       	pop	r31
 1a4:	ef 91       	pop	r30
 1a6:	9f 91       	pop	r25
 1a8:	8f 91       	pop	r24
 1aa:	0f 90       	pop	r0
 1ac:	0b be       	out	0x3b, r0	; 59
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <mfrc522_write>:
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	c8 2f       	mov	r28, r24
 1be:	d6 2f       	mov	r29, r22
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	88 e0       	ldi	r24, 0x08	; 8
 1c4:	e3 d5       	rcall	.+3014   	; 0xd8c <SPI_Cannel_State>
 1c6:	8c 2f       	mov	r24, r28
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	8e 77       	andi	r24, 0x7E	; 126
 1d0:	d8 d5       	rcall	.+2992   	; 0xd82 <SPI_Master_TransmitChar>
 1d2:	8d 2f       	mov	r24, r29
 1d4:	d6 d5       	rcall	.+2988   	; 0xd82 <SPI_Master_TransmitChar>
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	88 e0       	ldi	r24, 0x08	; 8
 1da:	d8 d5       	rcall	.+2992   	; 0xd8c <SPI_Cannel_State>
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <mfrc522_read>:
 1e2:	cf 93       	push	r28
 1e4:	c8 2f       	mov	r28, r24
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	88 e0       	ldi	r24, 0x08	; 8
 1ea:	d0 d5       	rcall	.+2976   	; 0xd8c <SPI_Cannel_State>
 1ec:	8c 2f       	mov	r24, r28
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	8e 77       	andi	r24, 0x7E	; 126
 1f6:	80 68       	ori	r24, 0x80	; 128
 1f8:	c4 d5       	rcall	.+2952   	; 0xd82 <SPI_Master_TransmitChar>
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	c2 d5       	rcall	.+2948   	; 0xd82 <SPI_Master_TransmitChar>
 1fe:	c8 2f       	mov	r28, r24
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	88 e0       	ldi	r24, 0x08	; 8
 204:	c3 d5       	rcall	.+2950   	; 0xd8c <SPI_Cannel_State>
 206:	8c 2f       	mov	r24, r28
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <mfrc522_reset>:
 20c:	6f e0       	ldi	r22, 0x0F	; 15
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	d3 cf       	rjmp	.-90     	; 0x1b8 <mfrc522_write>
 212:	08 95       	ret

00000214 <mfrc522_init>:
 214:	fb df       	rcall	.-10     	; 0x20c <mfrc522_reset>
 216:	6d e8       	ldi	r22, 0x8D	; 141
 218:	8a e2       	ldi	r24, 0x2A	; 42
 21a:	ce df       	rcall	.-100    	; 0x1b8 <mfrc522_write>
 21c:	6e e3       	ldi	r22, 0x3E	; 62
 21e:	8b e2       	ldi	r24, 0x2B	; 43
 220:	cb df       	rcall	.-106    	; 0x1b8 <mfrc522_write>
 222:	6e e1       	ldi	r22, 0x1E	; 30
 224:	8c e2       	ldi	r24, 0x2C	; 44
 226:	c8 df       	rcall	.-112    	; 0x1b8 <mfrc522_write>
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	8d e2       	ldi	r24, 0x2D	; 45
 22c:	c5 df       	rcall	.-118    	; 0x1b8 <mfrc522_write>
 22e:	60 e4       	ldi	r22, 0x40	; 64
 230:	85 e1       	ldi	r24, 0x15	; 21
 232:	c2 df       	rcall	.-124    	; 0x1b8 <mfrc522_write>
 234:	6d e3       	ldi	r22, 0x3D	; 61
 236:	81 e1       	ldi	r24, 0x11	; 17
 238:	bf df       	rcall	.-130    	; 0x1b8 <mfrc522_write>
 23a:	84 e1       	ldi	r24, 0x14	; 20
 23c:	d2 df       	rcall	.-92     	; 0x1e2 <mfrc522_read>
 23e:	98 2f       	mov	r25, r24
 240:	93 70       	andi	r25, 0x03	; 3
 242:	31 f4       	brne	.+12     	; 0x250 <mfrc522_init+0x3c>
 244:	68 2f       	mov	r22, r24
 246:	63 60       	ori	r22, 0x03	; 3
 248:	84 e1       	ldi	r24, 0x14	; 20
 24a:	b6 df       	rcall	.-148    	; 0x1b8 <mfrc522_write>
 24c:	84 e1       	ldi	r24, 0x14	; 20
 24e:	c9 cf       	rjmp	.-110    	; 0x1e2 <mfrc522_read>
 250:	08 95       	ret

00000252 <mfrc522_to_card>:
 252:	4f 92       	push	r4
 254:	5f 92       	push	r5
 256:	6f 92       	push	r6
 258:	7f 92       	push	r7
 25a:	8f 92       	push	r8
 25c:	9f 92       	push	r9
 25e:	af 92       	push	r10
 260:	bf 92       	push	r11
 262:	cf 92       	push	r12
 264:	df 92       	push	r13
 266:	ef 92       	push	r14
 268:	ff 92       	push	r15
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	d8 2f       	mov	r29, r24
 274:	7b 01       	movw	r14, r22
 276:	c4 2f       	mov	r28, r20
 278:	59 01       	movw	r10, r18
 27a:	8c 30       	cpi	r24, 0x0C	; 12
 27c:	29 f0       	breq	.+10     	; 0x288 <mfrc522_to_card+0x36>
 27e:	8e 30       	cpi	r24, 0x0E	; 14
 280:	61 f0       	breq	.+24     	; 0x29a <mfrc522_to_card+0x48>
 282:	91 2c       	mov	r9, r1
 284:	81 2c       	mov	r8, r1
 286:	10 c0       	rjmp	.+32     	; 0x2a8 <mfrc522_to_card+0x56>
 288:	0f 2e       	mov	r0, r31
 28a:	f0 e3       	ldi	r31, 0x30	; 48
 28c:	9f 2e       	mov	r9, r31
 28e:	f0 2d       	mov	r31, r0
 290:	0f 2e       	mov	r0, r31
 292:	f7 e7       	ldi	r31, 0x77	; 119
 294:	8f 2e       	mov	r8, r31
 296:	f0 2d       	mov	r31, r0
 298:	07 c0       	rjmp	.+14     	; 0x2a8 <mfrc522_to_card+0x56>
 29a:	68 94       	set
 29c:	99 24       	eor	r9, r9
 29e:	94 f8       	bld	r9, 4
 2a0:	0f 2e       	mov	r0, r31
 2a2:	f2 e1       	ldi	r31, 0x12	; 18
 2a4:	8f 2e       	mov	r8, r31
 2a6:	f0 2d       	mov	r31, r0
 2a8:	84 e0       	ldi	r24, 0x04	; 4
 2aa:	9b df       	rcall	.-202    	; 0x1e2 <mfrc522_read>
 2ac:	68 2f       	mov	r22, r24
 2ae:	6f 77       	andi	r22, 0x7F	; 127
 2b0:	84 e0       	ldi	r24, 0x04	; 4
 2b2:	82 df       	rcall	.-252    	; 0x1b8 <mfrc522_write>
 2b4:	8a e0       	ldi	r24, 0x0A	; 10
 2b6:	95 df       	rcall	.-214    	; 0x1e2 <mfrc522_read>
 2b8:	68 2f       	mov	r22, r24
 2ba:	60 68       	ori	r22, 0x80	; 128
 2bc:	8a e0       	ldi	r24, 0x0A	; 10
 2be:	7c df       	rcall	.-264    	; 0x1b8 <mfrc522_write>
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	79 df       	rcall	.-270    	; 0x1b8 <mfrc522_write>
 2c6:	41 2c       	mov	r4, r1
 2c8:	51 2c       	mov	r5, r1
 2ca:	32 01       	movw	r6, r4
 2cc:	0b c0       	rjmp	.+22     	; 0x2e4 <mfrc522_to_card+0x92>
 2ce:	f7 01       	movw	r30, r14
 2d0:	e4 0d       	add	r30, r4
 2d2:	f5 1d       	adc	r31, r5
 2d4:	60 81       	ld	r22, Z
 2d6:	89 e0       	ldi	r24, 0x09	; 9
 2d8:	6f df       	rcall	.-290    	; 0x1b8 <mfrc522_write>
 2da:	8f ef       	ldi	r24, 0xFF	; 255
 2dc:	48 1a       	sub	r4, r24
 2de:	58 0a       	sbc	r5, r24
 2e0:	68 0a       	sbc	r6, r24
 2e2:	78 0a       	sbc	r7, r24
 2e4:	8c 2f       	mov	r24, r28
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	a0 e0       	ldi	r26, 0x00	; 0
 2ea:	b0 e0       	ldi	r27, 0x00	; 0
 2ec:	48 16       	cp	r4, r24
 2ee:	59 06       	cpc	r5, r25
 2f0:	6a 06       	cpc	r6, r26
 2f2:	7b 06       	cpc	r7, r27
 2f4:	60 f3       	brcs	.-40     	; 0x2ce <mfrc522_to_card+0x7c>
 2f6:	6d 2f       	mov	r22, r29
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	5e df       	rcall	.-324    	; 0x1b8 <mfrc522_write>
 2fc:	dc 30       	cpi	r29, 0x0C	; 12
 2fe:	31 f4       	brne	.+12     	; 0x30c <mfrc522_to_card+0xba>
 300:	8d e0       	ldi	r24, 0x0D	; 13
 302:	6f df       	rcall	.-290    	; 0x1e2 <mfrc522_read>
 304:	68 2f       	mov	r22, r24
 306:	60 68       	ori	r22, 0x80	; 128
 308:	8d e0       	ldi	r24, 0x0D	; 13
 30a:	56 df       	rcall	.-340    	; 0x1b8 <mfrc522_write>
 30c:	0f 2e       	mov	r0, r31
 30e:	f0 ed       	ldi	r31, 0xD0	; 208
 310:	cf 2e       	mov	r12, r31
 312:	f7 e0       	ldi	r31, 0x07	; 7
 314:	df 2e       	mov	r13, r31
 316:	e1 2c       	mov	r14, r1
 318:	f1 2c       	mov	r15, r1
 31a:	f0 2d       	mov	r31, r0
 31c:	84 e0       	ldi	r24, 0x04	; 4
 31e:	61 df       	rcall	.-318    	; 0x1e2 <mfrc522_read>
 320:	c8 2f       	mov	r28, r24
 322:	e1 e0       	ldi	r30, 0x01	; 1
 324:	ce 1a       	sub	r12, r30
 326:	d1 08       	sbc	r13, r1
 328:	e1 08       	sbc	r14, r1
 32a:	f1 08       	sbc	r15, r1
 32c:	29 f0       	breq	.+10     	; 0x338 <mfrc522_to_card+0xe6>
 32e:	80 fd       	sbrc	r24, 0
 330:	03 c0       	rjmp	.+6      	; 0x338 <mfrc522_to_card+0xe6>
 332:	89 2d       	mov	r24, r9
 334:	8c 23       	and	r24, r28
 336:	91 f3       	breq	.-28     	; 0x31c <mfrc522_to_card+0xca>
 338:	8d e0       	ldi	r24, 0x0D	; 13
 33a:	53 df       	rcall	.-346    	; 0x1e2 <mfrc522_read>
 33c:	68 2f       	mov	r22, r24
 33e:	6f 77       	andi	r22, 0x7F	; 127
 340:	8d e0       	ldi	r24, 0x0D	; 13
 342:	3a df       	rcall	.-396    	; 0x1b8 <mfrc522_write>
 344:	cd 28       	or	r12, r13
 346:	ce 28       	or	r12, r14
 348:	cf 28       	or	r12, r15
 34a:	09 f4       	brne	.+2      	; 0x34e <mfrc522_to_card+0xfc>
 34c:	5c c0       	rjmp	.+184    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 34e:	86 e0       	ldi	r24, 0x06	; 6
 350:	48 df       	rcall	.-368    	; 0x1e2 <mfrc522_read>
 352:	8b 71       	andi	r24, 0x1B	; 27
 354:	09 f0       	breq	.+2      	; 0x358 <mfrc522_to_card+0x106>
 356:	59 c0       	rjmp	.+178    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 358:	c8 21       	and	r28, r8
 35a:	c0 fd       	sbrc	r28, 0
 35c:	02 c0       	rjmp	.+4      	; 0x362 <mfrc522_to_card+0x110>
 35e:	c1 e0       	ldi	r28, 0x01	; 1
 360:	01 c0       	rjmp	.+2      	; 0x364 <mfrc522_to_card+0x112>
 362:	c2 e0       	ldi	r28, 0x02	; 2
 364:	dc 30       	cpi	r29, 0x0C	; 12
 366:	09 f0       	breq	.+2      	; 0x36a <mfrc522_to_card+0x118>
 368:	51 c0       	rjmp	.+162    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 36a:	8a e0       	ldi	r24, 0x0A	; 10
 36c:	3a df       	rcall	.-396    	; 0x1e2 <mfrc522_read>
 36e:	d8 2f       	mov	r29, r24
 370:	8c e0       	ldi	r24, 0x0C	; 12
 372:	37 df       	rcall	.-402    	; 0x1e2 <mfrc522_read>
 374:	28 2f       	mov	r18, r24
 376:	27 70       	andi	r18, 0x07	; 7
 378:	a9 f0       	breq	.+42     	; 0x3a4 <mfrc522_to_card+0x152>
 37a:	8d 2f       	mov	r24, r29
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	82 0f       	add	r24, r18
 38e:	91 1d       	adc	r25, r1
 390:	09 2e       	mov	r0, r25
 392:	00 0c       	add	r0, r0
 394:	aa 0b       	sbc	r26, r26
 396:	bb 0b       	sbc	r27, r27
 398:	f8 01       	movw	r30, r16
 39a:	80 83       	st	Z, r24
 39c:	91 83       	std	Z+1, r25	; 0x01
 39e:	a2 83       	std	Z+2, r26	; 0x02
 3a0:	b3 83       	std	Z+3, r27	; 0x03
 3a2:	11 c0       	rjmp	.+34     	; 0x3c6 <mfrc522_to_card+0x174>
 3a4:	8d 2f       	mov	r24, r29
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	09 2e       	mov	r0, r25
 3b6:	00 0c       	add	r0, r0
 3b8:	aa 0b       	sbc	r26, r26
 3ba:	bb 0b       	sbc	r27, r27
 3bc:	f8 01       	movw	r30, r16
 3be:	80 83       	st	Z, r24
 3c0:	91 83       	std	Z+1, r25	; 0x01
 3c2:	a2 83       	std	Z+2, r26	; 0x02
 3c4:	b3 83       	std	Z+3, r27	; 0x03
 3c6:	d1 11       	cpse	r29, r1
 3c8:	01 c0       	rjmp	.+2      	; 0x3cc <mfrc522_to_card+0x17a>
 3ca:	d1 e0       	ldi	r29, 0x01	; 1
 3cc:	d1 31       	cpi	r29, 0x11	; 17
 3ce:	08 f0       	brcs	.+2      	; 0x3d2 <mfrc522_to_card+0x180>
 3d0:	d0 e1       	ldi	r29, 0x10	; 16
 3d2:	c1 2c       	mov	r12, r1
 3d4:	d1 2c       	mov	r13, r1
 3d6:	76 01       	movw	r14, r12
 3d8:	0c c0       	rjmp	.+24     	; 0x3f2 <mfrc522_to_card+0x1a0>
 3da:	85 01       	movw	r16, r10
 3dc:	0c 0d       	add	r16, r12
 3de:	1d 1d       	adc	r17, r13
 3e0:	89 e0       	ldi	r24, 0x09	; 9
 3e2:	ff de       	rcall	.-514    	; 0x1e2 <mfrc522_read>
 3e4:	f8 01       	movw	r30, r16
 3e6:	80 83       	st	Z, r24
 3e8:	ff ef       	ldi	r31, 0xFF	; 255
 3ea:	cf 1a       	sub	r12, r31
 3ec:	df 0a       	sbc	r13, r31
 3ee:	ef 0a       	sbc	r14, r31
 3f0:	ff 0a       	sbc	r15, r31
 3f2:	8d 2f       	mov	r24, r29
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	a0 e0       	ldi	r26, 0x00	; 0
 3f8:	b0 e0       	ldi	r27, 0x00	; 0
 3fa:	c8 16       	cp	r12, r24
 3fc:	d9 06       	cpc	r13, r25
 3fe:	ea 06       	cpc	r14, r26
 400:	fb 06       	cpc	r15, r27
 402:	58 f3       	brcs	.-42     	; 0x3da <mfrc522_to_card+0x188>
 404:	03 c0       	rjmp	.+6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 406:	c3 e0       	ldi	r28, 0x03	; 3
 408:	01 c0       	rjmp	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	c3 e0       	ldi	r28, 0x03	; 3
 40c:	8c 2f       	mov	r24, r28
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	ff 90       	pop	r15
 418:	ef 90       	pop	r14
 41a:	df 90       	pop	r13
 41c:	cf 90       	pop	r12
 41e:	bf 90       	pop	r11
 420:	af 90       	pop	r10
 422:	9f 90       	pop	r9
 424:	8f 90       	pop	r8
 426:	7f 90       	pop	r7
 428:	6f 90       	pop	r6
 42a:	5f 90       	pop	r5
 42c:	4f 90       	pop	r4
 42e:	08 95       	ret

00000430 <mfrc522_request>:
 430:	ef 92       	push	r14
 432:	ff 92       	push	r15
 434:	0f 93       	push	r16
 436:	1f 93       	push	r17
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	00 d0       	rcall	.+0      	; 0x43e <mfrc522_request+0xe>
 43e:	00 d0       	rcall	.+0      	; 0x440 <mfrc522_request+0x10>
 440:	cd b7       	in	r28, 0x3d	; 61
 442:	de b7       	in	r29, 0x3e	; 62
 444:	18 2f       	mov	r17, r24
 446:	7b 01       	movw	r14, r22
 448:	67 e0       	ldi	r22, 0x07	; 7
 44a:	8d e0       	ldi	r24, 0x0D	; 13
 44c:	b5 de       	rcall	.-662    	; 0x1b8 <mfrc522_write>
 44e:	f7 01       	movw	r30, r14
 450:	10 83       	st	Z, r17
 452:	8e 01       	movw	r16, r28
 454:	0f 5f       	subi	r16, 0xFF	; 255
 456:	1f 4f       	sbci	r17, 0xFF	; 255
 458:	97 01       	movw	r18, r14
 45a:	41 e0       	ldi	r20, 0x01	; 1
 45c:	b7 01       	movw	r22, r14
 45e:	8c e0       	ldi	r24, 0x0C	; 12
 460:	f8 de       	rcall	.-528    	; 0x252 <mfrc522_to_card>
 462:	81 30       	cpi	r24, 0x01	; 1
 464:	51 f4       	brne	.+20     	; 0x47a <mfrc522_request+0x4a>
 466:	49 81       	ldd	r20, Y+1	; 0x01
 468:	5a 81       	ldd	r21, Y+2	; 0x02
 46a:	6b 81       	ldd	r22, Y+3	; 0x03
 46c:	7c 81       	ldd	r23, Y+4	; 0x04
 46e:	40 31       	cpi	r20, 0x10	; 16
 470:	51 05       	cpc	r21, r1
 472:	61 05       	cpc	r22, r1
 474:	71 05       	cpc	r23, r1
 476:	19 f4       	brne	.+6      	; 0x47e <mfrc522_request+0x4e>
 478:	03 c0       	rjmp	.+6      	; 0x480 <mfrc522_request+0x50>
 47a:	83 e0       	ldi	r24, 0x03	; 3
 47c:	01 c0       	rjmp	.+2      	; 0x480 <mfrc522_request+0x50>
 47e:	83 e0       	ldi	r24, 0x03	; 3
 480:	0f 90       	pop	r0
 482:	0f 90       	pop	r0
 484:	0f 90       	pop	r0
 486:	0f 90       	pop	r0
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	1f 91       	pop	r17
 48e:	0f 91       	pop	r16
 490:	ff 90       	pop	r15
 492:	ef 90       	pop	r14
 494:	08 95       	ret

00000496 <mfrc522_get_card_serial>:
 496:	ef 92       	push	r14
 498:	ff 92       	push	r15
 49a:	0f 93       	push	r16
 49c:	1f 93       	push	r17
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	00 d0       	rcall	.+0      	; 0x4a4 <mfrc522_get_card_serial+0xe>
 4a4:	00 d0       	rcall	.+0      	; 0x4a6 <mfrc522_get_card_serial+0x10>
 4a6:	cd b7       	in	r28, 0x3d	; 61
 4a8:	de b7       	in	r29, 0x3e	; 62
 4aa:	7c 01       	movw	r14, r24
 4ac:	60 e0       	ldi	r22, 0x00	; 0
 4ae:	8d e0       	ldi	r24, 0x0D	; 13
 4b0:	83 de       	rcall	.-762    	; 0x1b8 <mfrc522_write>
 4b2:	83 e9       	ldi	r24, 0x93	; 147
 4b4:	f7 01       	movw	r30, r14
 4b6:	80 83       	st	Z, r24
 4b8:	80 e2       	ldi	r24, 0x20	; 32
 4ba:	81 83       	std	Z+1, r24	; 0x01
 4bc:	8e 01       	movw	r16, r28
 4be:	0f 5f       	subi	r16, 0xFF	; 255
 4c0:	1f 4f       	sbci	r17, 0xFF	; 255
 4c2:	97 01       	movw	r18, r14
 4c4:	42 e0       	ldi	r20, 0x02	; 2
 4c6:	b7 01       	movw	r22, r14
 4c8:	8c e0       	ldi	r24, 0x0C	; 12
 4ca:	c3 de       	rcall	.-634    	; 0x252 <mfrc522_to_card>
 4cc:	81 30       	cpi	r24, 0x01	; 1
 4ce:	91 f4       	brne	.+36     	; 0x4f4 <mfrc522_get_card_serial+0x5e>
 4d0:	07 c0       	rjmp	.+14     	; 0x4e0 <mfrc522_get_card_serial+0x4a>
 4d2:	f7 01       	movw	r30, r14
 4d4:	e9 0f       	add	r30, r25
 4d6:	f1 1d       	adc	r31, r1
 4d8:	30 81       	ld	r19, Z
 4da:	23 27       	eor	r18, r19
 4dc:	9f 5f       	subi	r25, 0xFF	; 255
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <mfrc522_get_card_serial+0x4e>
 4e0:	20 e0       	ldi	r18, 0x00	; 0
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	94 30       	cpi	r25, 0x04	; 4
 4e6:	a8 f3       	brcs	.-22     	; 0x4d2 <mfrc522_get_card_serial+0x3c>
 4e8:	f7 01       	movw	r30, r14
 4ea:	e9 0f       	add	r30, r25
 4ec:	f1 1d       	adc	r31, r1
 4ee:	90 81       	ld	r25, Z
 4f0:	29 13       	cpse	r18, r25
 4f2:	83 e0       	ldi	r24, 0x03	; 3
 4f4:	0f 90       	pop	r0
 4f6:	0f 90       	pop	r0
 4f8:	0f 90       	pop	r0
 4fa:	0f 90       	pop	r0
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	1f 91       	pop	r17
 502:	0f 91       	pop	r16
 504:	ff 90       	pop	r15
 506:	ef 90       	pop	r14
 508:	08 95       	ret

0000050a <find_string>:
#include "String_Find.h"
#include <string.h>

unsigned char find_string(unsigned char *string, unsigned char* string_find)
{
 50a:	ef 92       	push	r14
 50c:	ff 92       	push	r15
 50e:	0f 93       	push	r16
 510:	1f 93       	push	r17
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	ec 01       	movw	r28, r24
 518:	8b 01       	movw	r16, r22
	unsigned int matched = 0;
	unsigned int index_string = 0;
	unsigned int length_of_string = 0;
	unsigned int length_of_string_find = 0;

	length_of_string_find = strlen(string_find);
 51a:	fb 01       	movw	r30, r22
 51c:	01 90       	ld	r0, Z+
 51e:	00 20       	and	r0, r0
 520:	e9 f7       	brne	.-6      	; 0x51c <find_string+0x12>
 522:	31 97       	sbiw	r30, 0x01	; 1
 524:	7f 01       	movw	r14, r30
 526:	e6 1a       	sub	r14, r22
 528:	f7 0a       	sbc	r15, r23
	length_of_string = strlen(string);
 52a:	dc 01       	movw	r26, r24
 52c:	0d 90       	ld	r0, X+
 52e:	00 20       	and	r0, r0
 530:	e9 f7       	brne	.-6      	; 0x52c <find_string+0x22>
 532:	11 97       	sbiw	r26, 0x01	; 1
 534:	a8 1b       	sub	r26, r24
 536:	b9 0b       	sbc	r27, r25

	if(length_of_string_find > length_of_string)
 538:	ae 15       	cp	r26, r14
 53a:	bf 05       	cpc	r27, r15
 53c:	f0 f0       	brcs	.+60     	; 0x57a <find_string+0x70>
 53e:	20 e0       	ldi	r18, 0x00	; 0
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	40 e0       	ldi	r20, 0x00	; 0
 544:	50 e0       	ldi	r21, 0x00	; 0
 546:	14 c0       	rjmp	.+40     	; 0x570 <find_string+0x66>
	}
	else
	{
		for(index_string = 0; index_string < length_of_string; index_string++)
		{
			if(string[index_string] == string_find[matched])
 548:	fe 01       	movw	r30, r28
 54a:	e2 0f       	add	r30, r18
 54c:	f3 1f       	adc	r31, r19
 54e:	70 81       	ld	r23, Z
 550:	f8 01       	movw	r30, r16
 552:	e4 0f       	add	r30, r20
 554:	f5 1f       	adc	r31, r21
 556:	90 81       	ld	r25, Z
 558:	79 13       	cpse	r23, r25
 55a:	06 c0       	rjmp	.+12     	; 0x568 <find_string+0x5e>
			{
				matched++;
 55c:	4f 5f       	subi	r20, 0xFF	; 255
 55e:	5f 4f       	sbci	r21, 0xFF	; 255
				if(length_of_string_find == matched)
 560:	e4 16       	cp	r14, r20
 562:	f5 06       	cpc	r15, r21
 564:	19 f4       	brne	.+6      	; 0x56c <find_string+0x62>
 566:	0b c0       	rjmp	.+22     	; 0x57e <find_string+0x74>
					return 1;
			}
			else
			{
				matched = 0;
 568:	40 e0       	ldi	r20, 0x00	; 0
 56a:	50 e0       	ldi	r21, 0x00	; 0
	{
		return 0;
	}
	else
	{
		for(index_string = 0; index_string < length_of_string; index_string++)
 56c:	2f 5f       	subi	r18, 0xFF	; 255
 56e:	3f 4f       	sbci	r19, 0xFF	; 255
 570:	2a 17       	cp	r18, r26
 572:	3b 07       	cpc	r19, r27
 574:	48 f3       	brcs	.-46     	; 0x548 <find_string+0x3e>
			else
			{
				matched = 0;
			}
		}
		return 0;
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	03 c0       	rjmp	.+6      	; 0x580 <find_string+0x76>
	length_of_string_find = strlen(string_find);
	length_of_string = strlen(string);

	if(length_of_string_find > length_of_string)
	{
		return 0;
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	01 c0       	rjmp	.+2      	; 0x580 <find_string+0x76>
		{
			if(string[index_string] == string_find[matched])
			{
				matched++;
				if(length_of_string_find == matched)
					return 1;
 57e:	81 e0       	ldi	r24, 0x01	; 1
				matched = 0;
			}
		}
		return 0;
	}
}
 580:	df 91       	pop	r29
 582:	cf 91       	pop	r28
 584:	1f 91       	pop	r17
 586:	0f 91       	pop	r16
 588:	ff 90       	pop	r15
 58a:	ef 90       	pop	r14
 58c:	08 95       	ret

0000058e <intialize_section>:
		}
	}
}

void intialize_section(void){
	SPI_Init();
 58e:	6c d3       	rcall	.+1752   	; 0xc68 <SPI_Init>
	UART1_Init();	
 590:	12 d4       	rcall	.+2084   	; 0xdb6 <UART1_Init>
	mfrc522_init();
 592:	40 ce       	rjmp	.-896    	; 0x214 <mfrc522_init>
 594:	08 95       	ret

00000596 <main>:
 596:	b4 dd       	rcall	.-1176   	; 0x100 <ESP01_Init>
void intialize_section(void);

int main()
{
	ESP01_Init();
	intialize_section();
 598:	fa df       	rcall	.-12     	; 0x58e <intialize_section>
	
	
	byte = mfrc522_read(ComIEnReg);
 59a:	82 e0       	ldi	r24, 0x02	; 2
 59c:	22 de       	rcall	.-956    	; 0x1e2 <mfrc522_read>
 59e:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <byte>
 5a2:	68 2f       	mov	r22, r24
	mfrc522_write(ComIEnReg,byte|0x20);
 5a4:	60 62       	ori	r22, 0x20	; 32
 5a6:	82 e0       	ldi	r24, 0x02	; 2
 5a8:	07 de       	rcall	.-1010   	; 0x1b8 <mfrc522_write>
	byte = mfrc522_read(DivIEnReg);
 5aa:	83 e0       	ldi	r24, 0x03	; 3
 5ac:	1a de       	rcall	.-972    	; 0x1e2 <mfrc522_read>
 5ae:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <byte>
	mfrc522_write(DivIEnReg,byte|0x80);
 5b2:	68 2f       	mov	r22, r24
 5b4:	60 68       	ori	r22, 0x80	; 128
 5b6:	83 e0       	ldi	r24, 0x03	; 3
 5b8:	ff dd       	rcall	.-1026   	; 0x1b8 <mfrc522_write>
 5ba:	bf dd       	rcall	.-1154   	; 0x13a <ESP01_CheckConnection>
	while(1)
	{
		if(ESP01_CheckConnection())
 5bc:	88 23       	and	r24, r24
 5be:	e9 f3       	breq	.-6      	; 0x5ba <main+0x24>
 5c0:	6f e5       	ldi	r22, 0x5F	; 95
		{
			byte = mfrc522_request(PICC_REQALL,str);
 5c2:	71 e0       	ldi	r23, 0x01	; 1
 5c4:	82 e5       	ldi	r24, 0x52	; 82
 5c6:	34 df       	rcall	.-408    	; 0x430 <mfrc522_request>
 5c8:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <byte>
 5cc:	2f ef       	ldi	r18, 0xFF	; 255
 5ce:	81 ee       	ldi	r24, 0xE1	; 225
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d0:	94 e0       	ldi	r25, 0x04	; 4
 5d2:	21 50       	subi	r18, 0x01	; 1
 5d4:	80 40       	sbci	r24, 0x00	; 0
 5d6:	90 40       	sbci	r25, 0x00	; 0
 5d8:	e1 f7       	brne	.-8      	; 0x5d2 <main+0x3c>
 5da:	00 c0       	rjmp	.+0      	; 0x5dc <main+0x46>
 5dc:	00 00       	nop
 5de:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <byte>
			_delay_ms(100);
			if(byte == CARD_FOUND)
 5e2:	81 30       	cpi	r24, 0x01	; 1
 5e4:	51 f7       	brne	.-44     	; 0x5ba <main+0x24>
 5e6:	8f e5       	ldi	r24, 0x5F	; 95
			{
				byte = mfrc522_get_card_serial(str);
 5e8:	91 e0       	ldi	r25, 0x01	; 1
 5ea:	55 df       	rcall	.-342    	; 0x496 <mfrc522_get_card_serial>
 5ec:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <byte>
 5f0:	81 30       	cpi	r24, 0x01	; 1
				if(byte == CARD_FOUND)
 5f2:	19 f7       	brne	.-58     	; 0x5ba <main+0x24>
 5f4:	80 e4       	ldi	r24, 0x40	; 64
				{
					UART1_Transmit('@');
 5f6:	97 d4       	rcall	.+2350   	; 0xf26 <UART1_Transmit>
 5f8:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <byte>
					for(byte=0;byte<8;byte++)
 5fc:	0a c0       	rjmp	.+20     	; 0x612 <main+0x7c>
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
					{
						UART1_Transmit(str[byte]);
 600:	e1 5a       	subi	r30, 0xA1	; 161
 602:	fe 4f       	sbci	r31, 0xFE	; 254
 604:	80 81       	ld	r24, Z
 606:	8f d4       	rcall	.+2334   	; 0xf26 <UART1_Transmit>
 608:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <byte>
			{
				byte = mfrc522_get_card_serial(str);
				if(byte == CARD_FOUND)
				{
					UART1_Transmit('@');
					for(byte=0;byte<8;byte++)
 60c:	8f 5f       	subi	r24, 0xFF	; 255
 60e:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <byte>
 612:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <byte>
 616:	e8 30       	cpi	r30, 0x08	; 8
 618:	90 f3       	brcs	.-28     	; 0x5fe <main+0x68>
 61a:	8b e3       	ldi	r24, 0x3B	; 59
					{
						UART1_Transmit(str[byte]);
					}
					UART1_Transmit(';');
 61c:	84 d4       	rcall	.+2312   	; 0xf26 <UART1_Transmit>
 61e:	cd cf       	rjmp	.-102    	; 0x5ba <main+0x24>

00000620 <DIO_WriteChannel>:
 620:	e8 2f       	mov	r30, r24
 622:	e6 95       	lsr	r30
		case DIO_PortG:
			Status = ReadBit(PING_Register, BitNo);
			break;
	}
	return Status;
}
 624:	e6 95       	lsr	r30
 626:	e6 95       	lsr	r30
 628:	87 70       	andi	r24, 0x07	; 7
 62a:	66 23       	and	r22, r22
 62c:	21 f0       	breq	.+8      	; 0x636 <DIO_WriteChannel+0x16>
 62e:	61 30       	cpi	r22, 0x01	; 1
 630:	09 f4       	brne	.+2      	; 0x634 <DIO_WriteChannel+0x14>
 632:	71 c0       	rjmp	.+226    	; 0x716 <DIO_WriteChannel+0xf6>
 634:	08 95       	ret
 636:	4e 2f       	mov	r20, r30
 638:	50 e0       	ldi	r21, 0x00	; 0
 63a:	47 30       	cpi	r20, 0x07	; 7
 63c:	51 05       	cpc	r21, r1
 63e:	08 f0       	brcs	.+2      	; 0x642 <DIO_WriteChannel+0x22>
 640:	d2 c0       	rjmp	.+420    	; 0x7e6 <DIO_WriteChannel+0x1c6>
 642:	fa 01       	movw	r30, r20
 644:	ea 5b       	subi	r30, 0xBA	; 186
 646:	ff 4f       	sbci	r31, 0xFF	; 255
 648:	97 c4       	rjmp	.+2350   	; 0xf78 <__tablejump2__>
 64a:	4b b3       	in	r20, 0x1b	; 27
 64c:	21 e0       	ldi	r18, 0x01	; 1
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	b9 01       	movw	r22, r18
 652:	02 c0       	rjmp	.+4      	; 0x658 <DIO_WriteChannel+0x38>
 654:	66 0f       	add	r22, r22
 656:	77 1f       	adc	r23, r23
 658:	8a 95       	dec	r24
 65a:	e2 f7       	brpl	.-8      	; 0x654 <DIO_WriteChannel+0x34>
 65c:	cb 01       	movw	r24, r22
 65e:	80 95       	com	r24
 660:	84 23       	and	r24, r20
 662:	8b bb       	out	0x1b, r24	; 27
 664:	08 95       	ret
 666:	48 b3       	in	r20, 0x18	; 24
 668:	21 e0       	ldi	r18, 0x01	; 1
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	b9 01       	movw	r22, r18
 66e:	02 c0       	rjmp	.+4      	; 0x674 <DIO_WriteChannel+0x54>
 670:	66 0f       	add	r22, r22
 672:	77 1f       	adc	r23, r23
 674:	8a 95       	dec	r24
 676:	e2 f7       	brpl	.-8      	; 0x670 <DIO_WriteChannel+0x50>
 678:	cb 01       	movw	r24, r22
 67a:	80 95       	com	r24
 67c:	84 23       	and	r24, r20
 67e:	88 bb       	out	0x18, r24	; 24
 680:	08 95       	ret
 682:	45 b3       	in	r20, 0x15	; 21
 684:	21 e0       	ldi	r18, 0x01	; 1
 686:	30 e0       	ldi	r19, 0x00	; 0
 688:	b9 01       	movw	r22, r18
 68a:	02 c0       	rjmp	.+4      	; 0x690 <DIO_WriteChannel+0x70>
 68c:	66 0f       	add	r22, r22
 68e:	77 1f       	adc	r23, r23
 690:	8a 95       	dec	r24
 692:	e2 f7       	brpl	.-8      	; 0x68c <DIO_WriteChannel+0x6c>
 694:	cb 01       	movw	r24, r22
 696:	80 95       	com	r24
 698:	84 23       	and	r24, r20
 69a:	85 bb       	out	0x15, r24	; 21
 69c:	08 95       	ret
 69e:	42 b3       	in	r20, 0x12	; 18
 6a0:	21 e0       	ldi	r18, 0x01	; 1
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	b9 01       	movw	r22, r18
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <DIO_WriteChannel+0x8c>
 6a8:	66 0f       	add	r22, r22
 6aa:	77 1f       	adc	r23, r23
 6ac:	8a 95       	dec	r24
 6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <DIO_WriteChannel+0x88>
 6b0:	cb 01       	movw	r24, r22
 6b2:	80 95       	com	r24
 6b4:	84 23       	and	r24, r20
 6b6:	82 bb       	out	0x12, r24	; 18
 6b8:	08 95       	ret
 6ba:	43 b1       	in	r20, 0x03	; 3
 6bc:	21 e0       	ldi	r18, 0x01	; 1
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	b9 01       	movw	r22, r18
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <DIO_WriteChannel+0xa8>
 6c4:	66 0f       	add	r22, r22
 6c6:	77 1f       	adc	r23, r23
 6c8:	8a 95       	dec	r24
 6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <DIO_WriteChannel+0xa4>
 6cc:	cb 01       	movw	r24, r22
 6ce:	80 95       	com	r24
 6d0:	84 23       	and	r24, r20
 6d2:	83 b9       	out	0x03, r24	; 3
 6d4:	08 95       	ret
 6d6:	e2 e6       	ldi	r30, 0x62	; 98
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	40 81       	ld	r20, Z
 6dc:	21 e0       	ldi	r18, 0x01	; 1
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	b9 01       	movw	r22, r18
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <DIO_WriteChannel+0xc8>
 6e4:	66 0f       	add	r22, r22
 6e6:	77 1f       	adc	r23, r23
 6e8:	8a 95       	dec	r24
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <DIO_WriteChannel+0xc4>
 6ec:	cb 01       	movw	r24, r22
 6ee:	80 95       	com	r24
 6f0:	84 23       	and	r24, r20
 6f2:	80 83       	st	Z, r24
 6f4:	08 95       	ret
 6f6:	e5 e6       	ldi	r30, 0x65	; 101
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	40 81       	ld	r20, Z
 6fc:	21 e0       	ldi	r18, 0x01	; 1
 6fe:	30 e0       	ldi	r19, 0x00	; 0
 700:	b9 01       	movw	r22, r18
 702:	02 c0       	rjmp	.+4      	; 0x708 <DIO_WriteChannel+0xe8>
 704:	66 0f       	add	r22, r22
 706:	77 1f       	adc	r23, r23
 708:	8a 95       	dec	r24
 70a:	e2 f7       	brpl	.-8      	; 0x704 <DIO_WriteChannel+0xe4>
 70c:	cb 01       	movw	r24, r22
 70e:	80 95       	com	r24
 710:	84 23       	and	r24, r20
 712:	80 83       	st	Z, r24
 714:	08 95       	ret
 716:	4e 2f       	mov	r20, r30
 718:	50 e0       	ldi	r21, 0x00	; 0
 71a:	47 30       	cpi	r20, 0x07	; 7
 71c:	51 05       	cpc	r21, r1
 71e:	08 f0       	brcs	.+2      	; 0x722 <DIO_WriteChannel+0x102>
 720:	62 c0       	rjmp	.+196    	; 0x7e6 <DIO_WriteChannel+0x1c6>
 722:	fa 01       	movw	r30, r20
 724:	e3 5b       	subi	r30, 0xB3	; 179
 726:	ff 4f       	sbci	r31, 0xFF	; 255
 728:	27 c4       	rjmp	.+2126   	; 0xf78 <__tablejump2__>
 72a:	4b b3       	in	r20, 0x1b	; 27
 72c:	21 e0       	ldi	r18, 0x01	; 1
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	b9 01       	movw	r22, r18
 732:	02 c0       	rjmp	.+4      	; 0x738 <DIO_WriteChannel+0x118>
 734:	66 0f       	add	r22, r22
 736:	77 1f       	adc	r23, r23
 738:	8a 95       	dec	r24
 73a:	e2 f7       	brpl	.-8      	; 0x734 <DIO_WriteChannel+0x114>
 73c:	cb 01       	movw	r24, r22
 73e:	84 2b       	or	r24, r20
 740:	8b bb       	out	0x1b, r24	; 27
 742:	08 95       	ret
 744:	48 b3       	in	r20, 0x18	; 24
 746:	21 e0       	ldi	r18, 0x01	; 1
 748:	30 e0       	ldi	r19, 0x00	; 0
 74a:	b9 01       	movw	r22, r18
 74c:	02 c0       	rjmp	.+4      	; 0x752 <DIO_WriteChannel+0x132>
 74e:	66 0f       	add	r22, r22
 750:	77 1f       	adc	r23, r23
 752:	8a 95       	dec	r24
 754:	e2 f7       	brpl	.-8      	; 0x74e <DIO_WriteChannel+0x12e>
 756:	cb 01       	movw	r24, r22
 758:	84 2b       	or	r24, r20
 75a:	88 bb       	out	0x18, r24	; 24
 75c:	08 95       	ret
 75e:	45 b3       	in	r20, 0x15	; 21
 760:	21 e0       	ldi	r18, 0x01	; 1
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	b9 01       	movw	r22, r18
 766:	02 c0       	rjmp	.+4      	; 0x76c <DIO_WriteChannel+0x14c>
 768:	66 0f       	add	r22, r22
 76a:	77 1f       	adc	r23, r23
 76c:	8a 95       	dec	r24
 76e:	e2 f7       	brpl	.-8      	; 0x768 <DIO_WriteChannel+0x148>
 770:	cb 01       	movw	r24, r22
 772:	84 2b       	or	r24, r20
 774:	85 bb       	out	0x15, r24	; 21
 776:	08 95       	ret
 778:	42 b3       	in	r20, 0x12	; 18
 77a:	21 e0       	ldi	r18, 0x01	; 1
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	b9 01       	movw	r22, r18
 780:	02 c0       	rjmp	.+4      	; 0x786 <DIO_WriteChannel+0x166>
 782:	66 0f       	add	r22, r22
 784:	77 1f       	adc	r23, r23
 786:	8a 95       	dec	r24
 788:	e2 f7       	brpl	.-8      	; 0x782 <DIO_WriteChannel+0x162>
 78a:	cb 01       	movw	r24, r22
 78c:	84 2b       	or	r24, r20
 78e:	82 bb       	out	0x12, r24	; 18
 790:	08 95       	ret
 792:	43 b1       	in	r20, 0x03	; 3
 794:	21 e0       	ldi	r18, 0x01	; 1
 796:	30 e0       	ldi	r19, 0x00	; 0
 798:	b9 01       	movw	r22, r18
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <DIO_WriteChannel+0x180>
 79c:	66 0f       	add	r22, r22
 79e:	77 1f       	adc	r23, r23
 7a0:	8a 95       	dec	r24
 7a2:	e2 f7       	brpl	.-8      	; 0x79c <DIO_WriteChannel+0x17c>
 7a4:	cb 01       	movw	r24, r22
 7a6:	84 2b       	or	r24, r20
 7a8:	83 b9       	out	0x03, r24	; 3
 7aa:	08 95       	ret
 7ac:	e2 e6       	ldi	r30, 0x62	; 98
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	40 81       	ld	r20, Z
 7b2:	21 e0       	ldi	r18, 0x01	; 1
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	b9 01       	movw	r22, r18
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <DIO_WriteChannel+0x19e>
 7ba:	66 0f       	add	r22, r22
 7bc:	77 1f       	adc	r23, r23
 7be:	8a 95       	dec	r24
 7c0:	e2 f7       	brpl	.-8      	; 0x7ba <DIO_WriteChannel+0x19a>
 7c2:	cb 01       	movw	r24, r22
 7c4:	84 2b       	or	r24, r20
 7c6:	80 83       	st	Z, r24
 7c8:	08 95       	ret
 7ca:	e5 e6       	ldi	r30, 0x65	; 101
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	40 81       	ld	r20, Z
 7d0:	21 e0       	ldi	r18, 0x01	; 1
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	b9 01       	movw	r22, r18
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <DIO_WriteChannel+0x1bc>
 7d8:	66 0f       	add	r22, r22
 7da:	77 1f       	adc	r23, r23
 7dc:	8a 95       	dec	r24
 7de:	e2 f7       	brpl	.-8      	; 0x7d8 <DIO_WriteChannel+0x1b8>
 7e0:	cb 01       	movw	r24, r22
 7e2:	84 2b       	or	r24, r20
 7e4:	80 83       	st	Z, r24
 7e6:	08 95       	ret

000007e8 <DIO_ConfigChannel>:

void DIO_ConfigChannel(DIO_ChannelTypes ChannelID , DIO_DirectionTypes Direction)
{
	DIO_PortTypes PortX = ChannelID / 8;
 7e8:	e8 2f       	mov	r30, r24
 7ea:	e6 95       	lsr	r30
 7ec:	e6 95       	lsr	r30
 7ee:	e6 95       	lsr	r30
	DIO_ChannelTypes BitNo = ChannelID % 8;
 7f0:	87 70       	andi	r24, 0x07	; 7
	switch(Direction)
 7f2:	66 23       	and	r22, r22
 7f4:	21 f0       	breq	.+8      	; 0x7fe <DIO_ConfigChannel+0x16>
 7f6:	61 30       	cpi	r22, 0x01	; 1
 7f8:	09 f4       	brne	.+2      	; 0x7fc <DIO_ConfigChannel+0x14>
 7fa:	71 c0       	rjmp	.+226    	; 0x8de <DIO_ConfigChannel+0xf6>
 7fc:	08 95       	ret
	{
		case INPUT:
		{
			switch(PortX)
 7fe:	4e 2f       	mov	r20, r30
 800:	50 e0       	ldi	r21, 0x00	; 0
 802:	47 30       	cpi	r20, 0x07	; 7
 804:	51 05       	cpc	r21, r1
 806:	08 f0       	brcs	.+2      	; 0x80a <DIO_ConfigChannel+0x22>
 808:	d2 c0       	rjmp	.+420    	; 0x9ae <DIO_ConfigChannel+0x1c6>
 80a:	fa 01       	movw	r30, r20
 80c:	ec 5a       	subi	r30, 0xAC	; 172
 80e:	ff 4f       	sbci	r31, 0xFF	; 255
 810:	b3 c3       	rjmp	.+1894   	; 0xf78 <__tablejump2__>
			{
				case DIO_PortA:
					ClearBit(DDRA_Register, BitNo);
 812:	4a b3       	in	r20, 0x1a	; 26
 814:	21 e0       	ldi	r18, 0x01	; 1
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	b9 01       	movw	r22, r18
 81a:	02 c0       	rjmp	.+4      	; 0x820 <DIO_ConfigChannel+0x38>
 81c:	66 0f       	add	r22, r22
 81e:	77 1f       	adc	r23, r23
 820:	8a 95       	dec	r24
 822:	e2 f7       	brpl	.-8      	; 0x81c <DIO_ConfigChannel+0x34>
 824:	cb 01       	movw	r24, r22
 826:	80 95       	com	r24
 828:	84 23       	and	r24, r20
 82a:	8a bb       	out	0x1a, r24	; 26
					break;
 82c:	08 95       	ret
				case DIO_PortB:
					ClearBit(DDRB_Register, BitNo);
 82e:	47 b3       	in	r20, 0x17	; 23
 830:	21 e0       	ldi	r18, 0x01	; 1
 832:	30 e0       	ldi	r19, 0x00	; 0
 834:	b9 01       	movw	r22, r18
 836:	02 c0       	rjmp	.+4      	; 0x83c <DIO_ConfigChannel+0x54>
 838:	66 0f       	add	r22, r22
 83a:	77 1f       	adc	r23, r23
 83c:	8a 95       	dec	r24
 83e:	e2 f7       	brpl	.-8      	; 0x838 <DIO_ConfigChannel+0x50>
 840:	cb 01       	movw	r24, r22
 842:	80 95       	com	r24
 844:	84 23       	and	r24, r20
 846:	87 bb       	out	0x17, r24	; 23
					break;
 848:	08 95       	ret
				case DIO_PortC:
					ClearBit(DDRC_Register, BitNo);
 84a:	44 b3       	in	r20, 0x14	; 20
 84c:	21 e0       	ldi	r18, 0x01	; 1
 84e:	30 e0       	ldi	r19, 0x00	; 0
 850:	b9 01       	movw	r22, r18
 852:	02 c0       	rjmp	.+4      	; 0x858 <DIO_ConfigChannel+0x70>
 854:	66 0f       	add	r22, r22
 856:	77 1f       	adc	r23, r23
 858:	8a 95       	dec	r24
 85a:	e2 f7       	brpl	.-8      	; 0x854 <DIO_ConfigChannel+0x6c>
 85c:	cb 01       	movw	r24, r22
 85e:	80 95       	com	r24
 860:	84 23       	and	r24, r20
 862:	84 bb       	out	0x14, r24	; 20
					break;
 864:	08 95       	ret
				case DIO_PortD:
					ClearBit(DDRD_Register, BitNo);
 866:	41 b3       	in	r20, 0x11	; 17
 868:	21 e0       	ldi	r18, 0x01	; 1
 86a:	30 e0       	ldi	r19, 0x00	; 0
 86c:	b9 01       	movw	r22, r18
 86e:	02 c0       	rjmp	.+4      	; 0x874 <DIO_ConfigChannel+0x8c>
 870:	66 0f       	add	r22, r22
 872:	77 1f       	adc	r23, r23
 874:	8a 95       	dec	r24
 876:	e2 f7       	brpl	.-8      	; 0x870 <DIO_ConfigChannel+0x88>
 878:	cb 01       	movw	r24, r22
 87a:	80 95       	com	r24
 87c:	84 23       	and	r24, r20
 87e:	81 bb       	out	0x11, r24	; 17
					break;
 880:	08 95       	ret
				case DIO_PortE:
					ClearBit(DDRE_Register, BitNo);
 882:	42 b1       	in	r20, 0x02	; 2
 884:	21 e0       	ldi	r18, 0x01	; 1
 886:	30 e0       	ldi	r19, 0x00	; 0
 888:	b9 01       	movw	r22, r18
 88a:	02 c0       	rjmp	.+4      	; 0x890 <DIO_ConfigChannel+0xa8>
 88c:	66 0f       	add	r22, r22
 88e:	77 1f       	adc	r23, r23
 890:	8a 95       	dec	r24
 892:	e2 f7       	brpl	.-8      	; 0x88c <DIO_ConfigChannel+0xa4>
 894:	cb 01       	movw	r24, r22
 896:	80 95       	com	r24
 898:	84 23       	and	r24, r20
 89a:	82 b9       	out	0x02, r24	; 2
					break;
 89c:	08 95       	ret
				case DIO_PortF:
					ClearBit(DDRF_Register, BitNo);
 89e:	e1 e6       	ldi	r30, 0x61	; 97
 8a0:	f0 e0       	ldi	r31, 0x00	; 0
 8a2:	40 81       	ld	r20, Z
 8a4:	21 e0       	ldi	r18, 0x01	; 1
 8a6:	30 e0       	ldi	r19, 0x00	; 0
 8a8:	b9 01       	movw	r22, r18
 8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <DIO_ConfigChannel+0xc8>
 8ac:	66 0f       	add	r22, r22
 8ae:	77 1f       	adc	r23, r23
 8b0:	8a 95       	dec	r24
 8b2:	e2 f7       	brpl	.-8      	; 0x8ac <DIO_ConfigChannel+0xc4>
 8b4:	cb 01       	movw	r24, r22
 8b6:	80 95       	com	r24
 8b8:	84 23       	and	r24, r20
 8ba:	80 83       	st	Z, r24
					break;
 8bc:	08 95       	ret
				case DIO_PortG:
					ClearBit(DDRG_Register, BitNo);
 8be:	e4 e6       	ldi	r30, 0x64	; 100
 8c0:	f0 e0       	ldi	r31, 0x00	; 0
 8c2:	40 81       	ld	r20, Z
 8c4:	21 e0       	ldi	r18, 0x01	; 1
 8c6:	30 e0       	ldi	r19, 0x00	; 0
 8c8:	b9 01       	movw	r22, r18
 8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <DIO_ConfigChannel+0xe8>
 8cc:	66 0f       	add	r22, r22
 8ce:	77 1f       	adc	r23, r23
 8d0:	8a 95       	dec	r24
 8d2:	e2 f7       	brpl	.-8      	; 0x8cc <DIO_ConfigChannel+0xe4>
 8d4:	cb 01       	movw	r24, r22
 8d6:	80 95       	com	r24
 8d8:	84 23       	and	r24, r20
 8da:	80 83       	st	Z, r24
					break;
 8dc:	08 95       	ret
			}
			break;
		}
		case OUTPUT:
		{
			switch(PortX)
 8de:	4e 2f       	mov	r20, r30
 8e0:	50 e0       	ldi	r21, 0x00	; 0
 8e2:	47 30       	cpi	r20, 0x07	; 7
 8e4:	51 05       	cpc	r21, r1
 8e6:	08 f0       	brcs	.+2      	; 0x8ea <DIO_ConfigChannel+0x102>
 8e8:	62 c0       	rjmp	.+196    	; 0x9ae <DIO_ConfigChannel+0x1c6>
 8ea:	fa 01       	movw	r30, r20
 8ec:	e5 5a       	subi	r30, 0xA5	; 165
 8ee:	ff 4f       	sbci	r31, 0xFF	; 255
 8f0:	43 c3       	rjmp	.+1670   	; 0xf78 <__tablejump2__>
			{
				case DIO_PortA:
				SetBit(DDRA_Register, BitNo);
 8f2:	4a b3       	in	r20, 0x1a	; 26
 8f4:	21 e0       	ldi	r18, 0x01	; 1
 8f6:	30 e0       	ldi	r19, 0x00	; 0
 8f8:	b9 01       	movw	r22, r18
 8fa:	02 c0       	rjmp	.+4      	; 0x900 <DIO_ConfigChannel+0x118>
 8fc:	66 0f       	add	r22, r22
 8fe:	77 1f       	adc	r23, r23
 900:	8a 95       	dec	r24
 902:	e2 f7       	brpl	.-8      	; 0x8fc <DIO_ConfigChannel+0x114>
 904:	cb 01       	movw	r24, r22
 906:	84 2b       	or	r24, r20
 908:	8a bb       	out	0x1a, r24	; 26
				break;
 90a:	08 95       	ret
				case DIO_PortB:
				SetBit(DDRB_Register, BitNo);
 90c:	47 b3       	in	r20, 0x17	; 23
 90e:	21 e0       	ldi	r18, 0x01	; 1
 910:	30 e0       	ldi	r19, 0x00	; 0
 912:	b9 01       	movw	r22, r18
 914:	02 c0       	rjmp	.+4      	; 0x91a <DIO_ConfigChannel+0x132>
 916:	66 0f       	add	r22, r22
 918:	77 1f       	adc	r23, r23
 91a:	8a 95       	dec	r24
 91c:	e2 f7       	brpl	.-8      	; 0x916 <DIO_ConfigChannel+0x12e>
 91e:	cb 01       	movw	r24, r22
 920:	84 2b       	or	r24, r20
 922:	87 bb       	out	0x17, r24	; 23
				break;
 924:	08 95       	ret
				case DIO_PortC:
				SetBit(DDRC_Register, BitNo);
 926:	44 b3       	in	r20, 0x14	; 20
 928:	21 e0       	ldi	r18, 0x01	; 1
 92a:	30 e0       	ldi	r19, 0x00	; 0
 92c:	b9 01       	movw	r22, r18
 92e:	02 c0       	rjmp	.+4      	; 0x934 <DIO_ConfigChannel+0x14c>
 930:	66 0f       	add	r22, r22
 932:	77 1f       	adc	r23, r23
 934:	8a 95       	dec	r24
 936:	e2 f7       	brpl	.-8      	; 0x930 <DIO_ConfigChannel+0x148>
 938:	cb 01       	movw	r24, r22
 93a:	84 2b       	or	r24, r20
 93c:	84 bb       	out	0x14, r24	; 20
				break;
 93e:	08 95       	ret
				case DIO_PortD:
				SetBit(DDRD_Register, BitNo);
 940:	41 b3       	in	r20, 0x11	; 17
 942:	21 e0       	ldi	r18, 0x01	; 1
 944:	30 e0       	ldi	r19, 0x00	; 0
 946:	b9 01       	movw	r22, r18
 948:	02 c0       	rjmp	.+4      	; 0x94e <DIO_ConfigChannel+0x166>
 94a:	66 0f       	add	r22, r22
 94c:	77 1f       	adc	r23, r23
 94e:	8a 95       	dec	r24
 950:	e2 f7       	brpl	.-8      	; 0x94a <DIO_ConfigChannel+0x162>
 952:	cb 01       	movw	r24, r22
 954:	84 2b       	or	r24, r20
 956:	81 bb       	out	0x11, r24	; 17
				break;
 958:	08 95       	ret
				case DIO_PortE:
				SetBit(DDRE_Register, BitNo);
 95a:	42 b1       	in	r20, 0x02	; 2
 95c:	21 e0       	ldi	r18, 0x01	; 1
 95e:	30 e0       	ldi	r19, 0x00	; 0
 960:	b9 01       	movw	r22, r18
 962:	02 c0       	rjmp	.+4      	; 0x968 <DIO_ConfigChannel+0x180>
 964:	66 0f       	add	r22, r22
 966:	77 1f       	adc	r23, r23
 968:	8a 95       	dec	r24
 96a:	e2 f7       	brpl	.-8      	; 0x964 <DIO_ConfigChannel+0x17c>
 96c:	cb 01       	movw	r24, r22
 96e:	84 2b       	or	r24, r20
 970:	82 b9       	out	0x02, r24	; 2
				break;
 972:	08 95       	ret
				case DIO_PortF:
				SetBit(DDRF_Register, BitNo);
 974:	e1 e6       	ldi	r30, 0x61	; 97
 976:	f0 e0       	ldi	r31, 0x00	; 0
 978:	40 81       	ld	r20, Z
 97a:	21 e0       	ldi	r18, 0x01	; 1
 97c:	30 e0       	ldi	r19, 0x00	; 0
 97e:	b9 01       	movw	r22, r18
 980:	02 c0       	rjmp	.+4      	; 0x986 <DIO_ConfigChannel+0x19e>
 982:	66 0f       	add	r22, r22
 984:	77 1f       	adc	r23, r23
 986:	8a 95       	dec	r24
 988:	e2 f7       	brpl	.-8      	; 0x982 <DIO_ConfigChannel+0x19a>
 98a:	cb 01       	movw	r24, r22
 98c:	84 2b       	or	r24, r20
 98e:	80 83       	st	Z, r24
				break;
 990:	08 95       	ret
				case DIO_PortG:
				SetBit(DDRG_Register, BitNo);
 992:	e4 e6       	ldi	r30, 0x64	; 100
 994:	f0 e0       	ldi	r31, 0x00	; 0
 996:	40 81       	ld	r20, Z
 998:	21 e0       	ldi	r18, 0x01	; 1
 99a:	30 e0       	ldi	r19, 0x00	; 0
 99c:	b9 01       	movw	r22, r18
 99e:	02 c0       	rjmp	.+4      	; 0x9a4 <DIO_ConfigChannel+0x1bc>
 9a0:	66 0f       	add	r22, r22
 9a2:	77 1f       	adc	r23, r23
 9a4:	8a 95       	dec	r24
 9a6:	e2 f7       	brpl	.-8      	; 0x9a0 <DIO_ConfigChannel+0x1b8>
 9a8:	cb 01       	movw	r24, r22
 9aa:	84 2b       	or	r24, r20
 9ac:	80 83       	st	Z, r24
 9ae:	08 95       	ret

000009b0 <__vector_1>:
			break;
	}
}

ISR(INT0_vect)
{
 9b0:	1f 92       	push	r1
 9b2:	0f 92       	push	r0
 9b4:	0f b6       	in	r0, 0x3f	; 63
 9b6:	0f 92       	push	r0
 9b8:	11 24       	eor	r1, r1
 9ba:	0b b6       	in	r0, 0x3b	; 59
 9bc:	0f 92       	push	r0
 9be:	2f 93       	push	r18
 9c0:	3f 93       	push	r19
 9c2:	4f 93       	push	r20
 9c4:	5f 93       	push	r21
 9c6:	6f 93       	push	r22
 9c8:	7f 93       	push	r23
 9ca:	8f 93       	push	r24
 9cc:	9f 93       	push	r25
 9ce:	af 93       	push	r26
 9d0:	bf 93       	push	r27
 9d2:	ef 93       	push	r30
 9d4:	ff 93       	push	r31
	EXT_INTERRUPT0_FUNCTION_PTR();
 9d6:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <EXT_INTERRUPT0_FUNCTION_PTR>
 9da:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <EXT_INTERRUPT0_FUNCTION_PTR+0x1>
 9de:	09 95       	icall
}
 9e0:	ff 91       	pop	r31
 9e2:	ef 91       	pop	r30
 9e4:	bf 91       	pop	r27
 9e6:	af 91       	pop	r26
 9e8:	9f 91       	pop	r25
 9ea:	8f 91       	pop	r24
 9ec:	7f 91       	pop	r23
 9ee:	6f 91       	pop	r22
 9f0:	5f 91       	pop	r21
 9f2:	4f 91       	pop	r20
 9f4:	3f 91       	pop	r19
 9f6:	2f 91       	pop	r18
 9f8:	0f 90       	pop	r0
 9fa:	0b be       	out	0x3b, r0	; 59
 9fc:	0f 90       	pop	r0
 9fe:	0f be       	out	0x3f, r0	; 63
 a00:	0f 90       	pop	r0
 a02:	1f 90       	pop	r1
 a04:	18 95       	reti

00000a06 <__vector_2>:

ISR(INT1_vect)
{
 a06:	1f 92       	push	r1
 a08:	0f 92       	push	r0
 a0a:	0f b6       	in	r0, 0x3f	; 63
 a0c:	0f 92       	push	r0
 a0e:	11 24       	eor	r1, r1
 a10:	0b b6       	in	r0, 0x3b	; 59
 a12:	0f 92       	push	r0
 a14:	2f 93       	push	r18
 a16:	3f 93       	push	r19
 a18:	4f 93       	push	r20
 a1a:	5f 93       	push	r21
 a1c:	6f 93       	push	r22
 a1e:	7f 93       	push	r23
 a20:	8f 93       	push	r24
 a22:	9f 93       	push	r25
 a24:	af 93       	push	r26
 a26:	bf 93       	push	r27
 a28:	ef 93       	push	r30
 a2a:	ff 93       	push	r31
	EXT_INTERRUPT1_FUNCTION_PTR();
 a2c:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <EXT_INTERRUPT1_FUNCTION_PTR>
 a30:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <EXT_INTERRUPT1_FUNCTION_PTR+0x1>
 a34:	09 95       	icall
}
 a36:	ff 91       	pop	r31
 a38:	ef 91       	pop	r30
 a3a:	bf 91       	pop	r27
 a3c:	af 91       	pop	r26
 a3e:	9f 91       	pop	r25
 a40:	8f 91       	pop	r24
 a42:	7f 91       	pop	r23
 a44:	6f 91       	pop	r22
 a46:	5f 91       	pop	r21
 a48:	4f 91       	pop	r20
 a4a:	3f 91       	pop	r19
 a4c:	2f 91       	pop	r18
 a4e:	0f 90       	pop	r0
 a50:	0b be       	out	0x3b, r0	; 59
 a52:	0f 90       	pop	r0
 a54:	0f be       	out	0x3f, r0	; 63
 a56:	0f 90       	pop	r0
 a58:	1f 90       	pop	r1
 a5a:	18 95       	reti

00000a5c <__vector_3>:

ISR(INT2_vect)
{
 a5c:	1f 92       	push	r1
 a5e:	0f 92       	push	r0
 a60:	0f b6       	in	r0, 0x3f	; 63
 a62:	0f 92       	push	r0
 a64:	11 24       	eor	r1, r1
 a66:	0b b6       	in	r0, 0x3b	; 59
 a68:	0f 92       	push	r0
 a6a:	2f 93       	push	r18
 a6c:	3f 93       	push	r19
 a6e:	4f 93       	push	r20
 a70:	5f 93       	push	r21
 a72:	6f 93       	push	r22
 a74:	7f 93       	push	r23
 a76:	8f 93       	push	r24
 a78:	9f 93       	push	r25
 a7a:	af 93       	push	r26
 a7c:	bf 93       	push	r27
 a7e:	ef 93       	push	r30
 a80:	ff 93       	push	r31
	EXT_INTERRUPT2_FUNCTION_PTR();
 a82:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <EXT_INTERRUPT2_FUNCTION_PTR>
 a86:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <EXT_INTERRUPT2_FUNCTION_PTR+0x1>
 a8a:	09 95       	icall
}
 a8c:	ff 91       	pop	r31
 a8e:	ef 91       	pop	r30
 a90:	bf 91       	pop	r27
 a92:	af 91       	pop	r26
 a94:	9f 91       	pop	r25
 a96:	8f 91       	pop	r24
 a98:	7f 91       	pop	r23
 a9a:	6f 91       	pop	r22
 a9c:	5f 91       	pop	r21
 a9e:	4f 91       	pop	r20
 aa0:	3f 91       	pop	r19
 aa2:	2f 91       	pop	r18
 aa4:	0f 90       	pop	r0
 aa6:	0b be       	out	0x3b, r0	; 59
 aa8:	0f 90       	pop	r0
 aaa:	0f be       	out	0x3f, r0	; 63
 aac:	0f 90       	pop	r0
 aae:	1f 90       	pop	r1
 ab0:	18 95       	reti

00000ab2 <__vector_4>:

ISR(INT3_vect)
{
 ab2:	1f 92       	push	r1
 ab4:	0f 92       	push	r0
 ab6:	0f b6       	in	r0, 0x3f	; 63
 ab8:	0f 92       	push	r0
 aba:	11 24       	eor	r1, r1
 abc:	0b b6       	in	r0, 0x3b	; 59
 abe:	0f 92       	push	r0
 ac0:	2f 93       	push	r18
 ac2:	3f 93       	push	r19
 ac4:	4f 93       	push	r20
 ac6:	5f 93       	push	r21
 ac8:	6f 93       	push	r22
 aca:	7f 93       	push	r23
 acc:	8f 93       	push	r24
 ace:	9f 93       	push	r25
 ad0:	af 93       	push	r26
 ad2:	bf 93       	push	r27
 ad4:	ef 93       	push	r30
 ad6:	ff 93       	push	r31
	EXT_INTERRUPT3_FUNCTION_PTR();
 ad8:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <EXT_INTERRUPT3_FUNCTION_PTR>
 adc:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <EXT_INTERRUPT3_FUNCTION_PTR+0x1>
 ae0:	09 95       	icall
}
 ae2:	ff 91       	pop	r31
 ae4:	ef 91       	pop	r30
 ae6:	bf 91       	pop	r27
 ae8:	af 91       	pop	r26
 aea:	9f 91       	pop	r25
 aec:	8f 91       	pop	r24
 aee:	7f 91       	pop	r23
 af0:	6f 91       	pop	r22
 af2:	5f 91       	pop	r21
 af4:	4f 91       	pop	r20
 af6:	3f 91       	pop	r19
 af8:	2f 91       	pop	r18
 afa:	0f 90       	pop	r0
 afc:	0b be       	out	0x3b, r0	; 59
 afe:	0f 90       	pop	r0
 b00:	0f be       	out	0x3f, r0	; 63
 b02:	0f 90       	pop	r0
 b04:	1f 90       	pop	r1
 b06:	18 95       	reti

00000b08 <__vector_5>:

ISR(INT4_vect)
{
 b08:	1f 92       	push	r1
 b0a:	0f 92       	push	r0
 b0c:	0f b6       	in	r0, 0x3f	; 63
 b0e:	0f 92       	push	r0
 b10:	11 24       	eor	r1, r1
 b12:	0b b6       	in	r0, 0x3b	; 59
 b14:	0f 92       	push	r0
 b16:	2f 93       	push	r18
 b18:	3f 93       	push	r19
 b1a:	4f 93       	push	r20
 b1c:	5f 93       	push	r21
 b1e:	6f 93       	push	r22
 b20:	7f 93       	push	r23
 b22:	8f 93       	push	r24
 b24:	9f 93       	push	r25
 b26:	af 93       	push	r26
 b28:	bf 93       	push	r27
 b2a:	ef 93       	push	r30
 b2c:	ff 93       	push	r31
	EXT_INTERRUPT4_FUNCTION_PTR();
 b2e:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <EXT_INTERRUPT4_FUNCTION_PTR>
 b32:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <EXT_INTERRUPT4_FUNCTION_PTR+0x1>
 b36:	09 95       	icall
}
 b38:	ff 91       	pop	r31
 b3a:	ef 91       	pop	r30
 b3c:	bf 91       	pop	r27
 b3e:	af 91       	pop	r26
 b40:	9f 91       	pop	r25
 b42:	8f 91       	pop	r24
 b44:	7f 91       	pop	r23
 b46:	6f 91       	pop	r22
 b48:	5f 91       	pop	r21
 b4a:	4f 91       	pop	r20
 b4c:	3f 91       	pop	r19
 b4e:	2f 91       	pop	r18
 b50:	0f 90       	pop	r0
 b52:	0b be       	out	0x3b, r0	; 59
 b54:	0f 90       	pop	r0
 b56:	0f be       	out	0x3f, r0	; 63
 b58:	0f 90       	pop	r0
 b5a:	1f 90       	pop	r1
 b5c:	18 95       	reti

00000b5e <__vector_6>:

ISR(INT5_vect)
{
 b5e:	1f 92       	push	r1
 b60:	0f 92       	push	r0
 b62:	0f b6       	in	r0, 0x3f	; 63
 b64:	0f 92       	push	r0
 b66:	11 24       	eor	r1, r1
 b68:	0b b6       	in	r0, 0x3b	; 59
 b6a:	0f 92       	push	r0
 b6c:	2f 93       	push	r18
 b6e:	3f 93       	push	r19
 b70:	4f 93       	push	r20
 b72:	5f 93       	push	r21
 b74:	6f 93       	push	r22
 b76:	7f 93       	push	r23
 b78:	8f 93       	push	r24
 b7a:	9f 93       	push	r25
 b7c:	af 93       	push	r26
 b7e:	bf 93       	push	r27
 b80:	ef 93       	push	r30
 b82:	ff 93       	push	r31
	EXT_INTERRUPT5_FUNCTION_PTR();
 b84:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <EXT_INTERRUPT5_FUNCTION_PTR>
 b88:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <EXT_INTERRUPT5_FUNCTION_PTR+0x1>
 b8c:	09 95       	icall
}
 b8e:	ff 91       	pop	r31
 b90:	ef 91       	pop	r30
 b92:	bf 91       	pop	r27
 b94:	af 91       	pop	r26
 b96:	9f 91       	pop	r25
 b98:	8f 91       	pop	r24
 b9a:	7f 91       	pop	r23
 b9c:	6f 91       	pop	r22
 b9e:	5f 91       	pop	r21
 ba0:	4f 91       	pop	r20
 ba2:	3f 91       	pop	r19
 ba4:	2f 91       	pop	r18
 ba6:	0f 90       	pop	r0
 ba8:	0b be       	out	0x3b, r0	; 59
 baa:	0f 90       	pop	r0
 bac:	0f be       	out	0x3f, r0	; 63
 bae:	0f 90       	pop	r0
 bb0:	1f 90       	pop	r1
 bb2:	18 95       	reti

00000bb4 <__vector_7>:

ISR(INT6_vect)
{
 bb4:	1f 92       	push	r1
 bb6:	0f 92       	push	r0
 bb8:	0f b6       	in	r0, 0x3f	; 63
 bba:	0f 92       	push	r0
 bbc:	11 24       	eor	r1, r1
 bbe:	0b b6       	in	r0, 0x3b	; 59
 bc0:	0f 92       	push	r0
 bc2:	2f 93       	push	r18
 bc4:	3f 93       	push	r19
 bc6:	4f 93       	push	r20
 bc8:	5f 93       	push	r21
 bca:	6f 93       	push	r22
 bcc:	7f 93       	push	r23
 bce:	8f 93       	push	r24
 bd0:	9f 93       	push	r25
 bd2:	af 93       	push	r26
 bd4:	bf 93       	push	r27
 bd6:	ef 93       	push	r30
 bd8:	ff 93       	push	r31
	EXT_INTERRUPT6_FUNCTION_PTR();
 bda:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <EXT_INTERRUPT6_FUNCTION_PTR>
 bde:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <EXT_INTERRUPT6_FUNCTION_PTR+0x1>
 be2:	09 95       	icall
}
 be4:	ff 91       	pop	r31
 be6:	ef 91       	pop	r30
 be8:	bf 91       	pop	r27
 bea:	af 91       	pop	r26
 bec:	9f 91       	pop	r25
 bee:	8f 91       	pop	r24
 bf0:	7f 91       	pop	r23
 bf2:	6f 91       	pop	r22
 bf4:	5f 91       	pop	r21
 bf6:	4f 91       	pop	r20
 bf8:	3f 91       	pop	r19
 bfa:	2f 91       	pop	r18
 bfc:	0f 90       	pop	r0
 bfe:	0b be       	out	0x3b, r0	; 59
 c00:	0f 90       	pop	r0
 c02:	0f be       	out	0x3f, r0	; 63
 c04:	0f 90       	pop	r0
 c06:	1f 90       	pop	r1
 c08:	18 95       	reti

00000c0a <__vector_8>:

ISR(INT7_vect)
{
 c0a:	1f 92       	push	r1
 c0c:	0f 92       	push	r0
 c0e:	0f b6       	in	r0, 0x3f	; 63
 c10:	0f 92       	push	r0
 c12:	11 24       	eor	r1, r1
 c14:	0b b6       	in	r0, 0x3b	; 59
 c16:	0f 92       	push	r0
 c18:	2f 93       	push	r18
 c1a:	3f 93       	push	r19
 c1c:	4f 93       	push	r20
 c1e:	5f 93       	push	r21
 c20:	6f 93       	push	r22
 c22:	7f 93       	push	r23
 c24:	8f 93       	push	r24
 c26:	9f 93       	push	r25
 c28:	af 93       	push	r26
 c2a:	bf 93       	push	r27
 c2c:	ef 93       	push	r30
 c2e:	ff 93       	push	r31
	EXT_INTERRUPT7_FUNCTION_PTR();
 c30:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <__data_end>
 c34:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <__data_end+0x1>
 c38:	09 95       	icall
 c3a:	ff 91       	pop	r31
 c3c:	ef 91       	pop	r30
 c3e:	bf 91       	pop	r27
 c40:	af 91       	pop	r26
 c42:	9f 91       	pop	r25
 c44:	8f 91       	pop	r24
 c46:	7f 91       	pop	r23
 c48:	6f 91       	pop	r22
 c4a:	5f 91       	pop	r21
 c4c:	4f 91       	pop	r20
 c4e:	3f 91       	pop	r19
 c50:	2f 91       	pop	r18
 c52:	0f 90       	pop	r0
 c54:	0b be       	out	0x3b, r0	; 59
 c56:	0f 90       	pop	r0
 c58:	0f be       	out	0x3f, r0	; 63
 c5a:	0f 90       	pop	r0
 c5c:	1f 90       	pop	r1
 c5e:	18 95       	reti

00000c60 <GIE_Enable>:
	ClearBit(GIE_SREG, GIE_SREG_IBIT);
}

void GIE_Enable(void)
{
	SetBit(GIE_SREG, GIE_SREG_IBIT);
 c60:	8f b7       	in	r24, 0x3f	; 63
 c62:	80 68       	ori	r24, 0x80	; 128
 c64:	8f bf       	out	0x3f, r24	; 63
 c66:	08 95       	ret

00000c68 <SPI_Init>:
	{
		SPI_Master_TransmitChar(*String);
		_delay_ms(150);
		String++;
	}
}
 c68:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 c6c:	88 23       	and	r24, r24
 c6e:	09 f4       	brne	.+2      	; 0xc72 <SPI_Init+0xa>
 c70:	47 c0       	rjmp	.+142    	; 0xd00 <SPI_Init+0x98>
 c72:	81 30       	cpi	r24, 0x01	; 1
 c74:	09 f0       	breq	.+2      	; 0xc78 <SPI_Init+0x10>
 c76:	84 c0       	rjmp	.+264    	; 0xd80 <SPI_Init+0x118>
 c78:	61 e0       	ldi	r22, 0x01	; 1
 c7a:	8a e0       	ldi	r24, 0x0A	; 10
 c7c:	b5 dd       	rcall	.-1174   	; 0x7e8 <DIO_ConfigChannel>
 c7e:	61 e0       	ldi	r22, 0x01	; 1
 c80:	89 e0       	ldi	r24, 0x09	; 9
 c82:	b2 dd       	rcall	.-1180   	; 0x7e8 <DIO_ConfigChannel>
 c84:	61 e0       	ldi	r22, 0x01	; 1
 c86:	88 e0       	ldi	r24, 0x08	; 8
 c88:	af dd       	rcall	.-1186   	; 0x7e8 <DIO_ConfigChannel>
 c8a:	60 e0       	ldi	r22, 0x00	; 0
 c8c:	8b e0       	ldi	r24, 0x0B	; 11
 c8e:	ac dd       	rcall	.-1192   	; 0x7e8 <DIO_ConfigChannel>
 c90:	61 e0       	ldi	r22, 0x01	; 1
 c92:	88 e0       	ldi	r24, 0x08	; 8
 c94:	c5 dc       	rcall	.-1654   	; 0x620 <DIO_WriteChannel>
 c96:	2d b1       	in	r18, 0x0d	; 13
 c98:	e0 e0       	ldi	r30, 0x00	; 0
 c9a:	f1 e0       	ldi	r31, 0x01	; 1
 c9c:	90 81       	ld	r25, Z
 c9e:	30 e1       	ldi	r19, 0x10	; 16
 ca0:	93 9f       	mul	r25, r19
 ca2:	c0 01       	movw	r24, r0
 ca4:	11 24       	eor	r1, r1
 ca6:	82 2b       	or	r24, r18
 ca8:	8d b9       	out	0x0d, r24	; 13
 caa:	9e b1       	in	r25, 0x0e	; 14
 cac:	82 81       	ldd	r24, Z+2	; 0x02
 cae:	89 2b       	or	r24, r25
 cb0:	8e b9       	out	0x0e, r24	; 14
 cb2:	9d b1       	in	r25, 0x0d	; 13
 cb4:	81 81       	ldd	r24, Z+1	; 0x01
 cb6:	89 2b       	or	r24, r25
 cb8:	8d b9       	out	0x0d, r24	; 13
 cba:	2d b1       	in	r18, 0x0d	; 13
 cbc:	93 81       	ldd	r25, Z+3	; 0x03
 cbe:	30 e2       	ldi	r19, 0x20	; 32
 cc0:	93 9f       	mul	r25, r19
 cc2:	c0 01       	movw	r24, r0
 cc4:	11 24       	eor	r1, r1
 cc6:	82 2b       	or	r24, r18
 cc8:	8d b9       	out	0x0d, r24	; 13
 cca:	2d b1       	in	r18, 0x0d	; 13
 ccc:	94 81       	ldd	r25, Z+4	; 0x04
 cce:	30 e8       	ldi	r19, 0x80	; 128
 cd0:	93 9f       	mul	r25, r19
 cd2:	c0 01       	movw	r24, r0
 cd4:	11 24       	eor	r1, r1
 cd6:	82 2b       	or	r24, r18
 cd8:	8d b9       	out	0x0d, r24	; 13
 cda:	2d b1       	in	r18, 0x0d	; 13
 cdc:	96 81       	ldd	r25, Z+6	; 0x06
 cde:	89 2f       	mov	r24, r25
 ce0:	90 e0       	ldi	r25, 0x00	; 0
 ce2:	88 0f       	add	r24, r24
 ce4:	99 1f       	adc	r25, r25
 ce6:	88 0f       	add	r24, r24
 ce8:	99 1f       	adc	r25, r25
 cea:	82 2b       	or	r24, r18
 cec:	8d b9       	out	0x0d, r24	; 13
 cee:	2d b1       	in	r18, 0x0d	; 13
 cf0:	95 81       	ldd	r25, Z+5	; 0x05
 cf2:	30 e4       	ldi	r19, 0x40	; 64
 cf4:	93 9f       	mul	r25, r19
 cf6:	c0 01       	movw	r24, r0
 cf8:	11 24       	eor	r1, r1
 cfa:	82 2b       	or	r24, r18
 cfc:	8d b9       	out	0x0d, r24	; 13
 cfe:	08 95       	ret
 d00:	60 e0       	ldi	r22, 0x00	; 0
 d02:	8a e0       	ldi	r24, 0x0A	; 10
 d04:	71 dd       	rcall	.-1310   	; 0x7e8 <DIO_ConfigChannel>
 d06:	60 e0       	ldi	r22, 0x00	; 0
 d08:	89 e0       	ldi	r24, 0x09	; 9
 d0a:	6e dd       	rcall	.-1316   	; 0x7e8 <DIO_ConfigChannel>
 d0c:	60 e0       	ldi	r22, 0x00	; 0
 d0e:	88 e0       	ldi	r24, 0x08	; 8
 d10:	6b dd       	rcall	.-1322   	; 0x7e8 <DIO_ConfigChannel>
 d12:	61 e0       	ldi	r22, 0x01	; 1
 d14:	8b e0       	ldi	r24, 0x0B	; 11
 d16:	68 dd       	rcall	.-1328   	; 0x7e8 <DIO_ConfigChannel>
 d18:	2d b1       	in	r18, 0x0d	; 13
 d1a:	e0 e0       	ldi	r30, 0x00	; 0
 d1c:	f1 e0       	ldi	r31, 0x01	; 1
 d1e:	90 81       	ld	r25, Z
 d20:	30 e1       	ldi	r19, 0x10	; 16
 d22:	93 9f       	mul	r25, r19
 d24:	c0 01       	movw	r24, r0
 d26:	11 24       	eor	r1, r1
 d28:	82 2b       	or	r24, r18
 d2a:	8d b9       	out	0x0d, r24	; 13
 d2c:	9e b1       	in	r25, 0x0e	; 14
 d2e:	82 81       	ldd	r24, Z+2	; 0x02
 d30:	89 2b       	or	r24, r25
 d32:	8e b9       	out	0x0e, r24	; 14
 d34:	9d b1       	in	r25, 0x0d	; 13
 d36:	81 81       	ldd	r24, Z+1	; 0x01
 d38:	89 2b       	or	r24, r25
 d3a:	8d b9       	out	0x0d, r24	; 13
 d3c:	2d b1       	in	r18, 0x0d	; 13
 d3e:	93 81       	ldd	r25, Z+3	; 0x03
 d40:	30 e2       	ldi	r19, 0x20	; 32
 d42:	93 9f       	mul	r25, r19
 d44:	c0 01       	movw	r24, r0
 d46:	11 24       	eor	r1, r1
 d48:	82 2b       	or	r24, r18
 d4a:	8d b9       	out	0x0d, r24	; 13
 d4c:	2d b1       	in	r18, 0x0d	; 13
 d4e:	94 81       	ldd	r25, Z+4	; 0x04
 d50:	30 e8       	ldi	r19, 0x80	; 128
 d52:	93 9f       	mul	r25, r19
 d54:	c0 01       	movw	r24, r0
 d56:	11 24       	eor	r1, r1
 d58:	82 2b       	or	r24, r18
 d5a:	8d b9       	out	0x0d, r24	; 13
 d5c:	2d b1       	in	r18, 0x0d	; 13
 d5e:	96 81       	ldd	r25, Z+6	; 0x06
 d60:	89 2f       	mov	r24, r25
 d62:	90 e0       	ldi	r25, 0x00	; 0
 d64:	88 0f       	add	r24, r24
 d66:	99 1f       	adc	r25, r25
 d68:	88 0f       	add	r24, r24
 d6a:	99 1f       	adc	r25, r25
 d6c:	82 2b       	or	r24, r18
 d6e:	8d b9       	out	0x0d, r24	; 13
 d70:	2d b1       	in	r18, 0x0d	; 13
 d72:	95 81       	ldd	r25, Z+5	; 0x05
 d74:	30 e4       	ldi	r19, 0x40	; 64
 d76:	93 9f       	mul	r25, r19
 d78:	c0 01       	movw	r24, r0
 d7a:	11 24       	eor	r1, r1
 d7c:	82 2b       	or	r24, r18
 d7e:	8d b9       	out	0x0d, r24	; 13
 d80:	08 95       	ret

00000d82 <SPI_Master_TransmitChar>:
 d82:	8f b9       	out	0x0f, r24	; 15
 d84:	77 9b       	sbis	0x0e, 7	; 14
 d86:	fe cf       	rjmp	.-4      	; 0xd84 <SPI_Master_TransmitChar+0x2>
 d88:	8f b1       	in	r24, 0x0f	; 15
 d8a:	08 95       	ret

00000d8c <SPI_Cannel_State>:

void SPI_Cannel_State(DIO_ChannelTypes ChannelID,SPI_State State)
{
 d8c:	cf 93       	push	r28
 d8e:	df 93       	push	r29
 d90:	c8 2f       	mov	r28, r24
 d92:	d6 2f       	mov	r29, r22
	DIO_ConfigChannel(ChannelID,OUTPUT);
 d94:	61 e0       	ldi	r22, 0x01	; 1
 d96:	28 dd       	rcall	.-1456   	; 0x7e8 <DIO_ConfigChannel>
	switch (State)
 d98:	dd 23       	and	r29, r29
 d9a:	19 f0       	breq	.+6      	; 0xda2 <SPI_Cannel_State+0x16>
 d9c:	d1 30       	cpi	r29, 0x01	; 1
 d9e:	29 f0       	breq	.+10     	; 0xdaa <SPI_Cannel_State+0x1e>
 da0:	07 c0       	rjmp	.+14     	; 0xdb0 <SPI_Cannel_State+0x24>
	{
		case SPI_Disable:DIO_WriteChannel(ChannelID,STD_HIGH);break;
 da2:	61 e0       	ldi	r22, 0x01	; 1
 da4:	8c 2f       	mov	r24, r28
 da6:	3c dc       	rcall	.-1928   	; 0x620 <DIO_WriteChannel>
 da8:	03 c0       	rjmp	.+6      	; 0xdb0 <SPI_Cannel_State+0x24>
		case SPI_Enable:DIO_WriteChannel(ChannelID,STD_LOW);break;
 daa:	60 e0       	ldi	r22, 0x00	; 0
 dac:	8c 2f       	mov	r24, r28
 dae:	38 dc       	rcall	.-1936   	; 0x620 <DIO_WriteChannel>
	}
 db0:	df 91       	pop	r29
 db2:	cf 91       	pop	r28
 db4:	08 95       	ret

00000db6 <UART1_Init>:
}

void UART0_Transmit(u_int8 Data)
{
	while(ReadBit(UCSR0A_Register, UDRE) == 0);
	UDR0_Register = Data;
 db6:	ad e9       	ldi	r26, 0x9D	; 157
 db8:	b0 e0       	ldi	r27, 0x00	; 0
 dba:	2c 91       	ld	r18, X
 dbc:	e7 e0       	ldi	r30, 0x07	; 7
 dbe:	f1 e0       	ldi	r31, 0x01	; 1
 dc0:	90 81       	ld	r25, Z
 dc2:	30 e4       	ldi	r19, 0x40	; 64
 dc4:	93 9f       	mul	r25, r19
 dc6:	c0 01       	movw	r24, r0
 dc8:	11 24       	eor	r1, r1
 dca:	82 2b       	or	r24, r18
 dcc:	8c 93       	st	X, r24
 dce:	2c 91       	ld	r18, X
 dd0:	91 81       	ldd	r25, Z+1	; 0x01
 dd2:	30 e1       	ldi	r19, 0x10	; 16
 dd4:	93 9f       	mul	r25, r19
 dd6:	c0 01       	movw	r24, r0
 dd8:	11 24       	eor	r1, r1
 dda:	82 2b       	or	r24, r18
 ddc:	8c 93       	st	X, r24
 dde:	2c 91       	ld	r18, X
 de0:	92 81       	ldd	r25, Z+2	; 0x02
 de2:	89 2f       	mov	r24, r25
 de4:	90 e0       	ldi	r25, 0x00	; 0
 de6:	88 0f       	add	r24, r24
 de8:	99 1f       	adc	r25, r25
 dea:	88 0f       	add	r24, r24
 dec:	99 1f       	adc	r25, r25
 dee:	88 0f       	add	r24, r24
 df0:	99 1f       	adc	r25, r25
 df2:	82 2b       	or	r24, r18
 df4:	8c 93       	st	X, r24
 df6:	aa e9       	ldi	r26, 0x9A	; 154
 df8:	b0 e0       	ldi	r27, 0x00	; 0
 dfa:	2c 91       	ld	r18, X
 dfc:	94 81       	ldd	r25, Z+4	; 0x04
 dfe:	89 2f       	mov	r24, r25
 e00:	90 e0       	ldi	r25, 0x00	; 0
 e02:	88 0f       	add	r24, r24
 e04:	99 1f       	adc	r25, r25
 e06:	88 0f       	add	r24, r24
 e08:	99 1f       	adc	r25, r25
 e0a:	88 0f       	add	r24, r24
 e0c:	99 1f       	adc	r25, r25
 e0e:	82 2b       	or	r24, r18
 e10:	8c 93       	st	X, r24
 e12:	2c 91       	ld	r18, X
 e14:	95 81       	ldd	r25, Z+5	; 0x05
 e16:	30 e4       	ldi	r19, 0x40	; 64
 e18:	93 9f       	mul	r25, r19
 e1a:	c0 01       	movw	r24, r0
 e1c:	11 24       	eor	r1, r1
 e1e:	82 2b       	or	r24, r18
 e20:	8c 93       	st	X, r24
 e22:	2c 91       	ld	r18, X
 e24:	96 81       	ldd	r25, Z+6	; 0x06
 e26:	30 e1       	ldi	r19, 0x10	; 16
 e28:	93 9f       	mul	r25, r19
 e2a:	c0 01       	movw	r24, r0
 e2c:	11 24       	eor	r1, r1
 e2e:	82 2b       	or	r24, r18
 e30:	8c 93       	st	X, r24
 e32:	2c 91       	ld	r18, X
 e34:	97 81       	ldd	r25, Z+7	; 0x07
 e36:	30 e8       	ldi	r19, 0x80	; 128
 e38:	93 9f       	mul	r25, r19
 e3a:	c0 01       	movw	r24, r0
 e3c:	11 24       	eor	r1, r1
 e3e:	82 2b       	or	r24, r18
 e40:	8c 93       	st	X, r24
 e42:	80 85       	ldd	r24, Z+8	; 0x08
 e44:	88 23       	and	r24, r24
 e46:	19 f0       	breq	.+6      	; 0xe4e <UART1_Init+0x98>
 e48:	81 30       	cpi	r24, 0x01	; 1
 e4a:	41 f1       	breq	.+80     	; 0xe9c <UART1_Init+0xe6>
 e4c:	4a c0       	rjmp	.+148    	; 0xee2 <UART1_Init+0x12c>
 e4e:	eb e9       	ldi	r30, 0x9B	; 155
 e50:	f0 e0       	ldi	r31, 0x00	; 0
 e52:	80 81       	ld	r24, Z
 e54:	8d 7f       	andi	r24, 0xFD	; 253
 e56:	80 83       	st	Z, r24
 e58:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <UART1_Cfg+0x9>
 e5c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <UART1_Cfg+0xa>
 e60:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <UART1_Cfg+0xb>
 e64:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <UART1_Cfg+0xc>
 e68:	88 0f       	add	r24, r24
 e6a:	99 1f       	adc	r25, r25
 e6c:	aa 1f       	adc	r26, r26
 e6e:	bb 1f       	adc	r27, r27
 e70:	88 0f       	add	r24, r24
 e72:	99 1f       	adc	r25, r25
 e74:	aa 1f       	adc	r26, r26
 e76:	bb 1f       	adc	r27, r27
 e78:	9c 01       	movw	r18, r24
 e7a:	ad 01       	movw	r20, r26
 e7c:	22 0f       	add	r18, r18
 e7e:	33 1f       	adc	r19, r19
 e80:	44 1f       	adc	r20, r20
 e82:	55 1f       	adc	r21, r21
 e84:	22 0f       	add	r18, r18
 e86:	33 1f       	adc	r19, r19
 e88:	44 1f       	adc	r20, r20
 e8a:	55 1f       	adc	r21, r21
 e8c:	60 e0       	ldi	r22, 0x00	; 0
 e8e:	74 e2       	ldi	r23, 0x24	; 36
 e90:	84 ef       	ldi	r24, 0xF4	; 244
 e92:	90 e0       	ldi	r25, 0x00	; 0
 e94:	4f d0       	rcall	.+158    	; 0xf34 <__udivmodsi4>
 e96:	21 50       	subi	r18, 0x01	; 1
 e98:	31 09       	sbc	r19, r1
 e9a:	25 c0       	rjmp	.+74     	; 0xee6 <UART1_Init+0x130>
 e9c:	eb e9       	ldi	r30, 0x9B	; 155
 e9e:	f0 e0       	ldi	r31, 0x00	; 0
 ea0:	80 81       	ld	r24, Z
 ea2:	82 60       	ori	r24, 0x02	; 2
 ea4:	80 83       	st	Z, r24
 ea6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <UART1_Cfg+0x9>
 eaa:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <UART1_Cfg+0xa>
 eae:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <UART1_Cfg+0xb>
 eb2:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <UART1_Cfg+0xc>
 eb6:	88 0f       	add	r24, r24
 eb8:	99 1f       	adc	r25, r25
 eba:	aa 1f       	adc	r26, r26
 ebc:	bb 1f       	adc	r27, r27
 ebe:	88 0f       	add	r24, r24
 ec0:	99 1f       	adc	r25, r25
 ec2:	aa 1f       	adc	r26, r26
 ec4:	bb 1f       	adc	r27, r27
 ec6:	9c 01       	movw	r18, r24
 ec8:	ad 01       	movw	r20, r26
 eca:	22 0f       	add	r18, r18
 ecc:	33 1f       	adc	r19, r19
 ece:	44 1f       	adc	r20, r20
 ed0:	55 1f       	adc	r21, r21
 ed2:	60 e0       	ldi	r22, 0x00	; 0
 ed4:	74 e2       	ldi	r23, 0x24	; 36
 ed6:	84 ef       	ldi	r24, 0xF4	; 244
 ed8:	90 e0       	ldi	r25, 0x00	; 0
 eda:	2c d0       	rcall	.+88     	; 0xf34 <__udivmodsi4>
 edc:	21 50       	subi	r18, 0x01	; 1
 ede:	31 09       	sbc	r19, r1
 ee0:	02 c0       	rjmp	.+4      	; 0xee6 <UART1_Init+0x130>
 ee2:	20 e0       	ldi	r18, 0x00	; 0
 ee4:	30 e0       	ldi	r19, 0x00	; 0
 ee6:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 eea:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 eee:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <UART1_Cfg+0x3>
 ef2:	94 30       	cpi	r25, 0x04	; 4
 ef4:	71 f4       	brne	.+28     	; 0xf12 <UART1_Init+0x15c>
 ef6:	ed e9       	ldi	r30, 0x9D	; 157
 ef8:	f0 e0       	ldi	r31, 0x00	; 0
 efa:	80 81       	ld	r24, Z
 efc:	82 60       	ori	r24, 0x02	; 2
 efe:	80 83       	st	Z, r24
 f00:	80 81       	ld	r24, Z
 f02:	84 60       	ori	r24, 0x04	; 4
 f04:	80 83       	st	Z, r24
 f06:	ea e9       	ldi	r30, 0x9A	; 154
 f08:	f0 e0       	ldi	r31, 0x00	; 0
 f0a:	80 81       	ld	r24, Z
 f0c:	84 60       	ori	r24, 0x04	; 4
 f0e:	80 83       	st	Z, r24
 f10:	08 95       	ret
 f12:	ed e9       	ldi	r30, 0x9D	; 157
 f14:	f0 e0       	ldi	r31, 0x00	; 0
 f16:	20 81       	ld	r18, Z
 f18:	89 2f       	mov	r24, r25
 f1a:	90 e0       	ldi	r25, 0x00	; 0
 f1c:	88 0f       	add	r24, r24
 f1e:	99 1f       	adc	r25, r25
 f20:	82 2b       	or	r24, r18
 f22:	80 83       	st	Z, r24
 f24:	08 95       	ret

00000f26 <UART1_Transmit>:
}

void UART1_Transmit(u_int8 Data)
{
	while(ReadBit(UCSR1A_Register, UDRE) == 0);
 f26:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 f2a:	95 ff       	sbrs	r25, 5
 f2c:	fc cf       	rjmp	.-8      	; 0xf26 <UART1_Transmit>
	UDR1_Register = Data;
 f2e:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 f32:	08 95       	ret

00000f34 <__udivmodsi4>:
 f34:	a1 e2       	ldi	r26, 0x21	; 33
 f36:	1a 2e       	mov	r1, r26
 f38:	aa 1b       	sub	r26, r26
 f3a:	bb 1b       	sub	r27, r27
 f3c:	fd 01       	movw	r30, r26
 f3e:	0d c0       	rjmp	.+26     	; 0xf5a <__udivmodsi4_ep>

00000f40 <__udivmodsi4_loop>:
 f40:	aa 1f       	adc	r26, r26
 f42:	bb 1f       	adc	r27, r27
 f44:	ee 1f       	adc	r30, r30
 f46:	ff 1f       	adc	r31, r31
 f48:	a2 17       	cp	r26, r18
 f4a:	b3 07       	cpc	r27, r19
 f4c:	e4 07       	cpc	r30, r20
 f4e:	f5 07       	cpc	r31, r21
 f50:	20 f0       	brcs	.+8      	; 0xf5a <__udivmodsi4_ep>
 f52:	a2 1b       	sub	r26, r18
 f54:	b3 0b       	sbc	r27, r19
 f56:	e4 0b       	sbc	r30, r20
 f58:	f5 0b       	sbc	r31, r21

00000f5a <__udivmodsi4_ep>:
 f5a:	66 1f       	adc	r22, r22
 f5c:	77 1f       	adc	r23, r23
 f5e:	88 1f       	adc	r24, r24
 f60:	99 1f       	adc	r25, r25
 f62:	1a 94       	dec	r1
 f64:	69 f7       	brne	.-38     	; 0xf40 <__udivmodsi4_loop>
 f66:	60 95       	com	r22
 f68:	70 95       	com	r23
 f6a:	80 95       	com	r24
 f6c:	90 95       	com	r25
 f6e:	9b 01       	movw	r18, r22
 f70:	ac 01       	movw	r20, r24
 f72:	bd 01       	movw	r22, r26
 f74:	cf 01       	movw	r24, r30
 f76:	08 95       	ret

00000f78 <__tablejump2__>:
 f78:	ee 0f       	add	r30, r30
 f7a:	ff 1f       	adc	r31, r31
 f7c:	00 24       	eor	r0, r0
 f7e:	00 1c       	adc	r0, r0
 f80:	0b be       	out	0x3b, r0	; 59
 f82:	07 90       	elpm	r0, Z+
 f84:	f6 91       	elpm	r31, Z
 f86:	e0 2d       	mov	r30, r0
 f88:	09 94       	ijmp

00000f8a <memset>:
 f8a:	dc 01       	movw	r26, r24
 f8c:	01 c0       	rjmp	.+2      	; 0xf90 <memset+0x6>
 f8e:	6d 93       	st	X+, r22
 f90:	41 50       	subi	r20, 0x01	; 1
 f92:	50 40       	sbci	r21, 0x00	; 0
 f94:	e0 f7       	brcc	.-8      	; 0xf8e <memset+0x4>
 f96:	08 95       	ret

00000f98 <_exit>:
 f98:	f8 94       	cli

00000f9a <__stop_program>:
 f9a:	ff cf       	rjmp	.-2      	; 0xf9a <__stop_program>
